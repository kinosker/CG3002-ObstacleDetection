
FreeRTOS2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800200  00002db4  00002e48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002db4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000070b  00800236  00800236  00002e7e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002e7e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000570  00000000  00000000  00002eae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005f4b  00000000  00000000  0000341e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000164a  00000000  00000000  00009369  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000039f3  00000000  00000000  0000a9b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000f74  00000000  00000000  0000e3a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000017c2  00000000  00000000  0000f31c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000435e  00000000  00000000  00010ade  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000500  00000000  00000000  00014e3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b2 c0       	rjmp	.+356    	; 0x166 <__ctors_end>
       2:	00 00       	nop
       4:	d0 c0       	rjmp	.+416    	; 0x1a6 <__bad_interrupt>
       6:	00 00       	nop
       8:	ce c0       	rjmp	.+412    	; 0x1a6 <__bad_interrupt>
       a:	00 00       	nop
       c:	cc c0       	rjmp	.+408    	; 0x1a6 <__bad_interrupt>
       e:	00 00       	nop
      10:	ca c0       	rjmp	.+404    	; 0x1a6 <__bad_interrupt>
      12:	00 00       	nop
      14:	c8 c0       	rjmp	.+400    	; 0x1a6 <__bad_interrupt>
      16:	00 00       	nop
      18:	c6 c0       	rjmp	.+396    	; 0x1a6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c4 c0       	rjmp	.+392    	; 0x1a6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c2 c0       	rjmp	.+388    	; 0x1a6 <__bad_interrupt>
      22:	00 00       	nop
      24:	ad c3       	rjmp	.+1882   	; 0x780 <__vector_9>
      26:	00 00       	nop
      28:	be c0       	rjmp	.+380    	; 0x1a6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bc c0       	rjmp	.+376    	; 0x1a6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ba c0       	rjmp	.+372    	; 0x1a6 <__bad_interrupt>
      32:	00 00       	nop
      34:	b8 c0       	rjmp	.+368    	; 0x1a6 <__bad_interrupt>
      36:	00 00       	nop
      38:	b6 c0       	rjmp	.+364    	; 0x1a6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b4 c0       	rjmp	.+360    	; 0x1a6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b2 c0       	rjmp	.+356    	; 0x1a6 <__bad_interrupt>
      42:	00 00       	nop
      44:	b0 c0       	rjmp	.+352    	; 0x1a6 <__bad_interrupt>
      46:	00 00       	nop
      48:	ae c0       	rjmp	.+348    	; 0x1a6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ac c0       	rjmp	.+344    	; 0x1a6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	aa c0       	rjmp	.+340    	; 0x1a6 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 b0 0a 	jmp	0x1560	; 0x1560 <__vector_21>
      58:	a6 c0       	rjmp	.+332    	; 0x1a6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a4 c0       	rjmp	.+328    	; 0x1a6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a2 c0       	rjmp	.+324    	; 0x1a6 <__bad_interrupt>
      62:	00 00       	nop
      64:	4a c7       	rjmp	.+3732   	; 0xefa <__vector_25>
      66:	00 00       	nop
      68:	c0 c7       	rjmp	.+3968   	; 0xfea <__vector_26>
      6a:	00 00       	nop
      6c:	9c c0       	rjmp	.+312    	; 0x1a6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	9a c0       	rjmp	.+308    	; 0x1a6 <__bad_interrupt>
      72:	00 00       	nop
      74:	8a c4       	rjmp	.+2324   	; 0x98a <__vector_29>
      76:	00 00       	nop
      78:	96 c0       	rjmp	.+300    	; 0x1a6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	94 c0       	rjmp	.+296    	; 0x1a6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	92 c0       	rjmp	.+292    	; 0x1a6 <__bad_interrupt>
      82:	00 00       	nop
      84:	90 c0       	rjmp	.+288    	; 0x1a6 <__bad_interrupt>
      86:	00 00       	nop
      88:	8e c0       	rjmp	.+284    	; 0x1a6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8c c0       	rjmp	.+280    	; 0x1a6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	fc c6       	rjmp	.+3576   	; 0xe8a <__vector_36>
      92:	00 00       	nop
      94:	6a c7       	rjmp	.+3796   	; 0xf6a <__vector_37>
      96:	00 00       	nop
      98:	86 c0       	rjmp	.+268    	; 0x1a6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	84 c0       	rjmp	.+264    	; 0x1a6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	82 c0       	rjmp	.+260    	; 0x1a6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	80 c0       	rjmp	.+256    	; 0x1a6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7e c0       	rjmp	.+252    	; 0x1a6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	7c c0       	rjmp	.+248    	; 0x1a6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	7a c0       	rjmp	.+244    	; 0x1a6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	78 c0       	rjmp	.+240    	; 0x1a6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	76 c0       	rjmp	.+236    	; 0x1a6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	74 c0       	rjmp	.+232    	; 0x1a6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	72 c0       	rjmp	.+228    	; 0x1a6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	70 c0       	rjmp	.+224    	; 0x1a6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	6e c0       	rjmp	.+220    	; 0x1a6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	6c c0       	rjmp	.+216    	; 0x1a6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	6a c0       	rjmp	.+212    	; 0x1a6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	68 c0       	rjmp	.+208    	; 0x1a6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	66 c0       	rjmp	.+204    	; 0x1a6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	64 c0       	rjmp	.+200    	; 0x1a6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	62 c0       	rjmp	.+196    	; 0x1a6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <myMaxSonar_getFilteredReading+0xc>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e4 eb       	ldi	r30, 0xB4	; 180
     17e:	fd e2       	ldi	r31, 0x2D	; 45
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a6 33       	cpi	r26, 0x36	; 54
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	29 e0       	ldi	r18, 0x09	; 9
     192:	a6 e3       	ldi	r26, 0x36	; 54
     194:	b2 e0       	ldi	r27, 0x02	; 2
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a1 34       	cpi	r26, 0x41	; 65
     19c:	b2 07       	cpc	r27, r18
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	d7 d0       	rcall	.+430    	; 0x350 <main>
     1a2:	0c 94 d8 16 	jmp	0x2db0	; 0x2db0 <_exit>

000001a6 <__bad_interrupt>:
     1a6:	2c cf       	rjmp	.-424    	; 0x0 <__vectors>

000001a8 <RPI_receiveTask>:
	}
}


void vApplicationIdleHook()
{
     1a8:	12 e0       	ldi	r17, 0x02	; 2
     1aa:	d1 e0       	ldi	r29, 0x01	; 1
     1ac:	0e 94 e7 08 	call	0x11ce	; 0x11ce <myUSART_receiveUSART1>
     1b0:	c8 2f       	mov	r28, r24
     1b2:	0e 94 27 09 	call	0x124e	; 0x124e <myUSART_receiveHandShakeAck>
     1b6:	88 23       	and	r24, r24
     1b8:	19 f0       	breq	.+6      	; 0x1c0 <RPI_receiveTask+0x18>
     1ba:	0e 94 1c 09 	call	0x1238	; 0x1238 <myUSART_completeHandShake>
     1be:	f6 cf       	rjmp	.-20     	; 0x1ac <RPI_receiveTask+0x4>
     1c0:	8c 2f       	mov	r24, r28
     1c2:	0e 94 39 09 	call	0x1272	; 0x1272 <myUSART_receiveMessageACK>
     1c6:	81 11       	cpse	r24, r1
     1c8:	f1 cf       	rjmp	.-30     	; 0x1ac <RPI_receiveTask+0x4>
     1ca:	80 91 36 02 	lds	r24, 0x0236
     1ce:	81 11       	cpse	r24, r1
     1d0:	0a c0       	rjmp	.+20     	; 0x1e6 <RPI_receiveTask+0x3e>
     1d2:	8c 2f       	mov	r24, r28
     1d4:	0e 94 2d 09 	call	0x125a	; 0x125a <myUSART_receiveHandShakeStart>
     1d8:	88 23       	and	r24, r24
     1da:	41 f3       	breq	.-48     	; 0x1ac <RPI_receiveTask+0x4>
     1dc:	85 e0       	ldi	r24, 0x05	; 5
     1de:	ba d7       	rcall	.+3956   	; 0x1154 <myUSART_transmitUSART1_c>
     1e0:	d0 93 36 02 	sts	0x0236, r29
     1e4:	e3 cf       	rjmp	.-58     	; 0x1ac <RPI_receiveTask+0x4>
     1e6:	81 30       	cpi	r24, 0x01	; 1
     1e8:	59 f4       	brne	.+22     	; 0x200 <RPI_receiveTask+0x58>
     1ea:	8c 2f       	mov	r24, r28
     1ec:	0e 94 33 09 	call	0x1266	; 0x1266 <myUSART_receiveHandShakeFin>
     1f0:	88 23       	and	r24, r24
     1f2:	19 f0       	breq	.+6      	; 0x1fa <RPI_receiveTask+0x52>
     1f4:	10 93 36 02 	sts	0x0236, r17
     1f8:	d9 cf       	rjmp	.-78     	; 0x1ac <RPI_receiveTask+0x4>
     1fa:	10 92 36 02 	sts	0x0236, r1
     1fe:	d6 cf       	rjmp	.-84     	; 0x1ac <RPI_receiveTask+0x4>
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	a1 f6       	brne	.-88     	; 0x1ac <RPI_receiveTask+0x4>
     204:	c8 31       	cpi	r28, 0x18	; 24
     206:	91 f6       	brne	.-92     	; 0x1ac <RPI_receiveTask+0x4>
     208:	10 92 36 02 	sts	0x0236, r1
     20c:	cf cf       	rjmp	.-98     	; 0x1ac <RPI_receiveTask+0x4>

0000020e <RPI_sendTask>:
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	00 d0       	rcall	.+0      	; 0x214 <RPI_sendTask+0x6>
     214:	00 d0       	rcall	.+0      	; 0x216 <RPI_sendTask+0x8>
     216:	cd b7       	in	r28, 0x3d	; 61
     218:	de b7       	in	r29, 0x3e	; 62
     21a:	fa d7       	rcall	.+4084   	; 0x1210 <myUSART_startHandShake>
     21c:	18 2f       	mov	r17, r24
     21e:	20 e0       	ldi	r18, 0x00	; 0
     220:	4f ef       	ldi	r20, 0xFF	; 255
     222:	5f ef       	ldi	r21, 0xFF	; 255
     224:	be 01       	movw	r22, r28
     226:	6a 5f       	subi	r22, 0xFA	; 250
     228:	7f 4f       	sbci	r23, 0xFF	; 255
     22a:	80 91 8f 08 	lds	r24, 0x088F
     22e:	90 91 90 08 	lds	r25, 0x0890
     232:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <xQueueGenericReceive>
     236:	25 c0       	rjmp	.+74     	; 0x282 <RPI_sendTask+0x74>
     238:	20 e0       	ldi	r18, 0x00	; 0
     23a:	4f ef       	ldi	r20, 0xFF	; 255
     23c:	5f ef       	ldi	r21, 0xFF	; 255
     23e:	be 01       	movw	r22, r28
     240:	6f 5f       	subi	r22, 0xFF	; 255
     242:	7f 4f       	sbci	r23, 0xFF	; 255
     244:	80 91 91 08 	lds	r24, 0x0891
     248:	90 91 92 08 	lds	r25, 0x0892
     24c:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <xQueueGenericReceive>
     250:	89 81       	ldd	r24, Y+1	; 0x01
     252:	5f d7       	rcall	.+3774   	; 0x1112 <myUSART_transmitUSART0_c>
     254:	87 e0       	ldi	r24, 0x07	; 7
     256:	92 e0       	ldi	r25, 0x02	; 2
     258:	ac d7       	rcall	.+3928   	; 0x11b2 <myUSART_transmitUSART0>
     25a:	ce 01       	movw	r24, r28
     25c:	02 96       	adiw	r24, 0x02	; 2
     25e:	a9 d7       	rcall	.+3922   	; 0x11b2 <myUSART_transmitUSART0>
     260:	89 e0       	ldi	r24, 0x09	; 9
     262:	92 e0       	ldi	r25, 0x02	; 2
     264:	a6 d7       	rcall	.+3916   	; 0x11b2 <myUSART_transmitUSART0>
     266:	11 23       	and	r17, r17
     268:	61 f0       	breq	.+24     	; 0x282 <RPI_sendTask+0x74>
     26a:	8e 81       	ldd	r24, Y+6	; 0x06
     26c:	80 5d       	subi	r24, 0xD0	; 208
     26e:	72 d7       	rcall	.+3812   	; 0x1154 <myUSART_transmitUSART1_c>
     270:	8a e0       	ldi	r24, 0x0A	; 10
     272:	70 d7       	rcall	.+3808   	; 0x1154 <myUSART_transmitUSART1_c>
     274:	89 81       	ldd	r24, Y+1	; 0x01
     276:	6e d7       	rcall	.+3804   	; 0x1154 <myUSART_transmitUSART1_c>
     278:	ce 01       	movw	r24, r28
     27a:	02 96       	adiw	r24, 0x02	; 2
     27c:	8c d7       	rcall	.+3864   	; 0x1196 <myUSART_transmitUSART1>
     27e:	8a e0       	ldi	r24, 0x0A	; 10
     280:	69 d7       	rcall	.+3794   	; 0x1154 <myUSART_transmitUSART1_c>
     282:	9e 81       	ldd	r25, Y+6	; 0x06
     284:	2f ef       	ldi	r18, 0xFF	; 255
     286:	29 0f       	add	r18, r25
     288:	2e 83       	std	Y+6, r18	; 0x06
     28a:	91 11       	cpse	r25, r1
     28c:	d5 cf       	rjmp	.-86     	; 0x238 <RPI_sendTask+0x2a>
     28e:	8a e0       	ldi	r24, 0x0A	; 10
     290:	40 d7       	rcall	.+3712   	; 0x1112 <myUSART_transmitUSART0_c>
     292:	c3 cf       	rjmp	.-122    	; 0x21a <RPI_sendTask+0xc>

00000294 <myTimerTask>:
     294:	6f d5       	rcall	.+2782   	; 0xd74 <myTimer_Init>
     296:	8a d5       	rcall	.+2836   	; 0xdac <myTimer_DelayChecker>
     298:	fe cf       	rjmp	.-4      	; 0x296 <myTimerTask+0x2>

0000029a <setDigitalInputPowerReduction>:


void setDigitalInputPowerReduction()
{
	// Set when confirm which ADC pin not used for digital..
	DIDR0 = 0b11111111; // all adc pin not used for digital
     29a:	8f ef       	ldi	r24, 0xFF	; 255
     29c:	80 93 7e 00 	sts	0x007E, r24
	DIDR1 |= (1<<AIN1D) | (1<<AIN0D);
     2a0:	ef e7       	ldi	r30, 0x7F	; 127
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	90 81       	ld	r25, Z
     2a6:	93 60       	ori	r25, 0x03	; 3
     2a8:	90 83       	st	Z, r25
	DIDR2 = 0b11111111; // add adc pin not used for digital
     2aa:	80 93 7d 00 	sts	0x007D, r24
     2ae:	08 95       	ret

000002b0 <setPowerReduction>:
}

// Shut down unused...
void setPowerReduction()
{
	PRR0 = (1<<PRTWI) | (1<<PRTIM2) | (1<<PRTIM1) | (1<<PRSPI); // Shut down I2C, timer2, timer 1, SPI
     2b0:	8c ec       	ldi	r24, 0xCC	; 204
     2b2:	80 93 64 00 	sts	0x0064, r24
	// Include USART0 after finish debugging using usb.... (1<<PRUSART0)
	
	PRR1 = (1<<PRTIM5) | (1<<PRTIM4) | (1<<PRTIM3) | (1<<PRUSART3) | (1<<PRUSART2); // Shut down timer5, timer4, timer3, USART3, USART2
     2b6:	8e e3       	ldi	r24, 0x3E	; 62
     2b8:	80 93 65 00 	sts	0x0065, r24
	
	setDigitalInputPowerReduction();
     2bc:	ee cf       	rjmp	.-36     	; 0x29a <setDigitalInputPowerReduction>
     2be:	08 95       	ret

000002c0 <clearTimer>:
}

void clearTimer()
{
	// Clear Timer1
	TCCR1A = 0;     // Clear all settings
     2c0:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;     // Clear all settings
     2c4:	10 92 81 00 	sts	0x0081, r1
	TIMSK1 = 0;     // Disable all interrupts
     2c8:	10 92 6f 00 	sts	0x006F, r1

	// Clear Timer2
	TCCR2A = 0;     // Clear all settings
     2cc:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0;     // Clear all settings
     2d0:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;     // Disable all interrupts
     2d4:	10 92 70 00 	sts	0x0070, r1
	
	// Clear Timer3
	TCCR3A = 0;     // Clear all settings
     2d8:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;     // Clear all settings
     2dc:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0;     // Disable all interrupts
     2e0:	10 92 71 00 	sts	0x0071, r1

	// Clear Timer4
	TCCR4A = 0;     // Clear all settings
     2e4:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0;     // Clear all settings
     2e8:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0;     // Disable all interrupts
     2ec:	10 92 72 00 	sts	0x0072, r1

	// Clear Timer5
	TCCR5A = 0;     // Clear all settings
     2f0:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;     // Clear all settings
     2f4:	10 92 21 01 	sts	0x0121, r1
	TIMSK5 = 0;     // Disable all interrupts
     2f8:	10 92 73 00 	sts	0x0073, r1
     2fc:	08 95       	ret

000002fe <init>:
}

void init()
{
     2fe:	cf 93       	push	r28
	// Ensure atomic...
	ATOMIC_BLOCK( ATOMIC_RESTORESTATE )
     300:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     302:	f8 94       	cli
	{
		clearTimer();
     304:	dd df       	rcall	.-70     	; 0x2c0 <clearTimer>
		setPowerReduction();
     306:	d4 df       	rcall	.-88     	; 0x2b0 <setPowerReduction>
		myUSART_USART0_Init();
     308:	b0 d6       	rcall	.+3424   	; 0x106a <myUSART_USART0_Init>
		myUSART_USART1_Init();
     30a:	d5 d6       	rcall	.+3498   	; 0x10b6 <myUSART_USART1_Init>
		myADC_Init();
     30c:	76 d3       	rcall	.+1772   	; 0x9fa <myADC_Init>
		
		MaxSonar_Init();
     30e:	83 b3       	in	r24, 0x13	; 19
     310:	83 60       	ori	r24, 0x03	; 3
     312:	83 bb       	out	0x13, r24	; 19
		
		//myHcSonar_Init();
		
		
		queueObstacleNumber = xQueueCreate(QUEUE_SIZE, sizeof (char)); // create queue
     314:	40 e0       	ldi	r20, 0x00	; 0
     316:	61 e0       	ldi	r22, 0x01	; 1
     318:	85 e0       	ldi	r24, 0x05	; 5
     31a:	0e 94 af 0b 	call	0x175e	; 0x175e <xQueueGenericCreate>
     31e:	90 93 90 08 	sts	0x0890, r25
     322:	80 93 8f 08 	sts	0x088F, r24
		queueObstacleData = xQueueCreate( (QUEUE_SIZE*SONAR_NUM), sizeof (obstacleStruct)); // create queue
     326:	40 e0       	ldi	r20, 0x00	; 0
     328:	65 e0       	ldi	r22, 0x05	; 5
     32a:	89 e1       	ldi	r24, 0x19	; 25
     32c:	0e 94 af 0b 	call	0x175e	; 0x175e <xQueueGenericCreate>
     330:	90 93 92 08 	sts	0x0892, r25
     334:	80 93 91 08 	sts	0x0891, r24
		
		MOTOR_LEFT_INIT();
     338:	8d b1       	in	r24, 0x0d	; 13
     33a:	88 61       	ori	r24, 0x18	; 24
     33c:	8d b9       	out	0x0d, r24	; 13
		MOTOR_RIGHT_INIT();
     33e:	e1 e0       	ldi	r30, 0x01	; 1
     340:	f1 e0       	ldi	r31, 0x01	; 1
     342:	80 81       	ld	r24, Z
     344:	80 61       	ori	r24, 0x10	; 16
     346:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     348:	cf bf       	out	0x3f, r28	; 63
		
		
	}
	
	sei(); // enable interrupts..
     34a:	78 94       	sei
}
     34c:	cf 91       	pop	r28
     34e:	08 95       	ret

00000350 <main>:
	
	// do nth
}

int main(void)
{
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
     358:	28 97       	sbiw	r28, 0x08	; 8
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	f8 94       	cli
     35e:	de bf       	out	0x3e, r29	; 62
     360:	0f be       	out	0x3f, r0	; 63
     362:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
		TaskHandle_t t_maxSonar, t_rx, t_tx, t_delay;
	
		init();
     364:	cc df       	rcall	.-104    	; 0x2fe <init>
	
		xTaskCreate(myTimerTask, "myTimer", MY_TIMER_STACK, (&t_delay) , MY_TIMER_PRIORITY, &t_delay); // danger?!?		
     366:	a1 2c       	mov	r10, r1
     368:	b1 2c       	mov	r11, r1
     36a:	c1 2c       	mov	r12, r1
     36c:	d1 2c       	mov	r13, r1
     36e:	ce 01       	movw	r24, r28
     370:	01 96       	adiw	r24, 0x01	; 1
     372:	7c 01       	movw	r14, r24
     374:	04 e0       	ldi	r16, 0x04	; 4
     376:	9c 01       	movw	r18, r24
     378:	49 e6       	ldi	r20, 0x69	; 105
     37a:	50 e0       	ldi	r21, 0x00	; 0
     37c:	6b e0       	ldi	r22, 0x0B	; 11
     37e:	72 e0       	ldi	r23, 0x02	; 2
     380:	8a e4       	ldi	r24, 0x4A	; 74
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <xTaskGenericCreate>
		xTaskCreate(Sonar_Task, "maxSonar", MAXSONAR_STACK, NULL, MAXSONAR_PRIORITY, &t_maxSonar);
     388:	ce 01       	movw	r24, r28
     38a:	07 96       	adiw	r24, 0x07	; 7
     38c:	7c 01       	movw	r14, r24
     38e:	03 e0       	ldi	r16, 0x03	; 3
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	4d e6       	ldi	r20, 0x6D	; 109
     396:	51 e0       	ldi	r21, 0x01	; 1
     398:	63 e1       	ldi	r22, 0x13	; 19
     39a:	72 e0       	ldi	r23, 0x02	; 2
     39c:	8e e7       	ldi	r24, 0x7E	; 126
     39e:	92 e0       	ldi	r25, 0x02	; 2
     3a0:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <xTaskGenericCreate>

		
		// Need fix receive concurrency issues.
		xTaskCreate(RPI_receiveTask, "RPI_Receive", RPI_RECEIVE_STACK, NULL, RPI_RECEIVE_PRIORITY, &t_rx);
     3a4:	ce 01       	movw	r24, r28
     3a6:	05 96       	adiw	r24, 0x05	; 5
     3a8:	7c 01       	movw	r14, r24
     3aa:	01 e0       	ldi	r16, 0x01	; 1
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	47 e8       	ldi	r20, 0x87	; 135
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	6c e1       	ldi	r22, 0x1C	; 28
     3b6:	72 e0       	ldi	r23, 0x02	; 2
     3b8:	84 ed       	ldi	r24, 0xD4	; 212
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <xTaskGenericCreate>
		xTaskCreate(RPI_sendTask, "RPI_Send", RPI_SEND_STACK, NULL, RPI_SEND_PRIORITY, &t_tx);
     3c0:	ce 01       	movw	r24, r28
     3c2:	03 96       	adiw	r24, 0x03	; 3
     3c4:	7c 01       	movw	r14, r24
     3c6:	02 e0       	ldi	r16, 0x02	; 2
     3c8:	20 e0       	ldi	r18, 0x00	; 0
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	47 e8       	ldi	r20, 0x87	; 135
     3ce:	50 e0       	ldi	r21, 0x00	; 0
     3d0:	68 e2       	ldi	r22, 0x28	; 40
     3d2:	72 e0       	ldi	r23, 0x02	; 2
     3d4:	87 e0       	ldi	r24, 0x07	; 7
     3d6:	91 e0       	ldi	r25, 0x01	; 1
     3d8:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <xTaskGenericCreate>
	

		
		vTaskStartScheduler();
     3dc:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <vTaskStartScheduler>
     3e0:	c1 cf       	rjmp	.-126    	; 0x364 <main+0x14>

000003e2 <myItoa>:
}


// either 2 or 3 digit +ve int
void myItoa(int input, char * buffer)
{
     3e2:	9c 01       	movw	r18, r24
     3e4:	fb 01       	movw	r30, r22
	int temp = input;
	input /= 100; // get 100s digit
     3e6:	64 e6       	ldi	r22, 0x64	; 100
     3e8:	70 e0       	ldi	r23, 0x00	; 0
     3ea:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <__divmodhi4>
	
	if(input)
     3ee:	61 15       	cp	r22, r1
     3f0:	71 05       	cpc	r23, r1
     3f2:	21 f0       	breq	.+8      	; 0x3fc <myItoa+0x1a>
		*buffer++ = input + '0';
     3f4:	80 e3       	ldi	r24, 0x30	; 48
     3f6:	86 0f       	add	r24, r22
     3f8:	80 83       	st	Z, r24
     3fa:	31 96       	adiw	r30, 0x01	; 1
		
	temp = temp - input * 100; // get remainder
     3fc:	4c e9       	ldi	r20, 0x9C	; 156
     3fe:	46 03       	mulsu	r20, r22
     400:	c0 01       	movw	r24, r0
     402:	47 9f       	mul	r20, r23
     404:	90 0d       	add	r25, r0
     406:	11 24       	eor	r1, r1
     408:	28 0f       	add	r18, r24
     40a:	39 1f       	adc	r19, r25
	
	
	input = temp / 10; // get 10s digit
     40c:	c9 01       	movw	r24, r18
     40e:	6a e0       	ldi	r22, 0x0A	; 10
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <__divmodhi4>
	*buffer++ = input + '0';
     416:	80 e3       	ldi	r24, 0x30	; 48
     418:	86 0f       	add	r24, r22
     41a:	80 83       	st	Z, r24
	 
	 input = temp - input * 10; // get 1s digit
     41c:	8a e0       	ldi	r24, 0x0A	; 10
     41e:	68 9f       	mul	r22, r24
     420:	20 19       	sub	r18, r0
     422:	11 24       	eor	r1, r1
	 *buffer++ = input + '0';
     424:	20 5d       	subi	r18, 0xD0	; 208
     426:	21 83       	std	Z+1, r18	; 0x01
	 
	 *buffer = '\0';
     428:	12 82       	std	Z+2, r1	; 0x02
     42a:	08 95       	ret

0000042c <obstacleSend>:
	sei(); // enable interrupts..
}


void obstacleSend(char deviceBlocked, int reading)
{	
     42c:	1f 93       	push	r17
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	00 d0       	rcall	.+0      	; 0x434 <obstacleSend+0x8>
     434:	1f 92       	push	r1
     436:	1f 92       	push	r1
     438:	cd b7       	in	r28, 0x3d	; 61
     43a:	de b7       	in	r29, 0x3e	; 62
     43c:	18 2f       	mov	r17, r24
     43e:	cb 01       	movw	r24, r22
	obstacleStruct obstacleInfo;
		
	if(deviceBlocked)
     440:	11 23       	and	r17, r17
     442:	89 f0       	breq	.+34     	; 0x466 <obstacleSend+0x3a>
	{
		myItoa(reading, obstacleInfo.data); // convert to ascii
     444:	be 01       	movw	r22, r28
     446:	6e 5f       	subi	r22, 0xFE	; 254
     448:	7f 4f       	sbci	r23, 0xFF	; 255
     44a:	cb df       	rcall	.-106    	; 0x3e2 <myItoa>
		
		obstacleInfo.deviceID = deviceBlocked;
     44c:	19 83       	std	Y+1, r17	; 0x01
		
		
		xQueueSendToBack(queueObstacleData, (void*) &obstacleInfo, portMAX_DELAY); // send data to queueData
     44e:	20 e0       	ldi	r18, 0x00	; 0
     450:	4f ef       	ldi	r20, 0xFF	; 255
     452:	5f ef       	ldi	r21, 0xFF	; 255
     454:	be 01       	movw	r22, r28
     456:	6f 5f       	subi	r22, 0xFF	; 255
     458:	7f 4f       	sbci	r23, 0xFF	; 255
     45a:	80 91 91 08 	lds	r24, 0x0891
     45e:	90 91 92 08 	lds	r25, 0x0892
     462:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <xQueueGenericSend>
	}
}
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	1f 91       	pop	r17
     476:	08 95       	ret

00000478 <sendObstacleDetected>:



// Queue the obstacle to send..
void sendObstacleDetected(char obstacleDetected, char * deviceBlocked, int frontSonar, int leftSonar, int rightSonar, int btmIR, int topSonar)
{	
     478:	8f 92       	push	r8
     47a:	9f 92       	push	r9
     47c:	af 92       	push	r10
     47e:	bf 92       	push	r11
     480:	cf 92       	push	r12
     482:	df 92       	push	r13
     484:	ef 92       	push	r14
     486:	ff 92       	push	r15
     488:	0f 93       	push	r16
     48a:	1f 93       	push	r17
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	1f 92       	push	r1
     492:	cd b7       	in	r28, 0x3d	; 61
     494:	de b7       	in	r29, 0x3e	; 62
     496:	89 83       	std	Y+1, r24	; 0x01
     498:	5b 01       	movw	r10, r22
     49a:	49 01       	movw	r8, r18
	
	if(obstacleDetected > 0)
     49c:	88 23       	and	r24, r24
     49e:	01 f1       	breq	.+64     	; 0x4e0 <sendObstacleDetected+0x68>
	{
		
		obstacleSend(deviceBlocked[FRONT_DEVICE], frontSonar);
     4a0:	ba 01       	movw	r22, r20
     4a2:	f5 01       	movw	r30, r10
     4a4:	80 81       	ld	r24, Z
     4a6:	c2 df       	rcall	.-124    	; 0x42c <obstacleSend>

		obstacleSend(deviceBlocked[LEFT_DEVICE], leftSonar);
     4a8:	b4 01       	movw	r22, r8
     4aa:	f5 01       	movw	r30, r10
     4ac:	81 81       	ldd	r24, Z+1	; 0x01
     4ae:	be df       	rcall	.-132    	; 0x42c <obstacleSend>

		obstacleSend(deviceBlocked[RIGHT_DEVICE], rightSonar);
     4b0:	b8 01       	movw	r22, r16
     4b2:	f5 01       	movw	r30, r10
     4b4:	82 81       	ldd	r24, Z+2	; 0x02
     4b6:	ba df       	rcall	.-140    	; 0x42c <obstacleSend>

		obstacleSend(deviceBlocked[BTM_DEVICE], btmIR);
     4b8:	b7 01       	movw	r22, r14
     4ba:	f5 01       	movw	r30, r10
     4bc:	83 81       	ldd	r24, Z+3	; 0x03
     4be:	b6 df       	rcall	.-148    	; 0x42c <obstacleSend>
		
		obstacleSend(deviceBlocked[TOP_DEVICE], topSonar);
     4c0:	b6 01       	movw	r22, r12
     4c2:	f5 01       	movw	r30, r10
     4c4:	84 81       	ldd	r24, Z+4	; 0x04
     4c6:	b2 df       	rcall	.-156    	; 0x42c <obstacleSend>
				//myUSART_transmitUSART0("p\n");
				//myUSART_transmitUSART0_c(totalObs + '0');
				//myUSART_transmitUSART0("M\n");
			//}
			
		xQueueSendToBack(queueObstacleNumber,  &obstacleDetected, portMAX_DELAY); // send obstacle...
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	4f ef       	ldi	r20, 0xFF	; 255
     4cc:	5f ef       	ldi	r21, 0xFF	; 255
     4ce:	be 01       	movw	r22, r28
     4d0:	6f 5f       	subi	r22, 0xFF	; 255
     4d2:	7f 4f       	sbci	r23, 0xFF	; 255
     4d4:	80 91 8f 08 	lds	r24, 0x088F
     4d8:	90 91 90 08 	lds	r25, 0x0890
     4dc:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <xQueueGenericSend>
		
	}
}
     4e0:	0f 90       	pop	r0
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	ff 90       	pop	r15
     4ec:	ef 90       	pop	r14
     4ee:	df 90       	pop	r13
     4f0:	cf 90       	pop	r12
     4f2:	bf 90       	pop	r11
     4f4:	af 90       	pop	r10
     4f6:	9f 90       	pop	r9
     4f8:	8f 90       	pop	r8
     4fa:	08 95       	ret

000004fc <Sonar_Task>:
	}
}


void Sonar_Task(void *p)
{
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	a4 97       	sbiw	r28, 0x24	; 36
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	cd bf       	out	0x3d, r28	; 61
	TickType_t xLastWakeTime;
	char obstacleDetected = 0;
	int topSonar, frontSonar, leftSonar, rightSonar, btmIR;
	int topSonarSample[SONAR_SAMPLE_SIZE] = {0}, frontSonarSample[SONAR_SAMPLE_SIZE] = {0}, leftSonarSample[SONAR_SAMPLE_SIZE] = {0}, rightSonarSample[SONAR_SAMPLE_SIZE] = {0};
     510:	86 e0       	ldi	r24, 0x06	; 6
     512:	fe 01       	movw	r30, r28
     514:	33 96       	adiw	r30, 0x03	; 3
     516:	df 01       	movw	r26, r30
     518:	98 2f       	mov	r25, r24
     51a:	1d 92       	st	X+, r1
     51c:	9a 95       	dec	r25
     51e:	e9 f7       	brne	.-6      	; 0x51a <Sonar_Task+0x1e>
     520:	36 96       	adiw	r30, 0x06	; 6
     522:	df 01       	movw	r26, r30
     524:	98 2f       	mov	r25, r24
     526:	1d 92       	st	X+, r1
     528:	9a 95       	dec	r25
     52a:	e9 f7       	brne	.-6      	; 0x526 <Sonar_Task+0x2a>
     52c:	36 96       	adiw	r30, 0x06	; 6
     52e:	df 01       	movw	r26, r30
     530:	98 2f       	mov	r25, r24
     532:	1d 92       	st	X+, r1
     534:	9a 95       	dec	r25
     536:	e9 f7       	brne	.-6      	; 0x532 <Sonar_Task+0x36>
     538:	36 96       	adiw	r30, 0x06	; 6
     53a:	df 01       	movw	r26, r30
     53c:	1d 92       	st	X+, r1
     53e:	8a 95       	dec	r24
     540:	e9 f7       	brne	.-6      	; 0x53c <Sonar_Task+0x40>
	char deviceBlocked[5] = {0}; // flag to indicate if we should send the reading to RPI
     542:	36 96       	adiw	r30, 0x06	; 6
     544:	85 e0       	ldi	r24, 0x05	; 5
     546:	df 01       	movw	r26, r30
     548:	1d 92       	st	X+, r1
     54a:	8a 95       	dec	r24
     54c:	e9 f7       	brne	.-6      	; 0x548 <Sonar_Task+0x4c>
	
	
	
	int calibratedBtmIR = mySharpIR_Read(AN12); // get first value...
     54e:	84 e2       	ldi	r24, 0x24	; 36
     550:	73 d3       	rcall	.+1766   	; 0xc38 <mySharpIR_Read>
     552:	99 a3       	std	Y+33, r25	; 0x21
     554:	88 a3       	std	Y+32, r24	; 0x20
	
	xLastWakeTime = xTaskGetTickCount(); // get tick count
     556:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <xTaskGetTickCount>
     55a:	9a 83       	std	Y+2, r25	; 0x02
     55c:	89 83       	std	Y+1, r24	; 0x01


void Sonar_Task(void *p)
{
	TickType_t xLastWakeTime;
	char obstacleDetected = 0;
     55e:	1c a2       	std	Y+36, r1	; 0x24
	xLastWakeTime = xTaskGetTickCount(); // get tick count
		
	while(1)
	{
					
		myMaxSonar_BtmStart();
     560:	9a d1       	rcall	.+820    	; 0x896 <myMaxSonar_BtmStart>
		frontSonar	= myMaxSonar_getFilteredReading(myMaxSonar_Read(AN15), frontSonarSample);
     562:	87 e2       	ldi	r24, 0x27	; 39
     564:	00 d2       	rcall	.+1024   	; 0x966 <myMaxSonar_Read>
     566:	be 01       	movw	r22, r28
     568:	67 5f       	subi	r22, 0xF7	; 247
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	f3 d1       	rcall	.+998    	; 0x954 <myMaxSonar_getFilteredReading>
     56e:	3c 01       	movw	r6, r24
		leftSonar	= myMaxSonar_getFilteredReading(myMaxSonar_Read(AN14), leftSonarSample);
     570:	86 e2       	ldi	r24, 0x26	; 38
     572:	f9 d1       	rcall	.+1010   	; 0x966 <myMaxSonar_Read>
     574:	be 01       	movw	r22, r28
     576:	61 5f       	subi	r22, 0xF1	; 241
     578:	7f 4f       	sbci	r23, 0xFF	; 255
     57a:	ec d1       	rcall	.+984    	; 0x954 <myMaxSonar_getFilteredReading>
     57c:	1c 01       	movw	r2, r24
		rightSonar	= myMaxSonar_getFilteredReading(myMaxSonar_Read(AN13), rightSonarSample); 	
     57e:	85 e2       	ldi	r24, 0x25	; 37
     580:	f2 d1       	rcall	.+996    	; 0x966 <myMaxSonar_Read>
     582:	be 01       	movw	r22, r28
     584:	6b 5e       	subi	r22, 0xEB	; 235
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	e5 d1       	rcall	.+970    	; 0x954 <myMaxSonar_getFilteredReading>
     58a:	2c 01       	movw	r4, r24
		
		myMaxSonar_TopStart();
     58c:	8b d1       	rcall	.+790    	; 0x8a4 <myMaxSonar_TopStart>
		topSonar = myMaxSonar_getFilteredReading(myMaxSonar_Read(AN11), topSonarSample);
     58e:	83 e2       	ldi	r24, 0x23	; 35
     590:	ea d1       	rcall	.+980    	; 0x966 <myMaxSonar_Read>
     592:	be 01       	movw	r22, r28
     594:	6d 5f       	subi	r22, 0xFD	; 253
     596:	7f 4f       	sbci	r23, 0xFF	; 255
     598:	dd d1       	rcall	.+954    	; 0x954 <myMaxSonar_getFilteredReading>
     59a:	9b a3       	std	Y+35, r25	; 0x23
     59c:	8a a3       	std	Y+34, r24	; 0x22
			
			
		btmIR	= mySharpIR_Read(AN12);
     59e:	84 e2       	ldi	r24, 0x24	; 36
     5a0:	4b d3       	rcall	.+1686   	; 0xc38 <mySharpIR_Read>
     5a2:	4c 01       	movw	r8, r24
		mySharpIR_ReCalibrate(&calibratedBtmIR, btmIR); // attempt to re-calibrate btm ir sensor if stable enough..
     5a4:	bc 01       	movw	r22, r24
     5a6:	ce 01       	movw	r24, r28
     5a8:	80 96       	adiw	r24, 0x20	; 32
     5aa:	7f d3       	rcall	.+1790   	; 0xcaa <mySharpIR_ReCalibrate>
	
		obstacleDetected = obstacleDetection(frontSonar, obstacleDetected, deviceBlocked, leftSonar, rightSonar, topSonar, calibratedBtmIR, btmIR);
     5ac:	c8 a0       	ldd	r12, Y+32	; 0x20
     5ae:	d9 a0       	ldd	r13, Y+33	; 0x21
     5b0:	54 01       	movw	r10, r8
     5b2:	ea a0       	ldd	r14, Y+34	; 0x22
     5b4:	fb a0       	ldd	r15, Y+35	; 0x23
     5b6:	82 01       	movw	r16, r4
     5b8:	91 01       	movw	r18, r2
     5ba:	ae 01       	movw	r20, r28
     5bc:	45 5e       	subi	r20, 0xE5	; 229
     5be:	5f 4f       	sbci	r21, 0xFF	; 255
     5c0:	6c a1       	ldd	r22, Y+36	; 0x24
     5c2:	c3 01       	movw	r24, r6
     5c4:	fa d2       	rcall	.+1524   	; 0xbba <obstacleDetection>
     5c6:	8c a3       	std	Y+36, r24	; 0x24
		obstacleAvoidance(frontSonar, topSonar, leftSonar, rightSonar, btmIR, deviceBlocked);
     5c8:	ce 01       	movw	r24, r28
     5ca:	4b 96       	adiw	r24, 0x1b	; 27
     5cc:	7c 01       	movw	r14, r24
     5ce:	84 01       	movw	r16, r8
     5d0:	92 01       	movw	r18, r4
     5d2:	a1 01       	movw	r20, r2
     5d4:	6a a1       	ldd	r22, Y+34	; 0x22
     5d6:	7b a1       	ldd	r23, Y+35	; 0x23
     5d8:	c3 01       	movw	r24, r6
     5da:	90 d2       	rcall	.+1312   	; 0xafc <obstacleAvoidance>
		//cheatPrintAll(deviceBlocked, &obstacleDetected); 
		// remove top statement... when not debuggin..
		
		
		
		sendObstacleDetected(obstacleDetected, deviceBlocked, frontSonar, leftSonar, rightSonar, btmIR, topSonar);
     5dc:	ca a0       	ldd	r12, Y+34	; 0x22
     5de:	db a0       	ldd	r13, Y+35	; 0x23
     5e0:	74 01       	movw	r14, r8
     5e2:	82 01       	movw	r16, r4
     5e4:	91 01       	movw	r18, r2
     5e6:	a3 01       	movw	r20, r6
     5e8:	be 01       	movw	r22, r28
     5ea:	65 5e       	subi	r22, 0xE5	; 229
     5ec:	7f 4f       	sbci	r23, 0xFF	; 255
     5ee:	8c a1       	ldd	r24, Y+36	; 0x24
     5f0:	43 df       	rcall	.-378    	; 0x478 <sendObstacleDetected>
	
		
		vTaskDelayUntil( &xLastWakeTime, MAXSONAR_CHAIN_WAIT);  // delay 150 ms for 3 sonar chain...
     5f2:	66 e9       	ldi	r22, 0x96	; 150
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	ce 01       	movw	r24, r28
     5f8:	01 96       	adiw	r24, 0x01	; 1
     5fa:	0e 94 ae 10 	call	0x215c	; 0x215c <vTaskDelayUntil>
     5fe:	b0 cf       	rjmp	.-160    	; 0x560 <Sonar_Task+0x64>

00000600 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     606:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     60a:	80 91 37 02 	lds	r24, 0x0237
     60e:	90 91 38 02 	lds	r25, 0x0238
     612:	89 2b       	or	r24, r25
     614:	31 f4       	brne	.+12     	; 0x622 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     616:	8c e3       	ldi	r24, 0x3C	; 60
     618:	92 e0       	ldi	r25, 0x02	; 2
     61a:	90 93 38 02 	sts	0x0238, r25
     61e:	80 93 37 02 	sts	0x0237, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     622:	40 91 39 02 	lds	r20, 0x0239
     626:	50 91 3a 02 	lds	r21, 0x023A
     62a:	9e 01       	movw	r18, r28
     62c:	24 0f       	add	r18, r20
     62e:	35 1f       	adc	r19, r21
     630:	2b 3d       	cpi	r18, 0xDB	; 219
     632:	85 e0       	ldi	r24, 0x05	; 5
     634:	38 07       	cpc	r19, r24
     636:	70 f4       	brcc	.+28     	; 0x654 <pvPortMalloc+0x54>
     638:	42 17       	cp	r20, r18
     63a:	53 07       	cpc	r21, r19
     63c:	70 f4       	brcc	.+28     	; 0x65a <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     63e:	c0 91 37 02 	lds	r28, 0x0237
     642:	d0 91 38 02 	lds	r29, 0x0238
     646:	c4 0f       	add	r28, r20
     648:	d5 1f       	adc	r29, r21
			xNextFreeByte += xWantedSize;
     64a:	30 93 3a 02 	sts	0x023A, r19
     64e:	20 93 39 02 	sts	0x0239, r18
     652:	05 c0       	rjmp	.+10     	; 0x65e <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     654:	c0 e0       	ldi	r28, 0x00	; 0
     656:	d0 e0       	ldi	r29, 0x00	; 0
     658:	02 c0       	rjmp	.+4      	; 0x65e <pvPortMalloc+0x5e>
     65a:	c0 e0       	ldi	r28, 0x00	; 0
     65c:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     65e:	0e 94 2d 10 	call	0x205a	; 0x205a <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     662:	ce 01       	movw	r24, r28
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	08 95       	ret

0000066a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     66a:	08 95       	ret

0000066c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     66c:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     66e:	03 96       	adiw	r24, 0x03	; 3
     670:	92 83       	std	Z+2, r25	; 0x02
     672:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     674:	2f ef       	ldi	r18, 0xFF	; 255
     676:	3f ef       	ldi	r19, 0xFF	; 255
     678:	34 83       	std	Z+4, r19	; 0x04
     67a:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     67c:	96 83       	std	Z+6, r25	; 0x06
     67e:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     680:	90 87       	std	Z+8, r25	; 0x08
     682:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     684:	10 82       	st	Z, r1
     686:	08 95       	ret

00000688 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     688:	fc 01       	movw	r30, r24
     68a:	11 86       	std	Z+9, r1	; 0x09
     68c:	10 86       	std	Z+8, r1	; 0x08
     68e:	08 95       	ret

00000690 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	9c 01       	movw	r18, r24
     696:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     698:	dc 01       	movw	r26, r24
     69a:	11 96       	adiw	r26, 0x01	; 1
     69c:	cd 91       	ld	r28, X+
     69e:	dc 91       	ld	r29, X
     6a0:	12 97       	sbiw	r26, 0x02	; 2

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     6a2:	d3 83       	std	Z+3, r29	; 0x03
     6a4:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     6a6:	8c 81       	ldd	r24, Y+4	; 0x04
     6a8:	9d 81       	ldd	r25, Y+5	; 0x05
     6aa:	95 83       	std	Z+5, r25	; 0x05
     6ac:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxPrevious->pxNext = pxNewListItem;
     6ae:	8c 81       	ldd	r24, Y+4	; 0x04
     6b0:	9d 81       	ldd	r25, Y+5	; 0x05
     6b2:	dc 01       	movw	r26, r24
     6b4:	13 96       	adiw	r26, 0x03	; 3
     6b6:	7c 93       	st	X, r23
     6b8:	6e 93       	st	-X, r22
     6ba:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     6bc:	7d 83       	std	Y+5, r23	; 0x05
     6be:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     6c0:	31 87       	std	Z+9, r19	; 0x09
     6c2:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     6c4:	f9 01       	movw	r30, r18
     6c6:	80 81       	ld	r24, Z
     6c8:	8f 5f       	subi	r24, 0xFF	; 255
     6ca:	80 83       	st	Z, r24
}
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	08 95       	ret

000006d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     6d8:	48 81       	ld	r20, Y
     6da:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     6dc:	4f 3f       	cpi	r20, 0xFF	; 255
     6de:	2f ef       	ldi	r18, 0xFF	; 255
     6e0:	52 07       	cpc	r21, r18
     6e2:	21 f4       	brne	.+8      	; 0x6ec <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     6e4:	fc 01       	movw	r30, r24
     6e6:	a7 81       	ldd	r26, Z+7	; 0x07
     6e8:	b0 85       	ldd	r27, Z+8	; 0x08
     6ea:	0d c0       	rjmp	.+26     	; 0x706 <vListInsert+0x34>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6ec:	dc 01       	movw	r26, r24
     6ee:	13 96       	adiw	r26, 0x03	; 3
     6f0:	12 96       	adiw	r26, 0x02	; 2
     6f2:	ed 91       	ld	r30, X+
     6f4:	fc 91       	ld	r31, X
     6f6:	13 97       	sbiw	r26, 0x03	; 3
     6f8:	20 81       	ld	r18, Z
     6fa:	31 81       	ldd	r19, Z+1	; 0x01
     6fc:	42 17       	cp	r20, r18
     6fe:	53 07       	cpc	r21, r19
     700:	10 f0       	brcs	.+4      	; 0x706 <vListInsert+0x34>
     702:	df 01       	movw	r26, r30
     704:	f5 cf       	rjmp	.-22     	; 0x6f0 <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     706:	12 96       	adiw	r26, 0x02	; 2
     708:	ed 91       	ld	r30, X+
     70a:	fc 91       	ld	r31, X
     70c:	13 97       	sbiw	r26, 0x03	; 3
     70e:	fb 83       	std	Y+3, r31	; 0x03
     710:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     712:	d5 83       	std	Z+5, r29	; 0x05
     714:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     716:	bd 83       	std	Y+5, r27	; 0x05
     718:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     71a:	13 96       	adiw	r26, 0x03	; 3
     71c:	dc 93       	st	X, r29
     71e:	ce 93       	st	-X, r28
     720:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     722:	99 87       	std	Y+9, r25	; 0x09
     724:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     726:	fc 01       	movw	r30, r24
     728:	20 81       	ld	r18, Z
     72a:	2f 5f       	subi	r18, 0xFF	; 255
     72c:	20 83       	st	Z, r18
}
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	08 95       	ret

00000734 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     73a:	a0 85       	ldd	r26, Z+8	; 0x08
     73c:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     73e:	c2 81       	ldd	r28, Z+2	; 0x02
     740:	d3 81       	ldd	r29, Z+3	; 0x03
     742:	84 81       	ldd	r24, Z+4	; 0x04
     744:	95 81       	ldd	r25, Z+5	; 0x05
     746:	9d 83       	std	Y+5, r25	; 0x05
     748:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     74a:	c4 81       	ldd	r28, Z+4	; 0x04
     74c:	d5 81       	ldd	r29, Z+5	; 0x05
     74e:	82 81       	ldd	r24, Z+2	; 0x02
     750:	93 81       	ldd	r25, Z+3	; 0x03
     752:	9b 83       	std	Y+3, r25	; 0x03
     754:	8a 83       	std	Y+2, r24	; 0x02

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     756:	11 96       	adiw	r26, 0x01	; 1
     758:	cd 91       	ld	r28, X+
     75a:	dc 91       	ld	r29, X
     75c:	12 97       	sbiw	r26, 0x02	; 2
     75e:	ce 17       	cp	r28, r30
     760:	df 07       	cpc	r29, r31
     762:	31 f4       	brne	.+12     	; 0x770 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     764:	8c 81       	ldd	r24, Y+4	; 0x04
     766:	9d 81       	ldd	r25, Y+5	; 0x05
     768:	12 96       	adiw	r26, 0x02	; 2
     76a:	9c 93       	st	X, r25
     76c:	8e 93       	st	-X, r24
     76e:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     770:	11 86       	std	Z+9, r1	; 0x09
     772:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     774:	8c 91       	ld	r24, X
     776:	81 50       	subi	r24, 0x01	; 1
     778:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

00000780 <__vector_9>:
volatile int us_tickLapsed;
SemaphoreHandle_t semaReadReady;


ISR(PCINT0_vect) //Digital pin 50
{
     780:	1f 92       	push	r1
     782:	0f 92       	push	r0
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	0f 92       	push	r0
     788:	11 24       	eor	r1, r1
     78a:	0b b6       	in	r0, 0x3b	; 59
     78c:	0f 92       	push	r0
     78e:	2f 93       	push	r18
     790:	3f 93       	push	r19
     792:	4f 93       	push	r20
     794:	5f 93       	push	r21
     796:	6f 93       	push	r22
     798:	7f 93       	push	r23
     79a:	8f 93       	push	r24
     79c:	9f 93       	push	r25
     79e:	af 93       	push	r26
     7a0:	bf 93       	push	r27
     7a2:	ef 93       	push	r30
     7a4:	ff 93       	push	r31
		
	if(HC_Echo_Read)
     7a6:	1b 9b       	sbis	0x03, 3	; 3
     7a8:	0d c0       	rjmp	.+26     	; 0x7c4 <__vector_9+0x44>
	{
		us_tickStart = myTimer_Read();
     7aa:	fe d2       	rcall	.+1532   	; 0xda8 <myTimer_Read>
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	90 93 98 08 	sts	0x0898, r25
     7b2:	80 93 97 08 	sts	0x0897, r24
		ms_tickStart = xTaskGetTickCountFromISR();
     7b6:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <xTaskGetTickCountFromISR>
     7ba:	90 93 94 08 	sts	0x0894, r25
     7be:	80 93 93 08 	sts	0x0893, r24
     7c2:	56 c0       	rjmp	.+172    	; 0x870 <__vector_9+0xf0>
	}	
	else if (!(HC_Echo_Read))
     7c4:	1b 99       	sbic	0x03, 3	; 3
     7c6:	54 c0       	rjmp	.+168    	; 0x870 <__vector_9+0xf0>
	{

		if ((ms_tickEnd = xTaskGetTickCountFromISR()) < ms_tickStart)
     7c8:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <xTaskGetTickCountFromISR>
     7cc:	90 93 9e 08 	sts	0x089E, r25
     7d0:	80 93 9d 08 	sts	0x089D, r24
     7d4:	20 91 93 08 	lds	r18, 0x0893
     7d8:	30 91 94 08 	lds	r19, 0x0894
     7dc:	82 17       	cp	r24, r18
     7de:	93 07       	cpc	r25, r19
     7e0:	4c f4       	brge	.+18     	; 0x7f4 <__vector_9+0x74>
			ms_tickEnd += 65535;
     7e2:	80 91 9d 08 	lds	r24, 0x089D
     7e6:	90 91 9e 08 	lds	r25, 0x089E
     7ea:	01 97       	sbiw	r24, 0x01	; 1
     7ec:	90 93 9e 08 	sts	0x089E, r25
     7f0:	80 93 9d 08 	sts	0x089D, r24
		
		if ((us_tickEnd = myTimer_Read()) < us_tickStart) // if smaller then add...
     7f4:	d9 d2       	rcall	.+1458   	; 0xda8 <myTimer_Read>
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	90 93 a0 08 	sts	0x08A0, r25
     7fc:	80 93 9f 08 	sts	0x089F, r24
     800:	20 91 97 08 	lds	r18, 0x0897
     804:	30 91 98 08 	lds	r19, 0x0898
     808:	82 17       	cp	r24, r18
     80a:	93 07       	cpc	r25, r19
     80c:	54 f4       	brge	.+20     	; 0x822 <__vector_9+0xa2>
			us_tickEnd += MAX_TICKS;
     80e:	80 91 9f 08 	lds	r24, 0x089F
     812:	90 91 a0 08 	lds	r25, 0x08A0
     816:	86 50       	subi	r24, 0x06	; 6
     818:	9f 4f       	sbci	r25, 0xFF	; 255
     81a:	90 93 a0 08 	sts	0x08A0, r25
     81e:	80 93 9f 08 	sts	0x089F, r24
		
			
			
		us_tickLapsed = us_tickEnd - us_tickStart;
     822:	80 91 9f 08 	lds	r24, 0x089F
     826:	90 91 a0 08 	lds	r25, 0x08A0
     82a:	20 91 97 08 	lds	r18, 0x0897
     82e:	30 91 98 08 	lds	r19, 0x0898
     832:	82 1b       	sub	r24, r18
     834:	93 0b       	sbc	r25, r19
     836:	90 93 9a 08 	sts	0x089A, r25
     83a:	80 93 99 08 	sts	0x0899, r24
		ms_tickLapsed = ms_tickEnd - ms_tickStart;
     83e:	80 91 9d 08 	lds	r24, 0x089D
     842:	90 91 9e 08 	lds	r25, 0x089E
     846:	20 91 93 08 	lds	r18, 0x0893
     84a:	30 91 94 08 	lds	r19, 0x0894
     84e:	82 1b       	sub	r24, r18
     850:	93 0b       	sbc	r25, r19
     852:	90 93 96 08 	sts	0x0896, r25
     856:	80 93 95 08 	sts	0x0895, r24
		
		xSemaphoreGiveFromISR(semaReadReady, pdFALSE);
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	80 91 9b 08 	lds	r24, 0x089B
     868:	90 91 9c 08 	lds	r25, 0x089C
     86c:	0e 94 9a 0c 	call	0x1934	; 0x1934 <xQueueGenericSendFromISR>
	}	
}
     870:	ff 91       	pop	r31
     872:	ef 91       	pop	r30
     874:	bf 91       	pop	r27
     876:	af 91       	pop	r26
     878:	9f 91       	pop	r25
     87a:	8f 91       	pop	r24
     87c:	7f 91       	pop	r23
     87e:	6f 91       	pop	r22
     880:	5f 91       	pop	r21
     882:	4f 91       	pop	r20
     884:	3f 91       	pop	r19
     886:	2f 91       	pop	r18
     888:	0f 90       	pop	r0
     88a:	0b be       	out	0x3b, r0	; 59
     88c:	0f 90       	pop	r0
     88e:	0f be       	out	0x3f, r0	; 63
     890:	0f 90       	pop	r0
     892:	1f 90       	pop	r1
     894:	18 95       	reti

00000896 <myMaxSonar_BtmStart>:
#include <myADC.h>
#include <myTimer.h>

void myMaxSonar_BtmStart()
{
	MaxSonar_BtmTriggerStart();
     896:	a1 9a       	sbi	0x14, 1	; 20
	
	//myTimer_DelayMicro(25); // delay 25 micro seconds...
	vTaskDelay(1);	// delay 1ms using vTaskDelay
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <vTaskDelay>
	
	MaxSonar_BtmTriggerStop();
     8a0:	a1 98       	cbi	0x14, 1	; 20
     8a2:	08 95       	ret

000008a4 <myMaxSonar_TopStart>:
}

void myMaxSonar_TopStart()
{
	MaxSonar_TopTriggerStart();
     8a4:	a0 9a       	sbi	0x14, 0	; 20
	
	//myTimer_DelayMicro2(25); // delay 25 micro seconds...
	vTaskDelay(1);	// delay 1ms using vTaskDelay
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <vTaskDelay>
	
	MaxSonar_TopTriggerStop();
     8ae:	a0 98       	cbi	0x14, 0	; 20
     8b0:	08 95       	ret

000008b2 <myMaxSonar_extractMedian>:
}

// extract the median of 3 values in the sample array
int myMaxSonar_extractMedian(int * sample)
{
     8b2:	fc 01       	movw	r30, r24
	if (sample[0] > sample[1])
     8b4:	80 81       	ld	r24, Z
     8b6:	91 81       	ldd	r25, Z+1	; 0x01
     8b8:	22 81       	ldd	r18, Z+2	; 0x02
     8ba:	33 81       	ldd	r19, Z+3	; 0x03
     8bc:	28 17       	cp	r18, r24
     8be:	39 07       	cpc	r19, r25
     8c0:	54 f4       	brge	.+20     	; 0x8d6 <myMaxSonar_extractMedian+0x24>
	{
		if (sample[1] > sample[2])
     8c2:	44 81       	ldd	r20, Z+4	; 0x04
     8c4:	55 81       	ldd	r21, Z+5	; 0x05
     8c6:	42 17       	cp	r20, r18
     8c8:	53 07       	cpc	r21, r19
     8ca:	84 f0       	brlt	.+32     	; 0x8ec <myMaxSonar_extractMedian+0x3a>
     8cc:	48 17       	cp	r20, r24
     8ce:	59 07       	cpc	r21, r25
     8d0:	74 f4       	brge	.+28     	; 0x8ee <myMaxSonar_extractMedian+0x3c>
     8d2:	ca 01       	movw	r24, r20
     8d4:	08 95       	ret
			return sample[0];
		}
	}
	else 
	{
		if (sample[0] > sample[2])
     8d6:	44 81       	ldd	r20, Z+4	; 0x04
     8d8:	55 81       	ldd	r21, Z+5	; 0x05
     8da:	48 17       	cp	r20, r24
     8dc:	59 07       	cpc	r21, r25
     8de:	3c f0       	brlt	.+14     	; 0x8ee <myMaxSonar_extractMedian+0x3c>
     8e0:	ca 01       	movw	r24, r20
     8e2:	24 17       	cp	r18, r20
     8e4:	35 07       	cpc	r19, r21
     8e6:	1c f4       	brge	.+6      	; 0x8ee <myMaxSonar_extractMedian+0x3c>
     8e8:	c9 01       	movw	r24, r18
     8ea:	08 95       	ret
{
	if (sample[0] > sample[1])
	{
		if (sample[1] > sample[2])
		{
			return sample[1];
     8ec:	c9 01       	movw	r24, r18
		else 
		{
			return sample[1];
		}
	}
}
     8ee:	08 95       	ret

000008f0 <myMaxSonar_Stabilizer>:
}

// return currentReading if it is more than the noise threshold..
int myMaxSonar_Stabilizer(const int currentReading, int prevReading)
{
	if(currentReading > (prevReading + NOISE_THRESHOLD) || currentReading < (prevReading - NOISE_THRESHOLD))
     8f0:	9b 01       	movw	r18, r22
     8f2:	28 5f       	subi	r18, 0xF8	; 248
     8f4:	3f 4f       	sbci	r19, 0xFF	; 255
     8f6:	28 17       	cp	r18, r24
     8f8:	39 07       	cpc	r19, r25
     8fa:	3c f0       	brlt	.+14     	; 0x90a <myMaxSonar_Stabilizer+0x1a>
     8fc:	20 51       	subi	r18, 0x10	; 16
     8fe:	31 09       	sbc	r19, r1
     900:	82 17       	cp	r24, r18
     902:	93 07       	cpc	r25, r19
     904:	14 f0       	brlt	.+4      	; 0x90a <myMaxSonar_Stabilizer+0x1a>
	{
		return currentReading; // when current reading exceed noise range.... return current reading
	}
	else
		return prevReading; // return prevReading if in noise range..
     906:	86 2f       	mov	r24, r22
     908:	97 2f       	mov	r25, r23
}
     90a:	08 95       	ret

0000090c <myMaxSonar_AddSample>:

}

// Add sample circular buffer way...
void myMaxSonar_AddSample(int currentReading ,int *sample)
{
     90c:	0f 93       	push	r16
     90e:	1f 93       	push	r17
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	eb 01       	movw	r28, r22
	static uint8_t i = SONAR_SAMPLE_SIZE; // start with prev reading index first.. 
	 
	currentReading = myMaxSonar_Stabilizer(currentReading, sample[i]);
     916:	00 91 00 02 	lds	r16, 0x0200
     91a:	10 e0       	ldi	r17, 0x00	; 0
     91c:	f8 01       	movw	r30, r16
     91e:	ee 0f       	add	r30, r30
     920:	ff 1f       	adc	r31, r31
     922:	e6 0f       	add	r30, r22
     924:	f7 1f       	adc	r31, r23
     926:	60 81       	ld	r22, Z
     928:	71 81       	ldd	r23, Z+1	; 0x01
     92a:	e2 df       	rcall	.-60     	; 0x8f0 <myMaxSonar_Stabilizer>
     92c:	9c 01       	movw	r18, r24
	
	i = (i+1) % SONAR_SAMPLE_SIZE; // at correct index already..
     92e:	c8 01       	movw	r24, r16
     930:	01 96       	adiw	r24, 0x01	; 1
     932:	63 e0       	ldi	r22, 0x03	; 3
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <__divmodhi4>
     93a:	80 93 00 02 	sts	0x0200, r24
	
	sample[i] = currentReading; //store..
     93e:	88 0f       	add	r24, r24
     940:	99 1f       	adc	r25, r25
     942:	c8 0f       	add	r28, r24
     944:	d9 1f       	adc	r29, r25
     946:	39 83       	std	Y+1, r19	; 0x01
     948:	28 83       	st	Y, r18
}
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	08 95       	ret

00000954 <myMaxSonar_getFilteredReading>:
}


// Return filtered reading of maxSonar (Median of 3 values, with noise eliminated)
int myMaxSonar_getFilteredReading(int currentReading, int *sample)
{
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	eb 01       	movw	r28, r22
	//currentReading = myMaxSonar_Stabilizer(currentReading, prevReading);
	myMaxSonar_AddSample(currentReading, sample);
     95a:	d8 df       	rcall	.-80     	; 0x90c <myMaxSonar_AddSample>
	return myMaxSonar_extractMedian(sample);
     95c:	ce 01       	movw	r24, r28
     95e:	a9 df       	rcall	.-174    	; 0x8b2 <myMaxSonar_extractMedian>

}
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	08 95       	ret

00000966 <myMaxSonar_Read>:
// Return distance in cm
int myMaxSonar_Read(char analogChannel)
{
	int reading = 0;
	
	int adcReading = myADC_analogRead(analogChannel);
     966:	b3 d0       	rcall	.+358    	; 0xace <myADC_analogRead>
     968:	9c 01       	movw	r18, r24
	reading = adcReading /FLOAT_TO_CM; // get the decimal point of ADC
     96a:	63 e0       	ldi	r22, 0x03	; 3
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <__divmodhi4>
	reading += adcReading; // add the exact adcReading
     972:	26 0f       	add	r18, r22
     974:	37 1f       	adc	r19, r23
	
	if(reading > 1000)
     976:	29 3e       	cpi	r18, 0xE9	; 233
     978:	83 e0       	ldi	r24, 0x03	; 3
     97a:	38 07       	cpc	r19, r24
     97c:	1c f0       	brlt	.+6      	; 0x984 <myMaxSonar_Read+0x1e>
		return 999;
     97e:	87 ee       	ldi	r24, 0xE7	; 231
     980:	93 e0       	ldi	r25, 0x03	; 3
     982:	08 95       	ret
	
	return reading;
     984:	82 2f       	mov	r24, r18
     986:	93 2f       	mov	r25, r19
}
     988:	08 95       	ret

0000098a <__vector_29>:
volatile unsigned char adcReading_L;


/*ADC Conversion Complete Interrupt Service Routine (ISR)*/
ISR(ADC_vect)
{	
     98a:	1f 92       	push	r1
     98c:	0f 92       	push	r0
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	0f 92       	push	r0
     992:	11 24       	eor	r1, r1
     994:	0b b6       	in	r0, 0x3b	; 59
     996:	0f 92       	push	r0
     998:	2f 93       	push	r18
     99a:	3f 93       	push	r19
     99c:	4f 93       	push	r20
     99e:	5f 93       	push	r21
     9a0:	6f 93       	push	r22
     9a2:	7f 93       	push	r23
     9a4:	8f 93       	push	r24
     9a6:	9f 93       	push	r25
     9a8:	af 93       	push	r26
     9aa:	bf 93       	push	r27
     9ac:	ef 93       	push	r30
     9ae:	ff 93       	push	r31
	adcReading_L = ADCL; // dont change the ORDER L first then H!!! Reading L will hold H value.
     9b0:	80 91 78 00 	lds	r24, 0x0078
     9b4:	80 93 a1 08 	sts	0x08A1, r24
	adcReading_H = ADCH; // read value of H (not used, 640cm and 1280cm for the resolution)
     9b8:	80 91 79 00 	lds	r24, 0x0079
     9bc:	80 93 a2 08 	sts	0x08A2, r24
	// give semaphore, dont run block task immediately..
	xSemaphoreGiveFromISR(semaReadADC, pdFALSE);
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	60 e0       	ldi	r22, 0x00	; 0
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	80 91 a5 08 	lds	r24, 0x08A5
     9ce:	90 91 a6 08 	lds	r25, 0x08A6
     9d2:	b0 d7       	rcall	.+3936   	; 0x1934 <xQueueGenericSendFromISR>
}
     9d4:	ff 91       	pop	r31
     9d6:	ef 91       	pop	r30
     9d8:	bf 91       	pop	r27
     9da:	af 91       	pop	r26
     9dc:	9f 91       	pop	r25
     9de:	8f 91       	pop	r24
     9e0:	7f 91       	pop	r23
     9e2:	6f 91       	pop	r22
     9e4:	5f 91       	pop	r21
     9e6:	4f 91       	pop	r20
     9e8:	3f 91       	pop	r19
     9ea:	2f 91       	pop	r18
     9ec:	0f 90       	pop	r0
     9ee:	0b be       	out	0x3b, r0	; 59
     9f0:	0f 90       	pop	r0
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	0f 90       	pop	r0
     9f6:	1f 90       	pop	r1
     9f8:	18 95       	reti

000009fa <myADC_Init>:

void myADC_Init()
{
	
	ADCSRA = ( 1<<ADEN ) | ( 1<<ADIE ) | ADC_PRESCALER; // enable ADC, enable interrupt, set prescaler
     9fa:	8f e8       	ldi	r24, 0x8F	; 143
     9fc:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = 0; // No auto trigger (0 for ADATE), No analog compare... 
     a00:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = ( 1 << REFS0 ) ; // use AVCC as reference, right adjust (take LSB but not 2 MSB)
     a04:	80 e4       	ldi	r24, 0x40	; 64
     a06:	80 93 7c 00 	sts	0x007C, r24
	
	// initialize semaphore..
	semaReadADC = xSemaphoreCreateBinary();
     a0a:	43 e0       	ldi	r20, 0x03	; 3
     a0c:	60 e0       	ldi	r22, 0x00	; 0
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	a6 d6       	rcall	.+3404   	; 0x175e <xQueueGenericCreate>
     a12:	90 93 a6 08 	sts	0x08A6, r25
     a16:	80 93 a5 08 	sts	0x08A5, r24
	semaGuardStartADC = xSemaphoreCreateMutex();
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	60 d7       	rcall	.+3776   	; 0x18de <xQueueCreateMutex>
     a1e:	90 93 a4 08 	sts	0x08A4, r25
     a22:	80 93 a3 08 	sts	0x08A3, r24
	xSemaphoreGive(semaGuardStartADC); // free to read at start.
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	c3 c6       	rjmp	.+3462   	; 0x17b8 <xQueueGenericSend>
     a32:	08 95       	ret

00000a34 <myADC_startADC>:
	return myADC_readADC(channel);
}

// channel = AN0 to AN15, use the macro...
void myADC_startADC(char channel)
{
     a34:	cf 93       	push	r28
     a36:	c8 2f       	mov	r28, r24
	
	 //char buffer [10];	
	xSemaphoreTake(semaGuardStartADC, portMAX_DELAY); // guard against concurrent task starting adc at same time
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	4f ef       	ldi	r20, 0xFF	; 255
     a3c:	5f ef       	ldi	r21, 0xFF	; 255
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	80 91 a3 08 	lds	r24, 0x08A3
     a46:	90 91 a4 08 	lds	r25, 0x08A4
     a4a:	ae d7       	rcall	.+3932   	; 0x19a8 <xQueueGenericReceive>
    ADMUX = ( ADMUX & 11100000 ) | ( channel & 0b00011111 ); // keep bit 5:7, set bit 0:4 as Mux
     a4c:	ec e7       	ldi	r30, 0x7C	; 124
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	80 81       	ld	r24, Z
     a52:	9c 2f       	mov	r25, r28
     a54:	9f 71       	andi	r25, 0x1F	; 31
     a56:	80 76       	andi	r24, 0x60	; 96
     a58:	89 2b       	or	r24, r25
     a5a:	80 83       	st	Z, r24
	
	//transmitUSART0("ADMUX = ");
	//transmitUSART0(itoa(ADMUX, buffer, 2)); // debugging...
	//transmitUSART0(" \n");
	
	ADCSRB = ( ADCSRB & 11100000 ) | (( channel & 0b00100000 ) >> 2); // keep all bits except bit 3, set Mux @ bit 3
     a5c:	eb e7       	ldi	r30, 0x7B	; 123
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	20 81       	ld	r18, Z
     a62:	c0 72       	andi	r28, 0x20	; 32
     a64:	8c 2f       	mov	r24, r28
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	95 95       	asr	r25
     a6a:	87 95       	ror	r24
     a6c:	95 95       	asr	r25
     a6e:	87 95       	ror	r24
     a70:	92 2f       	mov	r25, r18
     a72:	90 76       	andi	r25, 0x60	; 96
     a74:	89 2b       	or	r24, r25
     a76:	80 83       	st	Z, r24
	//transmitUSART0(itoa(ADCSRB, buffer, 2)); // debugging...
	//transmitUSART0(" \n");
	//
	
	//vTaskDelay(1);
	ADCSRA |= ( 1 << ADSC );	// READY TO SEND!!
     a78:	ea e7       	ldi	r30, 0x7A	; 122
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	80 81       	ld	r24, Z
     a7e:	80 64       	ori	r24, 0x40	; 64
     a80:	80 83       	st	Z, r24
}
     a82:	cf 91       	pop	r28
     a84:	08 95       	ret

00000a86 <myADC_readADC>:

int myADC_readADC(char channel)
{
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
	int adcReading=0;
	xSemaphoreTake(semaReadADC, portMAX_DELAY); // wait for reading...
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	4f ef       	ldi	r20, 0xFF	; 255
     a8e:	5f ef       	ldi	r21, 0xFF	; 255
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	80 91 a5 08 	lds	r24, 0x08A5
     a98:	90 91 a6 08 	lds	r25, 0x08A6
     a9c:	85 d7       	rcall	.+3850   	; 0x19a8 <xQueueGenericReceive>

	adcReading = ((adcReading_H & 0b11) << 8);
     a9e:	c0 91 a2 08 	lds	r28, 0x08A2
     aa2:	c3 70       	andi	r28, 0x03	; 3
     aa4:	d0 e0       	ldi	r29, 0x00	; 0
     aa6:	dc 2f       	mov	r29, r28
     aa8:	cc 27       	eor	r28, r28
	adcReading += adcReading_L;
     aaa:	80 91 a1 08 	lds	r24, 0x08A1
     aae:	c8 0f       	add	r28, r24
     ab0:	d1 1d       	adc	r29, r1

	xSemaphoreGive(semaGuardStartADC); // reading done, nxt task can start ADC
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	40 e0       	ldi	r20, 0x00	; 0
     ab6:	50 e0       	ldi	r21, 0x00	; 0
     ab8:	60 e0       	ldi	r22, 0x00	; 0
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	80 91 a3 08 	lds	r24, 0x08A3
     ac0:	90 91 a4 08 	lds	r25, 0x08A4
     ac4:	79 d6       	rcall	.+3314   	; 0x17b8 <xQueueGenericSend>
	
	return adcReading;
     ac6:	ce 01       	movw	r24, r28
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	08 95       	ret

00000ace <myADC_analogRead>:
	xSemaphoreGive(semaGuardStartADC); // free to read at start.
}


int myADC_analogRead(char channel)
{
     ace:	cf 93       	push	r28
     ad0:	c8 2f       	mov	r28, r24
	myADC_startADC(channel);
     ad2:	b0 df       	rcall	.-160    	; 0xa34 <myADC_startADC>
	return myADC_readADC(channel);
     ad4:	8c 2f       	mov	r24, r28
     ad6:	d7 df       	rcall	.-82     	; 0xa86 <myADC_readADC>
}
     ad8:	cf 91       	pop	r28
     ada:	08 95       	ret

00000adc <detectStairs>:
	if(frontSonar < FRONT_OBSTACLE_DISTANCE && topSonar < STAIRS_TOP_LIMIT_H && topSonar > STAIRS_TOP_LIMIT_L)
		return 1;
	else 
		return 0;
	
}
     adc:	9c 01       	movw	r18, r24
     ade:	28 5f       	subi	r18, 0xF8	; 248
     ae0:	3f 4f       	sbci	r19, 0xFF	; 255
     ae2:	26 17       	cp	r18, r22
     ae4:	37 07       	cpc	r19, r23
     ae6:	44 f0       	brlt	.+16     	; 0xaf8 <detectStairs+0x1c>
     ae8:	20 51       	subi	r18, 0x10	; 16
     aea:	31 09       	sbc	r19, r1
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	62 17       	cp	r22, r18
     af0:	73 07       	cpc	r23, r19
     af2:	1c f0       	brlt	.+6      	; 0xafa <detectStairs+0x1e>
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	08 95       	ret
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	08 95       	ret

00000afc <obstacleAvoidance>:
     afc:	ef 92       	push	r14
     afe:	ff 92       	push	r15
     b00:	f7 01       	movw	r30, r14
     b02:	83 81       	ldd	r24, Z+3	; 0x03
     b04:	88 23       	and	r24, r24
     b06:	41 f0       	breq	.+16     	; 0xb18 <obstacleAvoidance+0x1c>
     b08:	74 9a       	sbi	0x0e, 4	; 14
     b0a:	e2 e0       	ldi	r30, 0x02	; 2
     b0c:	f1 e0       	ldi	r31, 0x01	; 1
     b0e:	80 81       	ld	r24, Z
     b10:	80 61       	ori	r24, 0x10	; 16
     b12:	80 83       	st	Z, r24
     b14:	73 98       	cbi	0x0e, 3	; 14
     b16:	4e c0       	rjmp	.+156    	; 0xbb4 <obstacleAvoidance+0xb8>
     b18:	80 81       	ld	r24, Z
     b1a:	81 11       	cpse	r24, r1
     b1c:	03 c0       	rjmp	.+6      	; 0xb24 <obstacleAvoidance+0x28>
     b1e:	84 81       	ldd	r24, Z+4	; 0x04
     b20:	88 23       	and	r24, r24
     b22:	39 f1       	breq	.+78     	; 0xb72 <obstacleAvoidance+0x76>
     b24:	81 81       	ldd	r24, Z+1	; 0x01
     b26:	81 11       	cpse	r24, r1
     b28:	07 c0       	rjmp	.+14     	; 0xb38 <obstacleAvoidance+0x3c>
     b2a:	82 81       	ldd	r24, Z+2	; 0x02
     b2c:	81 11       	cpse	r24, r1
     b2e:	14 c0       	rjmp	.+40     	; 0xb58 <obstacleAvoidance+0x5c>
     b30:	73 9a       	sbi	0x0e, 3	; 14
     b32:	81 81       	ldd	r24, Z+1	; 0x01
     b34:	88 23       	and	r24, r24
     b36:	d9 f1       	breq	.+118    	; 0xbae <obstacleAvoidance+0xb2>
     b38:	82 81       	ldd	r24, Z+2	; 0x02
     b3a:	81 11       	cpse	r24, r1
     b3c:	3b c0       	rjmp	.+118    	; 0xbb4 <obstacleAvoidance+0xb8>
     b3e:	24 1b       	sub	r18, r20
     b40:	35 0b       	sbc	r19, r21
     b42:	28 30       	cpi	r18, 0x08	; 8
     b44:	31 05       	cpc	r19, r1
     b46:	b4 f1       	brlt	.+108    	; 0xbb4 <obstacleAvoidance+0xb8>
     b48:	73 98       	cbi	0x0e, 3	; 14
     b4a:	74 98       	cbi	0x0e, 4	; 14
     b4c:	e2 e0       	ldi	r30, 0x02	; 2
     b4e:	f1 e0       	ldi	r31, 0x01	; 1
     b50:	80 81       	ld	r24, Z
     b52:	80 61       	ori	r24, 0x10	; 16
     b54:	80 83       	st	Z, r24
     b56:	2e c0       	rjmp	.+92     	; 0xbb4 <obstacleAvoidance+0xb8>
     b58:	42 1b       	sub	r20, r18
     b5a:	53 0b       	sbc	r21, r19
     b5c:	48 30       	cpi	r20, 0x08	; 8
     b5e:	51 05       	cpc	r21, r1
     b60:	4c f1       	brlt	.+82     	; 0xbb4 <obstacleAvoidance+0xb8>
     b62:	73 98       	cbi	0x0e, 3	; 14
     b64:	74 9a       	sbi	0x0e, 4	; 14
     b66:	e2 e0       	ldi	r30, 0x02	; 2
     b68:	f1 e0       	ldi	r31, 0x01	; 1
     b6a:	80 81       	ld	r24, Z
     b6c:	8f 7e       	andi	r24, 0xEF	; 239
     b6e:	80 83       	st	Z, r24
     b70:	21 c0       	rjmp	.+66     	; 0xbb4 <obstacleAvoidance+0xb8>
     b72:	4e 31       	cpi	r20, 0x1E	; 30
     b74:	51 05       	cpc	r21, r1
     b76:	44 f4       	brge	.+16     	; 0xb88 <obstacleAvoidance+0x8c>
     b78:	73 98       	cbi	0x0e, 3	; 14
     b7a:	74 98       	cbi	0x0e, 4	; 14
     b7c:	e2 e0       	ldi	r30, 0x02	; 2
     b7e:	f1 e0       	ldi	r31, 0x01	; 1
     b80:	80 81       	ld	r24, Z
     b82:	80 61       	ori	r24, 0x10	; 16
     b84:	80 83       	st	Z, r24
     b86:	16 c0       	rjmp	.+44     	; 0xbb4 <obstacleAvoidance+0xb8>
     b88:	28 31       	cpi	r18, 0x18	; 24
     b8a:	31 05       	cpc	r19, r1
     b8c:	44 f4       	brge	.+16     	; 0xb9e <obstacleAvoidance+0xa2>
     b8e:	73 98       	cbi	0x0e, 3	; 14
     b90:	74 9a       	sbi	0x0e, 4	; 14
     b92:	e2 e0       	ldi	r30, 0x02	; 2
     b94:	f1 e0       	ldi	r31, 0x01	; 1
     b96:	80 81       	ld	r24, Z
     b98:	8f 7e       	andi	r24, 0xEF	; 239
     b9a:	80 83       	st	Z, r24
     b9c:	0b c0       	rjmp	.+22     	; 0xbb4 <obstacleAvoidance+0xb8>
     b9e:	73 98       	cbi	0x0e, 3	; 14
     ba0:	74 98       	cbi	0x0e, 4	; 14
     ba2:	e2 e0       	ldi	r30, 0x02	; 2
     ba4:	f1 e0       	ldi	r31, 0x01	; 1
     ba6:	80 81       	ld	r24, Z
     ba8:	8f 7e       	andi	r24, 0xEF	; 239
     baa:	80 83       	st	Z, r24
     bac:	03 c0       	rjmp	.+6      	; 0xbb4 <obstacleAvoidance+0xb8>
     bae:	82 81       	ldd	r24, Z+2	; 0x02
     bb0:	81 11       	cpse	r24, r1
     bb2:	d2 cf       	rjmp	.-92     	; 0xb58 <obstacleAvoidance+0x5c>
     bb4:	ff 90       	pop	r15
     bb6:	ef 90       	pop	r14
     bb8:	08 95       	ret

00000bba <obstacleDetection>:

// return number of obstacle detected...
// implicitly return the device to send.
char obstacleDetection(int frontSonar, char obstacleDetected, char * deviceBlocked, int leftSonar, int rightSonar, int topSonar, int calibratedBtmIR, int btmIR)
{
     bba:	af 92       	push	r10
     bbc:	bf 92       	push	r11
     bbe:	cf 92       	push	r12
     bc0:	df 92       	push	r13
     bc2:	ef 92       	push	r14
     bc4:	ff 92       	push	r15
     bc6:	0f 93       	push	r16
     bc8:	1f 93       	push	r17
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	ea 01       	movw	r28, r20
     bd0:	b5 01       	movw	r22, r10
	// Commented out when debuggin..

	obstacleDetected = 0;
	deviceBlocked[FRONT_DEVICE] = deviceBlocked[LEFT_DEVICE] = deviceBlocked[RIGHT_DEVICE] = deviceBlocked[BTM_DEVICE] = deviceBlocked[TOP_DEVICE] = 0;
     bd2:	1c 82       	std	Y+4, r1	; 0x04
     bd4:	1b 82       	std	Y+3, r1	; 0x03
     bd6:	1a 82       	std	Y+2, r1	; 0x02
     bd8:	19 82       	std	Y+1, r1	; 0x01
	
	if(frontSonar < FRONT_OBSTACLE_DISTANCE)
     bda:	c2 97       	sbiw	r24, 0x32	; 50
     bdc:	1c f0       	brlt	.+6      	; 0xbe4 <obstacleDetection+0x2a>
char obstacleDetection(int frontSonar, char obstacleDetected, char * deviceBlocked, int leftSonar, int rightSonar, int topSonar, int calibratedBtmIR, int btmIR)
{
	// Commented out when debuggin..

	obstacleDetected = 0;
	deviceBlocked[FRONT_DEVICE] = deviceBlocked[LEFT_DEVICE] = deviceBlocked[RIGHT_DEVICE] = deviceBlocked[BTM_DEVICE] = deviceBlocked[TOP_DEVICE] = 0;
     bde:	18 82       	st	Y, r1
// implicitly return the device to send.
char obstacleDetection(int frontSonar, char obstacleDetected, char * deviceBlocked, int leftSonar, int rightSonar, int topSonar, int calibratedBtmIR, int btmIR)
{
	// Commented out when debuggin..

	obstacleDetected = 0;
     be0:	b1 2c       	mov	r11, r1
     be2:	04 c0       	rjmp	.+8      	; 0xbec <obstacleDetection+0x32>
	deviceBlocked[FRONT_DEVICE] = deviceBlocked[LEFT_DEVICE] = deviceBlocked[RIGHT_DEVICE] = deviceBlocked[BTM_DEVICE] = deviceBlocked[TOP_DEVICE] = 0;
	
	if(frontSonar < FRONT_OBSTACLE_DISTANCE)
	{
		obstacleDetected ++;
		deviceBlocked[FRONT_DEVICE] = FRONT_SONAR_ID;
     be4:	86 e4       	ldi	r24, 0x46	; 70
     be6:	88 83       	st	Y, r24
	obstacleDetected = 0;
	deviceBlocked[FRONT_DEVICE] = deviceBlocked[LEFT_DEVICE] = deviceBlocked[RIGHT_DEVICE] = deviceBlocked[BTM_DEVICE] = deviceBlocked[TOP_DEVICE] = 0;
	
	if(frontSonar < FRONT_OBSTACLE_DISTANCE)
	{
		obstacleDetected ++;
     be8:	bb 24       	eor	r11, r11
     bea:	b3 94       	inc	r11
		deviceBlocked[FRONT_DEVICE] = FRONT_SONAR_ID;
	}
	if (leftSonar < LEFT_OBSTACLE_DISTANCE)
     bec:	2e 31       	cpi	r18, 0x1E	; 30
     bee:	31 05       	cpc	r19, r1
     bf0:	1c f4       	brge	.+6      	; 0xbf8 <obstacleDetection+0x3e>
	{
		obstacleDetected ++;
     bf2:	b3 94       	inc	r11
		deviceBlocked[LEFT_DEVICE] = LEFT_SONAR_ID;
     bf4:	8c e4       	ldi	r24, 0x4C	; 76
     bf6:	89 83       	std	Y+1, r24	; 0x01
	}
	if (rightSonar < RIGHT_OBSTACLE_DISTANCE)
     bf8:	0e 31       	cpi	r16, 0x1E	; 30
     bfa:	11 05       	cpc	r17, r1
     bfc:	1c f4       	brge	.+6      	; 0xc04 <obstacleDetection+0x4a>
	{
		obstacleDetected++;
     bfe:	b3 94       	inc	r11
		deviceBlocked[RIGHT_DEVICE] = RIGHT_SONAR_ID;
     c00:	82 e5       	ldi	r24, 0x52	; 82
     c02:	8a 83       	std	Y+2, r24	; 0x02
	}
	if (detectStairs(calibratedBtmIR, btmIR))
     c04:	c6 01       	movw	r24, r12
     c06:	6a df       	rcall	.-300    	; 0xadc <detectStairs>
     c08:	88 23       	and	r24, r24
     c0a:	19 f0       	breq	.+6      	; 0xc12 <obstacleDetection+0x58>
	{
		obstacleDetected++;
     c0c:	b3 94       	inc	r11
		deviceBlocked[BTM_DEVICE] = BTM_SONAR_ID;
     c0e:	82 e4       	ldi	r24, 0x42	; 66
     c10:	8b 83       	std	Y+3, r24	; 0x03
	}
	 if (topSonar < TOP_OBSTACLE_DISTANCE)
     c12:	87 e3       	ldi	r24, 0x37	; 55
     c14:	e8 16       	cp	r14, r24
     c16:	f1 04       	cpc	r15, r1
     c18:	1c f4       	brge	.+6      	; 0xc20 <obstacleDetection+0x66>
	{
		obstacleDetected++;
     c1a:	b3 94       	inc	r11
		deviceBlocked[TOP_DEVICE] = TOP_SONAR_ID;
     c1c:	84 e5       	ldi	r24, 0x54	; 84
     c1e:	8c 83       	std	Y+4, r24	; 0x04
	}
	
	return obstacleDetected;
}
     c20:	8b 2d       	mov	r24, r11
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	1f 91       	pop	r17
     c28:	0f 91       	pop	r16
     c2a:	ff 90       	pop	r15
     c2c:	ef 90       	pop	r14
     c2e:	df 90       	pop	r13
     c30:	cf 90       	pop	r12
     c32:	bf 90       	pop	r11
     c34:	af 90       	pop	r10
     c36:	08 95       	ret

00000c38 <mySharpIR_Read>:
#include <myUSART.h>

// Return distance in cm
int mySharpIR_Read(char analogChannel)
{
	int adcReading = myADC_analogRead(analogChannel);
     c38:	4a df       	rcall	.-364    	; 0xace <myADC_analogRead>
	adcReading = 10650.08 * pow(adcReading,-0.935) - 10;
     c3a:	bc 01       	movw	r22, r24
     c3c:	88 27       	eor	r24, r24
     c3e:	77 fd       	sbrc	r23, 7
     c40:	80 95       	com	r24
     c42:	98 2f       	mov	r25, r24
     c44:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__floatsisf>
     c48:	29 e2       	ldi	r18, 0x29	; 41
     c4a:	3c e5       	ldi	r19, 0x5C	; 92
     c4c:	4f e6       	ldi	r20, 0x6F	; 111
     c4e:	5f eb       	ldi	r21, 0xBF	; 191
     c50:	0e 94 db 14 	call	0x29b6	; 0x29b6 <pow>
     c54:	22 e5       	ldi	r18, 0x52	; 82
     c56:	38 e6       	ldi	r19, 0x68	; 104
     c58:	46 e2       	ldi	r20, 0x26	; 38
     c5a:	56 e4       	ldi	r21, 0x46	; 70
     c5c:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__mulsf3>
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	40 e2       	ldi	r20, 0x20	; 32
     c66:	51 e4       	ldi	r21, 0x41	; 65
     c68:	0e 94 54 13 	call	0x26a8	; 0x26a8 <__subsf3>
     c6c:	0e 94 b9 13 	call	0x2772	; 0x2772 <__fixsfsi>
     c70:	cb 01       	movw	r24, r22
	if(adcReading > IR_MAX_VALUE || adcReading < IR_MIN_VALUE)
     c72:	68 3e       	cpi	r22, 0xE8	; 232
     c74:	23 e0       	ldi	r18, 0x03	; 3
     c76:	72 07       	cpc	r23, r18
     c78:	10 f0       	brcs	.+4      	; 0xc7e <mySharpIR_Read+0x46>
		adcReading = IR_MAX_VALUE;
     c7a:	87 ee       	ldi	r24, 0xE7	; 231
     c7c:	93 e0       	ldi	r25, 0x03	; 3
	
	return adcReading;
}
     c7e:	08 95       	ret

00000c80 <checkOutOfRange>:

// return 1 if out of range..
char checkOutOfRange(int reading, int * checkReading, const char range)
{
	return reading > (*checkReading + range) || reading < (*checkReading - range);
     c80:	fb 01       	movw	r30, r22
     c82:	20 81       	ld	r18, Z
     c84:	31 81       	ldd	r19, Z+1	; 0x01
     c86:	50 e0       	ldi	r21, 0x00	; 0
     c88:	b9 01       	movw	r22, r18
     c8a:	64 0f       	add	r22, r20
     c8c:	75 1f       	adc	r23, r21
     c8e:	68 17       	cp	r22, r24
     c90:	79 07       	cpc	r23, r25
     c92:	4c f0       	brlt	.+18     	; 0xca6 <checkOutOfRange+0x26>
     c94:	24 1b       	sub	r18, r20
     c96:	35 0b       	sbc	r19, r21
     c98:	41 e0       	ldi	r20, 0x01	; 1
     c9a:	82 17       	cp	r24, r18
     c9c:	93 07       	cpc	r25, r19
     c9e:	0c f0       	brlt	.+2      	; 0xca2 <checkOutOfRange+0x22>
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	84 2f       	mov	r24, r20
     ca4:	08 95       	ret
     ca6:	81 e0       	ldi	r24, 0x01	; 1
}
     ca8:	08 95       	ret

00000caa <mySharpIR_ReCalibrate>:
// final reading = btmIR reading (i = CALIBRATE_COUNT)
// firstCheck reading = btmIR reading ( i = CALIBRATE_COUNT/2)
// initial reading  = btmIR reading (i = 0)
// Write new calibrate value if all matches..
void mySharpIR_ReCalibrate(int* calibratedReading, int reading)
{
     caa:	ff 92       	push	r15
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	8c 01       	movw	r16, r24
     cb6:	eb 01       	movw	r28, r22
	static uint8_t sampleCount = 0;
	static int referenceReading = 0;
	//static int testPrint = 0;
	
	if(!checkOutOfRange(reading, calibratedReading, CALIBRATE_RANGE) && sampleCount == 0)
     cb8:	45 e0       	ldi	r20, 0x05	; 5
     cba:	bc 01       	movw	r22, r24
     cbc:	ce 01       	movw	r24, r28
     cbe:	e0 df       	rcall	.-64     	; 0xc80 <checkOutOfRange>
     cc0:	81 11       	cpse	r24, r1
     cc2:	05 c0       	rjmp	.+10     	; 0xcce <mySharpIR_ReCalibrate+0x24>
     cc4:	80 91 19 08 	lds	r24, 0x0819
     cc8:	88 23       	and	r24, r24
     cca:	09 f4       	brne	.+2      	; 0xcce <mySharpIR_ReCalibrate+0x24>
     ccc:	4d c0       	rjmp	.+154    	; 0xd68 <mySharpIR_ReCalibrate+0xbe>
		// if current reading and calibratedReading is within range and no checking in progess
		// skip the calibration process... not needed
		return;
	}
	
	if(reading < CALIBRATE_LOW_THRESHOLD || reading > CALIBRATE_HIGH_THRESHOLD)
     cce:	ce 01       	movw	r24, r28
     cd0:	49 97       	sbiw	r24, 0x19	; 25
     cd2:	45 97       	sbiw	r24, 0x15	; 21
     cd4:	28 f0       	brcs	.+10     	; 0xce0 <mySharpIR_ReCalibrate+0x36>
	{
		// Too low or Too high for it to be ground..
		referenceReading = 0;
     cd6:	10 92 18 08 	sts	0x0818, r1
     cda:	10 92 17 08 	sts	0x0817, r1
		return;		
     cde:	44 c0       	rjmp	.+136    	; 0xd68 <mySharpIR_ReCalibrate+0xbe>
	}
	
	
	if (sampleCount == 0)
     ce0:	f0 90 19 08 	lds	r15, 0x0819
     ce4:	f1 10       	cpse	r15, r1
     ce6:	05 c0       	rjmp	.+10     	; 0xcf2 <mySharpIR_ReCalibrate+0x48>
	{
		// Possible calibration... take reference from reading
		//testPrint = 0;
		referenceReading = reading;
     ce8:	d0 93 18 08 	sts	0x0818, r29
     cec:	c0 93 17 08 	sts	0x0817, r28
     cf0:	38 c0       	rjmp	.+112    	; 0xd62 <mySharpIR_ReCalibrate+0xb8>
		//myUSART_transmitUSART0("\n-----RS----\n");

	}
	else if ((sampleCount % CALIBRATE_SAMPLE_RATE) == 0) // when count reach 
     cf2:	8d ec       	ldi	r24, 0xCD	; 205
     cf4:	f8 9e       	mul	r15, r24
     cf6:	81 2d       	mov	r24, r1
     cf8:	11 24       	eor	r1, r1
     cfa:	86 95       	lsr	r24
     cfc:	86 95       	lsr	r24
     cfe:	98 2f       	mov	r25, r24
     d00:	99 0f       	add	r25, r25
     d02:	99 0f       	add	r25, r25
     d04:	89 0f       	add	r24, r25
     d06:	f8 12       	cpse	r15, r24
     d08:	13 c0       	rjmp	.+38     	; 0xd30 <mySharpIR_ReCalibrate+0x86>
	{
		//testPrint++;
		//myUSART_transmitUSART0_c(testPrint + '0');
		//myUSART_transmitUSART0("\n");
		if(checkOutOfRange(reading, &referenceReading, CALIBRATE_RANGE))
     d0a:	45 e0       	ldi	r20, 0x05	; 5
     d0c:	67 e1       	ldi	r22, 0x17	; 23
     d0e:	78 e0       	ldi	r23, 0x08	; 8
     d10:	ce 01       	movw	r24, r28
     d12:	b6 df       	rcall	.-148    	; 0xc80 <checkOutOfRange>
     d14:	88 23       	and	r24, r24
     d16:	39 f0       	breq	.+14     	; 0xd26 <mySharpIR_ReCalibrate+0x7c>
		{
			// Out of range.. restart to find new calibration point..
			referenceReading = 0;
     d18:	10 92 18 08 	sts	0x0818, r1
     d1c:	10 92 17 08 	sts	0x0817, r1
			sampleCount = 0; // reset to count...
     d20:	10 92 19 08 	sts	0x0819, r1
			return;
     d24:	21 c0       	rjmp	.+66     	; 0xd68 <mySharpIR_ReCalibrate+0xbe>
		}
		else
		{	// within range.. need more confirmation, update reference point..
			referenceReading = reading;
     d26:	d0 93 18 08 	sts	0x0818, r29
     d2a:	c0 93 17 08 	sts	0x0817, r28
     d2e:	19 c0       	rjmp	.+50     	; 0xd62 <mySharpIR_ReCalibrate+0xb8>
		}
	}
	else if (sampleCount >= CALIBRATE_SAMPLE_REQUIRE)
     d30:	81 e2       	ldi	r24, 0x21	; 33
     d32:	8f 15       	cp	r24, r15
     d34:	b0 f4       	brcc	.+44     	; 0xd62 <mySharpIR_ReCalibrate+0xb8>
	{
		// Sample long enough...
		sampleCount = 0; // reset to count..
     d36:	10 92 19 08 	sts	0x0819, r1

		if(checkOutOfRange(reading, &referenceReading, CALIBRATE_RANGE))
     d3a:	45 e0       	ldi	r20, 0x05	; 5
     d3c:	67 e1       	ldi	r22, 0x17	; 23
     d3e:	78 e0       	ldi	r23, 0x08	; 8
     d40:	ce 01       	movw	r24, r28
     d42:	9e df       	rcall	.-196    	; 0xc80 <checkOutOfRange>
     d44:	88 23       	and	r24, r24
     d46:	29 f0       	breq	.+10     	; 0xd52 <mySharpIR_ReCalibrate+0xa8>
		{
			// Out of range.. restart to find new calibration point..
			referenceReading = 0;
     d48:	10 92 18 08 	sts	0x0818, r1
     d4c:	10 92 17 08 	sts	0x0817, r1
			return;
     d50:	0b c0       	rjmp	.+22     	; 0xd68 <mySharpIR_ReCalibrate+0xbe>
		}
		else
		{
			// all readings within range... can calibrate as new stable.
			*calibratedReading = referenceReading; // btmIR is calibrated..
     d52:	80 91 17 08 	lds	r24, 0x0817
     d56:	90 91 18 08 	lds	r25, 0x0818
     d5a:	f8 01       	movw	r30, r16
     d5c:	91 83       	std	Z+1, r25	; 0x01
     d5e:	80 83       	st	Z, r24
			//myUSART_transmitUSART0("\nACK\n");
			return;
     d60:	03 c0       	rjmp	.+6      	; 0xd68 <mySharpIR_ReCalibrate+0xbe>
		}
	}
	
	sampleCount++;
     d62:	f3 94       	inc	r15
     d64:	f0 92 19 08 	sts	0x0819, r15
}
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	ff 90       	pop	r15
     d72:	08 95       	ret

00000d74 <myTimer_Init>:
	unsigned char currentTick = myTimer_Read();

	delay /= MICROSECONDS_PER_TICK; // convert delay into ticks..
	expectedTick2 = currentTick + delay; 
	vTaskResume( *timerTask ); // resume delayMicroCheck..
	xSemaphoreTake(semaDelayMicro2, MAX_SEMA_WAIT);	// delay for the micro here... safety mech: max wait for 2 ms... cannot be more than tht..
     d74:	90 93 ac 08 	sts	0x08AC, r25
     d78:	80 93 ab 08 	sts	0x08AB, r24
     d7c:	fc 01       	movw	r30, r24
     d7e:	80 81       	ld	r24, Z
     d80:	91 81       	ldd	r25, Z+1	; 0x01
     d82:	0e 94 9f 11 	call	0x233e	; 0x233e <vTaskSuspend>
     d86:	43 e0       	ldi	r20, 0x03	; 3
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	e8 d4       	rcall	.+2512   	; 0x175e <xQueueGenericCreate>
     d8e:	90 93 a8 08 	sts	0x08A8, r25
     d92:	80 93 a7 08 	sts	0x08A7, r24
     d96:	43 e0       	ldi	r20, 0x03	; 3
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	e0 d4       	rcall	.+2496   	; 0x175e <xQueueGenericCreate>
     d9e:	90 93 aa 08 	sts	0x08AA, r25
     da2:	80 93 a9 08 	sts	0x08A9, r24
     da6:	08 95       	ret

00000da8 <myTimer_Read>:
     da8:	86 b5       	in	r24, 0x26	; 38
     daa:	08 95       	ret

00000dac <myTimer_DelayChecker>:
}

// Semaphore on sale if u match lucky number ...
void myTimer_DelayChecker()
{
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
}

// Return timer 0 value
unsigned char myTimer_Read()
{
	return TCNT0;
     db0:	c6 b5       	in	r28, 0x26	; 38
// Semaphore on sale if u match lucky number ...
void myTimer_DelayChecker()
{
	unsigned char currentTick = myTimer_Read();
	
	if(currentTick == 0) // overflow happened
     db2:	c1 11       	cpse	r28, r1
     db4:	22 c0       	rjmp	.+68     	; 0xdfa <myTimer_DelayChecker+0x4e>
	{
		if(expectedTick != IMPOSSIBLE_RANGE)
     db6:	80 91 03 02 	lds	r24, 0x0203
     dba:	90 91 04 02 	lds	r25, 0x0204
     dbe:	88 38       	cpi	r24, 0x88	; 136
     dc0:	93 41       	sbci	r25, 0x13	; 19
     dc2:	51 f0       	breq	.+20     	; 0xdd8 <myTimer_DelayChecker+0x2c>
			expectedTick -= MAX_TICKS;
     dc4:	80 91 03 02 	lds	r24, 0x0203
     dc8:	90 91 04 02 	lds	r25, 0x0204
     dcc:	8a 5f       	subi	r24, 0xFA	; 250
     dce:	91 09       	sbc	r25, r1
     dd0:	90 93 04 02 	sts	0x0204, r25
     dd4:	80 93 03 02 	sts	0x0203, r24

		if(expectedTick2 != IMPOSSIBLE_RANGE)
     dd8:	80 91 01 02 	lds	r24, 0x0201
     ddc:	90 91 02 02 	lds	r25, 0x0202
     de0:	88 38       	cpi	r24, 0x88	; 136
     de2:	93 41       	sbci	r25, 0x13	; 19
     de4:	51 f0       	breq	.+20     	; 0xdfa <myTimer_DelayChecker+0x4e>
			expectedTick2 -= MAX_TICKS;
     de6:	80 91 01 02 	lds	r24, 0x0201
     dea:	90 91 02 02 	lds	r25, 0x0202
     dee:	8a 5f       	subi	r24, 0xFA	; 250
     df0:	91 09       	sbc	r25, r1
     df2:	90 93 02 02 	sts	0x0202, r25
     df6:	80 93 01 02 	sts	0x0201, r24
	}
	
	if( currentTick > expectedTick) // more than => 1 more tick => positive error..
     dfa:	d0 e0       	ldi	r29, 0x00	; 0
     dfc:	80 91 03 02 	lds	r24, 0x0203
     e00:	90 91 04 02 	lds	r25, 0x0204
     e04:	8c 17       	cp	r24, r28
     e06:	9d 07       	cpc	r25, r29
     e08:	84 f4       	brge	.+32     	; 0xe2a <myTimer_DelayChecker+0x7e>
	{
		expectedTick = IMPOSSIBLE_RANGE; // set back to impossible range.
     e0a:	88 e8       	ldi	r24, 0x88	; 136
     e0c:	93 e1       	ldi	r25, 0x13	; 19
     e0e:	90 93 04 02 	sts	0x0204, r25
     e12:	80 93 03 02 	sts	0x0203, r24
		xSemaphoreGive(semaDelayMicro); // give the semaphore to resume...	
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	40 e0       	ldi	r20, 0x00	; 0
     e1a:	50 e0       	ldi	r21, 0x00	; 0
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	80 91 a7 08 	lds	r24, 0x08A7
     e24:	90 91 a8 08 	lds	r25, 0x08A8
     e28:	c7 d4       	rcall	.+2446   	; 0x17b8 <xQueueGenericSend>
	}
	
	
	if( currentTick > expectedTick2) // more than => 1 more tick => positive error..
     e2a:	80 91 01 02 	lds	r24, 0x0201
     e2e:	90 91 02 02 	lds	r25, 0x0202
     e32:	8c 17       	cp	r24, r28
     e34:	9d 07       	cpc	r25, r29
     e36:	84 f4       	brge	.+32     	; 0xe58 <myTimer_DelayChecker+0xac>
	{
		expectedTick2 = IMPOSSIBLE_RANGE; // set back to impossible range.
     e38:	88 e8       	ldi	r24, 0x88	; 136
     e3a:	93 e1       	ldi	r25, 0x13	; 19
     e3c:	90 93 02 02 	sts	0x0202, r25
     e40:	80 93 01 02 	sts	0x0201, r24
		xSemaphoreGive(semaDelayMicro2); // give the semaphore to resume...
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	40 e0       	ldi	r20, 0x00	; 0
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	80 91 a9 08 	lds	r24, 0x08A9
     e52:	90 91 aa 08 	lds	r25, 0x08AA
     e56:	b0 d4       	rcall	.+2400   	; 0x17b8 <xQueueGenericSend>
	}
	
	if(expectedTick == IMPOSSIBLE_RANGE && expectedTick2 == IMPOSSIBLE_RANGE)
     e58:	80 91 03 02 	lds	r24, 0x0203
     e5c:	90 91 04 02 	lds	r25, 0x0204
     e60:	88 38       	cpi	r24, 0x88	; 136
     e62:	93 41       	sbci	r25, 0x13	; 19
     e64:	79 f4       	brne	.+30     	; 0xe84 <myTimer_DelayChecker+0xd8>
     e66:	80 91 01 02 	lds	r24, 0x0201
     e6a:	90 91 02 02 	lds	r25, 0x0202
     e6e:	88 38       	cpi	r24, 0x88	; 136
     e70:	93 41       	sbci	r25, 0x13	; 19
     e72:	41 f4       	brne	.+16     	; 0xe84 <myTimer_DelayChecker+0xd8>
	{
		vTaskSuspend(*timerTask); // suspend when both is done..
     e74:	e0 91 ab 08 	lds	r30, 0x08AB
     e78:	f0 91 ac 08 	lds	r31, 0x08AC
     e7c:	80 81       	ld	r24, Z
     e7e:	91 81       	ldd	r25, Z+1	; 0x01
     e80:	0e 94 9f 11 	call	0x233e	; 0x233e <vTaskSuspend>
	}
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	08 95       	ret

00000e8a <__vector_36>:
	{
		xSemaphoreGive(semaUsart0Receive);
	}
	
	return data;
}
     e8a:	1f 92       	push	r1
     e8c:	0f 92       	push	r0
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	0f 92       	push	r0
     e92:	11 24       	eor	r1, r1
     e94:	0b b6       	in	r0, 0x3b	; 59
     e96:	0f 92       	push	r0
     e98:	2f 93       	push	r18
     e9a:	3f 93       	push	r19
     e9c:	4f 93       	push	r20
     e9e:	5f 93       	push	r21
     ea0:	6f 93       	push	r22
     ea2:	7f 93       	push	r23
     ea4:	8f 93       	push	r24
     ea6:	9f 93       	push	r25
     ea8:	af 93       	push	r26
     eaa:	bf 93       	push	r27
     eac:	ef 93       	push	r30
     eae:	ff 93       	push	r31
     eb0:	60 91 ce 00 	lds	r22, 0x00CE
     eb4:	8c e3       	ldi	r24, 0x3C	; 60
     eb6:	99 e0       	ldi	r25, 0x09	; 9
     eb8:	43 d6       	rcall	.+3206   	; 0x1b40 <ringBufferPush>
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	40 e0       	ldi	r20, 0x00	; 0
     ebe:	50 e0       	ldi	r21, 0x00	; 0
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	70 e0       	ldi	r23, 0x00	; 0
     ec4:	80 91 22 08 	lds	r24, 0x0822
     ec8:	90 91 23 08 	lds	r25, 0x0823
     ecc:	33 d5       	rcall	.+2662   	; 0x1934 <xQueueGenericSendFromISR>
     ece:	8c e3       	ldi	r24, 0x3C	; 60
     ed0:	99 e0       	ldi	r25, 0x09	; 9
     ed2:	4d d6       	rcall	.+3226   	; 0x1b6e <ringBufferFull>
     ed4:	ff 91       	pop	r31
     ed6:	ef 91       	pop	r30
     ed8:	bf 91       	pop	r27
     eda:	af 91       	pop	r26
     edc:	9f 91       	pop	r25
     ede:	8f 91       	pop	r24
     ee0:	7f 91       	pop	r23
     ee2:	6f 91       	pop	r22
     ee4:	5f 91       	pop	r21
     ee6:	4f 91       	pop	r20
     ee8:	3f 91       	pop	r19
     eea:	2f 91       	pop	r18
     eec:	0f 90       	pop	r0
     eee:	0b be       	out	0x3b, r0	; 59
     ef0:	0f 90       	pop	r0
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	0f 90       	pop	r0
     ef6:	1f 90       	pop	r1
     ef8:	18 95       	reti

00000efa <__vector_25>:
     efa:	1f 92       	push	r1
     efc:	0f 92       	push	r0
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	0f 92       	push	r0
     f02:	11 24       	eor	r1, r1
     f04:	0b b6       	in	r0, 0x3b	; 59
     f06:	0f 92       	push	r0
     f08:	2f 93       	push	r18
     f0a:	3f 93       	push	r19
     f0c:	4f 93       	push	r20
     f0e:	5f 93       	push	r21
     f10:	6f 93       	push	r22
     f12:	7f 93       	push	r23
     f14:	8f 93       	push	r24
     f16:	9f 93       	push	r25
     f18:	af 93       	push	r26
     f1a:	bf 93       	push	r27
     f1c:	ef 93       	push	r30
     f1e:	ff 93       	push	r31
     f20:	60 91 c6 00 	lds	r22, 0x00C6
     f24:	8d ec       	ldi	r24, 0xCD	; 205
     f26:	98 e0       	ldi	r25, 0x08	; 8
     f28:	0b d6       	rcall	.+3094   	; 0x1b40 <ringBufferPush>
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	40 e0       	ldi	r20, 0x00	; 0
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	60 e0       	ldi	r22, 0x00	; 0
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	80 91 22 08 	lds	r24, 0x0822
     f38:	90 91 23 08 	lds	r25, 0x0823
     f3c:	fb d4       	rcall	.+2550   	; 0x1934 <xQueueGenericSendFromISR>
     f3e:	8d ec       	ldi	r24, 0xCD	; 205
     f40:	98 e0       	ldi	r25, 0x08	; 8
     f42:	15 d6       	rcall	.+3114   	; 0x1b6e <ringBufferFull>
     f44:	ff 91       	pop	r31
     f46:	ef 91       	pop	r30
     f48:	bf 91       	pop	r27
     f4a:	af 91       	pop	r26
     f4c:	9f 91       	pop	r25
     f4e:	8f 91       	pop	r24
     f50:	7f 91       	pop	r23
     f52:	6f 91       	pop	r22
     f54:	5f 91       	pop	r21
     f56:	4f 91       	pop	r20
     f58:	3f 91       	pop	r19
     f5a:	2f 91       	pop	r18
     f5c:	0f 90       	pop	r0
     f5e:	0b be       	out	0x3b, r0	; 59
     f60:	0f 90       	pop	r0
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	0f 90       	pop	r0
     f66:	1f 90       	pop	r1
     f68:	18 95       	reti

00000f6a <__vector_37>:
     f6a:	1f 92       	push	r1
     f6c:	0f 92       	push	r0
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	0f 92       	push	r0
     f72:	11 24       	eor	r1, r1
     f74:	0b b6       	in	r0, 0x3b	; 59
     f76:	0f 92       	push	r0
     f78:	2f 93       	push	r18
     f7a:	3f 93       	push	r19
     f7c:	4f 93       	push	r20
     f7e:	5f 93       	push	r21
     f80:	6f 93       	push	r22
     f82:	7f 93       	push	r23
     f84:	8f 93       	push	r24
     f86:	9f 93       	push	r25
     f88:	af 93       	push	r26
     f8a:	bf 93       	push	r27
     f8c:	ef 93       	push	r30
     f8e:	ff 93       	push	r31
     f90:	82 e3       	ldi	r24, 0x32	; 50
     f92:	99 e0       	ldi	r25, 0x09	; 9
     f94:	f3 d5       	rcall	.+3046   	; 0x1b7c <ringBufferNotEmpty>
     f96:	88 23       	and	r24, r24
     f98:	31 f0       	breq	.+12     	; 0xfa6 <__vector_37+0x3c>
     f9a:	82 e3       	ldi	r24, 0x32	; 50
     f9c:	99 e0       	ldi	r25, 0x09	; 9
     f9e:	be d5       	rcall	.+2940   	; 0x1b1c <ringBufferPop>
     fa0:	80 93 ce 00 	sts	0x00CE, r24
     fa4:	0f c0       	rjmp	.+30     	; 0xfc4 <__vector_37+0x5a>
     fa6:	e9 ec       	ldi	r30, 0xC9	; 201
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	8f 7d       	andi	r24, 0xDF	; 223
     fae:	80 83       	st	Z, r24
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	40 e0       	ldi	r20, 0x00	; 0
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	60 e0       	ldi	r22, 0x00	; 0
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	80 91 1a 08 	lds	r24, 0x081A
     fbe:	90 91 1b 08 	lds	r25, 0x081B
     fc2:	b8 d4       	rcall	.+2416   	; 0x1934 <xQueueGenericSendFromISR>
     fc4:	ff 91       	pop	r31
     fc6:	ef 91       	pop	r30
     fc8:	bf 91       	pop	r27
     fca:	af 91       	pop	r26
     fcc:	9f 91       	pop	r25
     fce:	8f 91       	pop	r24
     fd0:	7f 91       	pop	r23
     fd2:	6f 91       	pop	r22
     fd4:	5f 91       	pop	r21
     fd6:	4f 91       	pop	r20
     fd8:	3f 91       	pop	r19
     fda:	2f 91       	pop	r18
     fdc:	0f 90       	pop	r0
     fde:	0b be       	out	0x3b, r0	; 59
     fe0:	0f 90       	pop	r0
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	0f 90       	pop	r0
     fe6:	1f 90       	pop	r1
     fe8:	18 95       	reti

00000fea <__vector_26>:
     fea:	1f 92       	push	r1
     fec:	0f 92       	push	r0
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	0f 92       	push	r0
     ff2:	11 24       	eor	r1, r1
     ff4:	0b b6       	in	r0, 0x3b	; 59
     ff6:	0f 92       	push	r0
     ff8:	2f 93       	push	r18
     ffa:	3f 93       	push	r19
     ffc:	4f 93       	push	r20
     ffe:	5f 93       	push	r21
    1000:	6f 93       	push	r22
    1002:	7f 93       	push	r23
    1004:	8f 93       	push	r24
    1006:	9f 93       	push	r25
    1008:	af 93       	push	r26
    100a:	bf 93       	push	r27
    100c:	ef 93       	push	r30
    100e:	ff 93       	push	r31
    1010:	87 e3       	ldi	r24, 0x37	; 55
    1012:	99 e0       	ldi	r25, 0x09	; 9
    1014:	b3 d5       	rcall	.+2918   	; 0x1b7c <ringBufferNotEmpty>
    1016:	88 23       	and	r24, r24
    1018:	31 f0       	breq	.+12     	; 0x1026 <__vector_26+0x3c>
    101a:	87 e3       	ldi	r24, 0x37	; 55
    101c:	99 e0       	ldi	r25, 0x09	; 9
    101e:	7e d5       	rcall	.+2812   	; 0x1b1c <ringBufferPop>
    1020:	80 93 c6 00 	sts	0x00C6, r24
    1024:	0f c0       	rjmp	.+30     	; 0x1044 <__vector_26+0x5a>
    1026:	e1 ec       	ldi	r30, 0xC1	; 193
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	8f 7d       	andi	r24, 0xDF	; 223
    102e:	80 83       	st	Z, r24
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	40 e0       	ldi	r20, 0x00	; 0
    1034:	50 e0       	ldi	r21, 0x00	; 0
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	80 91 1c 08 	lds	r24, 0x081C
    103e:	90 91 1d 08 	lds	r25, 0x081D
    1042:	78 d4       	rcall	.+2288   	; 0x1934 <xQueueGenericSendFromISR>
    1044:	ff 91       	pop	r31
    1046:	ef 91       	pop	r30
    1048:	bf 91       	pop	r27
    104a:	af 91       	pop	r26
    104c:	9f 91       	pop	r25
    104e:	8f 91       	pop	r24
    1050:	7f 91       	pop	r23
    1052:	6f 91       	pop	r22
    1054:	5f 91       	pop	r21
    1056:	4f 91       	pop	r20
    1058:	3f 91       	pop	r19
    105a:	2f 91       	pop	r18
    105c:	0f 90       	pop	r0
    105e:	0b be       	out	0x3b, r0	; 59
    1060:	0f 90       	pop	r0
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	0f 90       	pop	r0
    1066:	1f 90       	pop	r1
    1068:	18 95       	reti

0000106a <myUSART_USART0_Init>:
    106a:	10 92 c5 00 	sts	0x00C5, r1
    106e:	87 e6       	ldi	r24, 0x67	; 103
    1070:	80 93 c4 00 	sts	0x00C4, r24
    1074:	88 eb       	ldi	r24, 0xB8	; 184
    1076:	80 93 c1 00 	sts	0x00C1, r24
    107a:	86 e0       	ldi	r24, 0x06	; 6
    107c:	80 93 c2 00 	sts	0x00C2, r24
    1080:	40 e2       	ldi	r20, 0x20	; 32
    1082:	62 ef       	ldi	r22, 0xF2	; 242
    1084:	78 e0       	ldi	r23, 0x08	; 8
    1086:	8d ec       	ldi	r24, 0xCD	; 205
    1088:	98 e0       	ldi	r25, 0x08	; 8
    108a:	41 d5       	rcall	.+2690   	; 0x1b0e <ringBufferInit>
    108c:	40 e2       	ldi	r20, 0x20	; 32
    108e:	62 ed       	ldi	r22, 0xD2	; 210
    1090:	78 e0       	ldi	r23, 0x08	; 8
    1092:	87 e3       	ldi	r24, 0x37	; 55
    1094:	99 e0       	ldi	r25, 0x09	; 9
    1096:	3b d5       	rcall	.+2678   	; 0x1b0e <ringBufferInit>
    1098:	43 e0       	ldi	r20, 0x03	; 3
    109a:	60 e0       	ldi	r22, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	5f d3       	rcall	.+1726   	; 0x175e <xQueueGenericCreate>
    10a0:	90 93 21 08 	sts	0x0821, r25
    10a4:	80 93 20 08 	sts	0x0820, r24
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	19 d4       	rcall	.+2098   	; 0x18de <xQueueCreateMutex>
    10ac:	90 93 1d 08 	sts	0x081D, r25
    10b0:	80 93 1c 08 	sts	0x081C, r24
    10b4:	08 95       	ret

000010b6 <myUSART_USART1_Init>:
    10b6:	10 92 cd 00 	sts	0x00CD, r1
    10ba:	87 e6       	ldi	r24, 0x67	; 103
    10bc:	80 93 cc 00 	sts	0x00CC, r24
    10c0:	88 eb       	ldi	r24, 0xB8	; 184
    10c2:	80 93 c9 00 	sts	0x00C9, r24
    10c6:	86 e0       	ldi	r24, 0x06	; 6
    10c8:	80 93 ca 00 	sts	0x00CA, r24
    10cc:	40 e2       	ldi	r20, 0x20	; 32
    10ce:	6d ea       	ldi	r22, 0xAD	; 173
    10d0:	78 e0       	ldi	r23, 0x08	; 8
    10d2:	8c e3       	ldi	r24, 0x3C	; 60
    10d4:	99 e0       	ldi	r25, 0x09	; 9
    10d6:	1b d5       	rcall	.+2614   	; 0x1b0e <ringBufferInit>
    10d8:	40 e2       	ldi	r20, 0x20	; 32
    10da:	62 e1       	ldi	r22, 0x12	; 18
    10dc:	79 e0       	ldi	r23, 0x09	; 9
    10de:	82 e3       	ldi	r24, 0x32	; 50
    10e0:	99 e0       	ldi	r25, 0x09	; 9
    10e2:	15 d5       	rcall	.+2602   	; 0x1b0e <ringBufferInit>
    10e4:	43 e0       	ldi	r20, 0x03	; 3
    10e6:	60 e0       	ldi	r22, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	39 d3       	rcall	.+1650   	; 0x175e <xQueueGenericCreate>
    10ec:	90 93 23 08 	sts	0x0823, r25
    10f0:	80 93 22 08 	sts	0x0822, r24
    10f4:	43 e0       	ldi	r20, 0x03	; 3
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	31 d3       	rcall	.+1634   	; 0x175e <xQueueGenericCreate>
    10fc:	90 93 1f 08 	sts	0x081F, r25
    1100:	80 93 1e 08 	sts	0x081E, r24
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	eb d3       	rcall	.+2006   	; 0x18de <xQueueCreateMutex>
    1108:	90 93 1b 08 	sts	0x081B, r25
    110c:	80 93 1a 08 	sts	0x081A, r24
    1110:	08 95       	ret

00001112 <myUSART_transmitUSART0_c>:
    1112:	cf 93       	push	r28
    1114:	c8 2f       	mov	r28, r24
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	4f ef       	ldi	r20, 0xFF	; 255
    111a:	5f ef       	ldi	r21, 0xFF	; 255
    111c:	60 e0       	ldi	r22, 0x00	; 0
    111e:	70 e0       	ldi	r23, 0x00	; 0
    1120:	80 91 1c 08 	lds	r24, 0x081C
    1124:	90 91 1d 08 	lds	r25, 0x081D
    1128:	3f d4       	rcall	.+2174   	; 0x19a8 <xQueueGenericReceive>
    112a:	87 e3       	ldi	r24, 0x37	; 55
    112c:	99 e0       	ldi	r25, 0x09	; 9
    112e:	1f d5       	rcall	.+2622   	; 0x1b6e <ringBufferFull>
    1130:	81 11       	cpse	r24, r1
    1132:	fb cf       	rjmp	.-10     	; 0x112a <myUSART_transmitUSART0_c+0x18>
    1134:	6c 2f       	mov	r22, r28
    1136:	87 e3       	ldi	r24, 0x37	; 55
    1138:	99 e0       	ldi	r25, 0x09	; 9
    113a:	02 d5       	rcall	.+2564   	; 0x1b40 <ringBufferPush>
    113c:	e1 ec       	ldi	r30, 0xC1	; 193
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	80 62       	ori	r24, 0x20	; 32
    1144:	80 83       	st	Z, r24
    1146:	e0 ec       	ldi	r30, 0xC0	; 192
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	80 64       	ori	r24, 0x40	; 64
    114e:	80 83       	st	Z, r24
    1150:	cf 91       	pop	r28
    1152:	08 95       	ret

00001154 <myUSART_transmitUSART1_c>:
    1154:	cf 93       	push	r28
    1156:	c8 2f       	mov	r28, r24
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	4f ef       	ldi	r20, 0xFF	; 255
    115c:	5f ef       	ldi	r21, 0xFF	; 255
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	80 91 1a 08 	lds	r24, 0x081A
    1166:	90 91 1b 08 	lds	r25, 0x081B
    116a:	1e d4       	rcall	.+2108   	; 0x19a8 <xQueueGenericReceive>
    116c:	82 e3       	ldi	r24, 0x32	; 50
    116e:	99 e0       	ldi	r25, 0x09	; 9
    1170:	fe d4       	rcall	.+2556   	; 0x1b6e <ringBufferFull>
    1172:	81 11       	cpse	r24, r1
    1174:	fb cf       	rjmp	.-10     	; 0x116c <myUSART_transmitUSART1_c+0x18>
    1176:	6c 2f       	mov	r22, r28
    1178:	82 e3       	ldi	r24, 0x32	; 50
    117a:	99 e0       	ldi	r25, 0x09	; 9
    117c:	e1 d4       	rcall	.+2498   	; 0x1b40 <ringBufferPush>
    117e:	e9 ec       	ldi	r30, 0xC9	; 201
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	80 62       	ori	r24, 0x20	; 32
    1186:	80 83       	st	Z, r24
    1188:	e8 ec       	ldi	r30, 0xC8	; 200
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	80 64       	ori	r24, 0x40	; 64
    1190:	80 83       	st	Z, r24
    1192:	cf 91       	pop	r28
    1194:	08 95       	ret

00001196 <myUSART_transmitUSART1>:
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	ec 01       	movw	r28, r24
    119c:	88 81       	ld	r24, Y
    119e:	88 23       	and	r24, r24
    11a0:	29 f0       	breq	.+10     	; 0x11ac <myUSART_transmitUSART1+0x16>
    11a2:	21 96       	adiw	r28, 0x01	; 1
    11a4:	d7 df       	rcall	.-82     	; 0x1154 <myUSART_transmitUSART1_c>
    11a6:	89 91       	ld	r24, Y+
    11a8:	81 11       	cpse	r24, r1
    11aa:	fc cf       	rjmp	.-8      	; 0x11a4 <myUSART_transmitUSART1+0xe>
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	08 95       	ret

000011b2 <myUSART_transmitUSART0>:
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	ec 01       	movw	r28, r24
    11b8:	88 81       	ld	r24, Y
    11ba:	88 23       	and	r24, r24
    11bc:	29 f0       	breq	.+10     	; 0x11c8 <myUSART_transmitUSART0+0x16>
    11be:	21 96       	adiw	r28, 0x01	; 1
    11c0:	a8 df       	rcall	.-176    	; 0x1112 <myUSART_transmitUSART0_c>
    11c2:	89 91       	ld	r24, Y+
    11c4:	81 11       	cpse	r24, r1
    11c6:	fc cf       	rjmp	.-8      	; 0x11c0 <myUSART_transmitUSART0+0xe>
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	08 95       	ret

000011ce <myUSART_receiveUSART1>:
    11ce:	cf 93       	push	r28
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	4f ef       	ldi	r20, 0xFF	; 255
    11d4:	5f ef       	ldi	r21, 0xFF	; 255
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	80 91 22 08 	lds	r24, 0x0822
    11de:	90 91 23 08 	lds	r25, 0x0823
    11e2:	e2 d3       	rcall	.+1988   	; 0x19a8 <xQueueGenericReceive>
    11e4:	8c e3       	ldi	r24, 0x3C	; 60
    11e6:	99 e0       	ldi	r25, 0x09	; 9
    11e8:	99 d4       	rcall	.+2354   	; 0x1b1c <ringBufferPop>
    11ea:	c8 2f       	mov	r28, r24
    11ec:	8c e3       	ldi	r24, 0x3C	; 60
    11ee:	99 e0       	ldi	r25, 0x09	; 9
    11f0:	c5 d4       	rcall	.+2442   	; 0x1b7c <ringBufferNotEmpty>
    11f2:	88 23       	and	r24, r24
    11f4:	51 f0       	breq	.+20     	; 0x120a <myUSART_receiveUSART1+0x3c>
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	40 e0       	ldi	r20, 0x00	; 0
    11fa:	50 e0       	ldi	r21, 0x00	; 0
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	80 91 22 08 	lds	r24, 0x0822
    1204:	90 91 23 08 	lds	r25, 0x0823
    1208:	d7 d2       	rcall	.+1454   	; 0x17b8 <xQueueGenericSend>
    120a:	8c 2f       	mov	r24, r28
    120c:	cf 91       	pop	r28
    120e:	08 95       	ret

00001210 <myUSART_startHandShake>:

// 0 if fail, 1 success
char myUSART_startHandShake()
{
	
	myUSART_transmitUSART1_c(HANDSHAKE_START);
    1210:	86 e1       	ldi	r24, 0x16	; 22
    1212:	a0 df       	rcall	.-192    	; 0x1154 <myUSART_transmitUSART1_c>

	if( xSemaphoreTake( semaUsart1HandShake, ( TickType_t ) HANDSHAKE_TIMEOUT ) == pdTRUE )
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	44 ef       	ldi	r20, 0xF4	; 244
    1218:	51 e0       	ldi	r21, 0x01	; 1
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	80 91 1e 08 	lds	r24, 0x081E
    1222:	90 91 1f 08 	lds	r25, 0x081F
    1226:	c0 d3       	rcall	.+1920   	; 0x19a8 <xQueueGenericReceive>
    1228:	81 30       	cpi	r24, 0x01	; 1
    122a:	21 f4       	brne	.+8      	; 0x1234 <myUSART_startHandShake+0x24>
	{	
		// got the semaphore
		myUSART_transmitUSART1_c(HANDSHAKE_FIN);
    122c:	82 e0       	ldi	r24, 0x02	; 2
    122e:	92 df       	rcall	.-220    	; 0x1154 <myUSART_transmitUSART1_c>
		return 1;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	08 95       	ret
	}
	else
	{
		return 0;
    1234:	80 e0       	ldi	r24, 0x00	; 0
	}

}
    1236:	08 95       	ret

00001238 <myUSART_completeHandShake>:


void myUSART_completeHandShake()
{
	xSemaphoreGive(semaUsart1HandShake);	
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	40 e0       	ldi	r20, 0x00	; 0
    123c:	50 e0       	ldi	r21, 0x00	; 0
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	80 91 1e 08 	lds	r24, 0x081E
    1246:	90 91 1f 08 	lds	r25, 0x081F
    124a:	b6 c2       	rjmp	.+1388   	; 0x17b8 <xQueueGenericSend>
    124c:	08 95       	ret

0000124e <myUSART_receiveHandShakeAck>:
}

char myUSART_receiveHandShakeAck(unsigned char message)
{
	return (message == HANDSHAKE_ACK);
    124e:	91 e0       	ldi	r25, 0x01	; 1
    1250:	85 30       	cpi	r24, 0x05	; 5
    1252:	09 f0       	breq	.+2      	; 0x1256 <myUSART_receiveHandShakeAck+0x8>
    1254:	90 e0       	ldi	r25, 0x00	; 0
}
    1256:	89 2f       	mov	r24, r25
    1258:	08 95       	ret

0000125a <myUSART_receiveHandShakeStart>:

char myUSART_receiveHandShakeStart(unsigned char message)
{
	return (message == HANDSHAKE_START);
    125a:	91 e0       	ldi	r25, 0x01	; 1
    125c:	86 31       	cpi	r24, 0x16	; 22
    125e:	09 f0       	breq	.+2      	; 0x1262 <myUSART_receiveHandShakeStart+0x8>
    1260:	90 e0       	ldi	r25, 0x00	; 0
}
    1262:	89 2f       	mov	r24, r25
    1264:	08 95       	ret

00001266 <myUSART_receiveHandShakeFin>:


char myUSART_receiveHandShakeFin(unsigned char message)
{
	return (message == HANDSHAKE_FIN);
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	82 30       	cpi	r24, 0x02	; 2
    126a:	09 f0       	breq	.+2      	; 0x126e <myUSART_receiveHandShakeFin+0x8>
    126c:	90 e0       	ldi	r25, 0x00	; 0
}
    126e:	89 2f       	mov	r24, r25
    1270:	08 95       	ret

00001272 <myUSART_receiveMessageACK>:


char myUSART_receiveMessageACK(unsigned char message)
{
	return (message == MESSAGE_ACK);
    1272:	91 e0       	ldi	r25, 0x01	; 1
    1274:	86 30       	cpi	r24, 0x06	; 6
    1276:	09 f0       	breq	.+2      	; 0x127a <myUSART_receiveMessageACK+0x8>
    1278:	90 e0       	ldi	r25, 0x00	; 0
}
    127a:	89 2f       	mov	r24, r25
    127c:	08 95       	ret

0000127e <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    127e:	31 e1       	ldi	r19, 0x11	; 17
    1280:	fc 01       	movw	r30, r24
    1282:	30 83       	st	Z, r19
    1284:	31 97       	sbiw	r30, 0x01	; 1
    1286:	22 e2       	ldi	r18, 0x22	; 34
    1288:	20 83       	st	Z, r18
    128a:	31 97       	sbiw	r30, 0x01	; 1
    128c:	a3 e3       	ldi	r26, 0x33	; 51
    128e:	a0 83       	st	Z, r26
    1290:	31 97       	sbiw	r30, 0x01	; 1
    1292:	60 83       	st	Z, r22
    1294:	31 97       	sbiw	r30, 0x01	; 1
    1296:	70 83       	st	Z, r23
    1298:	31 97       	sbiw	r30, 0x01	; 1
    129a:	10 82       	st	Z, r1
    129c:	31 97       	sbiw	r30, 0x01	; 1
    129e:	10 82       	st	Z, r1
    12a0:	31 97       	sbiw	r30, 0x01	; 1
    12a2:	60 e8       	ldi	r22, 0x80	; 128
    12a4:	60 83       	st	Z, r22
    12a6:	31 97       	sbiw	r30, 0x01	; 1
    12a8:	10 82       	st	Z, r1
    12aa:	31 97       	sbiw	r30, 0x01	; 1
    12ac:	10 82       	st	Z, r1
    12ae:	31 97       	sbiw	r30, 0x01	; 1
    12b0:	10 82       	st	Z, r1
    12b2:	31 97       	sbiw	r30, 0x01	; 1
    12b4:	62 e0       	ldi	r22, 0x02	; 2
    12b6:	60 83       	st	Z, r22
    12b8:	31 97       	sbiw	r30, 0x01	; 1
    12ba:	63 e0       	ldi	r22, 0x03	; 3
    12bc:	60 83       	st	Z, r22
    12be:	31 97       	sbiw	r30, 0x01	; 1
    12c0:	64 e0       	ldi	r22, 0x04	; 4
    12c2:	60 83       	st	Z, r22
    12c4:	31 97       	sbiw	r30, 0x01	; 1
    12c6:	65 e0       	ldi	r22, 0x05	; 5
    12c8:	60 83       	st	Z, r22
    12ca:	31 97       	sbiw	r30, 0x01	; 1
    12cc:	66 e0       	ldi	r22, 0x06	; 6
    12ce:	60 83       	st	Z, r22
    12d0:	31 97       	sbiw	r30, 0x01	; 1
    12d2:	67 e0       	ldi	r22, 0x07	; 7
    12d4:	60 83       	st	Z, r22
    12d6:	31 97       	sbiw	r30, 0x01	; 1
    12d8:	68 e0       	ldi	r22, 0x08	; 8
    12da:	60 83       	st	Z, r22
    12dc:	31 97       	sbiw	r30, 0x01	; 1
    12de:	69 e0       	ldi	r22, 0x09	; 9
    12e0:	60 83       	st	Z, r22
    12e2:	31 97       	sbiw	r30, 0x01	; 1
    12e4:	60 e1       	ldi	r22, 0x10	; 16
    12e6:	60 83       	st	Z, r22
    12e8:	31 97       	sbiw	r30, 0x01	; 1
    12ea:	30 83       	st	Z, r19
    12ec:	31 97       	sbiw	r30, 0x01	; 1
    12ee:	32 e1       	ldi	r19, 0x12	; 18
    12f0:	30 83       	st	Z, r19
    12f2:	31 97       	sbiw	r30, 0x01	; 1
    12f4:	33 e1       	ldi	r19, 0x13	; 19
    12f6:	30 83       	st	Z, r19
    12f8:	31 97       	sbiw	r30, 0x01	; 1
    12fa:	34 e1       	ldi	r19, 0x14	; 20
    12fc:	30 83       	st	Z, r19
    12fe:	31 97       	sbiw	r30, 0x01	; 1
    1300:	35 e1       	ldi	r19, 0x15	; 21
    1302:	30 83       	st	Z, r19
    1304:	31 97       	sbiw	r30, 0x01	; 1
    1306:	36 e1       	ldi	r19, 0x16	; 22
    1308:	30 83       	st	Z, r19
    130a:	31 97       	sbiw	r30, 0x01	; 1
    130c:	37 e1       	ldi	r19, 0x17	; 23
    130e:	30 83       	st	Z, r19
    1310:	31 97       	sbiw	r30, 0x01	; 1
    1312:	38 e1       	ldi	r19, 0x18	; 24
    1314:	30 83       	st	Z, r19
    1316:	31 97       	sbiw	r30, 0x01	; 1
    1318:	39 e1       	ldi	r19, 0x19	; 25
    131a:	30 83       	st	Z, r19
    131c:	31 97       	sbiw	r30, 0x01	; 1
    131e:	30 e2       	ldi	r19, 0x20	; 32
    1320:	30 83       	st	Z, r19
    1322:	31 97       	sbiw	r30, 0x01	; 1
    1324:	31 e2       	ldi	r19, 0x21	; 33
    1326:	30 83       	st	Z, r19
    1328:	31 97       	sbiw	r30, 0x01	; 1
    132a:	20 83       	st	Z, r18
    132c:	31 97       	sbiw	r30, 0x01	; 1
    132e:	23 e2       	ldi	r18, 0x23	; 35
    1330:	20 83       	st	Z, r18
    1332:	31 97       	sbiw	r30, 0x01	; 1
    1334:	40 83       	st	Z, r20
    1336:	31 97       	sbiw	r30, 0x01	; 1
    1338:	50 83       	st	Z, r21
    133a:	31 97       	sbiw	r30, 0x01	; 1
    133c:	26 e2       	ldi	r18, 0x26	; 38
    133e:	20 83       	st	Z, r18
    1340:	31 97       	sbiw	r30, 0x01	; 1
    1342:	27 e2       	ldi	r18, 0x27	; 39
    1344:	20 83       	st	Z, r18
    1346:	31 97       	sbiw	r30, 0x01	; 1
    1348:	28 e2       	ldi	r18, 0x28	; 40
    134a:	20 83       	st	Z, r18
    134c:	31 97       	sbiw	r30, 0x01	; 1
    134e:	29 e2       	ldi	r18, 0x29	; 41
    1350:	20 83       	st	Z, r18
    1352:	31 97       	sbiw	r30, 0x01	; 1
    1354:	20 e3       	ldi	r18, 0x30	; 48
    1356:	20 83       	st	Z, r18
    1358:	31 97       	sbiw	r30, 0x01	; 1
    135a:	21 e3       	ldi	r18, 0x31	; 49
    135c:	20 83       	st	Z, r18
    135e:	89 97       	sbiw	r24, 0x29	; 41
    1360:	08 95       	ret

00001362 <xPortStartScheduler>:
    1362:	82 e0       	ldi	r24, 0x02	; 2
    1364:	84 bd       	out	0x24, r24	; 36
    1366:	16 bc       	out	0x26, r1	; 38
    1368:	80 e3       	ldi	r24, 0x30	; 48
    136a:	87 bd       	out	0x27, r24	; 39
    136c:	ee e6       	ldi	r30, 0x6E	; 110
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	82 60       	ori	r24, 0x02	; 2
    1374:	80 83       	st	Z, r24
    1376:	83 e0       	ldi	r24, 0x03	; 3
    1378:	85 bd       	out	0x25, r24	; 37
    137a:	a0 91 8d 08 	lds	r26, 0x088D
    137e:	b0 91 8e 08 	lds	r27, 0x088E
    1382:	cd 91       	ld	r28, X+
    1384:	cd bf       	out	0x3d, r28	; 61
    1386:	dd 91       	ld	r29, X+
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	ff 91       	pop	r31
    138c:	ef 91       	pop	r30
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	bf 91       	pop	r27
    1394:	af 91       	pop	r26
    1396:	9f 91       	pop	r25
    1398:	8f 91       	pop	r24
    139a:	7f 91       	pop	r23
    139c:	6f 91       	pop	r22
    139e:	5f 91       	pop	r21
    13a0:	4f 91       	pop	r20
    13a2:	3f 91       	pop	r19
    13a4:	2f 91       	pop	r18
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    13aa:	ff 90       	pop	r15
    13ac:	ef 90       	pop	r14
    13ae:	df 90       	pop	r13
    13b0:	cf 90       	pop	r12
    13b2:	bf 90       	pop	r11
    13b4:	af 90       	pop	r10
    13b6:	9f 90       	pop	r9
    13b8:	8f 90       	pop	r8
    13ba:	7f 90       	pop	r7
    13bc:	6f 90       	pop	r6
    13be:	5f 90       	pop	r5
    13c0:	4f 90       	pop	r4
    13c2:	3f 90       	pop	r3
    13c4:	2f 90       	pop	r2
    13c6:	1f 90       	pop	r1
    13c8:	0f 90       	pop	r0
    13ca:	0c be       	out	0x3c, r0	; 60
    13cc:	0f 90       	pop	r0
    13ce:	0b be       	out	0x3b, r0	; 59
    13d0:	0f 90       	pop	r0
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	0f 90       	pop	r0
    13d6:	08 95       	ret
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	08 95       	ret

000013dc <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    13dc:	0f 92       	push	r0
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	f8 94       	cli
    13e2:	0f 92       	push	r0
    13e4:	0b b6       	in	r0, 0x3b	; 59
    13e6:	0f 92       	push	r0
    13e8:	0c b6       	in	r0, 0x3c	; 60
    13ea:	0f 92       	push	r0
    13ec:	1f 92       	push	r1
    13ee:	11 24       	eor	r1, r1
    13f0:	2f 92       	push	r2
    13f2:	3f 92       	push	r3
    13f4:	4f 92       	push	r4
    13f6:	5f 92       	push	r5
    13f8:	6f 92       	push	r6
    13fa:	7f 92       	push	r7
    13fc:	8f 92       	push	r8
    13fe:	9f 92       	push	r9
    1400:	af 92       	push	r10
    1402:	bf 92       	push	r11
    1404:	cf 92       	push	r12
    1406:	df 92       	push	r13
    1408:	ef 92       	push	r14
    140a:	ff 92       	push	r15
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
    1410:	2f 93       	push	r18
    1412:	3f 93       	push	r19
    1414:	4f 93       	push	r20
    1416:	5f 93       	push	r21
    1418:	6f 93       	push	r22
    141a:	7f 93       	push	r23
    141c:	8f 93       	push	r24
    141e:	9f 93       	push	r25
    1420:	af 93       	push	r26
    1422:	bf 93       	push	r27
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	ef 93       	push	r30
    142a:	ff 93       	push	r31
    142c:	a0 91 8d 08 	lds	r26, 0x088D
    1430:	b0 91 8e 08 	lds	r27, 0x088E
    1434:	0d b6       	in	r0, 0x3d	; 61
    1436:	0d 92       	st	X+, r0
    1438:	0e b6       	in	r0, 0x3e	; 62
    143a:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    143c:	22 d7       	rcall	.+3652   	; 0x2282 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    143e:	a0 91 8d 08 	lds	r26, 0x088D
    1442:	b0 91 8e 08 	lds	r27, 0x088E
    1446:	cd 91       	ld	r28, X+
    1448:	cd bf       	out	0x3d, r28	; 61
    144a:	dd 91       	ld	r29, X+
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	ff 91       	pop	r31
    1450:	ef 91       	pop	r30
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	bf 91       	pop	r27
    1458:	af 91       	pop	r26
    145a:	9f 91       	pop	r25
    145c:	8f 91       	pop	r24
    145e:	7f 91       	pop	r23
    1460:	6f 91       	pop	r22
    1462:	5f 91       	pop	r21
    1464:	4f 91       	pop	r20
    1466:	3f 91       	pop	r19
    1468:	2f 91       	pop	r18
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	ff 90       	pop	r15
    1470:	ef 90       	pop	r14
    1472:	df 90       	pop	r13
    1474:	cf 90       	pop	r12
    1476:	bf 90       	pop	r11
    1478:	af 90       	pop	r10
    147a:	9f 90       	pop	r9
    147c:	8f 90       	pop	r8
    147e:	7f 90       	pop	r7
    1480:	6f 90       	pop	r6
    1482:	5f 90       	pop	r5
    1484:	4f 90       	pop	r4
    1486:	3f 90       	pop	r3
    1488:	2f 90       	pop	r2
    148a:	1f 90       	pop	r1
    148c:	0f 90       	pop	r0
    148e:	0c be       	out	0x3c, r0	; 60
    1490:	0f 90       	pop	r0
    1492:	0b be       	out	0x3b, r0	; 59
    1494:	0f 90       	pop	r0
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	0f 90       	pop	r0

	asm volatile ( "ret" );
    149a:	08 95       	ret

0000149c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    149c:	0f 92       	push	r0
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	f8 94       	cli
    14a2:	0f 92       	push	r0
    14a4:	0b b6       	in	r0, 0x3b	; 59
    14a6:	0f 92       	push	r0
    14a8:	0c b6       	in	r0, 0x3c	; 60
    14aa:	0f 92       	push	r0
    14ac:	1f 92       	push	r1
    14ae:	11 24       	eor	r1, r1
    14b0:	2f 92       	push	r2
    14b2:	3f 92       	push	r3
    14b4:	4f 92       	push	r4
    14b6:	5f 92       	push	r5
    14b8:	6f 92       	push	r6
    14ba:	7f 92       	push	r7
    14bc:	8f 92       	push	r8
    14be:	9f 92       	push	r9
    14c0:	af 92       	push	r10
    14c2:	bf 92       	push	r11
    14c4:	cf 92       	push	r12
    14c6:	df 92       	push	r13
    14c8:	ef 92       	push	r14
    14ca:	ff 92       	push	r15
    14cc:	0f 93       	push	r16
    14ce:	1f 93       	push	r17
    14d0:	2f 93       	push	r18
    14d2:	3f 93       	push	r19
    14d4:	4f 93       	push	r20
    14d6:	5f 93       	push	r21
    14d8:	6f 93       	push	r22
    14da:	7f 93       	push	r23
    14dc:	8f 93       	push	r24
    14de:	9f 93       	push	r25
    14e0:	af 93       	push	r26
    14e2:	bf 93       	push	r27
    14e4:	cf 93       	push	r28
    14e6:	df 93       	push	r29
    14e8:	ef 93       	push	r30
    14ea:	ff 93       	push	r31
    14ec:	a0 91 8d 08 	lds	r26, 0x088D
    14f0:	b0 91 8e 08 	lds	r27, 0x088E
    14f4:	0d b6       	in	r0, 0x3d	; 61
    14f6:	0d 92       	st	X+, r0
    14f8:	0e b6       	in	r0, 0x3e	; 62
    14fa:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    14fc:	f0 d4       	rcall	.+2528   	; 0x1ede <xTaskIncrementTick>
    14fe:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    1500:	c0 d6       	rcall	.+3456   	; 0x2282 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    1502:	a0 91 8d 08 	lds	r26, 0x088D
    1506:	b0 91 8e 08 	lds	r27, 0x088E
    150a:	cd 91       	ld	r28, X+
    150c:	cd bf       	out	0x3d, r28	; 61
    150e:	dd 91       	ld	r29, X+
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	ff 91       	pop	r31
    1514:	ef 91       	pop	r30
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	bf 91       	pop	r27
    151c:	af 91       	pop	r26
    151e:	9f 91       	pop	r25
    1520:	8f 91       	pop	r24
    1522:	7f 91       	pop	r23
    1524:	6f 91       	pop	r22
    1526:	5f 91       	pop	r21
    1528:	4f 91       	pop	r20
    152a:	3f 91       	pop	r19
    152c:	2f 91       	pop	r18
    152e:	1f 91       	pop	r17
    1530:	0f 91       	pop	r16
    1532:	ff 90       	pop	r15
    1534:	ef 90       	pop	r14
    1536:	df 90       	pop	r13
    1538:	cf 90       	pop	r12
    153a:	bf 90       	pop	r11
    153c:	af 90       	pop	r10
    153e:	9f 90       	pop	r9
    1540:	8f 90       	pop	r8
    1542:	7f 90       	pop	r7
    1544:	6f 90       	pop	r6
    1546:	5f 90       	pop	r5
    1548:	4f 90       	pop	r4
    154a:	3f 90       	pop	r3
    154c:	2f 90       	pop	r2
    154e:	1f 90       	pop	r1
    1550:	0f 90       	pop	r0
    1552:	0c be       	out	0x3c, r0	; 60
    1554:	0f 90       	pop	r0
    1556:	0b be       	out	0x3b, r0	; 59
    1558:	0f 90       	pop	r0
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	0f 90       	pop	r0

	asm volatile ( "ret" );
    155e:	08 95       	ret

00001560 <__vector_21>:
	 * the context is saved at the start of vPortYieldFromTick().  The tick
	 * count is incremented after the context is saved.
	 */
	 ISR(TIMER0_COMPA_vect, ISR_NAKED)
	 {
		 vPortYieldFromTick();
    1560:	9d df       	rcall	.-198    	; 0x149c <vPortYieldFromTick>
		 asm volatile ("reti");
    1562:	18 95       	reti

00001564 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    1564:	1f 93       	push	r17
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	ec 01       	movw	r28, r24
    156c:	14 2f       	mov	r17, r20
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    156e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1570:	81 11       	cpse	r24, r1
    1572:	0c c0       	rjmp	.+24     	; 0x158c <prvCopyDataToQueue+0x28>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1574:	88 81       	ld	r24, Y
    1576:	99 81       	ldd	r25, Y+1	; 0x01
    1578:	89 2b       	or	r24, r25
    157a:	09 f0       	breq	.+2      	; 0x157e <prvCopyDataToQueue+0x1a>
    157c:	47 c0       	rjmp	.+142    	; 0x160c <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	9b 81       	ldd	r25, Y+3	; 0x03
    1582:	0e 94 03 13 	call	0x2606	; 0x2606 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    1586:	1b 82       	std	Y+3, r1	; 0x03
    1588:	1a 82       	std	Y+2, r1	; 0x02
    158a:	47 c0       	rjmp	.+142    	; 0x161a <prvCopyDataToQueue+0xb6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    158c:	41 11       	cpse	r20, r1
    158e:	18 c0       	rjmp	.+48     	; 0x15c0 <prvCopyDataToQueue+0x5c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    1590:	48 2f       	mov	r20, r24
    1592:	50 e0       	ldi	r21, 0x00	; 0
    1594:	8c 81       	ldd	r24, Y+4	; 0x04
    1596:	9d 81       	ldd	r25, Y+5	; 0x05
    1598:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    159c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    159e:	8c 81       	ldd	r24, Y+4	; 0x04
    15a0:	9d 81       	ldd	r25, Y+5	; 0x05
    15a2:	82 0f       	add	r24, r18
    15a4:	91 1d       	adc	r25, r1
    15a6:	9d 83       	std	Y+5, r25	; 0x05
    15a8:	8c 83       	std	Y+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    15aa:	2a 81       	ldd	r18, Y+2	; 0x02
    15ac:	3b 81       	ldd	r19, Y+3	; 0x03
    15ae:	82 17       	cp	r24, r18
    15b0:	93 07       	cpc	r25, r19
    15b2:	70 f1       	brcs	.+92     	; 0x1610 <prvCopyDataToQueue+0xac>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    15b4:	88 81       	ld	r24, Y
    15b6:	99 81       	ldd	r25, Y+1	; 0x01
    15b8:	9d 83       	std	Y+5, r25	; 0x05
    15ba:	8c 83       	std	Y+4, r24	; 0x04
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	2d c0       	rjmp	.+90     	; 0x161a <prvCopyDataToQueue+0xb6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    15c0:	48 2f       	mov	r20, r24
    15c2:	50 e0       	ldi	r21, 0x00	; 0
    15c4:	8e 81       	ldd	r24, Y+6	; 0x06
    15c6:	9f 81       	ldd	r25, Y+7	; 0x07
    15c8:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    15cc:	2c 8d       	ldd	r18, Y+28	; 0x1c
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	31 95       	neg	r19
    15d2:	21 95       	neg	r18
    15d4:	31 09       	sbc	r19, r1
    15d6:	8e 81       	ldd	r24, Y+6	; 0x06
    15d8:	9f 81       	ldd	r25, Y+7	; 0x07
    15da:	82 0f       	add	r24, r18
    15dc:	93 1f       	adc	r25, r19
    15de:	9f 83       	std	Y+7, r25	; 0x07
    15e0:	8e 83       	std	Y+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    15e2:	68 81       	ld	r22, Y
    15e4:	79 81       	ldd	r23, Y+1	; 0x01
    15e6:	86 17       	cp	r24, r22
    15e8:	97 07       	cpc	r25, r23
    15ea:	30 f4       	brcc	.+12     	; 0x15f8 <prvCopyDataToQueue+0x94>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	9b 81       	ldd	r25, Y+3	; 0x03
    15f0:	28 0f       	add	r18, r24
    15f2:	39 1f       	adc	r19, r25
    15f4:	3f 83       	std	Y+7, r19	; 0x07
    15f6:	2e 83       	std	Y+6, r18	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    15f8:	12 30       	cpi	r17, 0x02	; 2
    15fa:	61 f4       	brne	.+24     	; 0x1614 <prvCopyDataToQueue+0xb0>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    15fc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15fe:	88 23       	and	r24, r24
    1600:	59 f0       	breq	.+22     	; 0x1618 <prvCopyDataToQueue+0xb4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
    1602:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1604:	81 50       	subi	r24, 0x01	; 1
    1606:	8a 8f       	std	Y+26, r24	; 0x1a
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	07 c0       	rjmp	.+14     	; 0x161a <prvCopyDataToQueue+0xb6>
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	05 c0       	rjmp	.+10     	; 0x161a <prvCopyDataToQueue+0xb6>
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	03 c0       	rjmp	.+6      	; 0x161a <prvCopyDataToQueue+0xb6>
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	01 c0       	rjmp	.+2      	; 0x161a <prvCopyDataToQueue+0xb6>
    1618:	80 e0       	ldi	r24, 0x00	; 0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    161a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    161c:	9f 5f       	subi	r25, 0xFF	; 255
    161e:	9a 8f       	std	Y+26, r25	; 0x1a

	return xReturn;
}
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	1f 91       	pop	r17
    1626:	08 95       	ret

00001628 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    1628:	fc 01       	movw	r30, r24
    162a:	cb 01       	movw	r24, r22
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    162c:	44 8d       	ldd	r20, Z+28	; 0x1c
    162e:	44 23       	and	r20, r20
    1630:	a1 f0       	breq	.+40     	; 0x165a <prvCopyDataFromQueue+0x32>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    1632:	50 e0       	ldi	r21, 0x00	; 0
    1634:	26 81       	ldd	r18, Z+6	; 0x06
    1636:	37 81       	ldd	r19, Z+7	; 0x07
    1638:	24 0f       	add	r18, r20
    163a:	35 1f       	adc	r19, r21
    163c:	37 83       	std	Z+7, r19	; 0x07
    163e:	26 83       	std	Z+6, r18	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    1640:	62 81       	ldd	r22, Z+2	; 0x02
    1642:	73 81       	ldd	r23, Z+3	; 0x03
    1644:	26 17       	cp	r18, r22
    1646:	37 07       	cpc	r19, r23
    1648:	20 f0       	brcs	.+8      	; 0x1652 <prvCopyDataFromQueue+0x2a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    164a:	20 81       	ld	r18, Z
    164c:	31 81       	ldd	r19, Z+1	; 0x01
    164e:	37 83       	std	Z+7, r19	; 0x07
    1650:	26 83       	std	Z+6, r18	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    1652:	66 81       	ldd	r22, Z+6	; 0x06
    1654:	77 81       	ldd	r23, Z+7	; 0x07
    1656:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <memcpy>
    165a:	08 95       	ret

0000165c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    165c:	0f 93       	push	r16
    165e:	1f 93       	push	r17
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
    1664:	ec 01       	movw	r28, r24

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1666:	0f b6       	in	r0, 0x3f	; 63
    1668:	f8 94       	cli
    166a:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    166c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    166e:	18 16       	cp	r1, r24
    1670:	a4 f4       	brge	.+40     	; 0x169a <prvUnlockQueue+0x3e>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1672:	89 89       	ldd	r24, Y+17	; 0x11
    1674:	88 23       	and	r24, r24
    1676:	89 f0       	breq	.+34     	; 0x169a <prvUnlockQueue+0x3e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1678:	8e 01       	movw	r16, r28
    167a:	0f 5e       	subi	r16, 0xEF	; 239
    167c:	1f 4f       	sbci	r17, 0xFF	; 255
    167e:	03 c0       	rjmp	.+6      	; 0x1686 <prvUnlockQueue+0x2a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1680:	89 89       	ldd	r24, Y+17	; 0x11
    1682:	88 23       	and	r24, r24
    1684:	51 f0       	breq	.+20     	; 0x169a <prvUnlockQueue+0x3e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1686:	c8 01       	movw	r24, r16
    1688:	d1 d6       	rcall	.+3490   	; 0x242c <xTaskRemoveFromEventList>
    168a:	81 11       	cpse	r24, r1
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    168c:	5a d7       	rcall	.+3764   	; 0x2542 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    168e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1690:	81 50       	subi	r24, 0x01	; 1
    1692:	8e 8f       	std	Y+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    1694:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1696:	18 16       	cp	r1, r24
    1698:	9c f3       	brlt	.-26     	; 0x1680 <prvUnlockQueue+0x24>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    169a:	8f ef       	ldi	r24, 0xFF	; 255
    169c:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    169e:	0f 90       	pop	r0
    16a0:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	f8 94       	cli
    16a6:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    16a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16aa:	18 16       	cp	r1, r24
    16ac:	a4 f4       	brge	.+40     	; 0x16d6 <prvUnlockQueue+0x7a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    16ae:	88 85       	ldd	r24, Y+8	; 0x08
    16b0:	88 23       	and	r24, r24
    16b2:	89 f0       	breq	.+34     	; 0x16d6 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    16b4:	8e 01       	movw	r16, r28
    16b6:	08 5f       	subi	r16, 0xF8	; 248
    16b8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ba:	03 c0       	rjmp	.+6      	; 0x16c2 <prvUnlockQueue+0x66>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    16bc:	88 85       	ldd	r24, Y+8	; 0x08
    16be:	88 23       	and	r24, r24
    16c0:	51 f0       	breq	.+20     	; 0x16d6 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    16c2:	c8 01       	movw	r24, r16
    16c4:	b3 d6       	rcall	.+3430   	; 0x242c <xTaskRemoveFromEventList>
    16c6:	81 11       	cpse	r24, r1
				{
					vTaskMissedYield();
    16c8:	3c d7       	rcall	.+3704   	; 0x2542 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    16ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16cc:	81 50       	subi	r24, 0x01	; 1
    16ce:	8d 8f       	std	Y+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    16d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16d2:	18 16       	cp	r1, r24
    16d4:	9c f3       	brlt	.-26     	; 0x16bc <prvUnlockQueue+0x60>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    16d6:	8f ef       	ldi	r24, 0xFF	; 255
    16d8:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    16da:	0f 90       	pop	r0
    16dc:	0f be       	out	0x3f, r0	; 63
}
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	1f 91       	pop	r17
    16e4:	0f 91       	pop	r16
    16e6:	08 95       	ret

000016e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	ec 01       	movw	r28, r24
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    16f4:	88 81       	ld	r24, Y
    16f6:	99 81       	ldd	r25, Y+1	; 0x01
    16f8:	2c 8d       	ldd	r18, Y+28	; 0x1c
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    16fe:	72 9f       	mul	r23, r18
    1700:	a0 01       	movw	r20, r0
    1702:	73 9f       	mul	r23, r19
    1704:	50 0d       	add	r21, r0
    1706:	11 24       	eor	r1, r1
    1708:	fc 01       	movw	r30, r24
    170a:	e4 0f       	add	r30, r20
    170c:	f5 1f       	adc	r31, r21
    170e:	fb 83       	std	Y+3, r31	; 0x03
    1710:	ea 83       	std	Y+2, r30	; 0x02
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1712:	1a 8e       	std	Y+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1714:	9d 83       	std	Y+5, r25	; 0x05
    1716:	8c 83       	std	Y+4, r24	; 0x04
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1718:	42 1b       	sub	r20, r18
    171a:	53 0b       	sbc	r21, r19
    171c:	84 0f       	add	r24, r20
    171e:	95 1f       	adc	r25, r21
    1720:	9f 83       	std	Y+7, r25	; 0x07
    1722:	8e 83       	std	Y+6, r24	; 0x06
		pxQueue->xRxLock = queueUNLOCKED;
    1724:	8f ef       	ldi	r24, 0xFF	; 255
    1726:	8d 8f       	std	Y+29, r24	; 0x1d
		pxQueue->xTxLock = queueUNLOCKED;
    1728:	8e 8f       	std	Y+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    172a:	61 11       	cpse	r22, r1
    172c:	0a c0       	rjmp	.+20     	; 0x1742 <xQueueGenericReset+0x5a>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    172e:	88 85       	ldd	r24, Y+8	; 0x08
    1730:	88 23       	and	r24, r24
    1732:	79 f0       	breq	.+30     	; 0x1752 <xQueueGenericReset+0x6a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1734:	ce 01       	movw	r24, r28
    1736:	08 96       	adiw	r24, 0x08	; 8
    1738:	79 d6       	rcall	.+3314   	; 0x242c <xTaskRemoveFromEventList>
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	51 f4       	brne	.+20     	; 0x1752 <xQueueGenericReset+0x6a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    173e:	4e de       	rcall	.-868    	; 0x13dc <vPortYield>
    1740:	08 c0       	rjmp	.+16     	; 0x1752 <xQueueGenericReset+0x6a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1742:	ce 01       	movw	r24, r28
    1744:	08 96       	adiw	r24, 0x08	; 8
    1746:	0e 94 36 03 	call	0x66c	; 0x66c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    174a:	ce 01       	movw	r24, r28
    174c:	41 96       	adiw	r24, 0x11	; 17
    174e:	0e 94 36 03 	call	0x66c	; 0x66c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    1752:	0f 90       	pop	r0
    1754:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	df 91       	pop	r29
    175a:	cf 91       	pop	r28
    175c:	08 95       	ret

0000175e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    175e:	0f 93       	push	r16
    1760:	1f 93       	push	r17
    1762:	cf 93       	push	r28
    1764:	df 93       	push	r29
    1766:	18 2f       	mov	r17, r24
    1768:	06 2f       	mov	r16, r22
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
    176a:	88 23       	and	r24, r24
    176c:	e9 f0       	breq	.+58     	; 0x17a8 <xQueueGenericCreate+0x4a>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    176e:	8f e1       	ldi	r24, 0x1F	; 31
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	0e 94 00 03 	call	0x600	; 0x600 <pvPortMalloc>
    1776:	ec 01       	movw	r28, r24
		if( pxNewQueue != NULL )
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	c1 f0       	breq	.+48     	; 0x17ac <xQueueGenericCreate+0x4e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    177c:	10 9f       	mul	r17, r16
    177e:	c0 01       	movw	r24, r0
    1780:	11 24       	eor	r1, r1

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
    1782:	01 96       	adiw	r24, 0x01	; 1
    1784:	0e 94 00 03 	call	0x600	; 0x600 <pvPortMalloc>
    1788:	99 83       	std	Y+1, r25	; 0x01
    178a:	88 83       	st	Y, r24
			if( pxNewQueue->pcHead != NULL )
    178c:	89 2b       	or	r24, r25
    178e:	31 f0       	breq	.+12     	; 0x179c <xQueueGenericCreate+0x3e>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    1790:	1b 8f       	std	Y+27, r17	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    1792:	0c 8f       	std	Y+28, r16	; 0x1c
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    1794:	61 e0       	ldi	r22, 0x01	; 1
    1796:	ce 01       	movw	r24, r28
    1798:	a7 df       	rcall	.-178    	; 0x16e8 <xQueueGenericReset>
    179a:	08 c0       	rjmp	.+16     	; 0x17ac <xQueueGenericCreate+0x4e>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    179c:	ce 01       	movw	r24, r28
    179e:	0e 94 35 03 	call	0x66a	; 0x66a <vPortFree>

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
    17a2:	c0 e0       	ldi	r28, 0x00	; 0
    17a4:	d0 e0       	ldi	r29, 0x00	; 0
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <xQueueGenericCreate+0x4e>
    17a8:	c0 e0       	ldi	r28, 0x00	; 0
    17aa:	d0 e0       	ldi	r29, 0x00	; 0
	}

	configASSERT( xReturn );

	return xReturn;
}
    17ac:	ce 01       	movw	r24, r28
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	1f 91       	pop	r17
    17b4:	0f 91       	pop	r16
    17b6:	08 95       	ret

000017b8 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    17b8:	9f 92       	push	r9
    17ba:	af 92       	push	r10
    17bc:	bf 92       	push	r11
    17be:	cf 92       	push	r12
    17c0:	df 92       	push	r13
    17c2:	ef 92       	push	r14
    17c4:	ff 92       	push	r15
    17c6:	0f 93       	push	r16
    17c8:	1f 93       	push	r17
    17ca:	cf 93       	push	r28
    17cc:	df 93       	push	r29
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <xQueueGenericSend+0x18>
    17d0:	1f 92       	push	r1
    17d2:	1f 92       	push	r1
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	8c 01       	movw	r16, r24
    17da:	6b 01       	movw	r12, r22
    17dc:	5d 83       	std	Y+5, r21	; 0x05
    17de:	4c 83       	std	Y+4, r20	; 0x04
    17e0:	a2 2e       	mov	r10, r18
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    17e2:	b1 2c       	mov	r11, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    17e4:	99 24       	eor	r9, r9
    17e6:	93 94       	inc	r9
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    17e8:	7c 01       	movw	r14, r24
    17ea:	88 e0       	ldi	r24, 0x08	; 8
    17ec:	e8 0e       	add	r14, r24
    17ee:	f1 1c       	adc	r15, r1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	f8 94       	cli
    17f4:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    17f6:	f8 01       	movw	r30, r16
    17f8:	92 8d       	ldd	r25, Z+26	; 0x1a
    17fa:	83 8d       	ldd	r24, Z+27	; 0x1b
    17fc:	98 17       	cp	r25, r24
    17fe:	18 f0       	brcs	.+6      	; 0x1806 <xQueueGenericSend+0x4e>
    1800:	f2 e0       	ldi	r31, 0x02	; 2
    1802:	af 12       	cpse	r10, r31
    1804:	15 c0       	rjmp	.+42     	; 0x1830 <xQueueGenericSend+0x78>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1806:	4a 2d       	mov	r20, r10
    1808:	b6 01       	movw	r22, r12
    180a:	c8 01       	movw	r24, r16
    180c:	ab de       	rcall	.-682    	; 0x1564 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    180e:	f8 01       	movw	r30, r16
    1810:	91 89       	ldd	r25, Z+17	; 0x11
    1812:	99 23       	and	r25, r25
    1814:	39 f0       	breq	.+14     	; 0x1824 <xQueueGenericSend+0x6c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    1816:	c8 01       	movw	r24, r16
    1818:	41 96       	adiw	r24, 0x11	; 17
    181a:	08 d6       	rcall	.+3088   	; 0x242c <xTaskRemoveFromEventList>
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	21 f4       	brne	.+8      	; 0x1828 <xQueueGenericSend+0x70>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    1820:	dd dd       	rcall	.-1094   	; 0x13dc <vPortYield>
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <xQueueGenericSend+0x70>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    1824:	81 11       	cpse	r24, r1
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    1826:	da dd       	rcall	.-1100   	; 0x13dc <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    1828:	0f 90       	pop	r0
    182a:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	46 c0       	rjmp	.+140    	; 0x18bc <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1830:	ec 81       	ldd	r30, Y+4	; 0x04
    1832:	fd 81       	ldd	r31, Y+5	; 0x05
    1834:	ef 2b       	or	r30, r31
    1836:	21 f4       	brne	.+8      	; 0x1840 <xQueueGenericSend+0x88>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1838:	0f 90       	pop	r0
    183a:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	3e c0       	rjmp	.+124    	; 0x18bc <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    1840:	b1 10       	cpse	r11, r1
    1842:	04 c0       	rjmp	.+8      	; 0x184c <xQueueGenericSend+0x94>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1844:	ce 01       	movw	r24, r28
    1846:	01 96       	adiw	r24, 0x01	; 1
    1848:	39 d6       	rcall	.+3186   	; 0x24bc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    184a:	b9 2c       	mov	r11, r9
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    184c:	0f 90       	pop	r0
    184e:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1850:	31 d3       	rcall	.+1634   	; 0x1eb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	f8 94       	cli
    1856:	0f 92       	push	r0
    1858:	f8 01       	movw	r30, r16
    185a:	85 8d       	ldd	r24, Z+29	; 0x1d
    185c:	8f 3f       	cpi	r24, 0xFF	; 255
    185e:	09 f4       	brne	.+2      	; 0x1862 <xQueueGenericSend+0xaa>
    1860:	15 8e       	std	Z+29, r1	; 0x1d
    1862:	f8 01       	movw	r30, r16
    1864:	86 8d       	ldd	r24, Z+30	; 0x1e
    1866:	8f 3f       	cpi	r24, 0xFF	; 255
    1868:	09 f4       	brne	.+2      	; 0x186c <xQueueGenericSend+0xb4>
    186a:	16 8e       	std	Z+30, r1	; 0x1e
    186c:	0f 90       	pop	r0
    186e:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1870:	be 01       	movw	r22, r28
    1872:	6c 5f       	subi	r22, 0xFC	; 252
    1874:	7f 4f       	sbci	r23, 0xFF	; 255
    1876:	ce 01       	movw	r24, r28
    1878:	01 96       	adiw	r24, 0x01	; 1
    187a:	2b d6       	rcall	.+3158   	; 0x24d2 <xTaskCheckForTimeOut>
    187c:	81 11       	cpse	r24, r1
    187e:	1a c0       	rjmp	.+52     	; 0x18b4 <xQueueGenericSend+0xfc>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	f8 94       	cli
    1884:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1886:	f8 01       	movw	r30, r16
    1888:	92 8d       	ldd	r25, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    188a:	0f 90       	pop	r0
    188c:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    188e:	f8 01       	movw	r30, r16
    1890:	83 8d       	ldd	r24, Z+27	; 0x1b
    1892:	98 13       	cpse	r25, r24
    1894:	0b c0       	rjmp	.+22     	; 0x18ac <xQueueGenericSend+0xf4>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1896:	6c 81       	ldd	r22, Y+4	; 0x04
    1898:	7d 81       	ldd	r23, Y+5	; 0x05
    189a:	c7 01       	movw	r24, r14
    189c:	9c d5       	rcall	.+2872   	; 0x23d6 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    189e:	c8 01       	movw	r24, r16
    18a0:	dd de       	rcall	.-582    	; 0x165c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    18a2:	db d3       	rcall	.+1974   	; 0x205a <xTaskResumeAll>
    18a4:	81 11       	cpse	r24, r1
    18a6:	a4 cf       	rjmp	.-184    	; 0x17f0 <xQueueGenericSend+0x38>
				{
					portYIELD_WITHIN_API();
    18a8:	99 dd       	rcall	.-1230   	; 0x13dc <vPortYield>
    18aa:	a2 cf       	rjmp	.-188    	; 0x17f0 <xQueueGenericSend+0x38>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    18ac:	c8 01       	movw	r24, r16
    18ae:	d6 de       	rcall	.-596    	; 0x165c <prvUnlockQueue>
				( void ) xTaskResumeAll();
    18b0:	d4 d3       	rcall	.+1960   	; 0x205a <xTaskResumeAll>
    18b2:	9e cf       	rjmp	.-196    	; 0x17f0 <xQueueGenericSend+0x38>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    18b4:	c8 01       	movw	r24, r16
    18b6:	d2 de       	rcall	.-604    	; 0x165c <prvUnlockQueue>
			( void ) xTaskResumeAll();
    18b8:	d0 d3       	rcall	.+1952   	; 0x205a <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    18ba:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	df 91       	pop	r29
    18c8:	cf 91       	pop	r28
    18ca:	1f 91       	pop	r17
    18cc:	0f 91       	pop	r16
    18ce:	ff 90       	pop	r15
    18d0:	ef 90       	pop	r14
    18d2:	df 90       	pop	r13
    18d4:	cf 90       	pop	r12
    18d6:	bf 90       	pop	r11
    18d8:	af 90       	pop	r10
    18da:	9f 90       	pop	r9
    18dc:	08 95       	ret

000018de <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    18de:	cf 93       	push	r28
    18e0:	df 93       	push	r29
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    18e2:	8f e1       	ldi	r24, 0x1F	; 31
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	0e 94 00 03 	call	0x600	; 0x600 <pvPortMalloc>
    18ea:	ec 01       	movw	r28, r24
		if( pxNewQueue != NULL )
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	f1 f0       	breq	.+60     	; 0x192c <xQueueCreateMutex+0x4e>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    18f0:	1b 82       	std	Y+3, r1	; 0x03
    18f2:	1a 82       	std	Y+2, r1	; 0x02
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    18f4:	19 82       	std	Y+1, r1	; 0x01
    18f6:	18 82       	st	Y, r1

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    18f8:	1d 82       	std	Y+5, r1	; 0x05
    18fa:	1c 82       	std	Y+4, r1	; 0x04
			pxNewQueue->u.pcReadFrom = NULL;
    18fc:	1f 82       	std	Y+7, r1	; 0x07
    18fe:	1e 82       	std	Y+6, r1	; 0x06

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1900:	1a 8e       	std	Y+26, r1	; 0x1a
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	8b 8f       	std	Y+27, r24	; 0x1b
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
    1906:	1c 8e       	std	Y+28, r1	; 0x1c
			pxNewQueue->xRxLock = queueUNLOCKED;
    1908:	8f ef       	ldi	r24, 0xFF	; 255
    190a:	8d 8f       	std	Y+29, r24	; 0x1d
			pxNewQueue->xTxLock = queueUNLOCKED;
    190c:	8e 8f       	std	Y+30, r24	; 0x1e
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    190e:	ce 01       	movw	r24, r28
    1910:	08 96       	adiw	r24, 0x08	; 8
    1912:	0e 94 36 03 	call	0x66c	; 0x66c <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    1916:	ce 01       	movw	r24, r28
    1918:	41 96       	adiw	r24, 0x11	; 17
    191a:	0e 94 36 03 	call	0x66c	; 0x66c <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	40 e0       	ldi	r20, 0x00	; 0
    1922:	50 e0       	ldi	r21, 0x00	; 0
    1924:	60 e0       	ldi	r22, 0x00	; 0
    1926:	70 e0       	ldi	r23, 0x00	; 0
    1928:	ce 01       	movw	r24, r28
    192a:	46 df       	rcall	.-372    	; 0x17b8 <xQueueGenericSend>
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
    192c:	ce 01       	movw	r24, r28
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	08 95       	ret

00001934 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    1934:	0f 93       	push	r16
    1936:	1f 93       	push	r17
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	ec 01       	movw	r28, r24
    193e:	8a 01       	movw	r16, r20
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1940:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1942:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1944:	98 17       	cp	r25, r24
    1946:	10 f0       	brcs	.+4      	; 0x194c <xQueueGenericSendFromISR+0x18>
    1948:	22 30       	cpi	r18, 0x02	; 2
    194a:	11 f5       	brne	.+68     	; 0x1990 <xQueueGenericSendFromISR+0x5c>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			if( prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition ) != pdFALSE )
    194c:	42 2f       	mov	r20, r18
    194e:	ce 01       	movw	r24, r28
    1950:	09 de       	rcall	.-1006   	; 0x1564 <prvCopyDataToQueue>
    1952:	88 23       	and	r24, r24
    1954:	31 f0       	breq	.+12     	; 0x1962 <xQueueGenericSendFromISR+0x2e>
			{
				/* This is a special case that can only be executed if a task
				holds multiple mutexes and then gives the mutexes back in an
				order that is different to that in which they were taken. */
				if( pxHigherPriorityTaskWoken != NULL )
    1956:	01 15       	cp	r16, r1
    1958:	11 05       	cpc	r17, r1
    195a:	19 f0       	breq	.+6      	; 0x1962 <xQueueGenericSendFromISR+0x2e>
				{
					*pxHigherPriorityTaskWoken = pdTRUE;
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	f8 01       	movw	r30, r16
    1960:	80 83       	st	Z, r24
				}
			}

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    1962:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1964:	8f 3f       	cpi	r24, 0xFF	; 255
    1966:	79 f4       	brne	.+30     	; 0x1986 <xQueueGenericSendFromISR+0x52>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1968:	89 89       	ldd	r24, Y+17	; 0x11
    196a:	88 23       	and	r24, r24
    196c:	99 f0       	breq	.+38     	; 0x1994 <xQueueGenericSendFromISR+0x60>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    196e:	ce 01       	movw	r24, r28
    1970:	41 96       	adiw	r24, 0x11	; 17
    1972:	5c d5       	rcall	.+2744   	; 0x242c <xTaskRemoveFromEventList>
    1974:	88 23       	and	r24, r24
    1976:	81 f0       	breq	.+32     	; 0x1998 <xQueueGenericSendFromISR+0x64>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    1978:	01 15       	cp	r16, r1
    197a:	11 05       	cpc	r17, r1
    197c:	79 f0       	breq	.+30     	; 0x199c <xQueueGenericSendFromISR+0x68>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	f8 01       	movw	r30, r16
    1982:	80 83       	st	Z, r24
    1984:	0c c0       	rjmp	.+24     	; 0x199e <xQueueGenericSendFromISR+0x6a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    1986:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1988:	8f 5f       	subi	r24, 0xFF	; 255
    198a:	8e 8f       	std	Y+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	07 c0       	rjmp	.+14     	; 0x199e <xQueueGenericSendFromISR+0x6a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	05 c0       	rjmp	.+10     	; 0x199e <xQueueGenericSendFromISR+0x6a>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	03 c0       	rjmp	.+6      	; 0x199e <xQueueGenericSendFromISR+0x6a>
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	01 c0       	rjmp	.+2      	; 0x199e <xQueueGenericSendFromISR+0x6a>
    199c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    199e:	df 91       	pop	r29
    19a0:	cf 91       	pop	r28
    19a2:	1f 91       	pop	r17
    19a4:	0f 91       	pop	r16
    19a6:	08 95       	ret

000019a8 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    19a8:	9f 92       	push	r9
    19aa:	af 92       	push	r10
    19ac:	bf 92       	push	r11
    19ae:	cf 92       	push	r12
    19b0:	df 92       	push	r13
    19b2:	ef 92       	push	r14
    19b4:	ff 92       	push	r15
    19b6:	0f 93       	push	r16
    19b8:	1f 93       	push	r17
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <xQueueGenericReceive+0x18>
    19c0:	1f 92       	push	r1
    19c2:	1f 92       	push	r1
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	8c 01       	movw	r16, r24
    19ca:	6b 01       	movw	r12, r22
    19cc:	5d 83       	std	Y+5, r21	; 0x05
    19ce:	4c 83       	std	Y+4, r20	; 0x04
    19d0:	b2 2e       	mov	r11, r18
BaseType_t xEntryTimeSet = pdFALSE;
    19d2:	a1 2c       	mov	r10, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    19d4:	99 24       	eor	r9, r9
    19d6:	93 94       	inc	r9
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    19d8:	7c 01       	movw	r14, r24
    19da:	81 e1       	ldi	r24, 0x11	; 17
    19dc:	e8 0e       	add	r14, r24
    19de:	f1 1c       	adc	r15, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    19e6:	f8 01       	movw	r30, r16
    19e8:	82 8d       	ldd	r24, Z+26	; 0x1a
    19ea:	88 23       	and	r24, r24
    19ec:	69 f1       	breq	.+90     	; 0x1a48 <xQueueGenericReceive+0xa0>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    19ee:	e6 80       	ldd	r14, Z+6	; 0x06
    19f0:	f7 80       	ldd	r15, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    19f2:	b6 01       	movw	r22, r12
    19f4:	c8 01       	movw	r24, r16
    19f6:	18 de       	rcall	.-976    	; 0x1628 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    19f8:	b1 10       	cpse	r11, r1
    19fa:	17 c0       	rjmp	.+46     	; 0x1a2a <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    19fc:	f8 01       	movw	r30, r16
    19fe:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a00:	81 50       	subi	r24, 0x01	; 1
    1a02:	82 8f       	std	Z+26, r24	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1a04:	80 81       	ld	r24, Z
    1a06:	91 81       	ldd	r25, Z+1	; 0x01
    1a08:	89 2b       	or	r24, r25
    1a0a:	21 f4       	brne	.+8      	; 0x1a14 <xQueueGenericReceive+0x6c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    1a0c:	3b d6       	rcall	.+3190   	; 0x2684 <pvTaskIncrementMutexHeldCount>
    1a0e:	f8 01       	movw	r30, r16
    1a10:	93 83       	std	Z+3, r25	; 0x03
    1a12:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1a14:	f8 01       	movw	r30, r16
    1a16:	80 85       	ldd	r24, Z+8	; 0x08
    1a18:	88 23       	and	r24, r24
    1a1a:	91 f0       	breq	.+36     	; 0x1a40 <xQueueGenericReceive+0x98>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1a1c:	c8 01       	movw	r24, r16
    1a1e:	08 96       	adiw	r24, 0x08	; 8
    1a20:	05 d5       	rcall	.+2570   	; 0x242c <xTaskRemoveFromEventList>
    1a22:	81 30       	cpi	r24, 0x01	; 1
    1a24:	69 f4       	brne	.+26     	; 0x1a40 <xQueueGenericReceive+0x98>
						{
							queueYIELD_IF_USING_PREEMPTION();
    1a26:	da dc       	rcall	.-1612   	; 0x13dc <vPortYield>
    1a28:	0b c0       	rjmp	.+22     	; 0x1a40 <xQueueGenericReceive+0x98>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    1a2a:	f8 01       	movw	r30, r16
    1a2c:	f7 82       	std	Z+7, r15	; 0x07
    1a2e:	e6 82       	std	Z+6, r14	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1a30:	81 89       	ldd	r24, Z+17	; 0x11
    1a32:	88 23       	and	r24, r24
    1a34:	29 f0       	breq	.+10     	; 0x1a40 <xQueueGenericReceive+0x98>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1a36:	c8 01       	movw	r24, r16
    1a38:	41 96       	adiw	r24, 0x11	; 17
    1a3a:	f8 d4       	rcall	.+2544   	; 0x242c <xTaskRemoveFromEventList>
    1a3c:	81 11       	cpse	r24, r1
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    1a3e:	ce dc       	rcall	.-1636   	; 0x13dc <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    1a40:	0f 90       	pop	r0
    1a42:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	52 c0       	rjmp	.+164    	; 0x1aec <xQueueGenericReceive+0x144>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1a48:	4c 81       	ldd	r20, Y+4	; 0x04
    1a4a:	5d 81       	ldd	r21, Y+5	; 0x05
    1a4c:	45 2b       	or	r20, r21
    1a4e:	21 f4       	brne	.+8      	; 0x1a58 <xQueueGenericReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1a50:	0f 90       	pop	r0
    1a52:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	4a c0       	rjmp	.+148    	; 0x1aec <xQueueGenericReceive+0x144>
				}
				else if( xEntryTimeSet == pdFALSE )
    1a58:	a1 10       	cpse	r10, r1
    1a5a:	04 c0       	rjmp	.+8      	; 0x1a64 <xQueueGenericReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1a5c:	ce 01       	movw	r24, r28
    1a5e:	01 96       	adiw	r24, 0x01	; 1
    1a60:	2d d5       	rcall	.+2650   	; 0x24bc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1a62:	a9 2c       	mov	r10, r9
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1a64:	0f 90       	pop	r0
    1a66:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1a68:	25 d2       	rcall	.+1098   	; 0x1eb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	0f 92       	push	r0
    1a70:	f8 01       	movw	r30, r16
    1a72:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a74:	8f 3f       	cpi	r24, 0xFF	; 255
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <xQueueGenericReceive+0xd2>
    1a78:	15 8e       	std	Z+29, r1	; 0x1d
    1a7a:	f8 01       	movw	r30, r16
    1a7c:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a7e:	8f 3f       	cpi	r24, 0xFF	; 255
    1a80:	09 f4       	brne	.+2      	; 0x1a84 <xQueueGenericReceive+0xdc>
    1a82:	16 8e       	std	Z+30, r1	; 0x1e
    1a84:	0f 90       	pop	r0
    1a86:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1a88:	be 01       	movw	r22, r28
    1a8a:	6c 5f       	subi	r22, 0xFC	; 252
    1a8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8e:	ce 01       	movw	r24, r28
    1a90:	01 96       	adiw	r24, 0x01	; 1
    1a92:	1f d5       	rcall	.+2622   	; 0x24d2 <xTaskCheckForTimeOut>
    1a94:	81 11       	cpse	r24, r1
    1a96:	26 c0       	rjmp	.+76     	; 0x1ae4 <xQueueGenericReceive+0x13c>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1a9e:	f8 01       	movw	r30, r16
    1aa0:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1aa2:	0f 90       	pop	r0
    1aa4:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1aa6:	81 11       	cpse	r24, r1
    1aa8:	19 c0       	rjmp	.+50     	; 0x1adc <xQueueGenericReceive+0x134>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1aaa:	f8 01       	movw	r30, r16
    1aac:	80 81       	ld	r24, Z
    1aae:	91 81       	ldd	r25, Z+1	; 0x01
    1ab0:	89 2b       	or	r24, r25
    1ab2:	49 f4       	brne	.+18     	; 0x1ac6 <xQueueGenericReceive+0x11e>
					{
						taskENTER_CRITICAL();
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1aba:	f8 01       	movw	r30, r16
    1abc:	82 81       	ldd	r24, Z+2	; 0x02
    1abe:	93 81       	ldd	r25, Z+3	; 0x03
    1ac0:	44 d5       	rcall	.+2696   	; 0x254a <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    1ac2:	0f 90       	pop	r0
    1ac4:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1ac6:	6c 81       	ldd	r22, Y+4	; 0x04
    1ac8:	7d 81       	ldd	r23, Y+5	; 0x05
    1aca:	c7 01       	movw	r24, r14
    1acc:	84 d4       	rcall	.+2312   	; 0x23d6 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1ace:	c8 01       	movw	r24, r16
    1ad0:	c5 dd       	rcall	.-1142   	; 0x165c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1ad2:	c3 d2       	rcall	.+1414   	; 0x205a <xTaskResumeAll>
    1ad4:	81 11       	cpse	r24, r1
    1ad6:	84 cf       	rjmp	.-248    	; 0x19e0 <xQueueGenericReceive+0x38>
				{
					portYIELD_WITHIN_API();
    1ad8:	81 dc       	rcall	.-1790   	; 0x13dc <vPortYield>
    1ada:	82 cf       	rjmp	.-252    	; 0x19e0 <xQueueGenericReceive+0x38>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1adc:	c8 01       	movw	r24, r16
    1ade:	be dd       	rcall	.-1156   	; 0x165c <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1ae0:	bc d2       	rcall	.+1400   	; 0x205a <xTaskResumeAll>
    1ae2:	7e cf       	rjmp	.-260    	; 0x19e0 <xQueueGenericReceive+0x38>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1ae4:	c8 01       	movw	r24, r16
    1ae6:	ba dd       	rcall	.-1164   	; 0x165c <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1ae8:	b8 d2       	rcall	.+1392   	; 0x205a <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    1aea:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	df 91       	pop	r29
    1af8:	cf 91       	pop	r28
    1afa:	1f 91       	pop	r17
    1afc:	0f 91       	pop	r16
    1afe:	ff 90       	pop	r15
    1b00:	ef 90       	pop	r14
    1b02:	df 90       	pop	r13
    1b04:	cf 90       	pop	r12
    1b06:	bf 90       	pop	r11
    1b08:	af 90       	pop	r10
    1b0a:	9f 90       	pop	r9
    1b0c:	08 95       	ret

00001b0e <ringBufferInit>:
}

unsigned char ringBufferPeek(ringBuffer *ring)
{
	   return ring->rBuffer[ ring->rIndex ];	
}
    1b0e:	fc 01       	movw	r30, r24
    1b10:	71 83       	std	Z+1, r23	; 0x01
    1b12:	60 83       	st	Z, r22
    1b14:	42 83       	std	Z+2, r20	; 0x02
    1b16:	14 82       	std	Z+4, r1	; 0x04
    1b18:	13 82       	std	Z+3, r1	; 0x03
    1b1a:	08 95       	ret

00001b1c <ringBufferPop>:

// int?
unsigned char ringBufferPop(ringBuffer *ring)
{
    1b1c:	fc 01       	movw	r30, r24
    unsigned char element;
	
            element = ring->rBuffer[ ring->rIndex ];
    1b1e:	94 81       	ldd	r25, Z+4	; 0x04
    1b20:	a0 81       	ld	r26, Z
    1b22:	b1 81       	ldd	r27, Z+1	; 0x01
    1b24:	a9 0f       	add	r26, r25
    1b26:	b1 1d       	adc	r27, r1
    1b28:	8c 91       	ld	r24, X
            ring->rIndex ++;
    1b2a:	9f 5f       	subi	r25, 0xFF	; 255
    1b2c:	94 83       	std	Z+4, r25	; 0x04
            if ( ring->rIndex >= ring->rSize )
    1b2e:	22 81       	ldd	r18, Z+2	; 0x02
    1b30:	92 17       	cp	r25, r18
    1b32:	10 f0       	brcs	.+4      	; 0x1b38 <ringBufferPop+0x1c>
            {
                ring->rIndex -= ring->rSize;
    1b34:	92 1b       	sub	r25, r18
    1b36:	94 83       	std	Z+4, r25	; 0x04
            }
            ring->rLength --;
    1b38:	93 81       	ldd	r25, Z+3	; 0x03
    1b3a:	91 50       	subi	r25, 0x01	; 1
    1b3c:	93 83       	std	Z+3, r25	; 0x03
    
    return element;
}
    1b3e:	08 95       	ret

00001b40 <ringBufferPush>:



void ringBufferPush( ringBuffer *ring, unsigned char element )
{
    1b40:	fc 01       	movw	r30, r24
    1b42:	46 2f       	mov	r20, r22
    
        if ( ring->rLength < ring->rSize )
    1b44:	83 81       	ldd	r24, Z+3	; 0x03
    1b46:	22 81       	ldd	r18, Z+2	; 0x02
    1b48:	82 17       	cp	r24, r18
    1b4a:	80 f4       	brcc	.+32     	; 0x1b6c <ringBufferPush+0x2c>
        {
            ring->rBuffer[ ( ring->rIndex + ring->rLength ) % ring->rSize ] = element;
    1b4c:	34 81       	ldd	r19, Z+4	; 0x04
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	83 0f       	add	r24, r19
    1b52:	91 1d       	adc	r25, r1
    1b54:	62 2f       	mov	r22, r18
    1b56:	70 e0       	ldi	r23, 0x00	; 0
    1b58:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <__divmodhi4>
    1b5c:	a0 81       	ld	r26, Z
    1b5e:	b1 81       	ldd	r27, Z+1	; 0x01
    1b60:	a8 0f       	add	r26, r24
    1b62:	b9 1f       	adc	r27, r25
    1b64:	4c 93       	st	X, r20
            ring->rLength++;
    1b66:	83 81       	ldd	r24, Z+3	; 0x03
    1b68:	8f 5f       	subi	r24, 0xFF	; 255
    1b6a:	83 83       	std	Z+3, r24	; 0x03
    1b6c:	08 95       	ret

00001b6e <ringBufferFull>:


// return 1 if full
// return 0 if not full
char ringBufferFull(ringBuffer *ring)
{
    1b6e:	fc 01       	movw	r30, r24
   return (ring->rSize == ring->rLength);
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	22 81       	ldd	r18, Z+2	; 0x02
    1b74:	93 81       	ldd	r25, Z+3	; 0x03
    1b76:	29 13       	cpse	r18, r25
    1b78:	80 e0       	ldi	r24, 0x00	; 0
}
    1b7a:	08 95       	ret

00001b7c <ringBufferNotEmpty>:

// return 1 if not empty
// return 0 if empty
char ringBufferNotEmpty(ringBuffer *ring)
{
	return (ring->rLength > 0);
    1b7c:	21 e0       	ldi	r18, 0x01	; 1
    1b7e:	fc 01       	movw	r30, r24
    1b80:	83 81       	ldd	r24, Z+3	; 0x03
    1b82:	81 11       	cpse	r24, r1
    1b84:	01 c0       	rjmp	.+2      	; 0x1b88 <ringBufferNotEmpty+0xc>
    1b86:	20 e0       	ldi	r18, 0x00	; 0
}
    1b88:	82 2f       	mov	r24, r18
    1b8a:	08 95       	ret

00001b8c <prvResetNextTaskUnblockTime>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
    1b8c:	e0 91 4c 08 	lds	r30, 0x084C
    1b90:	f0 91 4d 08 	lds	r31, 0x084D
    1b94:	80 81       	ld	r24, Z
    1b96:	81 11       	cpse	r24, r1
    1b98:	07 c0       	rjmp	.+14     	; 0x1ba8 <prvResetNextTaskUnblockTime+0x1c>
    1b9a:	8f ef       	ldi	r24, 0xFF	; 255
    1b9c:	9f ef       	ldi	r25, 0xFF	; 255
    1b9e:	90 93 06 02 	sts	0x0206, r25
    1ba2:	80 93 05 02 	sts	0x0205, r24
    1ba6:	08 95       	ret
    1ba8:	e0 91 4c 08 	lds	r30, 0x084C
    1bac:	f0 91 4d 08 	lds	r31, 0x084D
    1bb0:	05 80       	ldd	r0, Z+5	; 0x05
    1bb2:	f6 81       	ldd	r31, Z+6	; 0x06
    1bb4:	e0 2d       	mov	r30, r0
    1bb6:	06 80       	ldd	r0, Z+6	; 0x06
    1bb8:	f7 81       	ldd	r31, Z+7	; 0x07
    1bba:	e0 2d       	mov	r30, r0
    1bbc:	82 81       	ldd	r24, Z+2	; 0x02
    1bbe:	93 81       	ldd	r25, Z+3	; 0x03
    1bc0:	90 93 06 02 	sts	0x0206, r25
    1bc4:	80 93 05 02 	sts	0x0205, r24
    1bc8:	08 95       	ret

00001bca <prvAddCurrentTaskToDelayedList>:
    1bca:	cf 93       	push	r28
    1bcc:	df 93       	push	r29
    1bce:	ec 01       	movw	r28, r24
    1bd0:	e0 91 8d 08 	lds	r30, 0x088D
    1bd4:	f0 91 8e 08 	lds	r31, 0x088E
    1bd8:	93 83       	std	Z+3, r25	; 0x03
    1bda:	82 83       	std	Z+2, r24	; 0x02
    1bdc:	80 91 2b 08 	lds	r24, 0x082B
    1be0:	90 91 2c 08 	lds	r25, 0x082C
    1be4:	c8 17       	cp	r28, r24
    1be6:	d9 07       	cpc	r29, r25
    1be8:	68 f4       	brcc	.+26     	; 0x1c04 <prvAddCurrentTaskToDelayedList+0x3a>
    1bea:	60 91 8d 08 	lds	r22, 0x088D
    1bee:	70 91 8e 08 	lds	r23, 0x088E
    1bf2:	80 91 4a 08 	lds	r24, 0x084A
    1bf6:	90 91 4b 08 	lds	r25, 0x084B
    1bfa:	6e 5f       	subi	r22, 0xFE	; 254
    1bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfe:	0e 94 69 03 	call	0x6d2	; 0x6d2 <vListInsert>
    1c02:	17 c0       	rjmp	.+46     	; 0x1c32 <prvAddCurrentTaskToDelayedList+0x68>
    1c04:	60 91 8d 08 	lds	r22, 0x088D
    1c08:	70 91 8e 08 	lds	r23, 0x088E
    1c0c:	80 91 4c 08 	lds	r24, 0x084C
    1c10:	90 91 4d 08 	lds	r25, 0x084D
    1c14:	6e 5f       	subi	r22, 0xFE	; 254
    1c16:	7f 4f       	sbci	r23, 0xFF	; 255
    1c18:	0e 94 69 03 	call	0x6d2	; 0x6d2 <vListInsert>
    1c1c:	80 91 05 02 	lds	r24, 0x0205
    1c20:	90 91 06 02 	lds	r25, 0x0206
    1c24:	c8 17       	cp	r28, r24
    1c26:	d9 07       	cpc	r29, r25
    1c28:	20 f4       	brcc	.+8      	; 0x1c32 <prvAddCurrentTaskToDelayedList+0x68>
    1c2a:	d0 93 06 02 	sts	0x0206, r29
    1c2e:	c0 93 05 02 	sts	0x0205, r28
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	08 95       	ret

00001c38 <xTaskGenericCreate>:
    1c38:	4f 92       	push	r4
    1c3a:	5f 92       	push	r5
    1c3c:	6f 92       	push	r6
    1c3e:	7f 92       	push	r7
    1c40:	8f 92       	push	r8
    1c42:	9f 92       	push	r9
    1c44:	af 92       	push	r10
    1c46:	bf 92       	push	r11
    1c48:	cf 92       	push	r12
    1c4a:	df 92       	push	r13
    1c4c:	ef 92       	push	r14
    1c4e:	ff 92       	push	r15
    1c50:	0f 93       	push	r16
    1c52:	1f 93       	push	r17
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
    1c58:	4c 01       	movw	r8, r24
    1c5a:	5b 01       	movw	r10, r22
    1c5c:	2a 01       	movw	r4, r20
    1c5e:	39 01       	movw	r6, r18
    1c60:	83 e2       	ldi	r24, 0x23	; 35
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	0e 94 00 03 	call	0x600	; 0x600 <pvPortMalloc>
    1c68:	ec 01       	movw	r28, r24
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	09 f4       	brne	.+2      	; 0x1c70 <xTaskGenericCreate+0x38>
    1c6e:	e7 c0       	rjmp	.+462    	; 0x1e3e <xTaskGenericCreate+0x206>
    1c70:	c1 14       	cp	r12, r1
    1c72:	d1 04       	cpc	r13, r1
    1c74:	09 f0       	breq	.+2      	; 0x1c78 <xTaskGenericCreate+0x40>
    1c76:	cc c0       	rjmp	.+408    	; 0x1e10 <xTaskGenericCreate+0x1d8>
    1c78:	c2 01       	movw	r24, r4
    1c7a:	0e 94 00 03 	call	0x600	; 0x600 <pvPortMalloc>
    1c7e:	98 8f       	std	Y+24, r25	; 0x18
    1c80:	8f 8b       	std	Y+23, r24	; 0x17
    1c82:	89 2b       	or	r24, r25
    1c84:	09 f0       	breq	.+2      	; 0x1c88 <xTaskGenericCreate+0x50>
    1c86:	c6 c0       	rjmp	.+396    	; 0x1e14 <xTaskGenericCreate+0x1dc>
    1c88:	ce 01       	movw	r24, r28
    1c8a:	0e 94 35 03 	call	0x66a	; 0x66a <vPortFree>
    1c8e:	d7 c0       	rjmp	.+430    	; 0x1e3e <xTaskGenericCreate+0x206>
    1c90:	cf 01       	movw	r24, r30
    1c92:	31 91       	ld	r19, Z+
    1c94:	da 01       	movw	r26, r20
    1c96:	3d 93       	st	X+, r19
    1c98:	ad 01       	movw	r20, r26
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	8c 91       	ld	r24, X
    1c9e:	88 23       	and	r24, r24
    1ca0:	11 f0       	breq	.+4      	; 0x1ca6 <xTaskGenericCreate+0x6e>
    1ca2:	21 50       	subi	r18, 0x01	; 1
    1ca4:	a9 f7       	brne	.-22     	; 0x1c90 <xTaskGenericCreate+0x58>
    1ca6:	18 a2       	std	Y+32, r1	; 0x20
    1ca8:	10 2f       	mov	r17, r16
    1caa:	05 30       	cpi	r16, 0x05	; 5
    1cac:	08 f0       	brcs	.+2      	; 0x1cb0 <xTaskGenericCreate+0x78>
    1cae:	14 e0       	ldi	r17, 0x04	; 4
    1cb0:	1e 8b       	std	Y+22, r17	; 0x16
    1cb2:	19 a3       	std	Y+33, r17	; 0x21
    1cb4:	1a a2       	std	Y+34, r1	; 0x22
    1cb6:	5e 01       	movw	r10, r28
    1cb8:	b2 e0       	ldi	r27, 0x02	; 2
    1cba:	ab 0e       	add	r10, r27
    1cbc:	b1 1c       	adc	r11, r1
    1cbe:	c5 01       	movw	r24, r10
    1cc0:	0e 94 44 03 	call	0x688	; 0x688 <vListInitialiseItem>
    1cc4:	ce 01       	movw	r24, r28
    1cc6:	0c 96       	adiw	r24, 0x0c	; 12
    1cc8:	0e 94 44 03 	call	0x688	; 0x688 <vListInitialiseItem>
    1ccc:	d9 87       	std	Y+9, r29	; 0x09
    1cce:	c8 87       	std	Y+8, r28	; 0x08
    1cd0:	85 e0       	ldi	r24, 0x05	; 5
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	81 1b       	sub	r24, r17
    1cd6:	91 09       	sbc	r25, r1
    1cd8:	9d 87       	std	Y+13, r25	; 0x0d
    1cda:	8c 87       	std	Y+12, r24	; 0x0c
    1cdc:	db 8b       	std	Y+19, r29	; 0x13
    1cde:	ca 8b       	std	Y+18, r28	; 0x12
    1ce0:	a3 01       	movw	r20, r6
    1ce2:	b4 01       	movw	r22, r8
    1ce4:	c6 01       	movw	r24, r12
    1ce6:	cb da       	rcall	.-2666   	; 0x127e <pxPortInitialiseStack>
    1ce8:	99 83       	std	Y+1, r25	; 0x01
    1cea:	88 83       	st	Y, r24
    1cec:	e1 14       	cp	r14, r1
    1cee:	f1 04       	cpc	r15, r1
    1cf0:	19 f0       	breq	.+6      	; 0x1cf8 <xTaskGenericCreate+0xc0>
    1cf2:	f7 01       	movw	r30, r14
    1cf4:	d1 83       	std	Z+1, r29	; 0x01
    1cf6:	c0 83       	st	Z, r28
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	f8 94       	cli
    1cfc:	0f 92       	push	r0
    1cfe:	80 91 2d 08 	lds	r24, 0x082D
    1d02:	8f 5f       	subi	r24, 0xFF	; 255
    1d04:	80 93 2d 08 	sts	0x082D, r24
    1d08:	80 91 8d 08 	lds	r24, 0x088D
    1d0c:	90 91 8e 08 	lds	r25, 0x088E
    1d10:	89 2b       	or	r24, r25
    1d12:	09 f0       	breq	.+2      	; 0x1d16 <xTaskGenericCreate+0xde>
    1d14:	3f c0       	rjmp	.+126    	; 0x1d94 <xTaskGenericCreate+0x15c>
    1d16:	d0 93 8e 08 	sts	0x088E, r29
    1d1a:	c0 93 8d 08 	sts	0x088D, r28
    1d1e:	80 91 2d 08 	lds	r24, 0x082D
    1d22:	81 30       	cpi	r24, 0x01	; 1
    1d24:	09 f0       	breq	.+2      	; 0x1d28 <xTaskGenericCreate+0xf0>
    1d26:	45 c0       	rjmp	.+138    	; 0x1db2 <xTaskGenericCreate+0x17a>
    1d28:	0f 2e       	mov	r0, r31
    1d2a:	f0 e6       	ldi	r31, 0x60	; 96
    1d2c:	ef 2e       	mov	r14, r31
    1d2e:	f8 e0       	ldi	r31, 0x08	; 8
    1d30:	ff 2e       	mov	r15, r31
    1d32:	f0 2d       	mov	r31, r0
    1d34:	0f 2e       	mov	r0, r31
    1d36:	fd e8       	ldi	r31, 0x8D	; 141
    1d38:	cf 2e       	mov	r12, r31
    1d3a:	f8 e0       	ldi	r31, 0x08	; 8
    1d3c:	df 2e       	mov	r13, r31
    1d3e:	f0 2d       	mov	r31, r0
    1d40:	c7 01       	movw	r24, r14
    1d42:	0e 94 36 03 	call	0x66c	; 0x66c <vListInitialise>
    1d46:	f9 e0       	ldi	r31, 0x09	; 9
    1d48:	ef 0e       	add	r14, r31
    1d4a:	f1 1c       	adc	r15, r1
    1d4c:	ec 14       	cp	r14, r12
    1d4e:	fd 04       	cpc	r15, r13
    1d50:	b9 f7       	brne	.-18     	; 0x1d40 <xTaskGenericCreate+0x108>
    1d52:	87 e5       	ldi	r24, 0x57	; 87
    1d54:	98 e0       	ldi	r25, 0x08	; 8
    1d56:	0e 94 36 03 	call	0x66c	; 0x66c <vListInitialise>
    1d5a:	8e e4       	ldi	r24, 0x4E	; 78
    1d5c:	98 e0       	ldi	r25, 0x08	; 8
    1d5e:	0e 94 36 03 	call	0x66c	; 0x66c <vListInitialise>
    1d62:	81 e4       	ldi	r24, 0x41	; 65
    1d64:	98 e0       	ldi	r25, 0x08	; 8
    1d66:	0e 94 36 03 	call	0x66c	; 0x66c <vListInitialise>
    1d6a:	88 e3       	ldi	r24, 0x38	; 56
    1d6c:	98 e0       	ldi	r25, 0x08	; 8
    1d6e:	0e 94 36 03 	call	0x66c	; 0x66c <vListInitialise>
    1d72:	8e e2       	ldi	r24, 0x2E	; 46
    1d74:	98 e0       	ldi	r25, 0x08	; 8
    1d76:	0e 94 36 03 	call	0x66c	; 0x66c <vListInitialise>
    1d7a:	87 e5       	ldi	r24, 0x57	; 87
    1d7c:	98 e0       	ldi	r25, 0x08	; 8
    1d7e:	90 93 4d 08 	sts	0x084D, r25
    1d82:	80 93 4c 08 	sts	0x084C, r24
    1d86:	8e e4       	ldi	r24, 0x4E	; 78
    1d88:	98 e0       	ldi	r25, 0x08	; 8
    1d8a:	90 93 4b 08 	sts	0x084B, r25
    1d8e:	80 93 4a 08 	sts	0x084A, r24
    1d92:	0f c0       	rjmp	.+30     	; 0x1db2 <xTaskGenericCreate+0x17a>
    1d94:	80 91 29 08 	lds	r24, 0x0829
    1d98:	81 11       	cpse	r24, r1
    1d9a:	0b c0       	rjmp	.+22     	; 0x1db2 <xTaskGenericCreate+0x17a>
    1d9c:	e0 91 8d 08 	lds	r30, 0x088D
    1da0:	f0 91 8e 08 	lds	r31, 0x088E
    1da4:	86 89       	ldd	r24, Z+22	; 0x16
    1da6:	08 17       	cp	r16, r24
    1da8:	20 f0       	brcs	.+8      	; 0x1db2 <xTaskGenericCreate+0x17a>
    1daa:	d0 93 8e 08 	sts	0x088E, r29
    1dae:	c0 93 8d 08 	sts	0x088D, r28
    1db2:	80 91 25 08 	lds	r24, 0x0825
    1db6:	8f 5f       	subi	r24, 0xFF	; 255
    1db8:	80 93 25 08 	sts	0x0825, r24
    1dbc:	8e 89       	ldd	r24, Y+22	; 0x16
    1dbe:	90 91 2a 08 	lds	r25, 0x082A
    1dc2:	98 17       	cp	r25, r24
    1dc4:	10 f4       	brcc	.+4      	; 0x1dca <xTaskGenericCreate+0x192>
    1dc6:	80 93 2a 08 	sts	0x082A, r24
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	9c 01       	movw	r18, r24
    1dce:	22 0f       	add	r18, r18
    1dd0:	33 1f       	adc	r19, r19
    1dd2:	22 0f       	add	r18, r18
    1dd4:	33 1f       	adc	r19, r19
    1dd6:	22 0f       	add	r18, r18
    1dd8:	33 1f       	adc	r19, r19
    1dda:	82 0f       	add	r24, r18
    1ddc:	93 1f       	adc	r25, r19
    1dde:	b5 01       	movw	r22, r10
    1de0:	80 5a       	subi	r24, 0xA0	; 160
    1de2:	97 4f       	sbci	r25, 0xF7	; 247
    1de4:	0e 94 48 03 	call	0x690	; 0x690 <vListInsertEnd>
    1de8:	0f 90       	pop	r0
    1dea:	0f be       	out	0x3f, r0	; 63
    1dec:	80 91 29 08 	lds	r24, 0x0829
    1df0:	88 23       	and	r24, r24
    1df2:	51 f0       	breq	.+20     	; 0x1e08 <xTaskGenericCreate+0x1d0>
    1df4:	e0 91 8d 08 	lds	r30, 0x088D
    1df8:	f0 91 8e 08 	lds	r31, 0x088E
    1dfc:	86 89       	ldd	r24, Z+22	; 0x16
    1dfe:	80 17       	cp	r24, r16
    1e00:	28 f4       	brcc	.+10     	; 0x1e0c <xTaskGenericCreate+0x1d4>
    1e02:	ec da       	rcall	.-2600   	; 0x13dc <vPortYield>
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	1c c0       	rjmp	.+56     	; 0x1e40 <xTaskGenericCreate+0x208>
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	1a c0       	rjmp	.+52     	; 0x1e40 <xTaskGenericCreate+0x208>
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	18 c0       	rjmp	.+48     	; 0x1e40 <xTaskGenericCreate+0x208>
    1e10:	d8 8e       	std	Y+24, r13	; 0x18
    1e12:	cf 8a       	std	Y+23, r12	; 0x17
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	48 1a       	sub	r4, r24
    1e18:	51 08       	sbc	r5, r1
    1e1a:	cf 88       	ldd	r12, Y+23	; 0x17
    1e1c:	d8 8c       	ldd	r13, Y+24	; 0x18
    1e1e:	c4 0c       	add	r12, r4
    1e20:	d5 1c       	adc	r13, r5
    1e22:	d5 01       	movw	r26, r10
    1e24:	8c 91       	ld	r24, X
    1e26:	89 8f       	std	Y+25, r24	; 0x19
    1e28:	8c 91       	ld	r24, X
    1e2a:	88 23       	and	r24, r24
    1e2c:	09 f4       	brne	.+2      	; 0x1e30 <xTaskGenericCreate+0x1f8>
    1e2e:	3b cf       	rjmp	.-394    	; 0x1ca6 <xTaskGenericCreate+0x6e>
    1e30:	ae 01       	movw	r20, r28
    1e32:	46 5e       	subi	r20, 0xE6	; 230
    1e34:	5f 4f       	sbci	r21, 0xFF	; 255
    1e36:	f5 01       	movw	r30, r10
    1e38:	31 96       	adiw	r30, 0x01	; 1
    1e3a:	27 e0       	ldi	r18, 0x07	; 7
    1e3c:	29 cf       	rjmp	.-430    	; 0x1c90 <xTaskGenericCreate+0x58>
    1e3e:	8f ef       	ldi	r24, 0xFF	; 255
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	ff 90       	pop	r15
    1e4a:	ef 90       	pop	r14
    1e4c:	df 90       	pop	r13
    1e4e:	cf 90       	pop	r12
    1e50:	bf 90       	pop	r11
    1e52:	af 90       	pop	r10
    1e54:	9f 90       	pop	r9
    1e56:	8f 90       	pop	r8
    1e58:	7f 90       	pop	r7
    1e5a:	6f 90       	pop	r6
    1e5c:	5f 90       	pop	r5
    1e5e:	4f 90       	pop	r4
    1e60:	08 95       	ret

00001e62 <vTaskStartScheduler>:
    1e62:	af 92       	push	r10
    1e64:	bf 92       	push	r11
    1e66:	cf 92       	push	r12
    1e68:	df 92       	push	r13
    1e6a:	ef 92       	push	r14
    1e6c:	ff 92       	push	r15
    1e6e:	0f 93       	push	r16
    1e70:	a1 2c       	mov	r10, r1
    1e72:	b1 2c       	mov	r11, r1
    1e74:	c1 2c       	mov	r12, r1
    1e76:	d1 2c       	mov	r13, r1
    1e78:	e1 2c       	mov	r14, r1
    1e7a:	f1 2c       	mov	r15, r1
    1e7c:	00 e0       	ldi	r16, 0x00	; 0
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	45 e5       	ldi	r20, 0x55	; 85
    1e84:	50 e0       	ldi	r21, 0x00	; 0
    1e86:	61 e3       	ldi	r22, 0x31	; 49
    1e88:	72 e0       	ldi	r23, 0x02	; 2
    1e8a:	88 e0       	ldi	r24, 0x08	; 8
    1e8c:	91 e1       	ldi	r25, 0x11	; 17
    1e8e:	d4 de       	rcall	.-600    	; 0x1c38 <xTaskGenericCreate>
    1e90:	81 30       	cpi	r24, 0x01	; 1
    1e92:	41 f4       	brne	.+16     	; 0x1ea4 <vTaskStartScheduler+0x42>
    1e94:	f8 94       	cli
    1e96:	80 93 29 08 	sts	0x0829, r24
    1e9a:	10 92 2c 08 	sts	0x082C, r1
    1e9e:	10 92 2b 08 	sts	0x082B, r1
    1ea2:	5f da       	rcall	.-2882   	; 0x1362 <xPortStartScheduler>
    1ea4:	0f 91       	pop	r16
    1ea6:	ff 90       	pop	r15
    1ea8:	ef 90       	pop	r14
    1eaa:	df 90       	pop	r13
    1eac:	cf 90       	pop	r12
    1eae:	bf 90       	pop	r11
    1eb0:	af 90       	pop	r10
    1eb2:	08 95       	ret

00001eb4 <vTaskSuspendAll>:
    1eb4:	80 91 24 08 	lds	r24, 0x0824
    1eb8:	8f 5f       	subi	r24, 0xFF	; 255
    1eba:	80 93 24 08 	sts	0x0824, r24
    1ebe:	08 95       	ret

00001ec0 <xTaskGetTickCount>:
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	f8 94       	cli
    1ec4:	0f 92       	push	r0
    1ec6:	80 91 2b 08 	lds	r24, 0x082B
    1eca:	90 91 2c 08 	lds	r25, 0x082C
    1ece:	0f 90       	pop	r0
    1ed0:	0f be       	out	0x3f, r0	; 63
    1ed2:	08 95       	ret

00001ed4 <xTaskGetTickCountFromISR>:
    1ed4:	80 91 2b 08 	lds	r24, 0x082B
    1ed8:	90 91 2c 08 	lds	r25, 0x082C
    1edc:	08 95       	ret

00001ede <xTaskIncrementTick>:
    1ede:	cf 92       	push	r12
    1ee0:	df 92       	push	r13
    1ee2:	ef 92       	push	r14
    1ee4:	ff 92       	push	r15
    1ee6:	0f 93       	push	r16
    1ee8:	1f 93       	push	r17
    1eea:	cf 93       	push	r28
    1eec:	df 93       	push	r29
    1eee:	80 91 24 08 	lds	r24, 0x0824
    1ef2:	81 11       	cpse	r24, r1
    1ef4:	99 c0       	rjmp	.+306    	; 0x2028 <xTaskIncrementTick+0x14a>
    1ef6:	80 91 2b 08 	lds	r24, 0x082B
    1efa:	90 91 2c 08 	lds	r25, 0x082C
    1efe:	01 96       	adiw	r24, 0x01	; 1
    1f00:	90 93 2c 08 	sts	0x082C, r25
    1f04:	80 93 2b 08 	sts	0x082B, r24
    1f08:	e0 90 2b 08 	lds	r14, 0x082B
    1f0c:	f0 90 2c 08 	lds	r15, 0x082C
    1f10:	e1 14       	cp	r14, r1
    1f12:	f1 04       	cpc	r15, r1
    1f14:	b1 f4       	brne	.+44     	; 0x1f42 <xTaskIncrementTick+0x64>
    1f16:	80 91 4c 08 	lds	r24, 0x084C
    1f1a:	90 91 4d 08 	lds	r25, 0x084D
    1f1e:	20 91 4a 08 	lds	r18, 0x084A
    1f22:	30 91 4b 08 	lds	r19, 0x084B
    1f26:	30 93 4d 08 	sts	0x084D, r19
    1f2a:	20 93 4c 08 	sts	0x084C, r18
    1f2e:	90 93 4b 08 	sts	0x084B, r25
    1f32:	80 93 4a 08 	sts	0x084A, r24
    1f36:	80 91 26 08 	lds	r24, 0x0826
    1f3a:	8f 5f       	subi	r24, 0xFF	; 255
    1f3c:	80 93 26 08 	sts	0x0826, r24
    1f40:	25 de       	rcall	.-950    	; 0x1b8c <prvResetNextTaskUnblockTime>
    1f42:	80 91 05 02 	lds	r24, 0x0205
    1f46:	90 91 06 02 	lds	r25, 0x0206
    1f4a:	e8 16       	cp	r14, r24
    1f4c:	f9 06       	cpc	r15, r25
    1f4e:	08 f4       	brcc	.+2      	; 0x1f52 <xTaskIncrementTick+0x74>
    1f50:	54 c0       	rjmp	.+168    	; 0x1ffa <xTaskIncrementTick+0x11c>
    1f52:	d1 2c       	mov	r13, r1
    1f54:	cc 24       	eor	r12, r12
    1f56:	c3 94       	inc	r12
    1f58:	01 c0       	rjmp	.+2      	; 0x1f5c <xTaskIncrementTick+0x7e>
    1f5a:	dc 2c       	mov	r13, r12
    1f5c:	e0 91 4c 08 	lds	r30, 0x084C
    1f60:	f0 91 4d 08 	lds	r31, 0x084D
    1f64:	80 81       	ld	r24, Z
    1f66:	81 11       	cpse	r24, r1
    1f68:	07 c0       	rjmp	.+14     	; 0x1f78 <xTaskIncrementTick+0x9a>
    1f6a:	8f ef       	ldi	r24, 0xFF	; 255
    1f6c:	9f ef       	ldi	r25, 0xFF	; 255
    1f6e:	90 93 06 02 	sts	0x0206, r25
    1f72:	80 93 05 02 	sts	0x0205, r24
    1f76:	42 c0       	rjmp	.+132    	; 0x1ffc <xTaskIncrementTick+0x11e>
    1f78:	e0 91 4c 08 	lds	r30, 0x084C
    1f7c:	f0 91 4d 08 	lds	r31, 0x084D
    1f80:	05 80       	ldd	r0, Z+5	; 0x05
    1f82:	f6 81       	ldd	r31, Z+6	; 0x06
    1f84:	e0 2d       	mov	r30, r0
    1f86:	c6 81       	ldd	r28, Z+6	; 0x06
    1f88:	d7 81       	ldd	r29, Z+7	; 0x07
    1f8a:	2a 81       	ldd	r18, Y+2	; 0x02
    1f8c:	3b 81       	ldd	r19, Y+3	; 0x03
    1f8e:	e2 16       	cp	r14, r18
    1f90:	f3 06       	cpc	r15, r19
    1f92:	28 f4       	brcc	.+10     	; 0x1f9e <xTaskIncrementTick+0xc0>
    1f94:	30 93 06 02 	sts	0x0206, r19
    1f98:	20 93 05 02 	sts	0x0205, r18
    1f9c:	2f c0       	rjmp	.+94     	; 0x1ffc <xTaskIncrementTick+0x11e>
    1f9e:	8e 01       	movw	r16, r28
    1fa0:	0e 5f       	subi	r16, 0xFE	; 254
    1fa2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa4:	c8 01       	movw	r24, r16
    1fa6:	0e 94 9a 03 	call	0x734	; 0x734 <uxListRemove>
    1faa:	8c 89       	ldd	r24, Y+20	; 0x14
    1fac:	9d 89       	ldd	r25, Y+21	; 0x15
    1fae:	89 2b       	or	r24, r25
    1fb0:	21 f0       	breq	.+8      	; 0x1fba <xTaskIncrementTick+0xdc>
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	0c 96       	adiw	r24, 0x0c	; 12
    1fb6:	0e 94 9a 03 	call	0x734	; 0x734 <uxListRemove>
    1fba:	2e 89       	ldd	r18, Y+22	; 0x16
    1fbc:	80 91 2a 08 	lds	r24, 0x082A
    1fc0:	82 17       	cp	r24, r18
    1fc2:	10 f4       	brcc	.+4      	; 0x1fc8 <xTaskIncrementTick+0xea>
    1fc4:	20 93 2a 08 	sts	0x082A, r18
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	c9 01       	movw	r24, r18
    1fcc:	88 0f       	add	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	88 0f       	add	r24, r24
    1fd2:	99 1f       	adc	r25, r25
    1fd4:	88 0f       	add	r24, r24
    1fd6:	99 1f       	adc	r25, r25
    1fd8:	82 0f       	add	r24, r18
    1fda:	93 1f       	adc	r25, r19
    1fdc:	b8 01       	movw	r22, r16
    1fde:	80 5a       	subi	r24, 0xA0	; 160
    1fe0:	97 4f       	sbci	r25, 0xF7	; 247
    1fe2:	0e 94 48 03 	call	0x690	; 0x690 <vListInsertEnd>
    1fe6:	e0 91 8d 08 	lds	r30, 0x088D
    1fea:	f0 91 8e 08 	lds	r31, 0x088E
    1fee:	9e 89       	ldd	r25, Y+22	; 0x16
    1ff0:	86 89       	ldd	r24, Z+22	; 0x16
    1ff2:	98 17       	cp	r25, r24
    1ff4:	08 f0       	brcs	.+2      	; 0x1ff8 <xTaskIncrementTick+0x11a>
    1ff6:	b1 cf       	rjmp	.-158    	; 0x1f5a <xTaskIncrementTick+0x7c>
    1ff8:	b1 cf       	rjmp	.-158    	; 0x1f5c <xTaskIncrementTick+0x7e>
    1ffa:	d1 2c       	mov	r13, r1
    1ffc:	e0 91 8d 08 	lds	r30, 0x088D
    2000:	f0 91 8e 08 	lds	r31, 0x088E
    2004:	86 89       	ldd	r24, Z+22	; 0x16
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	fc 01       	movw	r30, r24
    200a:	ee 0f       	add	r30, r30
    200c:	ff 1f       	adc	r31, r31
    200e:	ee 0f       	add	r30, r30
    2010:	ff 1f       	adc	r31, r31
    2012:	ee 0f       	add	r30, r30
    2014:	ff 1f       	adc	r31, r31
    2016:	8e 0f       	add	r24, r30
    2018:	9f 1f       	adc	r25, r31
    201a:	fc 01       	movw	r30, r24
    201c:	e0 5a       	subi	r30, 0xA0	; 160
    201e:	f7 4f       	sbci	r31, 0xF7	; 247
    2020:	80 81       	ld	r24, Z
    2022:	82 30       	cpi	r24, 0x02	; 2
    2024:	40 f4       	brcc	.+16     	; 0x2036 <xTaskIncrementTick+0x158>
    2026:	09 c0       	rjmp	.+18     	; 0x203a <xTaskIncrementTick+0x15c>
    2028:	80 91 28 08 	lds	r24, 0x0828
    202c:	8f 5f       	subi	r24, 0xFF	; 255
    202e:	80 93 28 08 	sts	0x0828, r24
    2032:	d1 2c       	mov	r13, r1
    2034:	02 c0       	rjmp	.+4      	; 0x203a <xTaskIncrementTick+0x15c>
    2036:	dd 24       	eor	r13, r13
    2038:	d3 94       	inc	r13
    203a:	80 91 27 08 	lds	r24, 0x0827
    203e:	88 23       	and	r24, r24
    2040:	11 f0       	breq	.+4      	; 0x2046 <xTaskIncrementTick+0x168>
    2042:	dd 24       	eor	r13, r13
    2044:	d3 94       	inc	r13
    2046:	8d 2d       	mov	r24, r13
    2048:	df 91       	pop	r29
    204a:	cf 91       	pop	r28
    204c:	1f 91       	pop	r17
    204e:	0f 91       	pop	r16
    2050:	ff 90       	pop	r15
    2052:	ef 90       	pop	r14
    2054:	df 90       	pop	r13
    2056:	cf 90       	pop	r12
    2058:	08 95       	ret

0000205a <xTaskResumeAll>:
    205a:	df 92       	push	r13
    205c:	ef 92       	push	r14
    205e:	ff 92       	push	r15
    2060:	0f 93       	push	r16
    2062:	1f 93       	push	r17
    2064:	cf 93       	push	r28
    2066:	df 93       	push	r29
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	0f 92       	push	r0
    206e:	80 91 24 08 	lds	r24, 0x0824
    2072:	81 50       	subi	r24, 0x01	; 1
    2074:	80 93 24 08 	sts	0x0824, r24
    2078:	80 91 24 08 	lds	r24, 0x0824
    207c:	81 11       	cpse	r24, r1
    207e:	5f c0       	rjmp	.+190    	; 0x213e <xTaskResumeAll+0xe4>
    2080:	80 91 2d 08 	lds	r24, 0x082D
    2084:	88 23       	and	r24, r24
    2086:	09 f4       	brne	.+2      	; 0x208a <xTaskResumeAll+0x30>
    2088:	5c c0       	rjmp	.+184    	; 0x2142 <xTaskResumeAll+0xe8>
    208a:	0f 2e       	mov	r0, r31
    208c:	f1 e4       	ldi	r31, 0x41	; 65
    208e:	ef 2e       	mov	r14, r31
    2090:	f8 e0       	ldi	r31, 0x08	; 8
    2092:	ff 2e       	mov	r15, r31
    2094:	f0 2d       	mov	r31, r0
    2096:	dd 24       	eor	r13, r13
    2098:	d3 94       	inc	r13
    209a:	30 c0       	rjmp	.+96     	; 0x20fc <xTaskResumeAll+0xa2>
    209c:	e0 91 46 08 	lds	r30, 0x0846
    20a0:	f0 91 47 08 	lds	r31, 0x0847
    20a4:	c6 81       	ldd	r28, Z+6	; 0x06
    20a6:	d7 81       	ldd	r29, Z+7	; 0x07
    20a8:	ce 01       	movw	r24, r28
    20aa:	0c 96       	adiw	r24, 0x0c	; 12
    20ac:	0e 94 9a 03 	call	0x734	; 0x734 <uxListRemove>
    20b0:	8e 01       	movw	r16, r28
    20b2:	0e 5f       	subi	r16, 0xFE	; 254
    20b4:	1f 4f       	sbci	r17, 0xFF	; 255
    20b6:	c8 01       	movw	r24, r16
    20b8:	0e 94 9a 03 	call	0x734	; 0x734 <uxListRemove>
    20bc:	8e 89       	ldd	r24, Y+22	; 0x16
    20be:	90 91 2a 08 	lds	r25, 0x082A
    20c2:	98 17       	cp	r25, r24
    20c4:	10 f4       	brcc	.+4      	; 0x20ca <xTaskResumeAll+0x70>
    20c6:	80 93 2a 08 	sts	0x082A, r24
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	9c 01       	movw	r18, r24
    20ce:	22 0f       	add	r18, r18
    20d0:	33 1f       	adc	r19, r19
    20d2:	22 0f       	add	r18, r18
    20d4:	33 1f       	adc	r19, r19
    20d6:	22 0f       	add	r18, r18
    20d8:	33 1f       	adc	r19, r19
    20da:	82 0f       	add	r24, r18
    20dc:	93 1f       	adc	r25, r19
    20de:	b8 01       	movw	r22, r16
    20e0:	80 5a       	subi	r24, 0xA0	; 160
    20e2:	97 4f       	sbci	r25, 0xF7	; 247
    20e4:	0e 94 48 03 	call	0x690	; 0x690 <vListInsertEnd>
    20e8:	e0 91 8d 08 	lds	r30, 0x088D
    20ec:	f0 91 8e 08 	lds	r31, 0x088E
    20f0:	9e 89       	ldd	r25, Y+22	; 0x16
    20f2:	86 89       	ldd	r24, Z+22	; 0x16
    20f4:	98 17       	cp	r25, r24
    20f6:	10 f0       	brcs	.+4      	; 0x20fc <xTaskResumeAll+0xa2>
    20f8:	d0 92 27 08 	sts	0x0827, r13
    20fc:	f7 01       	movw	r30, r14
    20fe:	80 81       	ld	r24, Z
    2100:	81 11       	cpse	r24, r1
    2102:	cc cf       	rjmp	.-104    	; 0x209c <xTaskResumeAll+0x42>
    2104:	80 91 28 08 	lds	r24, 0x0828
    2108:	88 23       	and	r24, r24
    210a:	91 f0       	breq	.+36     	; 0x2130 <xTaskResumeAll+0xd6>
    210c:	80 91 28 08 	lds	r24, 0x0828
    2110:	88 23       	and	r24, r24
    2112:	71 f0       	breq	.+28     	; 0x2130 <xTaskResumeAll+0xd6>
    2114:	c1 e0       	ldi	r28, 0x01	; 1
    2116:	e3 de       	rcall	.-570    	; 0x1ede <xTaskIncrementTick>
    2118:	81 11       	cpse	r24, r1
    211a:	c0 93 27 08 	sts	0x0827, r28
    211e:	80 91 28 08 	lds	r24, 0x0828
    2122:	81 50       	subi	r24, 0x01	; 1
    2124:	80 93 28 08 	sts	0x0828, r24
    2128:	80 91 28 08 	lds	r24, 0x0828
    212c:	81 11       	cpse	r24, r1
    212e:	f3 cf       	rjmp	.-26     	; 0x2116 <xTaskResumeAll+0xbc>
    2130:	80 91 27 08 	lds	r24, 0x0827
    2134:	81 30       	cpi	r24, 0x01	; 1
    2136:	39 f4       	brne	.+14     	; 0x2146 <xTaskResumeAll+0xec>
    2138:	51 d9       	rcall	.-3422   	; 0x13dc <vPortYield>
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	05 c0       	rjmp	.+10     	; 0x2148 <xTaskResumeAll+0xee>
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	03 c0       	rjmp	.+6      	; 0x2148 <xTaskResumeAll+0xee>
    2142:	80 e0       	ldi	r24, 0x00	; 0
    2144:	01 c0       	rjmp	.+2      	; 0x2148 <xTaskResumeAll+0xee>
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	0f 90       	pop	r0
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	df 91       	pop	r29
    214e:	cf 91       	pop	r28
    2150:	1f 91       	pop	r17
    2152:	0f 91       	pop	r16
    2154:	ff 90       	pop	r15
    2156:	ef 90       	pop	r14
    2158:	df 90       	pop	r13
    215a:	08 95       	ret

0000215c <vTaskDelayUntil>:
    215c:	0f 93       	push	r16
    215e:	1f 93       	push	r17
    2160:	cf 93       	push	r28
    2162:	df 93       	push	r29
    2164:	8c 01       	movw	r16, r24
    2166:	eb 01       	movw	r28, r22
    2168:	a5 de       	rcall	.-694    	; 0x1eb4 <vTaskSuspendAll>
    216a:	80 91 2b 08 	lds	r24, 0x082B
    216e:	90 91 2c 08 	lds	r25, 0x082C
    2172:	f8 01       	movw	r30, r16
    2174:	20 81       	ld	r18, Z
    2176:	31 81       	ldd	r19, Z+1	; 0x01
    2178:	c2 0f       	add	r28, r18
    217a:	d3 1f       	adc	r29, r19
    217c:	82 17       	cp	r24, r18
    217e:	93 07       	cpc	r25, r19
    2180:	48 f4       	brcc	.+18     	; 0x2194 <vTaskDelayUntil+0x38>
    2182:	c2 17       	cp	r28, r18
    2184:	d3 07       	cpc	r29, r19
    2186:	f8 f4       	brcc	.+62     	; 0x21c6 <vTaskDelayUntil+0x6a>
    2188:	d1 83       	std	Z+1, r29	; 0x01
    218a:	c0 83       	st	Z, r28
    218c:	8c 17       	cp	r24, r28
    218e:	9d 07       	cpc	r25, r29
    2190:	88 f4       	brcc	.+34     	; 0x21b4 <vTaskDelayUntil+0x58>
    2192:	07 c0       	rjmp	.+14     	; 0x21a2 <vTaskDelayUntil+0x46>
    2194:	c2 17       	cp	r28, r18
    2196:	d3 07       	cpc	r29, r19
    2198:	90 f0       	brcs	.+36     	; 0x21be <vTaskDelayUntil+0x62>
    219a:	8c 17       	cp	r24, r28
    219c:	9d 07       	cpc	r25, r29
    219e:	78 f0       	brcs	.+30     	; 0x21be <vTaskDelayUntil+0x62>
    21a0:	12 c0       	rjmp	.+36     	; 0x21c6 <vTaskDelayUntil+0x6a>
    21a2:	80 91 8d 08 	lds	r24, 0x088D
    21a6:	90 91 8e 08 	lds	r25, 0x088E
    21aa:	02 96       	adiw	r24, 0x02	; 2
    21ac:	0e 94 9a 03 	call	0x734	; 0x734 <uxListRemove>
    21b0:	ce 01       	movw	r24, r28
    21b2:	0b dd       	rcall	.-1514   	; 0x1bca <prvAddCurrentTaskToDelayedList>
    21b4:	52 df       	rcall	.-348    	; 0x205a <xTaskResumeAll>
    21b6:	81 11       	cpse	r24, r1
    21b8:	0a c0       	rjmp	.+20     	; 0x21ce <vTaskDelayUntil+0x72>
    21ba:	10 d9       	rcall	.-3552   	; 0x13dc <vPortYield>
    21bc:	08 c0       	rjmp	.+16     	; 0x21ce <vTaskDelayUntil+0x72>
    21be:	f8 01       	movw	r30, r16
    21c0:	d1 83       	std	Z+1, r29	; 0x01
    21c2:	c0 83       	st	Z, r28
    21c4:	ee cf       	rjmp	.-36     	; 0x21a2 <vTaskDelayUntil+0x46>
    21c6:	f8 01       	movw	r30, r16
    21c8:	d1 83       	std	Z+1, r29	; 0x01
    21ca:	c0 83       	st	Z, r28
    21cc:	f3 cf       	rjmp	.-26     	; 0x21b4 <vTaskDelayUntil+0x58>
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	1f 91       	pop	r17
    21d4:	0f 91       	pop	r16
    21d6:	08 95       	ret

000021d8 <vTaskDelay>:
    21d8:	cf 93       	push	r28
    21da:	df 93       	push	r29
    21dc:	ec 01       	movw	r28, r24
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	99 f0       	breq	.+38     	; 0x2208 <__stack+0x9>
    21e2:	68 de       	rcall	.-816    	; 0x1eb4 <vTaskSuspendAll>
    21e4:	80 91 2b 08 	lds	r24, 0x082B
    21e8:	90 91 2c 08 	lds	r25, 0x082C
    21ec:	c8 0f       	add	r28, r24
    21ee:	d9 1f       	adc	r29, r25
    21f0:	80 91 8d 08 	lds	r24, 0x088D
    21f4:	90 91 8e 08 	lds	r25, 0x088E
    21f8:	02 96       	adiw	r24, 0x02	; 2
    21fa:	0e 94 9a 03 	call	0x734	; 0x734 <uxListRemove>
    21fe:	ce 01       	movw	r24, r28
    2200:	e4 dc       	rcall	.-1592   	; 0x1bca <prvAddCurrentTaskToDelayedList>
    2202:	2b df       	rcall	.-426    	; 0x205a <xTaskResumeAll>
    2204:	81 11       	cpse	r24, r1
    2206:	01 c0       	rjmp	.+2      	; 0x220a <__stack+0xb>
    2208:	e9 d8       	rcall	.-3630   	; 0x13dc <vPortYield>
    220a:	df 91       	pop	r29
    220c:	cf 91       	pop	r28
    220e:	08 95       	ret

00002210 <prvIdleTask>:
    2210:	0f 2e       	mov	r0, r31
    2212:	f0 e6       	ldi	r31, 0x60	; 96
    2214:	ef 2e       	mov	r14, r31
    2216:	f8 e0       	ldi	r31, 0x08	; 8
    2218:	ff 2e       	mov	r15, r31
    221a:	f0 2d       	mov	r31, r0
    221c:	c8 e3       	ldi	r28, 0x38	; 56
    221e:	d8 e0       	ldi	r29, 0x08	; 8
    2220:	26 c0       	rjmp	.+76     	; 0x226e <prvIdleTask+0x5e>
    2222:	48 de       	rcall	.-880    	; 0x1eb4 <vTaskSuspendAll>
    2224:	18 81       	ld	r17, Y
    2226:	19 df       	rcall	.-462    	; 0x205a <xTaskResumeAll>
    2228:	11 23       	and	r17, r17
    222a:	09 f1       	breq	.+66     	; 0x226e <prvIdleTask+0x5e>
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	0f 92       	push	r0
    2232:	e0 91 3d 08 	lds	r30, 0x083D
    2236:	f0 91 3e 08 	lds	r31, 0x083E
    223a:	06 81       	ldd	r16, Z+6	; 0x06
    223c:	17 81       	ldd	r17, Z+7	; 0x07
    223e:	c8 01       	movw	r24, r16
    2240:	02 96       	adiw	r24, 0x02	; 2
    2242:	0e 94 9a 03 	call	0x734	; 0x734 <uxListRemove>
    2246:	80 91 2d 08 	lds	r24, 0x082D
    224a:	81 50       	subi	r24, 0x01	; 1
    224c:	80 93 2d 08 	sts	0x082D, r24
    2250:	80 91 37 08 	lds	r24, 0x0837
    2254:	81 50       	subi	r24, 0x01	; 1
    2256:	80 93 37 08 	sts	0x0837, r24
    225a:	0f 90       	pop	r0
    225c:	0f be       	out	0x3f, r0	; 63
    225e:	f8 01       	movw	r30, r16
    2260:	87 89       	ldd	r24, Z+23	; 0x17
    2262:	90 8d       	ldd	r25, Z+24	; 0x18
    2264:	0e 94 35 03 	call	0x66a	; 0x66a <vPortFree>
    2268:	c8 01       	movw	r24, r16
    226a:	0e 94 35 03 	call	0x66a	; 0x66a <vPortFree>
    226e:	80 91 37 08 	lds	r24, 0x0837
    2272:	81 11       	cpse	r24, r1
    2274:	d6 cf       	rjmp	.-84     	; 0x2222 <prvIdleTask+0x12>
    2276:	f7 01       	movw	r30, r14
    2278:	80 81       	ld	r24, Z
    227a:	82 30       	cpi	r24, 0x02	; 2
    227c:	c0 f3       	brcs	.-16     	; 0x226e <prvIdleTask+0x5e>
    227e:	ae d8       	rcall	.-3748   	; 0x13dc <vPortYield>
    2280:	f6 cf       	rjmp	.-20     	; 0x226e <prvIdleTask+0x5e>

00002282 <vTaskSwitchContext>:
    2282:	80 91 24 08 	lds	r24, 0x0824
    2286:	88 23       	and	r24, r24
    2288:	21 f0       	breq	.+8      	; 0x2292 <vTaskSwitchContext+0x10>
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	80 93 27 08 	sts	0x0827, r24
    2290:	08 95       	ret
    2292:	10 92 27 08 	sts	0x0827, r1
    2296:	80 91 2a 08 	lds	r24, 0x082A
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	fc 01       	movw	r30, r24
    229e:	ee 0f       	add	r30, r30
    22a0:	ff 1f       	adc	r31, r31
    22a2:	ee 0f       	add	r30, r30
    22a4:	ff 1f       	adc	r31, r31
    22a6:	ee 0f       	add	r30, r30
    22a8:	ff 1f       	adc	r31, r31
    22aa:	8e 0f       	add	r24, r30
    22ac:	9f 1f       	adc	r25, r31
    22ae:	fc 01       	movw	r30, r24
    22b0:	e0 5a       	subi	r30, 0xA0	; 160
    22b2:	f7 4f       	sbci	r31, 0xF7	; 247
    22b4:	80 81       	ld	r24, Z
    22b6:	81 11       	cpse	r24, r1
    22b8:	17 c0       	rjmp	.+46     	; 0x22e8 <vTaskSwitchContext+0x66>
    22ba:	80 91 2a 08 	lds	r24, 0x082A
    22be:	81 50       	subi	r24, 0x01	; 1
    22c0:	80 93 2a 08 	sts	0x082A, r24
    22c4:	80 91 2a 08 	lds	r24, 0x082A
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	fc 01       	movw	r30, r24
    22cc:	ee 0f       	add	r30, r30
    22ce:	ff 1f       	adc	r31, r31
    22d0:	ee 0f       	add	r30, r30
    22d2:	ff 1f       	adc	r31, r31
    22d4:	ee 0f       	add	r30, r30
    22d6:	ff 1f       	adc	r31, r31
    22d8:	8e 0f       	add	r24, r30
    22da:	9f 1f       	adc	r25, r31
    22dc:	fc 01       	movw	r30, r24
    22de:	e0 5a       	subi	r30, 0xA0	; 160
    22e0:	f7 4f       	sbci	r31, 0xF7	; 247
    22e2:	80 81       	ld	r24, Z
    22e4:	88 23       	and	r24, r24
    22e6:	49 f3       	breq	.-46     	; 0x22ba <vTaskSwitchContext+0x38>
    22e8:	e0 91 2a 08 	lds	r30, 0x082A
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	cf 01       	movw	r24, r30
    22f0:	88 0f       	add	r24, r24
    22f2:	99 1f       	adc	r25, r25
    22f4:	88 0f       	add	r24, r24
    22f6:	99 1f       	adc	r25, r25
    22f8:	88 0f       	add	r24, r24
    22fa:	99 1f       	adc	r25, r25
    22fc:	e8 0f       	add	r30, r24
    22fe:	f9 1f       	adc	r31, r25
    2300:	e0 5a       	subi	r30, 0xA0	; 160
    2302:	f7 4f       	sbci	r31, 0xF7	; 247
    2304:	a1 81       	ldd	r26, Z+1	; 0x01
    2306:	b2 81       	ldd	r27, Z+2	; 0x02
    2308:	12 96       	adiw	r26, 0x02	; 2
    230a:	0d 90       	ld	r0, X+
    230c:	bc 91       	ld	r27, X
    230e:	a0 2d       	mov	r26, r0
    2310:	b2 83       	std	Z+2, r27	; 0x02
    2312:	a1 83       	std	Z+1, r26	; 0x01
    2314:	cf 01       	movw	r24, r30
    2316:	03 96       	adiw	r24, 0x03	; 3
    2318:	a8 17       	cp	r26, r24
    231a:	b9 07       	cpc	r27, r25
    231c:	31 f4       	brne	.+12     	; 0x232a <vTaskSwitchContext+0xa8>
    231e:	12 96       	adiw	r26, 0x02	; 2
    2320:	8d 91       	ld	r24, X+
    2322:	9c 91       	ld	r25, X
    2324:	13 97       	sbiw	r26, 0x03	; 3
    2326:	92 83       	std	Z+2, r25	; 0x02
    2328:	81 83       	std	Z+1, r24	; 0x01
    232a:	01 80       	ldd	r0, Z+1	; 0x01
    232c:	f2 81       	ldd	r31, Z+2	; 0x02
    232e:	e0 2d       	mov	r30, r0
    2330:	86 81       	ldd	r24, Z+6	; 0x06
    2332:	97 81       	ldd	r25, Z+7	; 0x07
    2334:	90 93 8e 08 	sts	0x088E, r25
    2338:	80 93 8d 08 	sts	0x088D, r24
    233c:	08 95       	ret

0000233e <vTaskSuspend>:
    233e:	0f 93       	push	r16
    2340:	1f 93       	push	r17
    2342:	cf 93       	push	r28
    2344:	df 93       	push	r29
    2346:	ec 01       	movw	r28, r24
    2348:	0f b6       	in	r0, 0x3f	; 63
    234a:	f8 94       	cli
    234c:	0f 92       	push	r0
    234e:	00 97       	sbiw	r24, 0x00	; 0
    2350:	21 f4       	brne	.+8      	; 0x235a <vTaskSuspend+0x1c>
    2352:	c0 91 8d 08 	lds	r28, 0x088D
    2356:	d0 91 8e 08 	lds	r29, 0x088E
    235a:	8e 01       	movw	r16, r28
    235c:	0e 5f       	subi	r16, 0xFE	; 254
    235e:	1f 4f       	sbci	r17, 0xFF	; 255
    2360:	c8 01       	movw	r24, r16
    2362:	0e 94 9a 03 	call	0x734	; 0x734 <uxListRemove>
    2366:	8c 89       	ldd	r24, Y+20	; 0x14
    2368:	9d 89       	ldd	r25, Y+21	; 0x15
    236a:	89 2b       	or	r24, r25
    236c:	21 f0       	breq	.+8      	; 0x2376 <vTaskSuspend+0x38>
    236e:	ce 01       	movw	r24, r28
    2370:	0c 96       	adiw	r24, 0x0c	; 12
    2372:	0e 94 9a 03 	call	0x734	; 0x734 <uxListRemove>
    2376:	b8 01       	movw	r22, r16
    2378:	8e e2       	ldi	r24, 0x2E	; 46
    237a:	98 e0       	ldi	r25, 0x08	; 8
    237c:	0e 94 48 03 	call	0x690	; 0x690 <vListInsertEnd>
    2380:	0f 90       	pop	r0
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	80 91 8d 08 	lds	r24, 0x088D
    2388:	90 91 8e 08 	lds	r25, 0x088E
    238c:	c8 17       	cp	r28, r24
    238e:	d9 07       	cpc	r29, r25
    2390:	99 f4       	brne	.+38     	; 0x23b8 <vTaskSuspend+0x7a>
    2392:	80 91 29 08 	lds	r24, 0x0829
    2396:	88 23       	and	r24, r24
    2398:	11 f0       	breq	.+4      	; 0x239e <vTaskSuspend+0x60>
    239a:	20 d8       	rcall	.-4032   	; 0x13dc <vPortYield>
    239c:	17 c0       	rjmp	.+46     	; 0x23cc <vTaskSuspend+0x8e>
    239e:	80 91 2d 08 	lds	r24, 0x082D
    23a2:	90 91 2e 08 	lds	r25, 0x082E
    23a6:	98 13       	cpse	r25, r24
    23a8:	05 c0       	rjmp	.+10     	; 0x23b4 <vTaskSuspend+0x76>
    23aa:	10 92 8e 08 	sts	0x088E, r1
    23ae:	10 92 8d 08 	sts	0x088D, r1
    23b2:	0c c0       	rjmp	.+24     	; 0x23cc <vTaskSuspend+0x8e>
    23b4:	66 df       	rcall	.-308    	; 0x2282 <vTaskSwitchContext>
    23b6:	0a c0       	rjmp	.+20     	; 0x23cc <vTaskSuspend+0x8e>
    23b8:	80 91 29 08 	lds	r24, 0x0829
    23bc:	88 23       	and	r24, r24
    23be:	31 f0       	breq	.+12     	; 0x23cc <vTaskSuspend+0x8e>
    23c0:	0f b6       	in	r0, 0x3f	; 63
    23c2:	f8 94       	cli
    23c4:	0f 92       	push	r0
    23c6:	e2 db       	rcall	.-2108   	; 0x1b8c <prvResetNextTaskUnblockTime>
    23c8:	0f 90       	pop	r0
    23ca:	0f be       	out	0x3f, r0	; 63
    23cc:	df 91       	pop	r29
    23ce:	cf 91       	pop	r28
    23d0:	1f 91       	pop	r17
    23d2:	0f 91       	pop	r16
    23d4:	08 95       	ret

000023d6 <vTaskPlaceOnEventList>:
    23d6:	cf 93       	push	r28
    23d8:	df 93       	push	r29
    23da:	eb 01       	movw	r28, r22
    23dc:	60 91 8d 08 	lds	r22, 0x088D
    23e0:	70 91 8e 08 	lds	r23, 0x088E
    23e4:	64 5f       	subi	r22, 0xF4	; 244
    23e6:	7f 4f       	sbci	r23, 0xFF	; 255
    23e8:	0e 94 69 03 	call	0x6d2	; 0x6d2 <vListInsert>
    23ec:	80 91 8d 08 	lds	r24, 0x088D
    23f0:	90 91 8e 08 	lds	r25, 0x088E
    23f4:	02 96       	adiw	r24, 0x02	; 2
    23f6:	0e 94 9a 03 	call	0x734	; 0x734 <uxListRemove>
    23fa:	cf 3f       	cpi	r28, 0xFF	; 255
    23fc:	8f ef       	ldi	r24, 0xFF	; 255
    23fe:	d8 07       	cpc	r29, r24
    2400:	59 f4       	brne	.+22     	; 0x2418 <vTaskPlaceOnEventList+0x42>
    2402:	60 91 8d 08 	lds	r22, 0x088D
    2406:	70 91 8e 08 	lds	r23, 0x088E
    240a:	6e 5f       	subi	r22, 0xFE	; 254
    240c:	7f 4f       	sbci	r23, 0xFF	; 255
    240e:	8e e2       	ldi	r24, 0x2E	; 46
    2410:	98 e0       	ldi	r25, 0x08	; 8
    2412:	0e 94 48 03 	call	0x690	; 0x690 <vListInsertEnd>
    2416:	07 c0       	rjmp	.+14     	; 0x2426 <vTaskPlaceOnEventList+0x50>
    2418:	80 91 2b 08 	lds	r24, 0x082B
    241c:	90 91 2c 08 	lds	r25, 0x082C
    2420:	8c 0f       	add	r24, r28
    2422:	9d 1f       	adc	r25, r29
    2424:	d2 db       	rcall	.-2140   	; 0x1bca <prvAddCurrentTaskToDelayedList>
    2426:	df 91       	pop	r29
    2428:	cf 91       	pop	r28
    242a:	08 95       	ret

0000242c <xTaskRemoveFromEventList>:
    242c:	0f 93       	push	r16
    242e:	1f 93       	push	r17
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29
    2434:	dc 01       	movw	r26, r24
    2436:	15 96       	adiw	r26, 0x05	; 5
    2438:	ed 91       	ld	r30, X+
    243a:	fc 91       	ld	r31, X
    243c:	16 97       	sbiw	r26, 0x06	; 6
    243e:	c6 81       	ldd	r28, Z+6	; 0x06
    2440:	d7 81       	ldd	r29, Z+7	; 0x07
    2442:	8e 01       	movw	r16, r28
    2444:	04 5f       	subi	r16, 0xF4	; 244
    2446:	1f 4f       	sbci	r17, 0xFF	; 255
    2448:	c8 01       	movw	r24, r16
    244a:	0e 94 9a 03 	call	0x734	; 0x734 <uxListRemove>
    244e:	80 91 24 08 	lds	r24, 0x0824
    2452:	81 11       	cpse	r24, r1
    2454:	1c c0       	rjmp	.+56     	; 0x248e <xTaskRemoveFromEventList+0x62>
    2456:	0a 50       	subi	r16, 0x0A	; 10
    2458:	11 09       	sbc	r17, r1
    245a:	c8 01       	movw	r24, r16
    245c:	0e 94 9a 03 	call	0x734	; 0x734 <uxListRemove>
    2460:	8e 89       	ldd	r24, Y+22	; 0x16
    2462:	90 91 2a 08 	lds	r25, 0x082A
    2466:	98 17       	cp	r25, r24
    2468:	10 f4       	brcc	.+4      	; 0x246e <xTaskRemoveFromEventList+0x42>
    246a:	80 93 2a 08 	sts	0x082A, r24
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	9c 01       	movw	r18, r24
    2472:	22 0f       	add	r18, r18
    2474:	33 1f       	adc	r19, r19
    2476:	22 0f       	add	r18, r18
    2478:	33 1f       	adc	r19, r19
    247a:	22 0f       	add	r18, r18
    247c:	33 1f       	adc	r19, r19
    247e:	82 0f       	add	r24, r18
    2480:	93 1f       	adc	r25, r19
    2482:	b8 01       	movw	r22, r16
    2484:	80 5a       	subi	r24, 0xA0	; 160
    2486:	97 4f       	sbci	r25, 0xF7	; 247
    2488:	0e 94 48 03 	call	0x690	; 0x690 <vListInsertEnd>
    248c:	05 c0       	rjmp	.+10     	; 0x2498 <xTaskRemoveFromEventList+0x6c>
    248e:	b8 01       	movw	r22, r16
    2490:	81 e4       	ldi	r24, 0x41	; 65
    2492:	98 e0       	ldi	r25, 0x08	; 8
    2494:	0e 94 48 03 	call	0x690	; 0x690 <vListInsertEnd>
    2498:	e0 91 8d 08 	lds	r30, 0x088D
    249c:	f0 91 8e 08 	lds	r31, 0x088E
    24a0:	9e 89       	ldd	r25, Y+22	; 0x16
    24a2:	86 89       	ldd	r24, Z+22	; 0x16
    24a4:	89 17       	cp	r24, r25
    24a6:	20 f4       	brcc	.+8      	; 0x24b0 <xTaskRemoveFromEventList+0x84>
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	80 93 27 08 	sts	0x0827, r24
    24ae:	01 c0       	rjmp	.+2      	; 0x24b2 <xTaskRemoveFromEventList+0x86>
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	df 91       	pop	r29
    24b4:	cf 91       	pop	r28
    24b6:	1f 91       	pop	r17
    24b8:	0f 91       	pop	r16
    24ba:	08 95       	ret

000024bc <vTaskSetTimeOutState>:
    24bc:	20 91 26 08 	lds	r18, 0x0826
    24c0:	fc 01       	movw	r30, r24
    24c2:	20 83       	st	Z, r18
    24c4:	20 91 2b 08 	lds	r18, 0x082B
    24c8:	30 91 2c 08 	lds	r19, 0x082C
    24cc:	32 83       	std	Z+2, r19	; 0x02
    24ce:	21 83       	std	Z+1, r18	; 0x01
    24d0:	08 95       	ret

000024d2 <xTaskCheckForTimeOut>:
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	0f 92       	push	r0
    24d8:	40 91 2b 08 	lds	r20, 0x082B
    24dc:	50 91 2c 08 	lds	r21, 0x082C
    24e0:	db 01       	movw	r26, r22
    24e2:	2d 91       	ld	r18, X+
    24e4:	3c 91       	ld	r19, X
    24e6:	2f 3f       	cpi	r18, 0xFF	; 255
    24e8:	bf ef       	ldi	r27, 0xFF	; 255
    24ea:	3b 07       	cpc	r19, r27
    24ec:	11 f1       	breq	.+68     	; 0x2532 <xTaskCheckForTimeOut+0x60>
    24ee:	e0 91 26 08 	lds	r30, 0x0826
    24f2:	dc 01       	movw	r26, r24
    24f4:	fc 91       	ld	r31, X
    24f6:	fe 17       	cp	r31, r30
    24f8:	39 f0       	breq	.+14     	; 0x2508 <xTaskCheckForTimeOut+0x36>
    24fa:	11 96       	adiw	r26, 0x01	; 1
    24fc:	ed 91       	ld	r30, X+
    24fe:	fc 91       	ld	r31, X
    2500:	12 97       	sbiw	r26, 0x02	; 2
    2502:	4e 17       	cp	r20, r30
    2504:	5f 07       	cpc	r21, r31
    2506:	b8 f4       	brcc	.+46     	; 0x2536 <xTaskCheckForTimeOut+0x64>
    2508:	dc 01       	movw	r26, r24
    250a:	11 96       	adiw	r26, 0x01	; 1
    250c:	ed 91       	ld	r30, X+
    250e:	fc 91       	ld	r31, X
    2510:	12 97       	sbiw	r26, 0x02	; 2
    2512:	da 01       	movw	r26, r20
    2514:	ae 1b       	sub	r26, r30
    2516:	bf 0b       	sbc	r27, r31
    2518:	a2 17       	cp	r26, r18
    251a:	b3 07       	cpc	r27, r19
    251c:	70 f4       	brcc	.+28     	; 0x253a <xTaskCheckForTimeOut+0x68>
    251e:	e4 1b       	sub	r30, r20
    2520:	f5 0b       	sbc	r31, r21
    2522:	2e 0f       	add	r18, r30
    2524:	3f 1f       	adc	r19, r31
    2526:	fb 01       	movw	r30, r22
    2528:	31 83       	std	Z+1, r19	; 0x01
    252a:	20 83       	st	Z, r18
    252c:	c7 df       	rcall	.-114    	; 0x24bc <vTaskSetTimeOutState>
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	05 c0       	rjmp	.+10     	; 0x253c <xTaskCheckForTimeOut+0x6a>
    2532:	80 e0       	ldi	r24, 0x00	; 0
    2534:	03 c0       	rjmp	.+6      	; 0x253c <xTaskCheckForTimeOut+0x6a>
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	01 c0       	rjmp	.+2      	; 0x253c <xTaskCheckForTimeOut+0x6a>
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	0f 90       	pop	r0
    253e:	0f be       	out	0x3f, r0	; 63
    2540:	08 95       	ret

00002542 <vTaskMissedYield>:
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	80 93 27 08 	sts	0x0827, r24
    2548:	08 95       	ret

0000254a <vTaskPriorityInherit>:
    254a:	0f 93       	push	r16
    254c:	1f 93       	push	r17
    254e:	cf 93       	push	r28
    2550:	df 93       	push	r29
    2552:	ec 01       	movw	r28, r24
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	09 f4       	brne	.+2      	; 0x255a <vTaskPriorityInherit+0x10>
    2558:	51 c0       	rjmp	.+162    	; 0x25fc <vTaskPriorityInherit+0xb2>
    255a:	8e 89       	ldd	r24, Y+22	; 0x16
    255c:	e0 91 8d 08 	lds	r30, 0x088D
    2560:	f0 91 8e 08 	lds	r31, 0x088E
    2564:	96 89       	ldd	r25, Z+22	; 0x16
    2566:	89 17       	cp	r24, r25
    2568:	08 f0       	brcs	.+2      	; 0x256c <vTaskPriorityInherit+0x22>
    256a:	48 c0       	rjmp	.+144    	; 0x25fc <vTaskPriorityInherit+0xb2>
    256c:	2c 85       	ldd	r18, Y+12	; 0x0c
    256e:	3d 85       	ldd	r19, Y+13	; 0x0d
    2570:	33 23       	and	r19, r19
    2572:	5c f0       	brlt	.+22     	; 0x258a <vTaskPriorityInherit+0x40>
    2574:	e0 91 8d 08 	lds	r30, 0x088D
    2578:	f0 91 8e 08 	lds	r31, 0x088E
    257c:	96 89       	ldd	r25, Z+22	; 0x16
    257e:	25 e0       	ldi	r18, 0x05	; 5
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	29 1b       	sub	r18, r25
    2584:	31 09       	sbc	r19, r1
    2586:	3d 87       	std	Y+13, r19	; 0x0d
    2588:	2c 87       	std	Y+12, r18	; 0x0c
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	9c 01       	movw	r18, r24
    258e:	22 0f       	add	r18, r18
    2590:	33 1f       	adc	r19, r19
    2592:	22 0f       	add	r18, r18
    2594:	33 1f       	adc	r19, r19
    2596:	22 0f       	add	r18, r18
    2598:	33 1f       	adc	r19, r19
    259a:	82 0f       	add	r24, r18
    259c:	93 1f       	adc	r25, r19
    259e:	80 5a       	subi	r24, 0xA0	; 160
    25a0:	97 4f       	sbci	r25, 0xF7	; 247
    25a2:	2a 85       	ldd	r18, Y+10	; 0x0a
    25a4:	3b 85       	ldd	r19, Y+11	; 0x0b
    25a6:	28 17       	cp	r18, r24
    25a8:	39 07       	cpc	r19, r25
    25aa:	11 f5       	brne	.+68     	; 0x25f0 <vTaskPriorityInherit+0xa6>
    25ac:	8e 01       	movw	r16, r28
    25ae:	0e 5f       	subi	r16, 0xFE	; 254
    25b0:	1f 4f       	sbci	r17, 0xFF	; 255
    25b2:	c8 01       	movw	r24, r16
    25b4:	0e 94 9a 03 	call	0x734	; 0x734 <uxListRemove>
    25b8:	e0 91 8d 08 	lds	r30, 0x088D
    25bc:	f0 91 8e 08 	lds	r31, 0x088E
    25c0:	86 89       	ldd	r24, Z+22	; 0x16
    25c2:	8e 8b       	std	Y+22, r24	; 0x16
    25c4:	90 91 2a 08 	lds	r25, 0x082A
    25c8:	98 17       	cp	r25, r24
    25ca:	10 f4       	brcc	.+4      	; 0x25d0 <vTaskPriorityInherit+0x86>
    25cc:	80 93 2a 08 	sts	0x082A, r24
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	9c 01       	movw	r18, r24
    25d4:	22 0f       	add	r18, r18
    25d6:	33 1f       	adc	r19, r19
    25d8:	22 0f       	add	r18, r18
    25da:	33 1f       	adc	r19, r19
    25dc:	22 0f       	add	r18, r18
    25de:	33 1f       	adc	r19, r19
    25e0:	82 0f       	add	r24, r18
    25e2:	93 1f       	adc	r25, r19
    25e4:	b8 01       	movw	r22, r16
    25e6:	80 5a       	subi	r24, 0xA0	; 160
    25e8:	97 4f       	sbci	r25, 0xF7	; 247
    25ea:	0e 94 48 03 	call	0x690	; 0x690 <vListInsertEnd>
    25ee:	06 c0       	rjmp	.+12     	; 0x25fc <vTaskPriorityInherit+0xb2>
    25f0:	e0 91 8d 08 	lds	r30, 0x088D
    25f4:	f0 91 8e 08 	lds	r31, 0x088E
    25f8:	86 89       	ldd	r24, Z+22	; 0x16
    25fa:	8e 8b       	std	Y+22, r24	; 0x16
    25fc:	df 91       	pop	r29
    25fe:	cf 91       	pop	r28
    2600:	1f 91       	pop	r17
    2602:	0f 91       	pop	r16
    2604:	08 95       	ret

00002606 <xTaskPriorityDisinherit>:
    2606:	0f 93       	push	r16
    2608:	1f 93       	push	r17
    260a:	cf 93       	push	r28
    260c:	df 93       	push	r29
    260e:	ec 01       	movw	r28, r24
    2610:	00 97       	sbiw	r24, 0x00	; 0
    2612:	71 f1       	breq	.+92     	; 0x2670 <xTaskPriorityDisinherit+0x6a>
    2614:	8a a1       	ldd	r24, Y+34	; 0x22
    2616:	81 50       	subi	r24, 0x01	; 1
    2618:	8a a3       	std	Y+34, r24	; 0x22
    261a:	2e 89       	ldd	r18, Y+22	; 0x16
    261c:	99 a1       	ldd	r25, Y+33	; 0x21
    261e:	29 17       	cp	r18, r25
    2620:	49 f1       	breq	.+82     	; 0x2674 <xTaskPriorityDisinherit+0x6e>
    2622:	81 11       	cpse	r24, r1
    2624:	29 c0       	rjmp	.+82     	; 0x2678 <xTaskPriorityDisinherit+0x72>
    2626:	8e 01       	movw	r16, r28
    2628:	0e 5f       	subi	r16, 0xFE	; 254
    262a:	1f 4f       	sbci	r17, 0xFF	; 255
    262c:	c8 01       	movw	r24, r16
    262e:	0e 94 9a 03 	call	0x734	; 0x734 <uxListRemove>
    2632:	89 a1       	ldd	r24, Y+33	; 0x21
    2634:	8e 8b       	std	Y+22, r24	; 0x16
    2636:	25 e0       	ldi	r18, 0x05	; 5
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	28 1b       	sub	r18, r24
    263c:	31 09       	sbc	r19, r1
    263e:	3d 87       	std	Y+13, r19	; 0x0d
    2640:	2c 87       	std	Y+12, r18	; 0x0c
    2642:	90 91 2a 08 	lds	r25, 0x082A
    2646:	98 17       	cp	r25, r24
    2648:	10 f4       	brcc	.+4      	; 0x264e <xTaskPriorityDisinherit+0x48>
    264a:	80 93 2a 08 	sts	0x082A, r24
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	9c 01       	movw	r18, r24
    2652:	22 0f       	add	r18, r18
    2654:	33 1f       	adc	r19, r19
    2656:	22 0f       	add	r18, r18
    2658:	33 1f       	adc	r19, r19
    265a:	22 0f       	add	r18, r18
    265c:	33 1f       	adc	r19, r19
    265e:	82 0f       	add	r24, r18
    2660:	93 1f       	adc	r25, r19
    2662:	b8 01       	movw	r22, r16
    2664:	80 5a       	subi	r24, 0xA0	; 160
    2666:	97 4f       	sbci	r25, 0xF7	; 247
    2668:	0e 94 48 03 	call	0x690	; 0x690 <vListInsertEnd>
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	05 c0       	rjmp	.+10     	; 0x267a <xTaskPriorityDisinherit+0x74>
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	03 c0       	rjmp	.+6      	; 0x267a <xTaskPriorityDisinherit+0x74>
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	01 c0       	rjmp	.+2      	; 0x267a <xTaskPriorityDisinherit+0x74>
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	df 91       	pop	r29
    267c:	cf 91       	pop	r28
    267e:	1f 91       	pop	r17
    2680:	0f 91       	pop	r16
    2682:	08 95       	ret

00002684 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    2684:	80 91 8d 08 	lds	r24, 0x088D
    2688:	90 91 8e 08 	lds	r25, 0x088E
    268c:	89 2b       	or	r24, r25
    268e:	39 f0       	breq	.+14     	; 0x269e <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    2690:	e0 91 8d 08 	lds	r30, 0x088D
    2694:	f0 91 8e 08 	lds	r31, 0x088E
    2698:	82 a1       	ldd	r24, Z+34	; 0x22
    269a:	8f 5f       	subi	r24, 0xFF	; 255
    269c:	82 a3       	std	Z+34, r24	; 0x22
		}

		return pxCurrentTCB;
    269e:	80 91 8d 08 	lds	r24, 0x088D
    26a2:	90 91 8e 08 	lds	r25, 0x088E
	}
    26a6:	08 95       	ret

000026a8 <__subsf3>:
    26a8:	50 58       	subi	r21, 0x80	; 128

000026aa <__addsf3>:
    26aa:	bb 27       	eor	r27, r27
    26ac:	aa 27       	eor	r26, r26
    26ae:	0e d0       	rcall	.+28     	; 0x26cc <__addsf3x>
    26b0:	e5 c0       	rjmp	.+458    	; 0x287c <__fp_round>
    26b2:	d6 d0       	rcall	.+428    	; 0x2860 <__fp_pscA>
    26b4:	30 f0       	brcs	.+12     	; 0x26c2 <__addsf3+0x18>
    26b6:	db d0       	rcall	.+438    	; 0x286e <__fp_pscB>
    26b8:	20 f0       	brcs	.+8      	; 0x26c2 <__addsf3+0x18>
    26ba:	31 f4       	brne	.+12     	; 0x26c8 <__addsf3+0x1e>
    26bc:	9f 3f       	cpi	r25, 0xFF	; 255
    26be:	11 f4       	brne	.+4      	; 0x26c4 <__addsf3+0x1a>
    26c0:	1e f4       	brtc	.+6      	; 0x26c8 <__addsf3+0x1e>
    26c2:	cb c0       	rjmp	.+406    	; 0x285a <__fp_nan>
    26c4:	0e f4       	brtc	.+2      	; 0x26c8 <__addsf3+0x1e>
    26c6:	e0 95       	com	r30
    26c8:	e7 fb       	bst	r30, 7
    26ca:	c1 c0       	rjmp	.+386    	; 0x284e <__fp_inf>

000026cc <__addsf3x>:
    26cc:	e9 2f       	mov	r30, r25
    26ce:	e7 d0       	rcall	.+462    	; 0x289e <__fp_split3>
    26d0:	80 f3       	brcs	.-32     	; 0x26b2 <__addsf3+0x8>
    26d2:	ba 17       	cp	r27, r26
    26d4:	62 07       	cpc	r22, r18
    26d6:	73 07       	cpc	r23, r19
    26d8:	84 07       	cpc	r24, r20
    26da:	95 07       	cpc	r25, r21
    26dc:	18 f0       	brcs	.+6      	; 0x26e4 <__addsf3x+0x18>
    26de:	71 f4       	brne	.+28     	; 0x26fc <__addsf3x+0x30>
    26e0:	9e f5       	brtc	.+102    	; 0x2748 <__addsf3x+0x7c>
    26e2:	ff c0       	rjmp	.+510    	; 0x28e2 <__fp_zero>
    26e4:	0e f4       	brtc	.+2      	; 0x26e8 <__addsf3x+0x1c>
    26e6:	e0 95       	com	r30
    26e8:	0b 2e       	mov	r0, r27
    26ea:	ba 2f       	mov	r27, r26
    26ec:	a0 2d       	mov	r26, r0
    26ee:	0b 01       	movw	r0, r22
    26f0:	b9 01       	movw	r22, r18
    26f2:	90 01       	movw	r18, r0
    26f4:	0c 01       	movw	r0, r24
    26f6:	ca 01       	movw	r24, r20
    26f8:	a0 01       	movw	r20, r0
    26fa:	11 24       	eor	r1, r1
    26fc:	ff 27       	eor	r31, r31
    26fe:	59 1b       	sub	r21, r25
    2700:	99 f0       	breq	.+38     	; 0x2728 <__addsf3x+0x5c>
    2702:	59 3f       	cpi	r21, 0xF9	; 249
    2704:	50 f4       	brcc	.+20     	; 0x271a <__addsf3x+0x4e>
    2706:	50 3e       	cpi	r21, 0xE0	; 224
    2708:	68 f1       	brcs	.+90     	; 0x2764 <__addsf3x+0x98>
    270a:	1a 16       	cp	r1, r26
    270c:	f0 40       	sbci	r31, 0x00	; 0
    270e:	a2 2f       	mov	r26, r18
    2710:	23 2f       	mov	r18, r19
    2712:	34 2f       	mov	r19, r20
    2714:	44 27       	eor	r20, r20
    2716:	58 5f       	subi	r21, 0xF8	; 248
    2718:	f3 cf       	rjmp	.-26     	; 0x2700 <__addsf3x+0x34>
    271a:	46 95       	lsr	r20
    271c:	37 95       	ror	r19
    271e:	27 95       	ror	r18
    2720:	a7 95       	ror	r26
    2722:	f0 40       	sbci	r31, 0x00	; 0
    2724:	53 95       	inc	r21
    2726:	c9 f7       	brne	.-14     	; 0x271a <__addsf3x+0x4e>
    2728:	7e f4       	brtc	.+30     	; 0x2748 <__addsf3x+0x7c>
    272a:	1f 16       	cp	r1, r31
    272c:	ba 0b       	sbc	r27, r26
    272e:	62 0b       	sbc	r22, r18
    2730:	73 0b       	sbc	r23, r19
    2732:	84 0b       	sbc	r24, r20
    2734:	ba f0       	brmi	.+46     	; 0x2764 <__addsf3x+0x98>
    2736:	91 50       	subi	r25, 0x01	; 1
    2738:	a1 f0       	breq	.+40     	; 0x2762 <__addsf3x+0x96>
    273a:	ff 0f       	add	r31, r31
    273c:	bb 1f       	adc	r27, r27
    273e:	66 1f       	adc	r22, r22
    2740:	77 1f       	adc	r23, r23
    2742:	88 1f       	adc	r24, r24
    2744:	c2 f7       	brpl	.-16     	; 0x2736 <__addsf3x+0x6a>
    2746:	0e c0       	rjmp	.+28     	; 0x2764 <__addsf3x+0x98>
    2748:	ba 0f       	add	r27, r26
    274a:	62 1f       	adc	r22, r18
    274c:	73 1f       	adc	r23, r19
    274e:	84 1f       	adc	r24, r20
    2750:	48 f4       	brcc	.+18     	; 0x2764 <__addsf3x+0x98>
    2752:	87 95       	ror	r24
    2754:	77 95       	ror	r23
    2756:	67 95       	ror	r22
    2758:	b7 95       	ror	r27
    275a:	f7 95       	ror	r31
    275c:	9e 3f       	cpi	r25, 0xFE	; 254
    275e:	08 f0       	brcs	.+2      	; 0x2762 <__addsf3x+0x96>
    2760:	b3 cf       	rjmp	.-154    	; 0x26c8 <__addsf3+0x1e>
    2762:	93 95       	inc	r25
    2764:	88 0f       	add	r24, r24
    2766:	08 f0       	brcs	.+2      	; 0x276a <__addsf3x+0x9e>
    2768:	99 27       	eor	r25, r25
    276a:	ee 0f       	add	r30, r30
    276c:	97 95       	ror	r25
    276e:	87 95       	ror	r24
    2770:	08 95       	ret

00002772 <__fixsfsi>:
    2772:	04 d0       	rcall	.+8      	; 0x277c <__fixunssfsi>
    2774:	68 94       	set
    2776:	b1 11       	cpse	r27, r1
    2778:	b5 c0       	rjmp	.+362    	; 0x28e4 <__fp_szero>
    277a:	08 95       	ret

0000277c <__fixunssfsi>:
    277c:	98 d0       	rcall	.+304    	; 0x28ae <__fp_splitA>
    277e:	88 f0       	brcs	.+34     	; 0x27a2 <__fixunssfsi+0x26>
    2780:	9f 57       	subi	r25, 0x7F	; 127
    2782:	90 f0       	brcs	.+36     	; 0x27a8 <__fixunssfsi+0x2c>
    2784:	b9 2f       	mov	r27, r25
    2786:	99 27       	eor	r25, r25
    2788:	b7 51       	subi	r27, 0x17	; 23
    278a:	a0 f0       	brcs	.+40     	; 0x27b4 <__fixunssfsi+0x38>
    278c:	d1 f0       	breq	.+52     	; 0x27c2 <__fixunssfsi+0x46>
    278e:	66 0f       	add	r22, r22
    2790:	77 1f       	adc	r23, r23
    2792:	88 1f       	adc	r24, r24
    2794:	99 1f       	adc	r25, r25
    2796:	1a f0       	brmi	.+6      	; 0x279e <__fixunssfsi+0x22>
    2798:	ba 95       	dec	r27
    279a:	c9 f7       	brne	.-14     	; 0x278e <__fixunssfsi+0x12>
    279c:	12 c0       	rjmp	.+36     	; 0x27c2 <__fixunssfsi+0x46>
    279e:	b1 30       	cpi	r27, 0x01	; 1
    27a0:	81 f0       	breq	.+32     	; 0x27c2 <__fixunssfsi+0x46>
    27a2:	9f d0       	rcall	.+318    	; 0x28e2 <__fp_zero>
    27a4:	b1 e0       	ldi	r27, 0x01	; 1
    27a6:	08 95       	ret
    27a8:	9c c0       	rjmp	.+312    	; 0x28e2 <__fp_zero>
    27aa:	67 2f       	mov	r22, r23
    27ac:	78 2f       	mov	r23, r24
    27ae:	88 27       	eor	r24, r24
    27b0:	b8 5f       	subi	r27, 0xF8	; 248
    27b2:	39 f0       	breq	.+14     	; 0x27c2 <__fixunssfsi+0x46>
    27b4:	b9 3f       	cpi	r27, 0xF9	; 249
    27b6:	cc f3       	brlt	.-14     	; 0x27aa <__fixunssfsi+0x2e>
    27b8:	86 95       	lsr	r24
    27ba:	77 95       	ror	r23
    27bc:	67 95       	ror	r22
    27be:	b3 95       	inc	r27
    27c0:	d9 f7       	brne	.-10     	; 0x27b8 <__fixunssfsi+0x3c>
    27c2:	3e f4       	brtc	.+14     	; 0x27d2 <__fixunssfsi+0x56>
    27c4:	90 95       	com	r25
    27c6:	80 95       	com	r24
    27c8:	70 95       	com	r23
    27ca:	61 95       	neg	r22
    27cc:	7f 4f       	sbci	r23, 0xFF	; 255
    27ce:	8f 4f       	sbci	r24, 0xFF	; 255
    27d0:	9f 4f       	sbci	r25, 0xFF	; 255
    27d2:	08 95       	ret

000027d4 <__floatunsisf>:
    27d4:	e8 94       	clt
    27d6:	09 c0       	rjmp	.+18     	; 0x27ea <__floatsisf+0x12>

000027d8 <__floatsisf>:
    27d8:	97 fb       	bst	r25, 7
    27da:	3e f4       	brtc	.+14     	; 0x27ea <__floatsisf+0x12>
    27dc:	90 95       	com	r25
    27de:	80 95       	com	r24
    27e0:	70 95       	com	r23
    27e2:	61 95       	neg	r22
    27e4:	7f 4f       	sbci	r23, 0xFF	; 255
    27e6:	8f 4f       	sbci	r24, 0xFF	; 255
    27e8:	9f 4f       	sbci	r25, 0xFF	; 255
    27ea:	99 23       	and	r25, r25
    27ec:	a9 f0       	breq	.+42     	; 0x2818 <__floatsisf+0x40>
    27ee:	f9 2f       	mov	r31, r25
    27f0:	96 e9       	ldi	r25, 0x96	; 150
    27f2:	bb 27       	eor	r27, r27
    27f4:	93 95       	inc	r25
    27f6:	f6 95       	lsr	r31
    27f8:	87 95       	ror	r24
    27fa:	77 95       	ror	r23
    27fc:	67 95       	ror	r22
    27fe:	b7 95       	ror	r27
    2800:	f1 11       	cpse	r31, r1
    2802:	f8 cf       	rjmp	.-16     	; 0x27f4 <__floatsisf+0x1c>
    2804:	fa f4       	brpl	.+62     	; 0x2844 <__floatsisf+0x6c>
    2806:	bb 0f       	add	r27, r27
    2808:	11 f4       	brne	.+4      	; 0x280e <__floatsisf+0x36>
    280a:	60 ff       	sbrs	r22, 0
    280c:	1b c0       	rjmp	.+54     	; 0x2844 <__floatsisf+0x6c>
    280e:	6f 5f       	subi	r22, 0xFF	; 255
    2810:	7f 4f       	sbci	r23, 0xFF	; 255
    2812:	8f 4f       	sbci	r24, 0xFF	; 255
    2814:	9f 4f       	sbci	r25, 0xFF	; 255
    2816:	16 c0       	rjmp	.+44     	; 0x2844 <__floatsisf+0x6c>
    2818:	88 23       	and	r24, r24
    281a:	11 f0       	breq	.+4      	; 0x2820 <__floatsisf+0x48>
    281c:	96 e9       	ldi	r25, 0x96	; 150
    281e:	11 c0       	rjmp	.+34     	; 0x2842 <__floatsisf+0x6a>
    2820:	77 23       	and	r23, r23
    2822:	21 f0       	breq	.+8      	; 0x282c <__floatsisf+0x54>
    2824:	9e e8       	ldi	r25, 0x8E	; 142
    2826:	87 2f       	mov	r24, r23
    2828:	76 2f       	mov	r23, r22
    282a:	05 c0       	rjmp	.+10     	; 0x2836 <__floatsisf+0x5e>
    282c:	66 23       	and	r22, r22
    282e:	71 f0       	breq	.+28     	; 0x284c <__floatsisf+0x74>
    2830:	96 e8       	ldi	r25, 0x86	; 134
    2832:	86 2f       	mov	r24, r22
    2834:	70 e0       	ldi	r23, 0x00	; 0
    2836:	60 e0       	ldi	r22, 0x00	; 0
    2838:	2a f0       	brmi	.+10     	; 0x2844 <__floatsisf+0x6c>
    283a:	9a 95       	dec	r25
    283c:	66 0f       	add	r22, r22
    283e:	77 1f       	adc	r23, r23
    2840:	88 1f       	adc	r24, r24
    2842:	da f7       	brpl	.-10     	; 0x283a <__floatsisf+0x62>
    2844:	88 0f       	add	r24, r24
    2846:	96 95       	lsr	r25
    2848:	87 95       	ror	r24
    284a:	97 f9       	bld	r25, 7
    284c:	08 95       	ret

0000284e <__fp_inf>:
    284e:	97 f9       	bld	r25, 7
    2850:	9f 67       	ori	r25, 0x7F	; 127
    2852:	80 e8       	ldi	r24, 0x80	; 128
    2854:	70 e0       	ldi	r23, 0x00	; 0
    2856:	60 e0       	ldi	r22, 0x00	; 0
    2858:	08 95       	ret

0000285a <__fp_nan>:
    285a:	9f ef       	ldi	r25, 0xFF	; 255
    285c:	80 ec       	ldi	r24, 0xC0	; 192
    285e:	08 95       	ret

00002860 <__fp_pscA>:
    2860:	00 24       	eor	r0, r0
    2862:	0a 94       	dec	r0
    2864:	16 16       	cp	r1, r22
    2866:	17 06       	cpc	r1, r23
    2868:	18 06       	cpc	r1, r24
    286a:	09 06       	cpc	r0, r25
    286c:	08 95       	ret

0000286e <__fp_pscB>:
    286e:	00 24       	eor	r0, r0
    2870:	0a 94       	dec	r0
    2872:	12 16       	cp	r1, r18
    2874:	13 06       	cpc	r1, r19
    2876:	14 06       	cpc	r1, r20
    2878:	05 06       	cpc	r0, r21
    287a:	08 95       	ret

0000287c <__fp_round>:
    287c:	09 2e       	mov	r0, r25
    287e:	03 94       	inc	r0
    2880:	00 0c       	add	r0, r0
    2882:	11 f4       	brne	.+4      	; 0x2888 <__fp_round+0xc>
    2884:	88 23       	and	r24, r24
    2886:	52 f0       	brmi	.+20     	; 0x289c <__fp_round+0x20>
    2888:	bb 0f       	add	r27, r27
    288a:	40 f4       	brcc	.+16     	; 0x289c <__fp_round+0x20>
    288c:	bf 2b       	or	r27, r31
    288e:	11 f4       	brne	.+4      	; 0x2894 <__fp_round+0x18>
    2890:	60 ff       	sbrs	r22, 0
    2892:	04 c0       	rjmp	.+8      	; 0x289c <__fp_round+0x20>
    2894:	6f 5f       	subi	r22, 0xFF	; 255
    2896:	7f 4f       	sbci	r23, 0xFF	; 255
    2898:	8f 4f       	sbci	r24, 0xFF	; 255
    289a:	9f 4f       	sbci	r25, 0xFF	; 255
    289c:	08 95       	ret

0000289e <__fp_split3>:
    289e:	57 fd       	sbrc	r21, 7
    28a0:	90 58       	subi	r25, 0x80	; 128
    28a2:	44 0f       	add	r20, r20
    28a4:	55 1f       	adc	r21, r21
    28a6:	59 f0       	breq	.+22     	; 0x28be <__fp_splitA+0x10>
    28a8:	5f 3f       	cpi	r21, 0xFF	; 255
    28aa:	71 f0       	breq	.+28     	; 0x28c8 <__fp_splitA+0x1a>
    28ac:	47 95       	ror	r20

000028ae <__fp_splitA>:
    28ae:	88 0f       	add	r24, r24
    28b0:	97 fb       	bst	r25, 7
    28b2:	99 1f       	adc	r25, r25
    28b4:	61 f0       	breq	.+24     	; 0x28ce <__fp_splitA+0x20>
    28b6:	9f 3f       	cpi	r25, 0xFF	; 255
    28b8:	79 f0       	breq	.+30     	; 0x28d8 <__fp_splitA+0x2a>
    28ba:	87 95       	ror	r24
    28bc:	08 95       	ret
    28be:	12 16       	cp	r1, r18
    28c0:	13 06       	cpc	r1, r19
    28c2:	14 06       	cpc	r1, r20
    28c4:	55 1f       	adc	r21, r21
    28c6:	f2 cf       	rjmp	.-28     	; 0x28ac <__fp_split3+0xe>
    28c8:	46 95       	lsr	r20
    28ca:	f1 df       	rcall	.-30     	; 0x28ae <__fp_splitA>
    28cc:	08 c0       	rjmp	.+16     	; 0x28de <__fp_splitA+0x30>
    28ce:	16 16       	cp	r1, r22
    28d0:	17 06       	cpc	r1, r23
    28d2:	18 06       	cpc	r1, r24
    28d4:	99 1f       	adc	r25, r25
    28d6:	f1 cf       	rjmp	.-30     	; 0x28ba <__fp_splitA+0xc>
    28d8:	86 95       	lsr	r24
    28da:	71 05       	cpc	r23, r1
    28dc:	61 05       	cpc	r22, r1
    28de:	08 94       	sec
    28e0:	08 95       	ret

000028e2 <__fp_zero>:
    28e2:	e8 94       	clt

000028e4 <__fp_szero>:
    28e4:	bb 27       	eor	r27, r27
    28e6:	66 27       	eor	r22, r22
    28e8:	77 27       	eor	r23, r23
    28ea:	cb 01       	movw	r24, r22
    28ec:	97 f9       	bld	r25, 7
    28ee:	08 95       	ret

000028f0 <__mulsf3>:
    28f0:	0b d0       	rcall	.+22     	; 0x2908 <__mulsf3x>
    28f2:	c4 cf       	rjmp	.-120    	; 0x287c <__fp_round>
    28f4:	b5 df       	rcall	.-150    	; 0x2860 <__fp_pscA>
    28f6:	28 f0       	brcs	.+10     	; 0x2902 <__mulsf3+0x12>
    28f8:	ba df       	rcall	.-140    	; 0x286e <__fp_pscB>
    28fa:	18 f0       	brcs	.+6      	; 0x2902 <__mulsf3+0x12>
    28fc:	95 23       	and	r25, r21
    28fe:	09 f0       	breq	.+2      	; 0x2902 <__mulsf3+0x12>
    2900:	a6 cf       	rjmp	.-180    	; 0x284e <__fp_inf>
    2902:	ab cf       	rjmp	.-170    	; 0x285a <__fp_nan>
    2904:	11 24       	eor	r1, r1
    2906:	ee cf       	rjmp	.-36     	; 0x28e4 <__fp_szero>

00002908 <__mulsf3x>:
    2908:	ca df       	rcall	.-108    	; 0x289e <__fp_split3>
    290a:	a0 f3       	brcs	.-24     	; 0x28f4 <__mulsf3+0x4>

0000290c <__mulsf3_pse>:
    290c:	95 9f       	mul	r25, r21
    290e:	d1 f3       	breq	.-12     	; 0x2904 <__mulsf3+0x14>
    2910:	95 0f       	add	r25, r21
    2912:	50 e0       	ldi	r21, 0x00	; 0
    2914:	55 1f       	adc	r21, r21
    2916:	62 9f       	mul	r22, r18
    2918:	f0 01       	movw	r30, r0
    291a:	72 9f       	mul	r23, r18
    291c:	bb 27       	eor	r27, r27
    291e:	f0 0d       	add	r31, r0
    2920:	b1 1d       	adc	r27, r1
    2922:	63 9f       	mul	r22, r19
    2924:	aa 27       	eor	r26, r26
    2926:	f0 0d       	add	r31, r0
    2928:	b1 1d       	adc	r27, r1
    292a:	aa 1f       	adc	r26, r26
    292c:	64 9f       	mul	r22, r20
    292e:	66 27       	eor	r22, r22
    2930:	b0 0d       	add	r27, r0
    2932:	a1 1d       	adc	r26, r1
    2934:	66 1f       	adc	r22, r22
    2936:	82 9f       	mul	r24, r18
    2938:	22 27       	eor	r18, r18
    293a:	b0 0d       	add	r27, r0
    293c:	a1 1d       	adc	r26, r1
    293e:	62 1f       	adc	r22, r18
    2940:	73 9f       	mul	r23, r19
    2942:	b0 0d       	add	r27, r0
    2944:	a1 1d       	adc	r26, r1
    2946:	62 1f       	adc	r22, r18
    2948:	83 9f       	mul	r24, r19
    294a:	a0 0d       	add	r26, r0
    294c:	61 1d       	adc	r22, r1
    294e:	22 1f       	adc	r18, r18
    2950:	74 9f       	mul	r23, r20
    2952:	33 27       	eor	r19, r19
    2954:	a0 0d       	add	r26, r0
    2956:	61 1d       	adc	r22, r1
    2958:	23 1f       	adc	r18, r19
    295a:	84 9f       	mul	r24, r20
    295c:	60 0d       	add	r22, r0
    295e:	21 1d       	adc	r18, r1
    2960:	82 2f       	mov	r24, r18
    2962:	76 2f       	mov	r23, r22
    2964:	6a 2f       	mov	r22, r26
    2966:	11 24       	eor	r1, r1
    2968:	9f 57       	subi	r25, 0x7F	; 127
    296a:	50 40       	sbci	r21, 0x00	; 0
    296c:	8a f0       	brmi	.+34     	; 0x2990 <__mulsf3_pse+0x84>
    296e:	e1 f0       	breq	.+56     	; 0x29a8 <__mulsf3_pse+0x9c>
    2970:	88 23       	and	r24, r24
    2972:	4a f0       	brmi	.+18     	; 0x2986 <__mulsf3_pse+0x7a>
    2974:	ee 0f       	add	r30, r30
    2976:	ff 1f       	adc	r31, r31
    2978:	bb 1f       	adc	r27, r27
    297a:	66 1f       	adc	r22, r22
    297c:	77 1f       	adc	r23, r23
    297e:	88 1f       	adc	r24, r24
    2980:	91 50       	subi	r25, 0x01	; 1
    2982:	50 40       	sbci	r21, 0x00	; 0
    2984:	a9 f7       	brne	.-22     	; 0x2970 <__mulsf3_pse+0x64>
    2986:	9e 3f       	cpi	r25, 0xFE	; 254
    2988:	51 05       	cpc	r21, r1
    298a:	70 f0       	brcs	.+28     	; 0x29a8 <__mulsf3_pse+0x9c>
    298c:	60 cf       	rjmp	.-320    	; 0x284e <__fp_inf>
    298e:	aa cf       	rjmp	.-172    	; 0x28e4 <__fp_szero>
    2990:	5f 3f       	cpi	r21, 0xFF	; 255
    2992:	ec f3       	brlt	.-6      	; 0x298e <__mulsf3_pse+0x82>
    2994:	98 3e       	cpi	r25, 0xE8	; 232
    2996:	dc f3       	brlt	.-10     	; 0x298e <__mulsf3_pse+0x82>
    2998:	86 95       	lsr	r24
    299a:	77 95       	ror	r23
    299c:	67 95       	ror	r22
    299e:	b7 95       	ror	r27
    29a0:	f7 95       	ror	r31
    29a2:	e7 95       	ror	r30
    29a4:	9f 5f       	subi	r25, 0xFF	; 255
    29a6:	c1 f7       	brne	.-16     	; 0x2998 <__mulsf3_pse+0x8c>
    29a8:	fe 2b       	or	r31, r30
    29aa:	88 0f       	add	r24, r24
    29ac:	91 1d       	adc	r25, r1
    29ae:	96 95       	lsr	r25
    29b0:	87 95       	ror	r24
    29b2:	97 f9       	bld	r25, 7
    29b4:	08 95       	ret

000029b6 <pow>:
    29b6:	fa 01       	movw	r30, r20
    29b8:	ee 0f       	add	r30, r30
    29ba:	ff 1f       	adc	r31, r31
    29bc:	30 96       	adiw	r30, 0x00	; 0
    29be:	21 05       	cpc	r18, r1
    29c0:	31 05       	cpc	r19, r1
    29c2:	99 f1       	breq	.+102    	; 0x2a2a <pow+0x74>
    29c4:	61 15       	cp	r22, r1
    29c6:	71 05       	cpc	r23, r1
    29c8:	61 f4       	brne	.+24     	; 0x29e2 <pow+0x2c>
    29ca:	80 38       	cpi	r24, 0x80	; 128
    29cc:	bf e3       	ldi	r27, 0x3F	; 63
    29ce:	9b 07       	cpc	r25, r27
    29d0:	49 f1       	breq	.+82     	; 0x2a24 <pow+0x6e>
    29d2:	68 94       	set
    29d4:	90 38       	cpi	r25, 0x80	; 128
    29d6:	81 05       	cpc	r24, r1
    29d8:	61 f0       	breq	.+24     	; 0x29f2 <pow+0x3c>
    29da:	80 38       	cpi	r24, 0x80	; 128
    29dc:	bf ef       	ldi	r27, 0xFF	; 255
    29de:	9b 07       	cpc	r25, r27
    29e0:	41 f0       	breq	.+16     	; 0x29f2 <pow+0x3c>
    29e2:	99 23       	and	r25, r25
    29e4:	42 f5       	brpl	.+80     	; 0x2a36 <pow+0x80>
    29e6:	ff 3f       	cpi	r31, 0xFF	; 255
    29e8:	e1 05       	cpc	r30, r1
    29ea:	31 05       	cpc	r19, r1
    29ec:	21 05       	cpc	r18, r1
    29ee:	11 f1       	breq	.+68     	; 0x2a34 <pow+0x7e>
    29f0:	e8 94       	clt
    29f2:	08 94       	sec
    29f4:	e7 95       	ror	r30
    29f6:	d9 01       	movw	r26, r18
    29f8:	aa 23       	and	r26, r26
    29fa:	29 f4       	brne	.+10     	; 0x2a06 <pow+0x50>
    29fc:	ab 2f       	mov	r26, r27
    29fe:	be 2f       	mov	r27, r30
    2a00:	f8 5f       	subi	r31, 0xF8	; 248
    2a02:	d0 f3       	brcs	.-12     	; 0x29f8 <pow+0x42>
    2a04:	10 c0       	rjmp	.+32     	; 0x2a26 <pow+0x70>
    2a06:	ff 5f       	subi	r31, 0xFF	; 255
    2a08:	70 f4       	brcc	.+28     	; 0x2a26 <pow+0x70>
    2a0a:	a6 95       	lsr	r26
    2a0c:	e0 f7       	brcc	.-8      	; 0x2a06 <pow+0x50>
    2a0e:	f7 39       	cpi	r31, 0x97	; 151
    2a10:	50 f0       	brcs	.+20     	; 0x2a26 <pow+0x70>
    2a12:	19 f0       	breq	.+6      	; 0x2a1a <pow+0x64>
    2a14:	ff 3a       	cpi	r31, 0xAF	; 175
    2a16:	38 f4       	brcc	.+14     	; 0x2a26 <pow+0x70>
    2a18:	9f 77       	andi	r25, 0x7F	; 127
    2a1a:	9f 93       	push	r25
    2a1c:	0c d0       	rcall	.+24     	; 0x2a36 <pow+0x80>
    2a1e:	0f 90       	pop	r0
    2a20:	07 fc       	sbrc	r0, 7
    2a22:	90 58       	subi	r25, 0x80	; 128
    2a24:	08 95       	ret
    2a26:	3e f0       	brts	.+14     	; 0x2a36 <pow+0x80>
    2a28:	18 cf       	rjmp	.-464    	; 0x285a <__fp_nan>
    2a2a:	60 e0       	ldi	r22, 0x00	; 0
    2a2c:	70 e0       	ldi	r23, 0x00	; 0
    2a2e:	80 e8       	ldi	r24, 0x80	; 128
    2a30:	9f e3       	ldi	r25, 0x3F	; 63
    2a32:	08 95       	ret
    2a34:	4f e7       	ldi	r20, 0x7F	; 127
    2a36:	9f 77       	andi	r25, 0x7F	; 127
    2a38:	5f 93       	push	r21
    2a3a:	4f 93       	push	r20
    2a3c:	3f 93       	push	r19
    2a3e:	2f 93       	push	r18
    2a40:	9e d0       	rcall	.+316    	; 0x2b7e <log>
    2a42:	2f 91       	pop	r18
    2a44:	3f 91       	pop	r19
    2a46:	4f 91       	pop	r20
    2a48:	5f 91       	pop	r21
    2a4a:	52 df       	rcall	.-348    	; 0x28f0 <__mulsf3>
    2a4c:	05 c0       	rjmp	.+10     	; 0x2a58 <exp>
    2a4e:	19 f4       	brne	.+6      	; 0x2a56 <pow+0xa0>
    2a50:	0e f0       	brts	.+2      	; 0x2a54 <pow+0x9e>
    2a52:	fd ce       	rjmp	.-518    	; 0x284e <__fp_inf>
    2a54:	46 cf       	rjmp	.-372    	; 0x28e2 <__fp_zero>
    2a56:	01 cf       	rjmp	.-510    	; 0x285a <__fp_nan>

00002a58 <exp>:
    2a58:	2a df       	rcall	.-428    	; 0x28ae <__fp_splitA>
    2a5a:	c8 f3       	brcs	.-14     	; 0x2a4e <pow+0x98>
    2a5c:	96 38       	cpi	r25, 0x86	; 134
    2a5e:	c0 f7       	brcc	.-16     	; 0x2a50 <pow+0x9a>
    2a60:	07 f8       	bld	r0, 7
    2a62:	0f 92       	push	r0
    2a64:	e8 94       	clt
    2a66:	2b e3       	ldi	r18, 0x3B	; 59
    2a68:	3a ea       	ldi	r19, 0xAA	; 170
    2a6a:	48 eb       	ldi	r20, 0xB8	; 184
    2a6c:	5f e7       	ldi	r21, 0x7F	; 127
    2a6e:	4e df       	rcall	.-356    	; 0x290c <__mulsf3_pse>
    2a70:	0f 92       	push	r0
    2a72:	0f 92       	push	r0
    2a74:	0f 92       	push	r0
    2a76:	4d b7       	in	r20, 0x3d	; 61
    2a78:	5e b7       	in	r21, 0x3e	; 62
    2a7a:	0f 92       	push	r0
    2a7c:	c0 d0       	rcall	.+384    	; 0x2bfe <modf>
    2a7e:	e4 ee       	ldi	r30, 0xE4	; 228
    2a80:	f0 e0       	ldi	r31, 0x00	; 0
    2a82:	16 d0       	rcall	.+44     	; 0x2ab0 <__fp_powser>
    2a84:	4f 91       	pop	r20
    2a86:	5f 91       	pop	r21
    2a88:	ef 91       	pop	r30
    2a8a:	ff 91       	pop	r31
    2a8c:	e5 95       	asr	r30
    2a8e:	ee 1f       	adc	r30, r30
    2a90:	ff 1f       	adc	r31, r31
    2a92:	49 f0       	breq	.+18     	; 0x2aa6 <exp+0x4e>
    2a94:	fe 57       	subi	r31, 0x7E	; 126
    2a96:	e0 68       	ori	r30, 0x80	; 128
    2a98:	44 27       	eor	r20, r20
    2a9a:	ee 0f       	add	r30, r30
    2a9c:	44 1f       	adc	r20, r20
    2a9e:	fa 95       	dec	r31
    2aa0:	e1 f7       	brne	.-8      	; 0x2a9a <exp+0x42>
    2aa2:	41 95       	neg	r20
    2aa4:	55 0b       	sbc	r21, r21
    2aa6:	32 d0       	rcall	.+100    	; 0x2b0c <ldexp>
    2aa8:	0f 90       	pop	r0
    2aaa:	07 fe       	sbrs	r0, 7
    2aac:	26 c0       	rjmp	.+76     	; 0x2afa <inverse>
    2aae:	08 95       	ret

00002ab0 <__fp_powser>:
    2ab0:	df 93       	push	r29
    2ab2:	cf 93       	push	r28
    2ab4:	1f 93       	push	r17
    2ab6:	0f 93       	push	r16
    2ab8:	ff 92       	push	r15
    2aba:	ef 92       	push	r14
    2abc:	df 92       	push	r13
    2abe:	7b 01       	movw	r14, r22
    2ac0:	8c 01       	movw	r16, r24
    2ac2:	68 94       	set
    2ac4:	05 c0       	rjmp	.+10     	; 0x2ad0 <__fp_powser+0x20>
    2ac6:	da 2e       	mov	r13, r26
    2ac8:	ef 01       	movw	r28, r30
    2aca:	1e df       	rcall	.-452    	; 0x2908 <__mulsf3x>
    2acc:	fe 01       	movw	r30, r28
    2ace:	e8 94       	clt
    2ad0:	a5 91       	lpm	r26, Z+
    2ad2:	25 91       	lpm	r18, Z+
    2ad4:	35 91       	lpm	r19, Z+
    2ad6:	45 91       	lpm	r20, Z+
    2ad8:	55 91       	lpm	r21, Z+
    2ada:	ae f3       	brts	.-22     	; 0x2ac6 <__fp_powser+0x16>
    2adc:	ef 01       	movw	r28, r30
    2ade:	f6 dd       	rcall	.-1044   	; 0x26cc <__addsf3x>
    2ae0:	fe 01       	movw	r30, r28
    2ae2:	97 01       	movw	r18, r14
    2ae4:	a8 01       	movw	r20, r16
    2ae6:	da 94       	dec	r13
    2ae8:	79 f7       	brne	.-34     	; 0x2ac8 <__fp_powser+0x18>
    2aea:	df 90       	pop	r13
    2aec:	ef 90       	pop	r14
    2aee:	ff 90       	pop	r15
    2af0:	0f 91       	pop	r16
    2af2:	1f 91       	pop	r17
    2af4:	cf 91       	pop	r28
    2af6:	df 91       	pop	r29
    2af8:	08 95       	ret

00002afa <inverse>:
    2afa:	9b 01       	movw	r18, r22
    2afc:	ac 01       	movw	r20, r24
    2afe:	60 e0       	ldi	r22, 0x00	; 0
    2b00:	70 e0       	ldi	r23, 0x00	; 0
    2b02:	80 e8       	ldi	r24, 0x80	; 128
    2b04:	9f e3       	ldi	r25, 0x3F	; 63
    2b06:	ae c0       	rjmp	.+348    	; 0x2c64 <__divsf3>
    2b08:	a2 ce       	rjmp	.-700    	; 0x284e <__fp_inf>
    2b0a:	14 c1       	rjmp	.+552    	; 0x2d34 <__fp_mpack>

00002b0c <ldexp>:
    2b0c:	d0 de       	rcall	.-608    	; 0x28ae <__fp_splitA>
    2b0e:	e8 f3       	brcs	.-6      	; 0x2b0a <inverse+0x10>
    2b10:	99 23       	and	r25, r25
    2b12:	d9 f3       	breq	.-10     	; 0x2b0a <inverse+0x10>
    2b14:	94 0f       	add	r25, r20
    2b16:	51 1d       	adc	r21, r1
    2b18:	bb f3       	brvs	.-18     	; 0x2b08 <inverse+0xe>
    2b1a:	91 50       	subi	r25, 0x01	; 1
    2b1c:	50 40       	sbci	r21, 0x00	; 0
    2b1e:	94 f0       	brlt	.+36     	; 0x2b44 <ldexp+0x38>
    2b20:	59 f0       	breq	.+22     	; 0x2b38 <ldexp+0x2c>
    2b22:	88 23       	and	r24, r24
    2b24:	32 f0       	brmi	.+12     	; 0x2b32 <ldexp+0x26>
    2b26:	66 0f       	add	r22, r22
    2b28:	77 1f       	adc	r23, r23
    2b2a:	88 1f       	adc	r24, r24
    2b2c:	91 50       	subi	r25, 0x01	; 1
    2b2e:	50 40       	sbci	r21, 0x00	; 0
    2b30:	c1 f7       	brne	.-16     	; 0x2b22 <ldexp+0x16>
    2b32:	9e 3f       	cpi	r25, 0xFE	; 254
    2b34:	51 05       	cpc	r21, r1
    2b36:	44 f7       	brge	.-48     	; 0x2b08 <inverse+0xe>
    2b38:	88 0f       	add	r24, r24
    2b3a:	91 1d       	adc	r25, r1
    2b3c:	96 95       	lsr	r25
    2b3e:	87 95       	ror	r24
    2b40:	97 f9       	bld	r25, 7
    2b42:	08 95       	ret
    2b44:	5f 3f       	cpi	r21, 0xFF	; 255
    2b46:	ac f0       	brlt	.+42     	; 0x2b72 <ldexp+0x66>
    2b48:	98 3e       	cpi	r25, 0xE8	; 232
    2b4a:	9c f0       	brlt	.+38     	; 0x2b72 <ldexp+0x66>
    2b4c:	bb 27       	eor	r27, r27
    2b4e:	86 95       	lsr	r24
    2b50:	77 95       	ror	r23
    2b52:	67 95       	ror	r22
    2b54:	b7 95       	ror	r27
    2b56:	08 f4       	brcc	.+2      	; 0x2b5a <ldexp+0x4e>
    2b58:	b1 60       	ori	r27, 0x01	; 1
    2b5a:	93 95       	inc	r25
    2b5c:	c1 f7       	brne	.-16     	; 0x2b4e <ldexp+0x42>
    2b5e:	bb 0f       	add	r27, r27
    2b60:	58 f7       	brcc	.-42     	; 0x2b38 <ldexp+0x2c>
    2b62:	11 f4       	brne	.+4      	; 0x2b68 <ldexp+0x5c>
    2b64:	60 ff       	sbrs	r22, 0
    2b66:	e8 cf       	rjmp	.-48     	; 0x2b38 <ldexp+0x2c>
    2b68:	6f 5f       	subi	r22, 0xFF	; 255
    2b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b6c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b70:	e3 cf       	rjmp	.-58     	; 0x2b38 <ldexp+0x2c>
    2b72:	b8 ce       	rjmp	.-656    	; 0x28e4 <__fp_szero>
    2b74:	0e f0       	brts	.+2      	; 0x2b78 <ldexp+0x6c>
    2b76:	de c0       	rjmp	.+444    	; 0x2d34 <__fp_mpack>
    2b78:	70 ce       	rjmp	.-800    	; 0x285a <__fp_nan>
    2b7a:	68 94       	set
    2b7c:	68 ce       	rjmp	.-816    	; 0x284e <__fp_inf>

00002b7e <log>:
    2b7e:	97 de       	rcall	.-722    	; 0x28ae <__fp_splitA>
    2b80:	c8 f3       	brcs	.-14     	; 0x2b74 <ldexp+0x68>
    2b82:	99 23       	and	r25, r25
    2b84:	d1 f3       	breq	.-12     	; 0x2b7a <ldexp+0x6e>
    2b86:	c6 f3       	brts	.-16     	; 0x2b78 <ldexp+0x6c>
    2b88:	df 93       	push	r29
    2b8a:	cf 93       	push	r28
    2b8c:	1f 93       	push	r17
    2b8e:	0f 93       	push	r16
    2b90:	ff 92       	push	r15
    2b92:	c9 2f       	mov	r28, r25
    2b94:	dd 27       	eor	r29, r29
    2b96:	88 23       	and	r24, r24
    2b98:	2a f0       	brmi	.+10     	; 0x2ba4 <log+0x26>
    2b9a:	21 97       	sbiw	r28, 0x01	; 1
    2b9c:	66 0f       	add	r22, r22
    2b9e:	77 1f       	adc	r23, r23
    2ba0:	88 1f       	adc	r24, r24
    2ba2:	da f7       	brpl	.-10     	; 0x2b9a <log+0x1c>
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	40 e8       	ldi	r20, 0x80	; 128
    2baa:	5f eb       	ldi	r21, 0xBF	; 191
    2bac:	9f e3       	ldi	r25, 0x3F	; 63
    2bae:	88 39       	cpi	r24, 0x98	; 152
    2bb0:	20 f0       	brcs	.+8      	; 0x2bba <log+0x3c>
    2bb2:	80 3e       	cpi	r24, 0xE0	; 224
    2bb4:	30 f0       	brcs	.+12     	; 0x2bc2 <log+0x44>
    2bb6:	21 96       	adiw	r28, 0x01	; 1
    2bb8:	8f 77       	andi	r24, 0x7F	; 127
    2bba:	77 dd       	rcall	.-1298   	; 0x26aa <__addsf3>
    2bbc:	ec e0       	ldi	r30, 0x0C	; 12
    2bbe:	f1 e0       	ldi	r31, 0x01	; 1
    2bc0:	03 c0       	rjmp	.+6      	; 0x2bc8 <log+0x4a>
    2bc2:	73 dd       	rcall	.-1306   	; 0x26aa <__addsf3>
    2bc4:	e9 e3       	ldi	r30, 0x39	; 57
    2bc6:	f1 e0       	ldi	r31, 0x01	; 1
    2bc8:	73 df       	rcall	.-282    	; 0x2ab0 <__fp_powser>
    2bca:	8b 01       	movw	r16, r22
    2bcc:	be 01       	movw	r22, r28
    2bce:	ec 01       	movw	r28, r24
    2bd0:	fb 2e       	mov	r15, r27
    2bd2:	6f 57       	subi	r22, 0x7F	; 127
    2bd4:	71 09       	sbc	r23, r1
    2bd6:	75 95       	asr	r23
    2bd8:	77 1f       	adc	r23, r23
    2bda:	88 0b       	sbc	r24, r24
    2bdc:	99 0b       	sbc	r25, r25
    2bde:	fc dd       	rcall	.-1032   	; 0x27d8 <__floatsisf>
    2be0:	28 e1       	ldi	r18, 0x18	; 24
    2be2:	32 e7       	ldi	r19, 0x72	; 114
    2be4:	41 e3       	ldi	r20, 0x31	; 49
    2be6:	5f e3       	ldi	r21, 0x3F	; 63
    2be8:	8f de       	rcall	.-738    	; 0x2908 <__mulsf3x>
    2bea:	af 2d       	mov	r26, r15
    2bec:	98 01       	movw	r18, r16
    2bee:	ae 01       	movw	r20, r28
    2bf0:	ff 90       	pop	r15
    2bf2:	0f 91       	pop	r16
    2bf4:	1f 91       	pop	r17
    2bf6:	cf 91       	pop	r28
    2bf8:	df 91       	pop	r29
    2bfa:	68 dd       	rcall	.-1328   	; 0x26cc <__addsf3x>
    2bfc:	3f ce       	rjmp	.-898    	; 0x287c <__fp_round>

00002bfe <modf>:
    2bfe:	fa 01       	movw	r30, r20
    2c00:	dc 01       	movw	r26, r24
    2c02:	aa 0f       	add	r26, r26
    2c04:	bb 1f       	adc	r27, r27
    2c06:	9b 01       	movw	r18, r22
    2c08:	ac 01       	movw	r20, r24
    2c0a:	bf 57       	subi	r27, 0x7F	; 127
    2c0c:	28 f4       	brcc	.+10     	; 0x2c18 <modf+0x1a>
    2c0e:	22 27       	eor	r18, r18
    2c10:	33 27       	eor	r19, r19
    2c12:	44 27       	eor	r20, r20
    2c14:	50 78       	andi	r21, 0x80	; 128
    2c16:	1f c0       	rjmp	.+62     	; 0x2c56 <modf+0x58>
    2c18:	b7 51       	subi	r27, 0x17	; 23
    2c1a:	88 f4       	brcc	.+34     	; 0x2c3e <modf+0x40>
    2c1c:	ab 2f       	mov	r26, r27
    2c1e:	00 24       	eor	r0, r0
    2c20:	46 95       	lsr	r20
    2c22:	37 95       	ror	r19
    2c24:	27 95       	ror	r18
    2c26:	01 1c       	adc	r0, r1
    2c28:	a3 95       	inc	r26
    2c2a:	d2 f3       	brmi	.-12     	; 0x2c20 <modf+0x22>
    2c2c:	00 20       	and	r0, r0
    2c2e:	69 f0       	breq	.+26     	; 0x2c4a <modf+0x4c>
    2c30:	22 0f       	add	r18, r18
    2c32:	33 1f       	adc	r19, r19
    2c34:	44 1f       	adc	r20, r20
    2c36:	b3 95       	inc	r27
    2c38:	da f3       	brmi	.-10     	; 0x2c30 <modf+0x32>
    2c3a:	0d d0       	rcall	.+26     	; 0x2c56 <modf+0x58>
    2c3c:	35 cd       	rjmp	.-1430   	; 0x26a8 <__subsf3>
    2c3e:	61 30       	cpi	r22, 0x01	; 1
    2c40:	71 05       	cpc	r23, r1
    2c42:	a0 e8       	ldi	r26, 0x80	; 128
    2c44:	8a 07       	cpc	r24, r26
    2c46:	b9 46       	sbci	r27, 0x69	; 105
    2c48:	30 f4       	brcc	.+12     	; 0x2c56 <modf+0x58>
    2c4a:	9b 01       	movw	r18, r22
    2c4c:	ac 01       	movw	r20, r24
    2c4e:	66 27       	eor	r22, r22
    2c50:	77 27       	eor	r23, r23
    2c52:	88 27       	eor	r24, r24
    2c54:	90 78       	andi	r25, 0x80	; 128
    2c56:	30 96       	adiw	r30, 0x00	; 0
    2c58:	21 f0       	breq	.+8      	; 0x2c62 <modf+0x64>
    2c5a:	20 83       	st	Z, r18
    2c5c:	31 83       	std	Z+1, r19	; 0x01
    2c5e:	42 83       	std	Z+2, r20	; 0x02
    2c60:	53 83       	std	Z+3, r21	; 0x03
    2c62:	08 95       	ret

00002c64 <__divsf3>:
    2c64:	0c d0       	rcall	.+24     	; 0x2c7e <__divsf3x>
    2c66:	0a ce       	rjmp	.-1004   	; 0x287c <__fp_round>
    2c68:	02 de       	rcall	.-1020   	; 0x286e <__fp_pscB>
    2c6a:	40 f0       	brcs	.+16     	; 0x2c7c <__divsf3+0x18>
    2c6c:	f9 dd       	rcall	.-1038   	; 0x2860 <__fp_pscA>
    2c6e:	30 f0       	brcs	.+12     	; 0x2c7c <__divsf3+0x18>
    2c70:	21 f4       	brne	.+8      	; 0x2c7a <__divsf3+0x16>
    2c72:	5f 3f       	cpi	r21, 0xFF	; 255
    2c74:	19 f0       	breq	.+6      	; 0x2c7c <__divsf3+0x18>
    2c76:	eb cd       	rjmp	.-1066   	; 0x284e <__fp_inf>
    2c78:	51 11       	cpse	r21, r1
    2c7a:	34 ce       	rjmp	.-920    	; 0x28e4 <__fp_szero>
    2c7c:	ee cd       	rjmp	.-1060   	; 0x285a <__fp_nan>

00002c7e <__divsf3x>:
    2c7e:	0f de       	rcall	.-994    	; 0x289e <__fp_split3>
    2c80:	98 f3       	brcs	.-26     	; 0x2c68 <__divsf3+0x4>

00002c82 <__divsf3_pse>:
    2c82:	99 23       	and	r25, r25
    2c84:	c9 f3       	breq	.-14     	; 0x2c78 <__divsf3+0x14>
    2c86:	55 23       	and	r21, r21
    2c88:	b1 f3       	breq	.-20     	; 0x2c76 <__divsf3+0x12>
    2c8a:	95 1b       	sub	r25, r21
    2c8c:	55 0b       	sbc	r21, r21
    2c8e:	bb 27       	eor	r27, r27
    2c90:	aa 27       	eor	r26, r26
    2c92:	62 17       	cp	r22, r18
    2c94:	73 07       	cpc	r23, r19
    2c96:	84 07       	cpc	r24, r20
    2c98:	38 f0       	brcs	.+14     	; 0x2ca8 <__divsf3_pse+0x26>
    2c9a:	9f 5f       	subi	r25, 0xFF	; 255
    2c9c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c9e:	22 0f       	add	r18, r18
    2ca0:	33 1f       	adc	r19, r19
    2ca2:	44 1f       	adc	r20, r20
    2ca4:	aa 1f       	adc	r26, r26
    2ca6:	a9 f3       	breq	.-22     	; 0x2c92 <__divsf3_pse+0x10>
    2ca8:	33 d0       	rcall	.+102    	; 0x2d10 <__divsf3_pse+0x8e>
    2caa:	0e 2e       	mov	r0, r30
    2cac:	3a f0       	brmi	.+14     	; 0x2cbc <__divsf3_pse+0x3a>
    2cae:	e0 e8       	ldi	r30, 0x80	; 128
    2cb0:	30 d0       	rcall	.+96     	; 0x2d12 <__divsf3_pse+0x90>
    2cb2:	91 50       	subi	r25, 0x01	; 1
    2cb4:	50 40       	sbci	r21, 0x00	; 0
    2cb6:	e6 95       	lsr	r30
    2cb8:	00 1c       	adc	r0, r0
    2cba:	ca f7       	brpl	.-14     	; 0x2cae <__divsf3_pse+0x2c>
    2cbc:	29 d0       	rcall	.+82     	; 0x2d10 <__divsf3_pse+0x8e>
    2cbe:	fe 2f       	mov	r31, r30
    2cc0:	27 d0       	rcall	.+78     	; 0x2d10 <__divsf3_pse+0x8e>
    2cc2:	66 0f       	add	r22, r22
    2cc4:	77 1f       	adc	r23, r23
    2cc6:	88 1f       	adc	r24, r24
    2cc8:	bb 1f       	adc	r27, r27
    2cca:	26 17       	cp	r18, r22
    2ccc:	37 07       	cpc	r19, r23
    2cce:	48 07       	cpc	r20, r24
    2cd0:	ab 07       	cpc	r26, r27
    2cd2:	b0 e8       	ldi	r27, 0x80	; 128
    2cd4:	09 f0       	breq	.+2      	; 0x2cd8 <__divsf3_pse+0x56>
    2cd6:	bb 0b       	sbc	r27, r27
    2cd8:	80 2d       	mov	r24, r0
    2cda:	bf 01       	movw	r22, r30
    2cdc:	ff 27       	eor	r31, r31
    2cde:	93 58       	subi	r25, 0x83	; 131
    2ce0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ce2:	2a f0       	brmi	.+10     	; 0x2cee <__divsf3_pse+0x6c>
    2ce4:	9e 3f       	cpi	r25, 0xFE	; 254
    2ce6:	51 05       	cpc	r21, r1
    2ce8:	68 f0       	brcs	.+26     	; 0x2d04 <__divsf3_pse+0x82>
    2cea:	b1 cd       	rjmp	.-1182   	; 0x284e <__fp_inf>
    2cec:	fb cd       	rjmp	.-1034   	; 0x28e4 <__fp_szero>
    2cee:	5f 3f       	cpi	r21, 0xFF	; 255
    2cf0:	ec f3       	brlt	.-6      	; 0x2cec <__divsf3_pse+0x6a>
    2cf2:	98 3e       	cpi	r25, 0xE8	; 232
    2cf4:	dc f3       	brlt	.-10     	; 0x2cec <__divsf3_pse+0x6a>
    2cf6:	86 95       	lsr	r24
    2cf8:	77 95       	ror	r23
    2cfa:	67 95       	ror	r22
    2cfc:	b7 95       	ror	r27
    2cfe:	f7 95       	ror	r31
    2d00:	9f 5f       	subi	r25, 0xFF	; 255
    2d02:	c9 f7       	brne	.-14     	; 0x2cf6 <__divsf3_pse+0x74>
    2d04:	88 0f       	add	r24, r24
    2d06:	91 1d       	adc	r25, r1
    2d08:	96 95       	lsr	r25
    2d0a:	87 95       	ror	r24
    2d0c:	97 f9       	bld	r25, 7
    2d0e:	08 95       	ret
    2d10:	e1 e0       	ldi	r30, 0x01	; 1
    2d12:	66 0f       	add	r22, r22
    2d14:	77 1f       	adc	r23, r23
    2d16:	88 1f       	adc	r24, r24
    2d18:	bb 1f       	adc	r27, r27
    2d1a:	62 17       	cp	r22, r18
    2d1c:	73 07       	cpc	r23, r19
    2d1e:	84 07       	cpc	r24, r20
    2d20:	ba 07       	cpc	r27, r26
    2d22:	20 f0       	brcs	.+8      	; 0x2d2c <__divsf3_pse+0xaa>
    2d24:	62 1b       	sub	r22, r18
    2d26:	73 0b       	sbc	r23, r19
    2d28:	84 0b       	sbc	r24, r20
    2d2a:	ba 0b       	sbc	r27, r26
    2d2c:	ee 1f       	adc	r30, r30
    2d2e:	88 f7       	brcc	.-30     	; 0x2d12 <__divsf3_pse+0x90>
    2d30:	e0 95       	com	r30
    2d32:	08 95       	ret

00002d34 <__fp_mpack>:
    2d34:	9f 3f       	cpi	r25, 0xFF	; 255
    2d36:	31 f0       	breq	.+12     	; 0x2d44 <__fp_mpack_finite+0xc>

00002d38 <__fp_mpack_finite>:
    2d38:	91 50       	subi	r25, 0x01	; 1
    2d3a:	20 f4       	brcc	.+8      	; 0x2d44 <__fp_mpack_finite+0xc>
    2d3c:	87 95       	ror	r24
    2d3e:	77 95       	ror	r23
    2d40:	67 95       	ror	r22
    2d42:	b7 95       	ror	r27
    2d44:	88 0f       	add	r24, r24
    2d46:	91 1d       	adc	r25, r1
    2d48:	96 95       	lsr	r25
    2d4a:	87 95       	ror	r24
    2d4c:	97 f9       	bld	r25, 7
    2d4e:	08 95       	ret

00002d50 <__divmodhi4>:
    2d50:	97 fb       	bst	r25, 7
    2d52:	07 2e       	mov	r0, r23
    2d54:	16 f4       	brtc	.+4      	; 0x2d5a <__divmodhi4+0xa>
    2d56:	00 94       	com	r0
    2d58:	06 d0       	rcall	.+12     	; 0x2d66 <__divmodhi4_neg1>
    2d5a:	77 fd       	sbrc	r23, 7
    2d5c:	08 d0       	rcall	.+16     	; 0x2d6e <__divmodhi4_neg2>
    2d5e:	0b d0       	rcall	.+22     	; 0x2d76 <__udivmodhi4>
    2d60:	07 fc       	sbrc	r0, 7
    2d62:	05 d0       	rcall	.+10     	; 0x2d6e <__divmodhi4_neg2>
    2d64:	3e f4       	brtc	.+14     	; 0x2d74 <__divmodhi4_exit>

00002d66 <__divmodhi4_neg1>:
    2d66:	90 95       	com	r25
    2d68:	81 95       	neg	r24
    2d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d6c:	08 95       	ret

00002d6e <__divmodhi4_neg2>:
    2d6e:	70 95       	com	r23
    2d70:	61 95       	neg	r22
    2d72:	7f 4f       	sbci	r23, 0xFF	; 255

00002d74 <__divmodhi4_exit>:
    2d74:	08 95       	ret

00002d76 <__udivmodhi4>:
    2d76:	aa 1b       	sub	r26, r26
    2d78:	bb 1b       	sub	r27, r27
    2d7a:	51 e1       	ldi	r21, 0x11	; 17
    2d7c:	07 c0       	rjmp	.+14     	; 0x2d8c <__udivmodhi4_ep>

00002d7e <__udivmodhi4_loop>:
    2d7e:	aa 1f       	adc	r26, r26
    2d80:	bb 1f       	adc	r27, r27
    2d82:	a6 17       	cp	r26, r22
    2d84:	b7 07       	cpc	r27, r23
    2d86:	10 f0       	brcs	.+4      	; 0x2d8c <__udivmodhi4_ep>
    2d88:	a6 1b       	sub	r26, r22
    2d8a:	b7 0b       	sbc	r27, r23

00002d8c <__udivmodhi4_ep>:
    2d8c:	88 1f       	adc	r24, r24
    2d8e:	99 1f       	adc	r25, r25
    2d90:	5a 95       	dec	r21
    2d92:	a9 f7       	brne	.-22     	; 0x2d7e <__udivmodhi4_loop>
    2d94:	80 95       	com	r24
    2d96:	90 95       	com	r25
    2d98:	bc 01       	movw	r22, r24
    2d9a:	cd 01       	movw	r24, r26
    2d9c:	08 95       	ret

00002d9e <memcpy>:
    2d9e:	fb 01       	movw	r30, r22
    2da0:	dc 01       	movw	r26, r24
    2da2:	02 c0       	rjmp	.+4      	; 0x2da8 <memcpy+0xa>
    2da4:	01 90       	ld	r0, Z+
    2da6:	0d 92       	st	X+, r0
    2da8:	41 50       	subi	r20, 0x01	; 1
    2daa:	50 40       	sbci	r21, 0x00	; 0
    2dac:	d8 f7       	brcc	.-10     	; 0x2da4 <memcpy+0x6>
    2dae:	08 95       	ret

00002db0 <_exit>:
    2db0:	f8 94       	cli

00002db2 <__stop_program>:
    2db2:	ff cf       	rjmp	.-2      	; 0x2db2 <__stop_program>
