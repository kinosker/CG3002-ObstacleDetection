
FreeRTOS2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800200  00002e44  00002ed8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000709  00800238  00800238  00002f10  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002f10  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000570  00000000  00000000  00002f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005e64  00000000  00000000  000034b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000169d  00000000  00000000  00009314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003877  00000000  00000000  0000a9b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000f70  00000000  00000000  0000e228  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000176c  00000000  00000000  0000f198  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000425a  00000000  00000000  00010904  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000500  00000000  00000000  00014b5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b2 c0       	rjmp	.+356    	; 0x166 <__ctors_end>
       2:	00 00       	nop
       4:	d0 c0       	rjmp	.+416    	; 0x1a6 <__bad_interrupt>
       6:	00 00       	nop
       8:	ce c0       	rjmp	.+412    	; 0x1a6 <__bad_interrupt>
       a:	00 00       	nop
       c:	cc c0       	rjmp	.+408    	; 0x1a6 <__bad_interrupt>
       e:	00 00       	nop
      10:	ca c0       	rjmp	.+404    	; 0x1a6 <__bad_interrupt>
      12:	00 00       	nop
      14:	c8 c0       	rjmp	.+400    	; 0x1a6 <__bad_interrupt>
      16:	00 00       	nop
      18:	c6 c0       	rjmp	.+396    	; 0x1a6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c4 c0       	rjmp	.+392    	; 0x1a6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c2 c0       	rjmp	.+388    	; 0x1a6 <__bad_interrupt>
      22:	00 00       	nop
      24:	a3 c3       	rjmp	.+1862   	; 0x76c <__vector_9>
      26:	00 00       	nop
      28:	be c0       	rjmp	.+380    	; 0x1a6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bc c0       	rjmp	.+376    	; 0x1a6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ba c0       	rjmp	.+372    	; 0x1a6 <__bad_interrupt>
      32:	00 00       	nop
      34:	b8 c0       	rjmp	.+368    	; 0x1a6 <__bad_interrupt>
      36:	00 00       	nop
      38:	b6 c0       	rjmp	.+364    	; 0x1a6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b4 c0       	rjmp	.+360    	; 0x1a6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b2 c0       	rjmp	.+356    	; 0x1a6 <__bad_interrupt>
      42:	00 00       	nop
      44:	b0 c0       	rjmp	.+352    	; 0x1a6 <__bad_interrupt>
      46:	00 00       	nop
      48:	ae c0       	rjmp	.+348    	; 0x1a6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ac c0       	rjmp	.+344    	; 0x1a6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	aa c0       	rjmp	.+340    	; 0x1a6 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__vector_21>
      58:	a6 c0       	rjmp	.+332    	; 0x1a6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a4 c0       	rjmp	.+328    	; 0x1a6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a2 c0       	rjmp	.+324    	; 0x1a6 <__bad_interrupt>
      62:	00 00       	nop
      64:	76 c7       	rjmp	.+3820   	; 0xf52 <__vector_25>
      66:	00 00       	nop
      68:	e2 c7       	rjmp	.+4036   	; 0x102e <__vector_26>
      6a:	00 00       	nop
      6c:	9c c0       	rjmp	.+312    	; 0x1a6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	9a c0       	rjmp	.+308    	; 0x1a6 <__bad_interrupt>
      72:	00 00       	nop
      74:	8b c4       	rjmp	.+2326   	; 0x98c <__vector_29>
      76:	00 00       	nop
      78:	96 c0       	rjmp	.+300    	; 0x1a6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	94 c0       	rjmp	.+296    	; 0x1a6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	92 c0       	rjmp	.+292    	; 0x1a6 <__bad_interrupt>
      82:	00 00       	nop
      84:	90 c0       	rjmp	.+288    	; 0x1a6 <__bad_interrupt>
      86:	00 00       	nop
      88:	8e c0       	rjmp	.+284    	; 0x1a6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8c c0       	rjmp	.+280    	; 0x1a6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	28 c7       	rjmp	.+3664   	; 0xee2 <__vector_36>
      92:	00 00       	nop
      94:	96 c7       	rjmp	.+3884   	; 0xfc2 <__vector_37>
      96:	00 00       	nop
      98:	86 c0       	rjmp	.+268    	; 0x1a6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	84 c0       	rjmp	.+264    	; 0x1a6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	82 c0       	rjmp	.+260    	; 0x1a6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	80 c0       	rjmp	.+256    	; 0x1a6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7e c0       	rjmp	.+252    	; 0x1a6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	7c c0       	rjmp	.+248    	; 0x1a6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	7a c0       	rjmp	.+244    	; 0x1a6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	78 c0       	rjmp	.+240    	; 0x1a6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	76 c0       	rjmp	.+236    	; 0x1a6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	74 c0       	rjmp	.+232    	; 0x1a6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	72 c0       	rjmp	.+228    	; 0x1a6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	70 c0       	rjmp	.+224    	; 0x1a6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	6e c0       	rjmp	.+220    	; 0x1a6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	6c c0       	rjmp	.+216    	; 0x1a6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	6a c0       	rjmp	.+212    	; 0x1a6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	68 c0       	rjmp	.+208    	; 0x1a6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	66 c0       	rjmp	.+204    	; 0x1a6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	64 c0       	rjmp	.+200    	; 0x1a6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	62 c0       	rjmp	.+196    	; 0x1a6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <myMaxSonar_AddSample+0x42>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e4 e4       	ldi	r30, 0x44	; 68
     17e:	fe e2       	ldi	r31, 0x2E	; 46
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a8 33       	cpi	r26, 0x38	; 56
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	29 e0       	ldi	r18, 0x09	; 9
     192:	a8 e3       	ldi	r26, 0x38	; 56
     194:	b2 e0       	ldi	r27, 0x02	; 2
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a1 34       	cpi	r26, 0x41	; 65
     19c:	b2 07       	cpc	r27, r18
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	c1 d0       	rcall	.+386    	; 0x324 <main>
     1a2:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <_exit>

000001a6 <__bad_interrupt>:
     1a6:	2c cf       	rjmp	.-424    	; 0x0 <__vectors>

000001a8 <RPI_receiveTask>:
	}
}


void vApplicationIdleHook()
{
     1a8:	0e 94 2c 09 	call	0x1258	; 0x1258 <myUSART_peekReceiveUSART1>
     1ac:	c8 2f       	mov	r28, r24
     1ae:	0e 94 1a 09 	call	0x1234	; 0x1234 <myUSART_receiveHandShakeAck>
     1b2:	88 23       	and	r24, r24
     1b4:	29 f0       	breq	.+10     	; 0x1c0 <RPI_receiveTask+0x18>
     1b6:	0e 94 df 08 	call	0x11be	; 0x11be <myUSART_receiveUSART1>
     1ba:	0e 94 0f 09 	call	0x121e	; 0x121e <myUSART_completeHandShake>
     1be:	f4 cf       	rjmp	.-24     	; 0x1a8 <RPI_receiveTask>
     1c0:	8c 2f       	mov	r24, r28
     1c2:	0e 94 26 09 	call	0x124c	; 0x124c <myUSART_receiveMessageACK>
     1c6:	88 23       	and	r24, r24
     1c8:	11 f0       	breq	.+4      	; 0x1ce <RPI_receiveTask+0x26>
     1ca:	f9 d7       	rcall	.+4082   	; 0x11be <myUSART_receiveUSART1>
     1cc:	ed cf       	rjmp	.-38     	; 0x1a8 <RPI_receiveTask>
     1ce:	8c 2f       	mov	r24, r28
     1d0:	0e 94 20 09 	call	0x1240	; 0x1240 <myUSART_receiveHandShakeStart>
     1d4:	88 23       	and	r24, r24
     1d6:	19 f0       	breq	.+6      	; 0x1de <RPI_receiveTask+0x36>
     1d8:	0e 94 00 09 	call	0x1200	; 0x1200 <myUSART_waitForHandshake>
     1dc:	e5 cf       	rjmp	.-54     	; 0x1a8 <RPI_receiveTask>
     1de:	ef d7       	rcall	.+4062   	; 0x11be <myUSART_receiveUSART1>
     1e0:	e3 cf       	rjmp	.-58     	; 0x1a8 <RPI_receiveTask>

000001e2 <RPI_sendTask>:
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	00 d0       	rcall	.+0      	; 0x1e8 <RPI_sendTask+0x6>
     1e8:	00 d0       	rcall	.+0      	; 0x1ea <RPI_sendTask+0x8>
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
     1ee:	20 e0       	ldi	r18, 0x00	; 0
     1f0:	4f ef       	ldi	r20, 0xFF	; 255
     1f2:	5f ef       	ldi	r21, 0xFF	; 255
     1f4:	be 01       	movw	r22, r28
     1f6:	6a 5f       	subi	r22, 0xFA	; 250
     1f8:	7f 4f       	sbci	r23, 0xFF	; 255
     1fa:	80 91 89 08 	lds	r24, 0x0889
     1fe:	90 91 8a 08 	lds	r25, 0x088A
     202:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <xQueueGenericReceive>
     206:	8e 81       	ldd	r24, Y+6	; 0x06
     208:	80 5d       	subi	r24, 0xD0	; 208
     20a:	a6 d7       	rcall	.+3916   	; 0x1158 <myUSART_transmitUSART1_c>
     20c:	8a e0       	ldi	r24, 0x0A	; 10
     20e:	a4 d7       	rcall	.+3912   	; 0x1158 <myUSART_transmitUSART1_c>
     210:	8e 81       	ldd	r24, Y+6	; 0x06
     212:	9f ef       	ldi	r25, 0xFF	; 255
     214:	98 0f       	add	r25, r24
     216:	9e 83       	std	Y+6, r25	; 0x06
     218:	88 23       	and	r24, r24
     21a:	21 f1       	breq	.+72     	; 0x264 <RPI_sendTask+0x82>
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	4f ef       	ldi	r20, 0xFF	; 255
     220:	5f ef       	ldi	r21, 0xFF	; 255
     222:	be 01       	movw	r22, r28
     224:	6f 5f       	subi	r22, 0xFF	; 255
     226:	7f 4f       	sbci	r23, 0xFF	; 255
     228:	80 91 8b 08 	lds	r24, 0x088B
     22c:	90 91 8c 08 	lds	r25, 0x088C
     230:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <xQueueGenericReceive>
     234:	89 81       	ldd	r24, Y+1	; 0x01
     236:	79 d7       	rcall	.+3826   	; 0x112a <myUSART_transmitUSART0_c>
     238:	89 81       	ldd	r24, Y+1	; 0x01
     23a:	8e d7       	rcall	.+3868   	; 0x1158 <myUSART_transmitUSART1_c>
     23c:	87 e0       	ldi	r24, 0x07	; 7
     23e:	92 e0       	ldi	r25, 0x02	; 2
     240:	b0 d7       	rcall	.+3936   	; 0x11a2 <myUSART_transmitUSART0>
     242:	ce 01       	movw	r24, r28
     244:	02 96       	adiw	r24, 0x02	; 2
     246:	ad d7       	rcall	.+3930   	; 0x11a2 <myUSART_transmitUSART0>
     248:	ce 01       	movw	r24, r28
     24a:	02 96       	adiw	r24, 0x02	; 2
     24c:	9c d7       	rcall	.+3896   	; 0x1186 <myUSART_transmitUSART1>
     24e:	8a e0       	ldi	r24, 0x0A	; 10
     250:	83 d7       	rcall	.+3846   	; 0x1158 <myUSART_transmitUSART1_c>
     252:	8a e0       	ldi	r24, 0x0A	; 10
     254:	92 e0       	ldi	r25, 0x02	; 2
     256:	a5 d7       	rcall	.+3914   	; 0x11a2 <myUSART_transmitUSART0>
     258:	8e 81       	ldd	r24, Y+6	; 0x06
     25a:	9f ef       	ldi	r25, 0xFF	; 255
     25c:	98 0f       	add	r25, r24
     25e:	9e 83       	std	Y+6, r25	; 0x06
     260:	81 11       	cpse	r24, r1
     262:	dc cf       	rjmp	.-72     	; 0x21c <RPI_sendTask+0x3a>
     264:	8a e0       	ldi	r24, 0x0A	; 10
     266:	61 d7       	rcall	.+3778   	; 0x112a <myUSART_transmitUSART0_c>
     268:	c2 cf       	rjmp	.-124    	; 0x1ee <RPI_sendTask+0xc>

0000026a <myTimerTask>:
     26a:	8c d5       	rcall	.+2840   	; 0xd84 <myTimer_Init>
     26c:	cb d5       	rcall	.+2966   	; 0xe04 <myTimer_DelayChecker>
     26e:	fe cf       	rjmp	.-4      	; 0x26c <myTimerTask+0x2>

00000270 <setDigitalInputPowerReduction>:


void setDigitalInputPowerReduction()
{
	// Set when confirm which ADC pin not used for digital..
	DIDR0 = 0b11111111; // all adc pin not used for digital
     270:	8f ef       	ldi	r24, 0xFF	; 255
     272:	80 93 7e 00 	sts	0x007E, r24
	DIDR1 |= (1<<AIN1D) | (1<<AIN0D);
     276:	ef e7       	ldi	r30, 0x7F	; 127
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	90 81       	ld	r25, Z
     27c:	93 60       	ori	r25, 0x03	; 3
     27e:	90 83       	st	Z, r25
	DIDR2 = 0b11111111; // add adc pin not used for digital
     280:	80 93 7d 00 	sts	0x007D, r24
     284:	08 95       	ret

00000286 <setPowerReduction>:
}

// Shut down unused...
void setPowerReduction()
{
	PRR0 = (1<<PRTWI) | (1<<PRTIM2) | (1<<PRTIM1) | (1<<PRSPI); // Shut down I2C, timer2, timer 1, SPI
     286:	8c ec       	ldi	r24, 0xCC	; 204
     288:	80 93 64 00 	sts	0x0064, r24
	// Include USART0 after finish debugging using usb.... (1<<PRUSART0)
	
	PRR1 = (1<<PRTIM5) | (1<<PRTIM4) | (1<<PRTIM3) | (1<<PRUSART3) | (1<<PRUSART2); // Shut down timer5, timer4, timer3, USART3, USART2
     28c:	8e e3       	ldi	r24, 0x3E	; 62
     28e:	80 93 65 00 	sts	0x0065, r24
	
	setDigitalInputPowerReduction();
     292:	ee cf       	rjmp	.-36     	; 0x270 <setDigitalInputPowerReduction>
     294:	08 95       	ret

00000296 <clearTimer>:
}

void clearTimer()
{
	// Clear Timer1
	TCCR1A = 0;     // Clear all settings
     296:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;     // Clear all settings
     29a:	10 92 81 00 	sts	0x0081, r1
	TIMSK1 = 0;     // Disable all interrupts
     29e:	10 92 6f 00 	sts	0x006F, r1

	// Clear Timer2
	TCCR2A = 0;     // Clear all settings
     2a2:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0;     // Clear all settings
     2a6:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;     // Disable all interrupts
     2aa:	10 92 70 00 	sts	0x0070, r1
	
	// Clear Timer3
	TCCR3A = 0;     // Clear all settings
     2ae:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;     // Clear all settings
     2b2:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0;     // Disable all interrupts
     2b6:	10 92 71 00 	sts	0x0071, r1

	// Clear Timer4
	TCCR4A = 0;     // Clear all settings
     2ba:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0;     // Clear all settings
     2be:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0;     // Disable all interrupts
     2c2:	10 92 72 00 	sts	0x0072, r1

	// Clear Timer5
	TCCR5A = 0;     // Clear all settings
     2c6:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;     // Clear all settings
     2ca:	10 92 21 01 	sts	0x0121, r1
	TIMSK5 = 0;     // Disable all interrupts
     2ce:	10 92 73 00 	sts	0x0073, r1
     2d2:	08 95       	ret

000002d4 <init>:
}

void init()
{
     2d4:	cf 93       	push	r28
	// Ensure atomic...
	ATOMIC_BLOCK( ATOMIC_RESTORESTATE )
     2d6:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2d8:	f8 94       	cli
	{
		clearTimer();
     2da:	dd df       	rcall	.-70     	; 0x296 <clearTimer>
		setPowerReduction();
     2dc:	d4 df       	rcall	.-88     	; 0x286 <setPowerReduction>
		myUSART_USART0_Init();
     2de:	dd d6       	rcall	.+3514   	; 0x109a <myUSART_USART0_Init>
		myUSART_USART1_Init();
     2e0:	fc d6       	rcall	.+3576   	; 0x10da <myUSART_USART1_Init>
		myADC_Init();
     2e2:	8c d3       	rcall	.+1816   	; 0x9fc <myADC_Init>
		
		MaxSonar_Init();
     2e4:	83 b3       	in	r24, 0x13	; 19
     2e6:	83 60       	ori	r24, 0x03	; 3
     2e8:	83 bb       	out	0x13, r24	; 19
		
		myHcSonar_Init();
     2ea:	cb d2       	rcall	.+1430   	; 0x882 <myHcSonar_Init>
		
		
		queueObstacleNumber = xQueueCreate(QUEUE_SIZE, sizeof (char)); // create queue
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	61 e0       	ldi	r22, 0x01	; 1
     2f0:	85 e0       	ldi	r24, 0x05	; 5
     2f2:	0e 94 bd 0b 	call	0x177a	; 0x177a <xQueueGenericCreate>
     2f6:	90 93 8a 08 	sts	0x088A, r25
     2fa:	80 93 89 08 	sts	0x0889, r24
		queueObstacleData = xQueueCreate( (QUEUE_SIZE*SONAR_NUM), sizeof (obstacleStruct)); // create queue
     2fe:	40 e0       	ldi	r20, 0x00	; 0
     300:	65 e0       	ldi	r22, 0x05	; 5
     302:	84 e1       	ldi	r24, 0x14	; 20
     304:	0e 94 bd 0b 	call	0x177a	; 0x177a <xQueueGenericCreate>
     308:	90 93 8c 08 	sts	0x088C, r25
     30c:	80 93 8b 08 	sts	0x088B, r24
		
		MOTOR_LEFT_INIT();
     310:	6c 9a       	sbi	0x0d, 4	; 13
		MOTOR_RIGHT_INIT();
     312:	e1 e0       	ldi	r30, 0x01	; 1
     314:	f1 e0       	ldi	r31, 0x01	; 1
     316:	80 81       	ld	r24, Z
     318:	80 61       	ori	r24, 0x10	; 16
     31a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     31c:	cf bf       	out	0x3f, r28	; 63
		
		
	}
	
	sei(); // enable interrupts..
     31e:	78 94       	sei
}
     320:	cf 91       	pop	r28
     322:	08 95       	ret

00000324 <main>:
	
	// do nth
}

int main(void)
{
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	cd b7       	in	r28, 0x3d	; 61
     32a:	de b7       	in	r29, 0x3e	; 62
     32c:	28 97       	sbiw	r28, 0x08	; 8
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	f8 94       	cli
     332:	de bf       	out	0x3e, r29	; 62
     334:	0f be       	out	0x3f, r0	; 63
     336:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
		TaskHandle_t t_maxSonar, t_rx, t_tx, t_delay;
	
		init();
     338:	cd df       	rcall	.-102    	; 0x2d4 <init>

		//xTaskCreate(task1, "Task 1", BLINK_1_STACK, NULL, BLINK_1_PRIORITY, &t1);
		//xTaskCreate(task2, "Task 2", BLINK_2_STACK, NULL, BLINK_2_PRIORITY, &t2);
		
		xTaskCreate(myTimerTask, "myTimer", MY_TIMER_STACK, (&t_delay) , MY_TIMER_PRIORITY, &t_delay); // danger?!?		
     33a:	a1 2c       	mov	r10, r1
     33c:	b1 2c       	mov	r11, r1
     33e:	c1 2c       	mov	r12, r1
     340:	d1 2c       	mov	r13, r1
     342:	ce 01       	movw	r24, r28
     344:	01 96       	adiw	r24, 0x01	; 1
     346:	7c 01       	movw	r14, r24
     348:	04 e0       	ldi	r16, 0x04	; 4
     34a:	9c 01       	movw	r18, r24
     34c:	49 e6       	ldi	r20, 0x69	; 105
     34e:	50 e0       	ldi	r21, 0x00	; 0
     350:	6d e0       	ldi	r22, 0x0D	; 13
     352:	72 e0       	ldi	r23, 0x02	; 2
     354:	85 e3       	ldi	r24, 0x35	; 53
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <xTaskGenericCreate>
		xTaskCreate(Sonar_Task, "maxSonar", MAXSONAR_STACK, NULL, MAXSONAR_PRIORITY, &t_maxSonar);
     35c:	ce 01       	movw	r24, r28
     35e:	07 96       	adiw	r24, 0x07	; 7
     360:	7c 01       	movw	r14, r24
     362:	02 e0       	ldi	r16, 0x02	; 2
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	4d e6       	ldi	r20, 0x6D	; 109
     36a:	51 e0       	ldi	r21, 0x01	; 1
     36c:	65 e1       	ldi	r22, 0x15	; 21
     36e:	72 e0       	ldi	r23, 0x02	; 2
     370:	8b e6       	ldi	r24, 0x6B	; 107
     372:	92 e0       	ldi	r25, 0x02	; 2
     374:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <xTaskGenericCreate>

		
		// Need fix receive concurrency issues.
		xTaskCreate(RPI_receiveTask, "RPI_Receive", RPI_RECEIVE_STACK, NULL, RPI_RECEIVE_PRIORITY, &t_rx);
     378:	ce 01       	movw	r24, r28
     37a:	05 96       	adiw	r24, 0x05	; 5
     37c:	7c 01       	movw	r14, r24
     37e:	03 e0       	ldi	r16, 0x03	; 3
     380:	20 e0       	ldi	r18, 0x00	; 0
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	47 e8       	ldi	r20, 0x87	; 135
     386:	50 e0       	ldi	r21, 0x00	; 0
     388:	6e e1       	ldi	r22, 0x1E	; 30
     38a:	72 e0       	ldi	r23, 0x02	; 2
     38c:	84 ed       	ldi	r24, 0xD4	; 212
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <xTaskGenericCreate>
		xTaskCreate(RPI_sendTask, "RPI_Send", RPI_SEND_STACK, NULL, RPI_SEND_PRIORITY, &t_tx);
     394:	ce 01       	movw	r24, r28
     396:	03 96       	adiw	r24, 0x03	; 3
     398:	7c 01       	movw	r14, r24
     39a:	01 e0       	ldi	r16, 0x01	; 1
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	47 e8       	ldi	r20, 0x87	; 135
     3a2:	50 e0       	ldi	r21, 0x00	; 0
     3a4:	6a e2       	ldi	r22, 0x2A	; 42
     3a6:	72 e0       	ldi	r23, 0x02	; 2
     3a8:	81 ef       	ldi	r24, 0xF1	; 241
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <xTaskGenericCreate>
	

		
		vTaskStartScheduler();
     3b0:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <vTaskStartScheduler>
     3b4:	c1 cf       	rjmp	.-126    	; 0x338 <main+0x14>

000003b6 <myItoa>:
}


// either 2 or 3 digit +ve int
void myItoa(int input, char * buffer)
{
     3b6:	9c 01       	movw	r18, r24
     3b8:	fb 01       	movw	r30, r22
	int temp = input;
	input /= 100; // get 100s digit
     3ba:	64 e6       	ldi	r22, 0x64	; 100
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__divmodhi4>
	
	if(input)
     3c2:	61 15       	cp	r22, r1
     3c4:	71 05       	cpc	r23, r1
     3c6:	21 f0       	breq	.+8      	; 0x3d0 <myItoa+0x1a>
		*buffer++ = input + '0';
     3c8:	80 e3       	ldi	r24, 0x30	; 48
     3ca:	86 0f       	add	r24, r22
     3cc:	80 83       	st	Z, r24
     3ce:	31 96       	adiw	r30, 0x01	; 1
		
	temp = temp - input * 100; // get remainder
     3d0:	4c e9       	ldi	r20, 0x9C	; 156
     3d2:	46 03       	mulsu	r20, r22
     3d4:	c0 01       	movw	r24, r0
     3d6:	47 9f       	mul	r20, r23
     3d8:	90 0d       	add	r25, r0
     3da:	11 24       	eor	r1, r1
     3dc:	28 0f       	add	r18, r24
     3de:	39 1f       	adc	r19, r25
	
	
	input = temp / 10; // get 10s digit
     3e0:	c9 01       	movw	r24, r18
     3e2:	6a e0       	ldi	r22, 0x0A	; 10
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__divmodhi4>
	*buffer++ = input + '0';
     3ea:	80 e3       	ldi	r24, 0x30	; 48
     3ec:	86 0f       	add	r24, r22
     3ee:	80 83       	st	Z, r24
	 
	 input = temp - input * 10; // get 1s digit
     3f0:	8a e0       	ldi	r24, 0x0A	; 10
     3f2:	68 9f       	mul	r22, r24
     3f4:	20 19       	sub	r18, r0
     3f6:	11 24       	eor	r1, r1
	 *buffer++ = input + '0';
     3f8:	20 5d       	subi	r18, 0xD0	; 208
     3fa:	21 83       	std	Z+1, r18	; 0x01
	 
	 *buffer = '\0';
     3fc:	12 82       	std	Z+2, r1	; 0x02
     3fe:	08 95       	ret

00000400 <obstacleSend>:
	sei(); // enable interrupts..
}


void obstacleSend(char deviceBlocked, int reading)
{
     400:	1f 93       	push	r17
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	00 d0       	rcall	.+0      	; 0x408 <obstacleSend+0x8>
     408:	1f 92       	push	r1
     40a:	1f 92       	push	r1
     40c:	cd b7       	in	r28, 0x3d	; 61
     40e:	de b7       	in	r29, 0x3e	; 62
     410:	18 2f       	mov	r17, r24
     412:	cb 01       	movw	r24, r22
	obstacleStruct obstacleInfo;
	
	
	
	if(deviceBlocked)
     414:	11 23       	and	r17, r17
     416:	89 f0       	breq	.+34     	; 0x43a <obstacleSend+0x3a>
	{
		myItoa(reading, obstacleInfo.data); // convert to ascii
     418:	be 01       	movw	r22, r28
     41a:	6e 5f       	subi	r22, 0xFE	; 254
     41c:	7f 4f       	sbci	r23, 0xFF	; 255
     41e:	cb df       	rcall	.-106    	; 0x3b6 <myItoa>
		
		obstacleInfo.deviceID = deviceBlocked;
     420:	19 83       	std	Y+1, r17	; 0x01
		
		xQueueSendToBack(queueObstacleData, &obstacleInfo, portMAX_DELAY); // send data to queueData
     422:	20 e0       	ldi	r18, 0x00	; 0
     424:	4f ef       	ldi	r20, 0xFF	; 255
     426:	5f ef       	ldi	r21, 0xFF	; 255
     428:	be 01       	movw	r22, r28
     42a:	6f 5f       	subi	r22, 0xFF	; 255
     42c:	7f 4f       	sbci	r23, 0xFF	; 255
     42e:	80 91 8b 08 	lds	r24, 0x088B
     432:	90 91 8c 08 	lds	r25, 0x088C
     436:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <xQueueGenericSend>
	}
}
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	1f 91       	pop	r17
     44a:	08 95       	ret

0000044c <sendObstacleDetected>:



// Queue the obstacle to send..
void sendObstacleDetected(char obstacleDetected, char * deviceBlocked, int frontSonar, int leftSonar, int rightSonar, int btmIR, int topSonar)
{
     44c:	6f 92       	push	r6
     44e:	7f 92       	push	r7
     450:	8f 92       	push	r8
     452:	9f 92       	push	r9
     454:	af 92       	push	r10
     456:	bf 92       	push	r11
     458:	cf 92       	push	r12
     45a:	df 92       	push	r13
     45c:	ef 92       	push	r14
     45e:	ff 92       	push	r15
     460:	0f 93       	push	r16
     462:	1f 93       	push	r17
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	1f 92       	push	r1
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
     46e:	89 83       	std	Y+1, r24	; 0x01
     470:	5b 01       	movw	r10, r22
     472:	3a 01       	movw	r6, r20
     474:	49 01       	movw	r8, r18
	//if(obstacleDetected > 0)
	{
		
		xQueueSendToBack(queueObstacleNumber,  &obstacleDetected, portMAX_DELAY); // send obstacle...
     476:	20 e0       	ldi	r18, 0x00	; 0
     478:	4f ef       	ldi	r20, 0xFF	; 255
     47a:	5f ef       	ldi	r21, 0xFF	; 255
     47c:	be 01       	movw	r22, r28
     47e:	6f 5f       	subi	r22, 0xFF	; 255
     480:	7f 4f       	sbci	r23, 0xFF	; 255
     482:	80 91 89 08 	lds	r24, 0x0889
     486:	90 91 8a 08 	lds	r25, 0x088A
     48a:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <xQueueGenericSend>
		
		obstacleSend(deviceBlocked[FRONT_DEVICE], frontSonar);
     48e:	b3 01       	movw	r22, r6
     490:	f5 01       	movw	r30, r10
     492:	80 81       	ld	r24, Z
     494:	b5 df       	rcall	.-150    	; 0x400 <obstacleSend>

		obstacleSend(deviceBlocked[LEFT_DEVICE], leftSonar);
     496:	b4 01       	movw	r22, r8
     498:	f5 01       	movw	r30, r10
     49a:	81 81       	ldd	r24, Z+1	; 0x01
     49c:	b1 df       	rcall	.-158    	; 0x400 <obstacleSend>

		obstacleSend(deviceBlocked[RIGHT_DEVICE], rightSonar);
     49e:	b8 01       	movw	r22, r16
     4a0:	f5 01       	movw	r30, r10
     4a2:	82 81       	ldd	r24, Z+2	; 0x02
     4a4:	ad df       	rcall	.-166    	; 0x400 <obstacleSend>

		obstacleSend(deviceBlocked[BTM_DEVICE], btmIR);
     4a6:	b7 01       	movw	r22, r14
     4a8:	f5 01       	movw	r30, r10
     4aa:	83 81       	ldd	r24, Z+3	; 0x03
     4ac:	a9 df       	rcall	.-174    	; 0x400 <obstacleSend>
		
		obstacleSend(deviceBlocked[TOP_DEVICE], topSonar);
     4ae:	b6 01       	movw	r22, r12
     4b0:	f5 01       	movw	r30, r10
     4b2:	84 81       	ldd	r24, Z+4	; 0x04
     4b4:	a5 df       	rcall	.-182    	; 0x400 <obstacleSend>
		
	}
}
     4b6:	0f 90       	pop	r0
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	ff 90       	pop	r15
     4c2:	ef 90       	pop	r14
     4c4:	df 90       	pop	r13
     4c6:	cf 90       	pop	r12
     4c8:	bf 90       	pop	r11
     4ca:	af 90       	pop	r10
     4cc:	9f 90       	pop	r9
     4ce:	8f 90       	pop	r8
     4d0:	7f 90       	pop	r7
     4d2:	6f 90       	pop	r6
     4d4:	08 95       	ret

000004d6 <Sonar_Task>:
	}
}


void Sonar_Task(void *p)
{
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	cd b7       	in	r28, 0x3d	; 61
     4dc:	de b7       	in	r29, 0x3e	; 62
     4de:	a4 97       	sbiw	r28, 0x24	; 36
     4e0:	0f b6       	in	r0, 0x3f	; 63
     4e2:	f8 94       	cli
     4e4:	de bf       	out	0x3e, r29	; 62
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	cd bf       	out	0x3d, r28	; 61
	TickType_t xLastWakeTime;
	char obstacleDetected = 0;
     4ea:	1b 82       	std	Y+3, r1	; 0x03
	int topSonar, frontSonar, leftSonar, rightSonar, btmIR;
	int topSonarSample[SONAR_SAMPLE_SIZE] = {0}, frontSonarSample[SONAR_SAMPLE_SIZE] = {0}, leftSonarSample[SONAR_SAMPLE_SIZE] = {0}, rightSonarSample[SONAR_SAMPLE_SIZE] = {0};
     4ec:	86 e0       	ldi	r24, 0x06	; 6
     4ee:	fe 01       	movw	r30, r28
     4f0:	34 96       	adiw	r30, 0x04	; 4
     4f2:	df 01       	movw	r26, r30
     4f4:	98 2f       	mov	r25, r24
     4f6:	1d 92       	st	X+, r1
     4f8:	9a 95       	dec	r25
     4fa:	e9 f7       	brne	.-6      	; 0x4f6 <Sonar_Task+0x20>
     4fc:	36 96       	adiw	r30, 0x06	; 6
     4fe:	df 01       	movw	r26, r30
     500:	98 2f       	mov	r25, r24
     502:	1d 92       	st	X+, r1
     504:	9a 95       	dec	r25
     506:	e9 f7       	brne	.-6      	; 0x502 <Sonar_Task+0x2c>
     508:	36 96       	adiw	r30, 0x06	; 6
     50a:	df 01       	movw	r26, r30
     50c:	98 2f       	mov	r25, r24
     50e:	1d 92       	st	X+, r1
     510:	9a 95       	dec	r25
     512:	e9 f7       	brne	.-6      	; 0x50e <Sonar_Task+0x38>
     514:	36 96       	adiw	r30, 0x06	; 6
     516:	df 01       	movw	r26, r30
     518:	1d 92       	st	X+, r1
     51a:	8a 95       	dec	r24
     51c:	e9 f7       	brne	.-6      	; 0x518 <Sonar_Task+0x42>
	char deviceBlocked[5] = {0}; // flag to indicate if we should send the reading to RPI
     51e:	36 96       	adiw	r30, 0x06	; 6
     520:	85 e0       	ldi	r24, 0x05	; 5
     522:	df 01       	movw	r26, r30
     524:	1d 92       	st	X+, r1
     526:	8a 95       	dec	r24
     528:	e9 f7       	brne	.-6      	; 0x524 <Sonar_Task+0x4e>
	
	int calibratedBtmIR = mySharpIR_Read(AN12); // get first value...
     52a:	84 e2       	ldi	r24, 0x24	; 36
     52c:	8e d3       	rcall	.+1820   	; 0xc4a <mySharpIR_Read>
     52e:	9a a3       	std	Y+34, r25	; 0x22
     530:	89 a3       	std	Y+33, r24	; 0x21
	
	xLastWakeTime = xTaskGetTickCount(); // get tick count
     532:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <xTaskGetTickCount>
     536:	9a 83       	std	Y+2, r25	; 0x02
     538:	89 83       	std	Y+1, r24	; 0x01
		
	while(1)
	{
		myMaxSonar_TopStart();
     53a:	be d1       	rcall	.+892    	; 0x8b8 <myMaxSonar_TopStart>
		topSonar = myMaxSonar_getFilteredReading(myMaxSonar_Read(AN11), topSonarSample);
     53c:	83 e2       	ldi	r24, 0x23	; 35
     53e:	1c d2       	rcall	.+1080   	; 0x978 <myMaxSonar_Read>
     540:	be 01       	movw	r22, r28
     542:	6c 5f       	subi	r22, 0xFC	; 252
     544:	7f 4f       	sbci	r23, 0xFF	; 255
     546:	0f d2       	rcall	.+1054   	; 0x966 <myMaxSonar_getFilteredReading>
     548:	9c a3       	std	Y+36, r25	; 0x24
     54a:	8b a3       	std	Y+35, r24	; 0x23
		
		myMaxSonar_BtmStart();
     54c:	af d1       	rcall	.+862    	; 0x8ac <myMaxSonar_BtmStart>
		frontSonar	= myMaxSonar_getFilteredReading(myMaxSonar_Read(AN15), frontSonarSample);
     54e:	87 e2       	ldi	r24, 0x27	; 39
     550:	13 d2       	rcall	.+1062   	; 0x978 <myMaxSonar_Read>
     552:	be 01       	movw	r22, r28
     554:	66 5f       	subi	r22, 0xF6	; 246
     556:	7f 4f       	sbci	r23, 0xFF	; 255
     558:	06 d2       	rcall	.+1036   	; 0x966 <myMaxSonar_getFilteredReading>
     55a:	3c 01       	movw	r6, r24
		leftSonar	= myMaxSonar_getFilteredReading(myMaxSonar_Read(AN14), leftSonarSample);
     55c:	86 e2       	ldi	r24, 0x26	; 38
     55e:	0c d2       	rcall	.+1048   	; 0x978 <myMaxSonar_Read>
     560:	be 01       	movw	r22, r28
     562:	60 5f       	subi	r22, 0xF0	; 240
     564:	7f 4f       	sbci	r23, 0xFF	; 255
     566:	ff d1       	rcall	.+1022   	; 0x966 <myMaxSonar_getFilteredReading>
     568:	1c 01       	movw	r2, r24
		rightSonar	= myMaxSonar_getFilteredReading(myMaxSonar_Read(AN13), rightSonarSample); 
     56a:	85 e2       	ldi	r24, 0x25	; 37
     56c:	05 d2       	rcall	.+1034   	; 0x978 <myMaxSonar_Read>
     56e:	be 01       	movw	r22, r28
     570:	6a 5e       	subi	r22, 0xEA	; 234
     572:	7f 4f       	sbci	r23, 0xFF	; 255
     574:	f8 d1       	rcall	.+1008   	; 0x966 <myMaxSonar_getFilteredReading>
     576:	2c 01       	movw	r4, r24
		
		btmIR		= mySharpIR_Read(AN12);	
     578:	84 e2       	ldi	r24, 0x24	; 36
     57a:	67 d3       	rcall	.+1742   	; 0xc4a <mySharpIR_Read>
     57c:	4c 01       	movw	r8, r24
		//frontSonar = myMaxSonar_Stabilizer(frontSonar, &prevFrontSonar);
		//leftSonar = myMaxSonar_Stabilizer(leftSonar, &prevLeftSonar);
		//rightSonar = myMaxSonar_Stabilizer(rightSonar, &prevRightSonar);
		
		
		mySharpIR_ReCalibrate(&calibratedBtmIR, btmIR); // attempt to re-calibrate btm ir sensor if stable enough..
     57e:	bc 01       	movw	r22, r24
     580:	ce 01       	movw	r24, r28
     582:	81 96       	adiw	r24, 0x21	; 33
     584:	9b d3       	rcall	.+1846   	; 0xcbc <mySharpIR_ReCalibrate>
	
		obstacleDetected = obstacleDetection(frontSonar, obstacleDetected, deviceBlocked, leftSonar, rightSonar, topSonar, calibratedBtmIR, btmIR);
     586:	c9 a0       	ldd	r12, Y+33	; 0x21
     588:	da a0       	ldd	r13, Y+34	; 0x22
     58a:	54 01       	movw	r10, r8
     58c:	eb a0       	ldd	r14, Y+35	; 0x23
     58e:	fc a0       	ldd	r15, Y+36	; 0x24
     590:	82 01       	movw	r16, r4
     592:	91 01       	movw	r18, r2
     594:	ae 01       	movw	r20, r28
     596:	44 5e       	subi	r20, 0xE4	; 228
     598:	5f 4f       	sbci	r21, 0xFF	; 255
     59a:	6b 81       	ldd	r22, Y+3	; 0x03
     59c:	c3 01       	movw	r24, r6
     59e:	25 d3       	rcall	.+1610   	; 0xbea <obstacleDetection>
     5a0:	8b 83       	std	Y+3, r24	; 0x03
		obstacleAvoidance(frontSonar, leftSonar, rightSonar, btmIR, deviceBlocked);
     5a2:	8e 01       	movw	r16, r28
     5a4:	04 5e       	subi	r16, 0xE4	; 228
     5a6:	1f 4f       	sbci	r17, 0xFF	; 255
     5a8:	94 01       	movw	r18, r8
     5aa:	a2 01       	movw	r20, r4
     5ac:	b1 01       	movw	r22, r2
     5ae:	c3 01       	movw	r24, r6
     5b0:	a6 d2       	rcall	.+1356   	; 0xafe <obstacleAvoidance>
		
		// for debuggin to print all...
		cheatPrintAll(deviceBlocked, &obstacleDetected); 
     5b2:	be 01       	movw	r22, r28
     5b4:	6d 5f       	subi	r22, 0xFD	; 253
     5b6:	7f 4f       	sbci	r23, 0xFF	; 255
     5b8:	c8 01       	movw	r24, r16
     5ba:	08 d3       	rcall	.+1552   	; 0xbcc <cheatPrintAll>
		// remove top statement... when not debuggin..
		
		sendObstacleDetected(obstacleDetected, deviceBlocked, frontSonar, leftSonar, rightSonar, btmIR, topSonar);
     5bc:	cb a0       	ldd	r12, Y+35	; 0x23
     5be:	dc a0       	ldd	r13, Y+36	; 0x24
     5c0:	74 01       	movw	r14, r8
     5c2:	82 01       	movw	r16, r4
     5c4:	91 01       	movw	r18, r2
     5c6:	a3 01       	movw	r20, r6
     5c8:	be 01       	movw	r22, r28
     5ca:	64 5e       	subi	r22, 0xE4	; 228
     5cc:	7f 4f       	sbci	r23, 0xFF	; 255
     5ce:	8b 81       	ldd	r24, Y+3	; 0x03
     5d0:	3d df       	rcall	.-390    	; 0x44c <sendObstacleDetected>
	
		// reset the variables back to 0
		obstacleDetected = 0; 
     5d2:	1b 82       	std	Y+3, r1	; 0x03
		deviceBlocked[0] = deviceBlocked[1] = deviceBlocked[2] = deviceBlocked[3] = deviceBlocked[4] = 0;
     5d4:	18 a2       	std	Y+32, r1	; 0x20
     5d6:	1f 8e       	std	Y+31, r1	; 0x1f
     5d8:	1e 8e       	std	Y+30, r1	; 0x1e
     5da:	1d 8e       	std	Y+29, r1	; 0x1d
     5dc:	1c 8e       	std	Y+28, r1	; 0x1c
		
		vTaskDelayUntil( &xLastWakeTime, 150);  // delay 150 ms for 3 sonar chain...
     5de:	66 e9       	ldi	r22, 0x96	; 150
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	ce 01       	movw	r24, r28
     5e4:	01 96       	adiw	r24, 0x01	; 1
     5e6:	0e 94 11 11 	call	0x2222	; 0x2222 <vTaskDelayUntil>
     5ea:	a7 cf       	rjmp	.-178    	; 0x53a <Sonar_Task+0x64>

000005ec <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     5f2:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     5f6:	80 91 38 02 	lds	r24, 0x0238
     5fa:	90 91 39 02 	lds	r25, 0x0239
     5fe:	89 2b       	or	r24, r25
     600:	31 f4       	brne	.+12     	; 0x60e <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     602:	8d e3       	ldi	r24, 0x3D	; 61
     604:	92 e0       	ldi	r25, 0x02	; 2
     606:	90 93 39 02 	sts	0x0239, r25
     60a:	80 93 38 02 	sts	0x0238, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     60e:	40 91 3a 02 	lds	r20, 0x023A
     612:	50 91 3b 02 	lds	r21, 0x023B
     616:	9e 01       	movw	r18, r28
     618:	24 0f       	add	r18, r20
     61a:	35 1f       	adc	r19, r21
     61c:	2b 3d       	cpi	r18, 0xDB	; 219
     61e:	85 e0       	ldi	r24, 0x05	; 5
     620:	38 07       	cpc	r19, r24
     622:	70 f4       	brcc	.+28     	; 0x640 <pvPortMalloc+0x54>
     624:	42 17       	cp	r20, r18
     626:	53 07       	cpc	r21, r19
     628:	70 f4       	brcc	.+28     	; 0x646 <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     62a:	c0 91 38 02 	lds	r28, 0x0238
     62e:	d0 91 39 02 	lds	r29, 0x0239
     632:	c4 0f       	add	r28, r20
     634:	d5 1f       	adc	r29, r21
			xNextFreeByte += xWantedSize;
     636:	30 93 3b 02 	sts	0x023B, r19
     63a:	20 93 3a 02 	sts	0x023A, r18
     63e:	05 c0       	rjmp	.+10     	; 0x64a <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     640:	c0 e0       	ldi	r28, 0x00	; 0
     642:	d0 e0       	ldi	r29, 0x00	; 0
     644:	02 c0       	rjmp	.+4      	; 0x64a <pvPortMalloc+0x5e>
     646:	c0 e0       	ldi	r28, 0x00	; 0
     648:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     64a:	0e 94 90 10 	call	0x2120	; 0x2120 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     64e:	ce 01       	movw	r24, r28
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	08 95       	ret

00000656 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     656:	08 95       	ret

00000658 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     658:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     65a:	03 96       	adiw	r24, 0x03	; 3
     65c:	92 83       	std	Z+2, r25	; 0x02
     65e:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     660:	2f ef       	ldi	r18, 0xFF	; 255
     662:	3f ef       	ldi	r19, 0xFF	; 255
     664:	34 83       	std	Z+4, r19	; 0x04
     666:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     668:	96 83       	std	Z+6, r25	; 0x06
     66a:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     66c:	90 87       	std	Z+8, r25	; 0x08
     66e:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     670:	10 82       	st	Z, r1
     672:	08 95       	ret

00000674 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     674:	fc 01       	movw	r30, r24
     676:	11 86       	std	Z+9, r1	; 0x09
     678:	10 86       	std	Z+8, r1	; 0x08
     67a:	08 95       	ret

0000067c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	9c 01       	movw	r18, r24
     682:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     684:	dc 01       	movw	r26, r24
     686:	11 96       	adiw	r26, 0x01	; 1
     688:	cd 91       	ld	r28, X+
     68a:	dc 91       	ld	r29, X
     68c:	12 97       	sbiw	r26, 0x02	; 2

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     68e:	d3 83       	std	Z+3, r29	; 0x03
     690:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     692:	8c 81       	ldd	r24, Y+4	; 0x04
     694:	9d 81       	ldd	r25, Y+5	; 0x05
     696:	95 83       	std	Z+5, r25	; 0x05
     698:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxPrevious->pxNext = pxNewListItem;
     69a:	8c 81       	ldd	r24, Y+4	; 0x04
     69c:	9d 81       	ldd	r25, Y+5	; 0x05
     69e:	dc 01       	movw	r26, r24
     6a0:	13 96       	adiw	r26, 0x03	; 3
     6a2:	7c 93       	st	X, r23
     6a4:	6e 93       	st	-X, r22
     6a6:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     6a8:	7d 83       	std	Y+5, r23	; 0x05
     6aa:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     6ac:	31 87       	std	Z+9, r19	; 0x09
     6ae:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     6b0:	f9 01       	movw	r30, r18
     6b2:	80 81       	ld	r24, Z
     6b4:	8f 5f       	subi	r24, 0xFF	; 255
     6b6:	80 83       	st	Z, r24
}
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	08 95       	ret

000006be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     6c4:	48 81       	ld	r20, Y
     6c6:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     6c8:	4f 3f       	cpi	r20, 0xFF	; 255
     6ca:	2f ef       	ldi	r18, 0xFF	; 255
     6cc:	52 07       	cpc	r21, r18
     6ce:	21 f4       	brne	.+8      	; 0x6d8 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     6d0:	fc 01       	movw	r30, r24
     6d2:	a7 81       	ldd	r26, Z+7	; 0x07
     6d4:	b0 85       	ldd	r27, Z+8	; 0x08
     6d6:	0d c0       	rjmp	.+26     	; 0x6f2 <vListInsert+0x34>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6d8:	dc 01       	movw	r26, r24
     6da:	13 96       	adiw	r26, 0x03	; 3
     6dc:	12 96       	adiw	r26, 0x02	; 2
     6de:	ed 91       	ld	r30, X+
     6e0:	fc 91       	ld	r31, X
     6e2:	13 97       	sbiw	r26, 0x03	; 3
     6e4:	20 81       	ld	r18, Z
     6e6:	31 81       	ldd	r19, Z+1	; 0x01
     6e8:	42 17       	cp	r20, r18
     6ea:	53 07       	cpc	r21, r19
     6ec:	10 f0       	brcs	.+4      	; 0x6f2 <vListInsert+0x34>
     6ee:	df 01       	movw	r26, r30
     6f0:	f5 cf       	rjmp	.-22     	; 0x6dc <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     6f2:	12 96       	adiw	r26, 0x02	; 2
     6f4:	ed 91       	ld	r30, X+
     6f6:	fc 91       	ld	r31, X
     6f8:	13 97       	sbiw	r26, 0x03	; 3
     6fa:	fb 83       	std	Y+3, r31	; 0x03
     6fc:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     6fe:	d5 83       	std	Z+5, r29	; 0x05
     700:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     702:	bd 83       	std	Y+5, r27	; 0x05
     704:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     706:	13 96       	adiw	r26, 0x03	; 3
     708:	dc 93       	st	X, r29
     70a:	ce 93       	st	-X, r28
     70c:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     70e:	99 87       	std	Y+9, r25	; 0x09
     710:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     712:	fc 01       	movw	r30, r24
     714:	20 81       	ld	r18, Z
     716:	2f 5f       	subi	r18, 0xFF	; 255
     718:	20 83       	st	Z, r18
}
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	08 95       	ret

00000720 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     726:	a0 85       	ldd	r26, Z+8	; 0x08
     728:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     72a:	c2 81       	ldd	r28, Z+2	; 0x02
     72c:	d3 81       	ldd	r29, Z+3	; 0x03
     72e:	84 81       	ldd	r24, Z+4	; 0x04
     730:	95 81       	ldd	r25, Z+5	; 0x05
     732:	9d 83       	std	Y+5, r25	; 0x05
     734:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     736:	c4 81       	ldd	r28, Z+4	; 0x04
     738:	d5 81       	ldd	r29, Z+5	; 0x05
     73a:	82 81       	ldd	r24, Z+2	; 0x02
     73c:	93 81       	ldd	r25, Z+3	; 0x03
     73e:	9b 83       	std	Y+3, r25	; 0x03
     740:	8a 83       	std	Y+2, r24	; 0x02

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     742:	11 96       	adiw	r26, 0x01	; 1
     744:	cd 91       	ld	r28, X+
     746:	dc 91       	ld	r29, X
     748:	12 97       	sbiw	r26, 0x02	; 2
     74a:	ce 17       	cp	r28, r30
     74c:	df 07       	cpc	r29, r31
     74e:	31 f4       	brne	.+12     	; 0x75c <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     750:	8c 81       	ldd	r24, Y+4	; 0x04
     752:	9d 81       	ldd	r25, Y+5	; 0x05
     754:	12 96       	adiw	r26, 0x02	; 2
     756:	9c 93       	st	X, r25
     758:	8e 93       	st	-X, r24
     75a:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     75c:	11 86       	std	Z+9, r1	; 0x09
     75e:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     760:	8c 91       	ld	r24, X
     762:	81 50       	subi	r24, 0x01	; 1
     764:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	08 95       	ret

0000076c <__vector_9>:
volatile int us_tickLapsed;
SemaphoreHandle_t semaReadReady;


ISR(PCINT0_vect) //Digital pin 50
{
     76c:	1f 92       	push	r1
     76e:	0f 92       	push	r0
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	0f 92       	push	r0
     774:	11 24       	eor	r1, r1
     776:	0b b6       	in	r0, 0x3b	; 59
     778:	0f 92       	push	r0
     77a:	2f 93       	push	r18
     77c:	3f 93       	push	r19
     77e:	4f 93       	push	r20
     780:	5f 93       	push	r21
     782:	6f 93       	push	r22
     784:	7f 93       	push	r23
     786:	8f 93       	push	r24
     788:	9f 93       	push	r25
     78a:	af 93       	push	r26
     78c:	bf 93       	push	r27
     78e:	ef 93       	push	r30
     790:	ff 93       	push	r31
		
	if(HC_Echo_Read)
     792:	1b 9b       	sbis	0x03, 3	; 3
     794:	0d c0       	rjmp	.+26     	; 0x7b0 <__vector_9+0x44>
	{
		us_tickStart = myTimer_Read();
     796:	10 d3       	rcall	.+1568   	; 0xdb8 <myTimer_Read>
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	90 93 92 08 	sts	0x0892, r25
     79e:	80 93 91 08 	sts	0x0891, r24
		ms_tickStart = xTaskGetTickCountFromISR();
     7a2:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xTaskGetTickCountFromISR>
     7a6:	90 93 8e 08 	sts	0x088E, r25
     7aa:	80 93 8d 08 	sts	0x088D, r24
     7ae:	56 c0       	rjmp	.+172    	; 0x85c <__vector_9+0xf0>
	}	
	else if (!(HC_Echo_Read))
     7b0:	1b 99       	sbic	0x03, 3	; 3
     7b2:	54 c0       	rjmp	.+168    	; 0x85c <__vector_9+0xf0>
	{

		if ((ms_tickEnd = xTaskGetTickCountFromISR()) < ms_tickStart)
     7b4:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xTaskGetTickCountFromISR>
     7b8:	90 93 98 08 	sts	0x0898, r25
     7bc:	80 93 97 08 	sts	0x0897, r24
     7c0:	20 91 8d 08 	lds	r18, 0x088D
     7c4:	30 91 8e 08 	lds	r19, 0x088E
     7c8:	82 17       	cp	r24, r18
     7ca:	93 07       	cpc	r25, r19
     7cc:	4c f4       	brge	.+18     	; 0x7e0 <__vector_9+0x74>
			ms_tickEnd += 65535;
     7ce:	80 91 97 08 	lds	r24, 0x0897
     7d2:	90 91 98 08 	lds	r25, 0x0898
     7d6:	01 97       	sbiw	r24, 0x01	; 1
     7d8:	90 93 98 08 	sts	0x0898, r25
     7dc:	80 93 97 08 	sts	0x0897, r24
		
		if ((us_tickEnd = myTimer_Read()) < us_tickStart) // if smaller then add...
     7e0:	eb d2       	rcall	.+1494   	; 0xdb8 <myTimer_Read>
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	90 93 9a 08 	sts	0x089A, r25
     7e8:	80 93 99 08 	sts	0x0899, r24
     7ec:	20 91 91 08 	lds	r18, 0x0891
     7f0:	30 91 92 08 	lds	r19, 0x0892
     7f4:	82 17       	cp	r24, r18
     7f6:	93 07       	cpc	r25, r19
     7f8:	54 f4       	brge	.+20     	; 0x80e <__vector_9+0xa2>
			us_tickEnd += MAX_TICKS;
     7fa:	80 91 99 08 	lds	r24, 0x0899
     7fe:	90 91 9a 08 	lds	r25, 0x089A
     802:	86 50       	subi	r24, 0x06	; 6
     804:	9f 4f       	sbci	r25, 0xFF	; 255
     806:	90 93 9a 08 	sts	0x089A, r25
     80a:	80 93 99 08 	sts	0x0899, r24
		
			
			
		us_tickLapsed = us_tickEnd - us_tickStart;
     80e:	80 91 99 08 	lds	r24, 0x0899
     812:	90 91 9a 08 	lds	r25, 0x089A
     816:	20 91 91 08 	lds	r18, 0x0891
     81a:	30 91 92 08 	lds	r19, 0x0892
     81e:	82 1b       	sub	r24, r18
     820:	93 0b       	sbc	r25, r19
     822:	90 93 94 08 	sts	0x0894, r25
     826:	80 93 93 08 	sts	0x0893, r24
		ms_tickLapsed = ms_tickEnd - ms_tickStart;
     82a:	80 91 97 08 	lds	r24, 0x0897
     82e:	90 91 98 08 	lds	r25, 0x0898
     832:	20 91 8d 08 	lds	r18, 0x088D
     836:	30 91 8e 08 	lds	r19, 0x088E
     83a:	82 1b       	sub	r24, r18
     83c:	93 0b       	sbc	r25, r19
     83e:	90 93 90 08 	sts	0x0890, r25
     842:	80 93 8f 08 	sts	0x088F, r24
		
		xSemaphoreGiveFromISR(semaReadReady, pdFALSE);
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	40 e0       	ldi	r20, 0x00	; 0
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	60 e0       	ldi	r22, 0x00	; 0
     84e:	70 e0       	ldi	r23, 0x00	; 0
     850:	80 91 95 08 	lds	r24, 0x0895
     854:	90 91 96 08 	lds	r25, 0x0896
     858:	0e 94 a8 0c 	call	0x1950	; 0x1950 <xQueueGenericSendFromISR>
	}	
}
     85c:	ff 91       	pop	r31
     85e:	ef 91       	pop	r30
     860:	bf 91       	pop	r27
     862:	af 91       	pop	r26
     864:	9f 91       	pop	r25
     866:	8f 91       	pop	r24
     868:	7f 91       	pop	r23
     86a:	6f 91       	pop	r22
     86c:	5f 91       	pop	r21
     86e:	4f 91       	pop	r20
     870:	3f 91       	pop	r19
     872:	2f 91       	pop	r18
     874:	0f 90       	pop	r0
     876:	0b be       	out	0x3b, r0	; 59
     878:	0f 90       	pop	r0
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	0f 90       	pop	r0
     87e:	1f 90       	pop	r1
     880:	18 95       	reti

00000882 <myHcSonar_Init>:

void myHcSonar_Init()
{
	HC_Trigger_Init(); // set trigger as output
     882:	22 9a       	sbi	0x04, 2	; 4
	HC_Echo_Init(); // set echo as input
     884:	23 98       	cbi	0x04, 3	; 4
		
	PCICR |= (1<<PCIE0); // enable control for PCINT 7:0
     886:	e8 e6       	ldi	r30, 0x68	; 104
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	80 81       	ld	r24, Z
     88c:	81 60       	ori	r24, 0x01	; 1
     88e:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT3); // set interrupt for PCINT3
     890:	eb e6       	ldi	r30, 0x6B	; 107
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	80 81       	ld	r24, Z
     896:	88 60       	ori	r24, 0x08	; 8
     898:	80 83       	st	Z, r24
	
	semaReadReady = xSemaphoreCreateBinary();
     89a:	43 e0       	ldi	r20, 0x03	; 3
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	6c d7       	rcall	.+3800   	; 0x177a <xQueueGenericCreate>
     8a2:	90 93 96 08 	sts	0x0896, r25
     8a6:	80 93 95 08 	sts	0x0895, r24
     8aa:	08 95       	ret

000008ac <myMaxSonar_BtmStart>:
#include <myADC.h>
#include <myTimer.h>

void myMaxSonar_BtmStart()
{
	MaxSonar_BtmTriggerStart();
     8ac:	a1 9a       	sbi	0x14, 1	; 20
	
	myTimer_DelayMicro(25); // delay 25 micro seconds...
     8ae:	89 e1       	ldi	r24, 0x19	; 25
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	84 d2       	rcall	.+1288   	; 0xdbc <myTimer_DelayMicro>
	//vTaskDelay(5000);	// delay 1ms using vTaskDelay
	
	MaxSonar_BtmTriggerStop();
     8b4:	a1 98       	cbi	0x14, 1	; 20
     8b6:	08 95       	ret

000008b8 <myMaxSonar_TopStart>:
}

void myMaxSonar_TopStart()
{
	MaxSonar_TopTriggerStart();
     8b8:	a0 9a       	sbi	0x14, 0	; 20
	
	myTimer_DelayMicro(25); // delay 25 micro seconds...
     8ba:	89 e1       	ldi	r24, 0x19	; 25
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	7e d2       	rcall	.+1276   	; 0xdbc <myTimer_DelayMicro>
	//vTaskDelay(5000);	// delay 1ms using vTaskDelay
	
	MaxSonar_TopTriggerStop();
     8c0:	a0 98       	cbi	0x14, 0	; 20
     8c2:	08 95       	ret

000008c4 <myMaxSonar_extractMedian>:
}

// extract the median of 3 values in the sample array
int myMaxSonar_extractMedian(int * sample)
{
     8c4:	fc 01       	movw	r30, r24
	if (sample[0] > sample[1])
     8c6:	80 81       	ld	r24, Z
     8c8:	91 81       	ldd	r25, Z+1	; 0x01
     8ca:	22 81       	ldd	r18, Z+2	; 0x02
     8cc:	33 81       	ldd	r19, Z+3	; 0x03
     8ce:	28 17       	cp	r18, r24
     8d0:	39 07       	cpc	r19, r25
     8d2:	54 f4       	brge	.+20     	; 0x8e8 <myMaxSonar_extractMedian+0x24>
	{
		if (sample[1] > sample[2])
     8d4:	44 81       	ldd	r20, Z+4	; 0x04
     8d6:	55 81       	ldd	r21, Z+5	; 0x05
     8d8:	42 17       	cp	r20, r18
     8da:	53 07       	cpc	r21, r19
     8dc:	84 f0       	brlt	.+32     	; 0x8fe <myMaxSonar_extractMedian+0x3a>
     8de:	48 17       	cp	r20, r24
     8e0:	59 07       	cpc	r21, r25
     8e2:	74 f4       	brge	.+28     	; 0x900 <myMaxSonar_extractMedian+0x3c>
     8e4:	ca 01       	movw	r24, r20
     8e6:	08 95       	ret
			return sample[0];
		}
	}
	else 
	{
		if (sample[0] > sample[2])
     8e8:	44 81       	ldd	r20, Z+4	; 0x04
     8ea:	55 81       	ldd	r21, Z+5	; 0x05
     8ec:	48 17       	cp	r20, r24
     8ee:	59 07       	cpc	r21, r25
     8f0:	3c f0       	brlt	.+14     	; 0x900 <myMaxSonar_extractMedian+0x3c>
     8f2:	ca 01       	movw	r24, r20
     8f4:	24 17       	cp	r18, r20
     8f6:	35 07       	cpc	r19, r21
     8f8:	1c f4       	brge	.+6      	; 0x900 <myMaxSonar_extractMedian+0x3c>
     8fa:	c9 01       	movw	r24, r18
     8fc:	08 95       	ret
{
	if (sample[0] > sample[1])
	{
		if (sample[1] > sample[2])
		{
			return sample[1];
     8fe:	c9 01       	movw	r24, r18
		else 
		{
			return sample[1];
		}
	}
}
     900:	08 95       	ret

00000902 <myMaxSonar_Stabilizer>:
}

// return currentReading if it is more than the noise threshold..
int myMaxSonar_Stabilizer(const int currentReading, int prevReading)
{
	if(currentReading > (prevReading + NOISE_RANGE) || currentReading < (prevReading - NOISE_RANGE))
     902:	9b 01       	movw	r18, r22
     904:	28 5f       	subi	r18, 0xF8	; 248
     906:	3f 4f       	sbci	r19, 0xFF	; 255
     908:	28 17       	cp	r18, r24
     90a:	39 07       	cpc	r19, r25
     90c:	3c f0       	brlt	.+14     	; 0x91c <myMaxSonar_Stabilizer+0x1a>
     90e:	20 51       	subi	r18, 0x10	; 16
     910:	31 09       	sbc	r19, r1
     912:	82 17       	cp	r24, r18
     914:	93 07       	cpc	r25, r19
     916:	14 f0       	brlt	.+4      	; 0x91c <myMaxSonar_Stabilizer+0x1a>
	{
		return currentReading; // when current reading exceed noise range.... return current reading
	}
	else
		return prevReading; // return prevReading if in noise range..
     918:	86 2f       	mov	r24, r22
     91a:	97 2f       	mov	r25, r23
}
     91c:	08 95       	ret

0000091e <myMaxSonar_AddSample>:

}

// Add sample circular buffer way...
void myMaxSonar_AddSample(int currentReading ,int *sample)
{
     91e:	0f 93       	push	r16
     920:	1f 93       	push	r17
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	eb 01       	movw	r28, r22
	static uint8_t i = SONAR_SAMPLE_SIZE; // start with prev reading index first.. 
	 
	currentReading = myMaxSonar_Stabilizer(currentReading, sample[i]);
     928:	00 91 00 02 	lds	r16, 0x0200
     92c:	10 e0       	ldi	r17, 0x00	; 0
     92e:	f8 01       	movw	r30, r16
     930:	ee 0f       	add	r30, r30
     932:	ff 1f       	adc	r31, r31
     934:	e6 0f       	add	r30, r22
     936:	f7 1f       	adc	r31, r23
     938:	60 81       	ld	r22, Z
     93a:	71 81       	ldd	r23, Z+1	; 0x01
     93c:	e2 df       	rcall	.-60     	; 0x902 <myMaxSonar_Stabilizer>
     93e:	9c 01       	movw	r18, r24
	
	i = (i+1) % SONAR_SAMPLE_SIZE; // at correct index already..
     940:	c8 01       	movw	r24, r16
     942:	01 96       	adiw	r24, 0x01	; 1
     944:	63 e0       	ldi	r22, 0x03	; 3
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__divmodhi4>
     94c:	80 93 00 02 	sts	0x0200, r24
	
	sample[i] = currentReading;
     950:	88 0f       	add	r24, r24
     952:	99 1f       	adc	r25, r25
     954:	c8 0f       	add	r28, r24
     956:	d9 1f       	adc	r29, r25
     958:	39 83       	std	Y+1, r19	; 0x01
     95a:	28 83       	st	Y, r18
}
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	08 95       	ret

00000966 <myMaxSonar_getFilteredReading>:
}


// Return filtered reading of maxSonar (Median of 3 values, with noise eliminated)
int myMaxSonar_getFilteredReading(int currentReading, int *sample)
{
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	eb 01       	movw	r28, r22
	//currentReading = myMaxSonar_Stabilizer(currentReading, prevReading);
	myMaxSonar_AddSample(currentReading, sample);
     96c:	d8 df       	rcall	.-80     	; 0x91e <myMaxSonar_AddSample>
	return myMaxSonar_extractMedian(sample);
     96e:	ce 01       	movw	r24, r28
     970:	a9 df       	rcall	.-174    	; 0x8c4 <myMaxSonar_extractMedian>

}
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	08 95       	ret

00000978 <myMaxSonar_Read>:
// Return distance in cm
int myMaxSonar_Read(char analogChannel)
{
	int reading = 0;
	
	int adcReading = myADC_analogRead(analogChannel);
     978:	ab d0       	rcall	.+342    	; 0xad0 <myADC_analogRead>
     97a:	9c 01       	movw	r18, r24
	reading = adcReading /FLOAT_TO_CM; // get the decimal point of ADC
     97c:	63 e0       	ldi	r22, 0x03	; 3
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__divmodhi4>
	reading += adcReading; // add the exact adcReading
	
	return reading;
}
     984:	cb 01       	movw	r24, r22
     986:	82 0f       	add	r24, r18
     988:	93 1f       	adc	r25, r19
     98a:	08 95       	ret

0000098c <__vector_29>:
volatile unsigned char adcReading_L;


/*ADC Conversion Complete Interrupt Service Routine (ISR)*/
ISR(ADC_vect)
{	
     98c:	1f 92       	push	r1
     98e:	0f 92       	push	r0
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	0f 92       	push	r0
     994:	11 24       	eor	r1, r1
     996:	0b b6       	in	r0, 0x3b	; 59
     998:	0f 92       	push	r0
     99a:	2f 93       	push	r18
     99c:	3f 93       	push	r19
     99e:	4f 93       	push	r20
     9a0:	5f 93       	push	r21
     9a2:	6f 93       	push	r22
     9a4:	7f 93       	push	r23
     9a6:	8f 93       	push	r24
     9a8:	9f 93       	push	r25
     9aa:	af 93       	push	r26
     9ac:	bf 93       	push	r27
     9ae:	ef 93       	push	r30
     9b0:	ff 93       	push	r31
	adcReading_L = ADCL; // dont change the ORDER L first then H!!! Reading L will hold H value.
     9b2:	80 91 78 00 	lds	r24, 0x0078
     9b6:	80 93 9b 08 	sts	0x089B, r24
	adcReading_H = ADCH; // read value of H (not used, 640cm and 1280cm for the resolution)
     9ba:	80 91 79 00 	lds	r24, 0x0079
     9be:	80 93 9c 08 	sts	0x089C, r24
	// give semaphore, dont run block task immediately..
	xSemaphoreGiveFromISR(semaReadADC, pdFALSE);
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	60 e0       	ldi	r22, 0x00	; 0
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	80 91 9f 08 	lds	r24, 0x089F
     9d0:	90 91 a0 08 	lds	r25, 0x08A0
     9d4:	bd d7       	rcall	.+3962   	; 0x1950 <xQueueGenericSendFromISR>
}
     9d6:	ff 91       	pop	r31
     9d8:	ef 91       	pop	r30
     9da:	bf 91       	pop	r27
     9dc:	af 91       	pop	r26
     9de:	9f 91       	pop	r25
     9e0:	8f 91       	pop	r24
     9e2:	7f 91       	pop	r23
     9e4:	6f 91       	pop	r22
     9e6:	5f 91       	pop	r21
     9e8:	4f 91       	pop	r20
     9ea:	3f 91       	pop	r19
     9ec:	2f 91       	pop	r18
     9ee:	0f 90       	pop	r0
     9f0:	0b be       	out	0x3b, r0	; 59
     9f2:	0f 90       	pop	r0
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	0f 90       	pop	r0
     9f8:	1f 90       	pop	r1
     9fa:	18 95       	reti

000009fc <myADC_Init>:

void myADC_Init()
{
	
	ADCSRA = ( 1<<ADEN ) | ( 1<<ADIE ) | ADC_PRESCALER; // enable ADC, enable interrupt, set prescaler
     9fc:	8f e8       	ldi	r24, 0x8F	; 143
     9fe:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = 0; // No auto trigger (0 for ADATE), No analog compare... 
     a02:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = ( 1 << REFS0 ) ; // use AVCC as reference, right adjust (take LSB but not 2 MSB)
     a06:	80 e4       	ldi	r24, 0x40	; 64
     a08:	80 93 7c 00 	sts	0x007C, r24
	
	// initialize semaphore..
	semaReadADC = xSemaphoreCreateBinary();
     a0c:	43 e0       	ldi	r20, 0x03	; 3
     a0e:	60 e0       	ldi	r22, 0x00	; 0
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	b3 d6       	rcall	.+3430   	; 0x177a <xQueueGenericCreate>
     a14:	90 93 a0 08 	sts	0x08A0, r25
     a18:	80 93 9f 08 	sts	0x089F, r24
	semaGuardStartADC = xSemaphoreCreateMutex();
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	6d d7       	rcall	.+3802   	; 0x18fa <xQueueCreateMutex>
     a20:	90 93 9e 08 	sts	0x089E, r25
     a24:	80 93 9d 08 	sts	0x089D, r24
	xSemaphoreGive(semaGuardStartADC); // free to read at start.
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	40 e0       	ldi	r20, 0x00	; 0
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	d0 c6       	rjmp	.+3488   	; 0x17d4 <xQueueGenericSend>
     a34:	08 95       	ret

00000a36 <myADC_startADC>:
	return myADC_readADC(channel);
}

// channel = AN0 to AN15, use the macro...
void myADC_startADC(char channel)
{
     a36:	cf 93       	push	r28
     a38:	c8 2f       	mov	r28, r24
	
	 //char buffer [10];	
	xSemaphoreTake(semaGuardStartADC, portMAX_DELAY); // guard against concurrent task starting adc at same time
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	4f ef       	ldi	r20, 0xFF	; 255
     a3e:	5f ef       	ldi	r21, 0xFF	; 255
     a40:	60 e0       	ldi	r22, 0x00	; 0
     a42:	70 e0       	ldi	r23, 0x00	; 0
     a44:	80 91 9d 08 	lds	r24, 0x089D
     a48:	90 91 9e 08 	lds	r25, 0x089E
     a4c:	bb d7       	rcall	.+3958   	; 0x19c4 <xQueueGenericReceive>
    ADMUX = ( ADMUX & 11100000 ) | ( channel & 0b00011111 ); // keep bit 5:7, set bit 0:4 as Mux
     a4e:	ec e7       	ldi	r30, 0x7C	; 124
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	80 81       	ld	r24, Z
     a54:	9c 2f       	mov	r25, r28
     a56:	9f 71       	andi	r25, 0x1F	; 31
     a58:	80 76       	andi	r24, 0x60	; 96
     a5a:	89 2b       	or	r24, r25
     a5c:	80 83       	st	Z, r24
	
	//transmitUSART0("ADMUX = ");
	//transmitUSART0(itoa(ADMUX, buffer, 2)); // debugging...
	//transmitUSART0(" \n");
	
	ADCSRB = ( ADCSRB & 11100000 ) | (( channel & 0b00100000 ) >> 2); // keep all bits except bit 3, set Mux @ bit 3
     a5e:	eb e7       	ldi	r30, 0x7B	; 123
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	20 81       	ld	r18, Z
     a64:	c0 72       	andi	r28, 0x20	; 32
     a66:	8c 2f       	mov	r24, r28
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	95 95       	asr	r25
     a6c:	87 95       	ror	r24
     a6e:	95 95       	asr	r25
     a70:	87 95       	ror	r24
     a72:	92 2f       	mov	r25, r18
     a74:	90 76       	andi	r25, 0x60	; 96
     a76:	89 2b       	or	r24, r25
     a78:	80 83       	st	Z, r24
	//transmitUSART0(itoa(ADCSRB, buffer, 2)); // debugging...
	//transmitUSART0(" \n");
	//
	
	//vTaskDelay(1);
	ADCSRA |= ( 1 << ADSC );	// READY TO SEND!!
     a7a:	ea e7       	ldi	r30, 0x7A	; 122
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	80 81       	ld	r24, Z
     a80:	80 64       	ori	r24, 0x40	; 64
     a82:	80 83       	st	Z, r24
}
     a84:	cf 91       	pop	r28
     a86:	08 95       	ret

00000a88 <myADC_readADC>:

int myADC_readADC(char channel)
{
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
	int adcReading=0;
	xSemaphoreTake(semaReadADC, portMAX_DELAY); // wait for reading...
     a8c:	20 e0       	ldi	r18, 0x00	; 0
     a8e:	4f ef       	ldi	r20, 0xFF	; 255
     a90:	5f ef       	ldi	r21, 0xFF	; 255
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	80 91 9f 08 	lds	r24, 0x089F
     a9a:	90 91 a0 08 	lds	r25, 0x08A0
     a9e:	92 d7       	rcall	.+3876   	; 0x19c4 <xQueueGenericReceive>

	adcReading = ((adcReading_H & 0b11) << 8);
     aa0:	c0 91 9c 08 	lds	r28, 0x089C
     aa4:	c3 70       	andi	r28, 0x03	; 3
     aa6:	d0 e0       	ldi	r29, 0x00	; 0
     aa8:	dc 2f       	mov	r29, r28
     aaa:	cc 27       	eor	r28, r28
	adcReading += adcReading_L;
     aac:	80 91 9b 08 	lds	r24, 0x089B
     ab0:	c8 0f       	add	r28, r24
     ab2:	d1 1d       	adc	r29, r1

	xSemaphoreGive(semaGuardStartADC); // reading done, nxt task can start ADC
     ab4:	20 e0       	ldi	r18, 0x00	; 0
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	80 91 9d 08 	lds	r24, 0x089D
     ac2:	90 91 9e 08 	lds	r25, 0x089E
     ac6:	86 d6       	rcall	.+3340   	; 0x17d4 <xQueueGenericSend>
	
	return adcReading;
     ac8:	ce 01       	movw	r24, r28
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	08 95       	ret

00000ad0 <myADC_analogRead>:
	xSemaphoreGive(semaGuardStartADC); // free to read at start.
}


int myADC_analogRead(char channel)
{
     ad0:	cf 93       	push	r28
     ad2:	c8 2f       	mov	r28, r24
	myADC_startADC(channel);
     ad4:	b0 df       	rcall	.-160    	; 0xa36 <myADC_startADC>
	return myADC_readADC(channel);
     ad6:	8c 2f       	mov	r24, r28
     ad8:	d7 df       	rcall	.-82     	; 0xa88 <myADC_readADC>
}
     ada:	cf 91       	pop	r28
     adc:	08 95       	ret

00000ade <detectStairs>:



char detectStairs(int calibratedBtmIR, int btmIR)
{
	if(btmIR > calibratedBtmIR + STAIRS_OFFSET || btmIR < calibratedBtmIR - STAIRS_OFFSET)
     ade:	9c 01       	movw	r18, r24
     ae0:	24 5f       	subi	r18, 0xF4	; 244
     ae2:	3f 4f       	sbci	r19, 0xFF	; 255
     ae4:	26 17       	cp	r18, r22
     ae6:	37 07       	cpc	r19, r23
     ae8:	44 f0       	brlt	.+16     	; 0xafa <detectStairs+0x1c>
     aea:	28 51       	subi	r18, 0x18	; 24
     aec:	31 09       	sbc	r19, r1
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	62 17       	cp	r22, r18
     af2:	73 07       	cpc	r23, r19
     af4:	1c f0       	brlt	.+6      	; 0xafc <detectStairs+0x1e>
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	08 95       	ret
	{
		return 1; // stairs found
     afa:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		return 0; // no stairs
		
	}
}
     afc:	08 95       	ret

00000afe <obstacleAvoidance>:


// Priority => BTM, Front, Side
void obstacleAvoidance(int frontSonar, int leftSonar, int rightSonar, int btmIR, char * deviceBlocked)
{
     afe:	0f 93       	push	r16
     b00:	1f 93       	push	r17
     b02:	f8 01       	movw	r30, r16
	
	if(deviceBlocked[BTM_DEVICE])
     b04:	83 81       	ldd	r24, Z+3	; 0x03
     b06:	88 23       	and	r24, r24
     b08:	39 f0       	breq	.+14     	; 0xb18 <obstacleAvoidance+0x1a>
	{
		// stairs detected
			MOTOR_LEFT_START();
     b0a:	74 9a       	sbi	0x0e, 4	; 14
			MOTOR_RIGHT_START();
     b0c:	e2 e0       	ldi	r30, 0x02	; 2
     b0e:	f1 e0       	ldi	r31, 0x01	; 1
     b10:	80 81       	ld	r24, Z
     b12:	80 61       	ori	r24, 0x10	; 16
     b14:	80 83       	st	Z, r24
     b16:	57 c0       	rjmp	.+174    	; 0xbc6 <obstacleAvoidance+0xc8>
	}
	else if(deviceBlocked[FRONT_DEVICE])
     b18:	80 81       	ld	r24, Z
     b1a:	88 23       	and	r24, r24
     b1c:	b1 f1       	breq	.+108    	; 0xb8a <obstacleAvoidance+0x8c>
	{
		// front sensor detected
		if(!deviceBlocked[LEFT_DEVICE] && !deviceBlocked[RIGHT_DEVICE])
     b1e:	81 81       	ldd	r24, Z+1	; 0x01
     b20:	81 11       	cpse	r24, r1
     b22:	18 c0       	rjmp	.+48     	; 0xb54 <obstacleAvoidance+0x56>
     b24:	82 81       	ldd	r24, Z+2	; 0x02
     b26:	81 11       	cpse	r24, r1
     b28:	24 c0       	rjmp	.+72     	; 0xb72 <obstacleAvoidance+0x74>
		{
			// both not blocked... so select any side... (left safer to turn - see product)
				if(rightSonar > leftSonar + 14) // if right sonar greater than....
     b2a:	cb 01       	movw	r24, r22
     b2c:	0e 96       	adiw	r24, 0x0e	; 14
     b2e:	84 17       	cp	r24, r20
     b30:	95 07       	cpc	r25, r21
     b32:	3c f4       	brge	.+14     	; 0xb42 <obstacleAvoidance+0x44>
				{
					MOTOR_LEFT_STOP();
     b34:	74 98       	cbi	0x0e, 4	; 14
					MOTOR_RIGHT_START();
     b36:	a2 e0       	ldi	r26, 0x02	; 2
     b38:	b1 e0       	ldi	r27, 0x01	; 1
     b3a:	8c 91       	ld	r24, X
     b3c:	80 61       	ori	r24, 0x10	; 16
     b3e:	8c 93       	st	X, r24
     b40:	06 c0       	rjmp	.+12     	; 0xb4e <obstacleAvoidance+0x50>
				}
				else 
				{
					MOTOR_LEFT_START();
     b42:	74 9a       	sbi	0x0e, 4	; 14
					MOTOR_RIGHT_STOP();
     b44:	a2 e0       	ldi	r26, 0x02	; 2
     b46:	b1 e0       	ldi	r27, 0x01	; 1
     b48:	8c 91       	ld	r24, X
     b4a:	8f 7e       	andi	r24, 0xEF	; 239
     b4c:	8c 93       	st	X, r24
					
				}
		}
		if(deviceBlocked[LEFT_DEVICE] && !(deviceBlocked[RIGHT_DEVICE]))
     b4e:	81 81       	ldd	r24, Z+1	; 0x01
     b50:	88 23       	and	r24, r24
     b52:	b1 f1       	breq	.+108    	; 0xbc0 <obstacleAvoidance+0xc2>
     b54:	82 81       	ldd	r24, Z+2	; 0x02
     b56:	81 11       	cpse	r24, r1
     b58:	36 c0       	rjmp	.+108    	; 0xbc6 <obstacleAvoidance+0xc8>
		{
			// left is blocked but not right
			if((rightSonar - leftSonar) > INDISTINGUISHABLE_RANGE) // if there's enough difference, prompt the user to move..
     b5a:	46 1b       	sub	r20, r22
     b5c:	57 0b       	sbc	r21, r23
     b5e:	49 30       	cpi	r20, 0x09	; 9
     b60:	51 05       	cpc	r21, r1
     b62:	8c f1       	brlt	.+98     	; 0xbc6 <obstacleAvoidance+0xc8>
			{
				MOTOR_LEFT_STOP();
     b64:	74 98       	cbi	0x0e, 4	; 14
				MOTOR_RIGHT_START();	
     b66:	e2 e0       	ldi	r30, 0x02	; 2
     b68:	f1 e0       	ldi	r31, 0x01	; 1
     b6a:	80 81       	ld	r24, Z
     b6c:	80 61       	ori	r24, 0x10	; 16
     b6e:	80 83       	st	Z, r24
     b70:	2a c0       	rjmp	.+84     	; 0xbc6 <obstacleAvoidance+0xc8>
			}
		}
		else if (deviceBlocked[RIGHT_DEVICE] && !(deviceBlocked[LEFT_DEVICE]))
		{
			// right is blocked but not left..
			if((leftSonar - rightSonar) > INDISTINGUISHABLE_RANGE) // if there's enough different, prompt the user to move...
     b72:	64 1b       	sub	r22, r20
     b74:	75 0b       	sbc	r23, r21
     b76:	69 30       	cpi	r22, 0x09	; 9
     b78:	71 05       	cpc	r23, r1
     b7a:	2c f1       	brlt	.+74     	; 0xbc6 <obstacleAvoidance+0xc8>
			{
				MOTOR_LEFT_START();
     b7c:	74 9a       	sbi	0x0e, 4	; 14
				MOTOR_RIGHT_STOP();
     b7e:	e2 e0       	ldi	r30, 0x02	; 2
     b80:	f1 e0       	ldi	r31, 0x01	; 1
     b82:	80 81       	ld	r24, Z
     b84:	8f 7e       	andi	r24, 0xEF	; 239
     b86:	80 83       	st	Z, r24
     b88:	1e c0       	rjmp	.+60     	; 0xbc6 <obstacleAvoidance+0xc8>
			//MOTOR_LEFT_STOP(); 
			//MOTOR_RIGHT_STOP();	
		}
		
	}
	else if (leftSonar < LEFT_TOO_NEAR)
     b8a:	66 32       	cpi	r22, 0x26	; 38
     b8c:	71 05       	cpc	r23, r1
     b8e:	3c f4       	brge	.+14     	; 0xb9e <obstacleAvoidance+0xa0>
	{
		// front able to walk, too near to wall or obstacle...
			MOTOR_LEFT_STOP();
     b90:	74 98       	cbi	0x0e, 4	; 14
			MOTOR_RIGHT_START();		
     b92:	e2 e0       	ldi	r30, 0x02	; 2
     b94:	f1 e0       	ldi	r31, 0x01	; 1
     b96:	80 81       	ld	r24, Z
     b98:	80 61       	ori	r24, 0x10	; 16
     b9a:	80 83       	st	Z, r24
     b9c:	14 c0       	rjmp	.+40     	; 0xbc6 <obstacleAvoidance+0xc8>
	}
	else if (rightSonar < RIGHT_TOO_NEAR)
     b9e:	44 31       	cpi	r20, 0x14	; 20
     ba0:	51 05       	cpc	r21, r1
     ba2:	3c f4       	brge	.+14     	; 0xbb2 <obstacleAvoidance+0xb4>
	{
		// front able to walk, too near to wall or obstacle...
			MOTOR_LEFT_START();
     ba4:	74 9a       	sbi	0x0e, 4	; 14
			MOTOR_RIGHT_STOP();
     ba6:	e2 e0       	ldi	r30, 0x02	; 2
     ba8:	f1 e0       	ldi	r31, 0x01	; 1
     baa:	80 81       	ld	r24, Z
     bac:	8f 7e       	andi	r24, 0xEF	; 239
     bae:	80 83       	st	Z, r24
     bb0:	0a c0       	rjmp	.+20     	; 0xbc6 <obstacleAvoidance+0xc8>
	}
	else
	{
			MOTOR_LEFT_STOP();
     bb2:	74 98       	cbi	0x0e, 4	; 14
			MOTOR_RIGHT_STOP();
     bb4:	e2 e0       	ldi	r30, 0x02	; 2
     bb6:	f1 e0       	ldi	r31, 0x01	; 1
     bb8:	80 81       	ld	r24, Z
     bba:	8f 7e       	andi	r24, 0xEF	; 239
     bbc:	80 83       	st	Z, r24
     bbe:	03 c0       	rjmp	.+6      	; 0xbc6 <obstacleAvoidance+0xc8>
			{
				MOTOR_LEFT_STOP();
				MOTOR_RIGHT_START();	
			}
		}
		else if (deviceBlocked[RIGHT_DEVICE] && !(deviceBlocked[LEFT_DEVICE]))
     bc0:	82 81       	ldd	r24, Z+2	; 0x02
     bc2:	81 11       	cpse	r24, r1
     bc4:	d6 cf       	rjmp	.-84     	; 0xb72 <obstacleAvoidance+0x74>
	else
	{
			MOTOR_LEFT_STOP();
			MOTOR_RIGHT_STOP();
	}
}
     bc6:	1f 91       	pop	r17
     bc8:	0f 91       	pop	r16
     bca:	08 95       	ret

00000bcc <cheatPrintAll>:


void cheatPrintAll(char* deviceBlocked, char *obstacleDetected)
{
     bcc:	fc 01       	movw	r30, r24
	*obstacleDetected = 5;
     bce:	85 e0       	ldi	r24, 0x05	; 5
     bd0:	db 01       	movw	r26, r22
     bd2:	8c 93       	st	X, r24
	deviceBlocked[FRONT_DEVICE] = FRONT_SONAR_ID;
     bd4:	86 e4       	ldi	r24, 0x46	; 70
     bd6:	80 83       	st	Z, r24
	deviceBlocked[LEFT_DEVICE] = LEFT_SONAR_ID;
     bd8:	8c e4       	ldi	r24, 0x4C	; 76
     bda:	81 83       	std	Z+1, r24	; 0x01
	deviceBlocked[RIGHT_DEVICE] = RIGHT_SONAR_ID;
     bdc:	82 e5       	ldi	r24, 0x52	; 82
     bde:	82 83       	std	Z+2, r24	; 0x02
	deviceBlocked[BTM_DEVICE] = BTM_SONAR_ID;
     be0:	82 e4       	ldi	r24, 0x42	; 66
     be2:	83 83       	std	Z+3, r24	; 0x03
	deviceBlocked[TOP_DEVICE] = TOP_SONAR_ID;
     be4:	84 e5       	ldi	r24, 0x54	; 84
     be6:	84 83       	std	Z+4, r24	; 0x04
     be8:	08 95       	ret

00000bea <obstacleDetection>:


// return number of obstacle detected...
// implicitly return the device to send.
char obstacleDetection(int frontSonar, char obstacleDetected, char * deviceBlocked, int leftSonar, int rightSonar, int topSonar, int calibratedBtmIR, int btmIR)
{
     bea:	af 92       	push	r10
     bec:	bf 92       	push	r11
     bee:	cf 92       	push	r12
     bf0:	df 92       	push	r13
     bf2:	ff 92       	push	r15
     bf4:	0f 93       	push	r16
     bf6:	1f 93       	push	r17
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	f6 2e       	mov	r15, r22
     bfe:	ea 01       	movw	r28, r20
	// Commented out when debuggin..

	if(frontSonar < FRONT_OBSTACLE_DISTANCE)
     c00:	86 34       	cpi	r24, 0x46	; 70
     c02:	91 05       	cpc	r25, r1
     c04:	1c f4       	brge	.+6      	; 0xc0c <obstacleDetection+0x22>
	{
		obstacleDetected ++;
     c06:	f3 94       	inc	r15
		deviceBlocked[FRONT_DEVICE] = FRONT_SONAR_ID;
     c08:	86 e4       	ldi	r24, 0x46	; 70
     c0a:	88 83       	st	Y, r24
	}
	if (leftSonar < LEFT_OBSTACLE_DISTANCE)
     c0c:	2e 31       	cpi	r18, 0x1E	; 30
     c0e:	31 05       	cpc	r19, r1
     c10:	1c f4       	brge	.+6      	; 0xc18 <obstacleDetection+0x2e>
	{
		obstacleDetected ++;
     c12:	f3 94       	inc	r15
		deviceBlocked[LEFT_DEVICE] = LEFT_SONAR_ID;
     c14:	8c e4       	ldi	r24, 0x4C	; 76
     c16:	89 83       	std	Y+1, r24	; 0x01
	}
	if (rightSonar < RIGHT_OBSTACLE_DISTANCE)
     c18:	0e 31       	cpi	r16, 0x1E	; 30
     c1a:	11 05       	cpc	r17, r1
     c1c:	1c f4       	brge	.+6      	; 0xc24 <obstacleDetection+0x3a>
	{
		obstacleDetected++;
     c1e:	f3 94       	inc	r15
		deviceBlocked[RIGHT_DEVICE] = RIGHT_SONAR_ID;
     c20:	82 e5       	ldi	r24, 0x52	; 82
     c22:	8a 83       	std	Y+2, r24	; 0x02
	}
	if (detectStairs(calibratedBtmIR, btmIR))
     c24:	b5 01       	movw	r22, r10
     c26:	c6 01       	movw	r24, r12
     c28:	5a df       	rcall	.-332    	; 0xade <detectStairs>
     c2a:	88 23       	and	r24, r24
     c2c:	19 f0       	breq	.+6      	; 0xc34 <obstacleDetection+0x4a>
	{
		obstacleDetected++;
     c2e:	f3 94       	inc	r15
		deviceBlocked[BTM_DEVICE] = BTM_SONAR_ID;
     c30:	82 e4       	ldi	r24, 0x42	; 66
     c32:	8b 83       	std	Y+3, r24	; 0x03
	//	obstacleDetected++;
	//	deviceBlocked[TOP_DEVICE] = TOP_SONAR_ID;
	//}
	
	return obstacleDetected;
}
     c34:	8f 2d       	mov	r24, r15
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	df 90       	pop	r13
     c42:	cf 90       	pop	r12
     c44:	bf 90       	pop	r11
     c46:	af 90       	pop	r10
     c48:	08 95       	ret

00000c4a <mySharpIR_Read>:
#include <math.h>

// Return distance in cm
int mySharpIR_Read(char analogChannel)
{
	int adcReading = myADC_analogRead(analogChannel);
     c4a:	42 df       	rcall	.-380    	; 0xad0 <myADC_analogRead>
	adcReading = 10650.08 * pow(adcReading,-0.935) - 10;
     c4c:	bc 01       	movw	r22, r24
     c4e:	88 27       	eor	r24, r24
     c50:	77 fd       	sbrc	r23, 7
     c52:	80 95       	com	r24
     c54:	98 2f       	mov	r25, r24
     c56:	0e 94 34 14 	call	0x2868	; 0x2868 <__floatsisf>
     c5a:	29 e2       	ldi	r18, 0x29	; 41
     c5c:	3c e5       	ldi	r19, 0x5C	; 92
     c5e:	4f e6       	ldi	r20, 0x6F	; 111
     c60:	5f eb       	ldi	r21, 0xBF	; 191
     c62:	0e 94 23 15 	call	0x2a46	; 0x2a46 <pow>
     c66:	22 e5       	ldi	r18, 0x52	; 82
     c68:	38 e6       	ldi	r19, 0x68	; 104
     c6a:	46 e2       	ldi	r20, 0x26	; 38
     c6c:	56 e4       	ldi	r21, 0x46	; 70
     c6e:	0e 94 c0 14 	call	0x2980	; 0x2980 <__mulsf3>
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e2       	ldi	r20, 0x20	; 32
     c78:	51 e4       	ldi	r21, 0x41	; 65
     c7a:	0e 94 9c 13 	call	0x2738	; 0x2738 <__subsf3>
     c7e:	0e 94 01 14 	call	0x2802	; 0x2802 <__fixsfsi>
     c82:	cb 01       	movw	r24, r22
     c84:	68 3e       	cpi	r22, 0xE8	; 232
     c86:	23 e0       	ldi	r18, 0x03	; 3
     c88:	72 07       	cpc	r23, r18
     c8a:	14 f0       	brlt	.+4      	; 0xc90 <mySharpIR_Read+0x46>
     c8c:	87 ee       	ldi	r24, 0xE7	; 231
     c8e:	93 e0       	ldi	r25, 0x03	; 3
	if(adcReading > IR_MAX_VALUE)
		adcReading = IR_MAX_VALUE;
	
	return adcReading;
}
     c90:	08 95       	ret

00000c92 <checkWithinRange>:

char checkWithinRange(int reading, int * checkReading, const char range)
{
	return reading > (*checkReading + range) || reading < (*checkReading - range);
     c92:	fb 01       	movw	r30, r22
     c94:	20 81       	ld	r18, Z
     c96:	31 81       	ldd	r19, Z+1	; 0x01
     c98:	50 e0       	ldi	r21, 0x00	; 0
     c9a:	b9 01       	movw	r22, r18
     c9c:	64 0f       	add	r22, r20
     c9e:	75 1f       	adc	r23, r21
     ca0:	68 17       	cp	r22, r24
     ca2:	79 07       	cpc	r23, r25
     ca4:	4c f0       	brlt	.+18     	; 0xcb8 <checkWithinRange+0x26>
     ca6:	24 1b       	sub	r18, r20
     ca8:	35 0b       	sbc	r19, r21
     caa:	41 e0       	ldi	r20, 0x01	; 1
     cac:	82 17       	cp	r24, r18
     cae:	93 07       	cpc	r25, r19
     cb0:	0c f0       	brlt	.+2      	; 0xcb4 <checkWithinRange+0x22>
     cb2:	40 e0       	ldi	r20, 0x00	; 0
     cb4:	84 2f       	mov	r24, r20
     cb6:	08 95       	ret
     cb8:	81 e0       	ldi	r24, 0x01	; 1
}
     cba:	08 95       	ret

00000cbc <mySharpIR_ReCalibrate>:
// final reading = btmIR reading (i = CALIBRATE_COUNT)
// firstCheck reading = btmIR reading ( i = CALIBRATE_COUNT/2)
// initial reading  = btmIR reading (i = 0)
// Write new calibrate value if all matches..
void mySharpIR_ReCalibrate(int* calibratedReading, int reading)
{
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	8c 01       	movw	r16, r24
     cc6:	eb 01       	movw	r28, r22
	static int i = 0;
	static int checkReading[2] = {0};
	
	if(checkWithinRange(reading, calibratedReading, CALIBRATE_RANGE) && i == 0)
     cc8:	45 e0       	ldi	r20, 0x05	; 5
     cca:	bc 01       	movw	r22, r24
     ccc:	ce 01       	movw	r24, r28
     cce:	e1 df       	rcall	.-62     	; 0xc92 <checkWithinRange>
     cd0:	88 23       	and	r24, r24
     cd2:	41 f0       	breq	.+16     	; 0xce4 <mySharpIR_ReCalibrate+0x28>
     cd4:	20 91 1c 08 	lds	r18, 0x081C
     cd8:	30 91 1d 08 	lds	r19, 0x081D
     cdc:	21 15       	cp	r18, r1
     cde:	31 05       	cpc	r19, r1
     ce0:	69 f4       	brne	.+26     	; 0xcfc <mySharpIR_ReCalibrate+0x40>
     ce2:	4b c0       	rjmp	.+150    	; 0xd7a <mySharpIR_ReCalibrate+0xbe>
		// skip the calibration process... not needed
		return;
	}
	
	
	if (i == 0)
     ce4:	20 91 1c 08 	lds	r18, 0x081C
     ce8:	30 91 1d 08 	lds	r19, 0x081D
     cec:	21 15       	cp	r18, r1
     cee:	31 05       	cpc	r19, r1
     cf0:	29 f4       	brne	.+10     	; 0xcfc <mySharpIR_ReCalibrate+0x40>
	{
		checkReading[0] = reading;
     cf2:	d0 93 19 08 	sts	0x0819, r29
     cf6:	c0 93 18 08 	sts	0x0818, r28
     cfa:	32 c0       	rjmp	.+100    	; 0xd60 <mySharpIR_ReCalibrate+0xa4>
	}
	else if (i == CALIBRATE_COUNT/2)
     cfc:	2a 30       	cpi	r18, 0x0A	; 10
     cfe:	31 05       	cpc	r19, r1
     d00:	a9 f4       	brne	.+42     	; 0xd2c <mySharpIR_ReCalibrate+0x70>
	{
		if(checkWithinRange(reading, checkReading, CALIBRATE_RANGE))
     d02:	45 e0       	ldi	r20, 0x05	; 5
     d04:	68 e1       	ldi	r22, 0x18	; 24
     d06:	78 e0       	ldi	r23, 0x08	; 8
     d08:	ce 01       	movw	r24, r28
     d0a:	c3 df       	rcall	.-122    	; 0xc92 <checkWithinRange>
     d0c:	88 23       	and	r24, r24
     d0e:	49 f0       	breq	.+18     	; 0xd22 <mySharpIR_ReCalibrate+0x66>
		{
			// Out of range.. restart to find new calibration point..
			checkReading[0] = reading;
     d10:	d0 93 19 08 	sts	0x0819, r29
     d14:	c0 93 18 08 	sts	0x0818, r28
			i = 0; // reset to count...
     d18:	10 92 1d 08 	sts	0x081D, r1
     d1c:	10 92 1c 08 	sts	0x081C, r1
     d20:	1f c0       	rjmp	.+62     	; 0xd60 <mySharpIR_ReCalibrate+0xa4>
		}
		else
		{	// within range.. need more confirmation
			checkReading[1] = reading;
     d22:	d0 93 1b 08 	sts	0x081B, r29
     d26:	c0 93 1a 08 	sts	0x081A, r28
     d2a:	1a c0       	rjmp	.+52     	; 0xd60 <mySharpIR_ReCalibrate+0xa4>
		}
	}
	else if (i == CALIBRATE_COUNT)
     d2c:	24 31       	cpi	r18, 0x14	; 20
     d2e:	31 05       	cpc	r19, r1
     d30:	b9 f4       	brne	.+46     	; 0xd60 <mySharpIR_ReCalibrate+0xa4>
	{
		i = 0; // reset to count..
     d32:	10 92 1d 08 	sts	0x081D, r1
     d36:	10 92 1c 08 	sts	0x081C, r1

		if(checkWithinRange(reading, checkReading, CALIBRATE_RANGE))
     d3a:	45 e0       	ldi	r20, 0x05	; 5
     d3c:	68 e1       	ldi	r22, 0x18	; 24
     d3e:	78 e0       	ldi	r23, 0x08	; 8
     d40:	ce 01       	movw	r24, r28
     d42:	a7 df       	rcall	.-178    	; 0xc92 <checkWithinRange>
     d44:	88 23       	and	r24, r24
     d46:	29 f0       	breq	.+10     	; 0xd52 <mySharpIR_ReCalibrate+0x96>
		{
			// Out of range.. restart to find new calibration point..
			checkReading[0] = reading;
     d48:	d0 93 19 08 	sts	0x0819, r29
     d4c:	c0 93 18 08 	sts	0x0818, r28
     d50:	07 c0       	rjmp	.+14     	; 0xd60 <mySharpIR_ReCalibrate+0xa4>
		}
		else
		{
			// all 3 readings within range... can calibrate as new stable.
			*calibratedReading = checkReading[0]; // btmIR is calibrated..
     d52:	80 91 18 08 	lds	r24, 0x0818
     d56:	90 91 19 08 	lds	r25, 0x0819
     d5a:	f8 01       	movw	r30, r16
     d5c:	91 83       	std	Z+1, r25	; 0x01
     d5e:	80 83       	st	Z, r24
		}
	}
	
	i = (i+1) % CALIBRATE_COUNT;
     d60:	80 91 1c 08 	lds	r24, 0x081C
     d64:	90 91 1d 08 	lds	r25, 0x081D
     d68:	01 96       	adiw	r24, 0x01	; 1
     d6a:	64 e1       	ldi	r22, 0x14	; 20
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__divmodhi4>
     d72:	90 93 1d 08 	sts	0x081D, r25
     d76:	80 93 1c 08 	sts	0x081C, r24
}
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	1f 91       	pop	r17
     d80:	0f 91       	pop	r16
     d82:	08 95       	ret

00000d84 <myTimer_Init>:
	unsigned char currentTick = myTimer_Read();

	delay /= MICROSECONDS_PER_TICK; // convert delay into ticks..
	expectedTick2 = currentTick + delay; 
	vTaskResume( *timerTask ); // resume delayMicroCheck..
	xSemaphoreTake(semaDelayMicro2, MAX_SEMA_WAIT);	// delay for the micro here... safety mech: max wait for 2 ms... cannot be more than tht..
     d84:	90 93 a6 08 	sts	0x08A6, r25
     d88:	80 93 a5 08 	sts	0x08A5, r24
     d8c:	fc 01       	movw	r30, r24
     d8e:	80 81       	ld	r24, Z
     d90:	91 81       	ldd	r25, Z+1	; 0x01
     d92:	0e 94 e6 11 	call	0x23cc	; 0x23cc <vTaskSuspend>
     d96:	43 e0       	ldi	r20, 0x03	; 3
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	ee d4       	rcall	.+2524   	; 0x177a <xQueueGenericCreate>
     d9e:	90 93 a2 08 	sts	0x08A2, r25
     da2:	80 93 a1 08 	sts	0x08A1, r24
     da6:	43 e0       	ldi	r20, 0x03	; 3
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	e6 d4       	rcall	.+2508   	; 0x177a <xQueueGenericCreate>
     dae:	90 93 a4 08 	sts	0x08A4, r25
     db2:	80 93 a3 08 	sts	0x08A3, r24
     db6:	08 95       	ret

00000db8 <myTimer_Read>:
     db8:	86 b5       	in	r24, 0x26	; 38
     dba:	08 95       	ret

00000dbc <myTimer_DelayMicro>:
     dbc:	46 b5       	in	r20, 0x26	; 38
     dbe:	50 e0       	ldi	r21, 0x00	; 0
     dc0:	9c 01       	movw	r18, r24
     dc2:	99 23       	and	r25, r25
     dc4:	14 f4       	brge	.+4      	; 0xdca <myTimer_DelayMicro+0xe>
     dc6:	2d 5f       	subi	r18, 0xFD	; 253
     dc8:	3f 4f       	sbci	r19, 0xFF	; 255
     dca:	35 95       	asr	r19
     dcc:	27 95       	ror	r18
     dce:	35 95       	asr	r19
     dd0:	27 95       	ror	r18
     dd2:	24 0f       	add	r18, r20
     dd4:	35 1f       	adc	r19, r21
     dd6:	30 93 04 02 	sts	0x0204, r19
     dda:	20 93 03 02 	sts	0x0203, r18
     dde:	e0 91 a5 08 	lds	r30, 0x08A5
     de2:	f0 91 a6 08 	lds	r31, 0x08A6
     de6:	80 81       	ld	r24, Z
     de8:	91 81       	ldd	r25, Z+1	; 0x01
     dea:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <vTaskResume>
     dee:	20 e0       	ldi	r18, 0x00	; 0
     df0:	42 e0       	ldi	r20, 0x02	; 2
     df2:	50 e0       	ldi	r21, 0x00	; 0
     df4:	60 e0       	ldi	r22, 0x00	; 0
     df6:	70 e0       	ldi	r23, 0x00	; 0
     df8:	80 91 a1 08 	lds	r24, 0x08A1
     dfc:	90 91 a2 08 	lds	r25, 0x08A2
     e00:	e1 c5       	rjmp	.+3010   	; 0x19c4 <xQueueGenericReceive>
     e02:	08 95       	ret

00000e04 <myTimer_DelayChecker>:
}

// Semaphore on sale if u match lucky number ...
void myTimer_DelayChecker()
{
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
}

// Return timer 0 value
unsigned char myTimer_Read()
{
	return TCNT0;
     e08:	c6 b5       	in	r28, 0x26	; 38
// Semaphore on sale if u match lucky number ...
void myTimer_DelayChecker()
{
	unsigned char currentTick = myTimer_Read();
	
	if(currentTick == 0) // overflow happened
     e0a:	c1 11       	cpse	r28, r1
     e0c:	22 c0       	rjmp	.+68     	; 0xe52 <myTimer_DelayChecker+0x4e>
	{
		if(expectedTick != IMPOSSIBLE_RANGE)
     e0e:	80 91 03 02 	lds	r24, 0x0203
     e12:	90 91 04 02 	lds	r25, 0x0204
     e16:	88 38       	cpi	r24, 0x88	; 136
     e18:	93 41       	sbci	r25, 0x13	; 19
     e1a:	51 f0       	breq	.+20     	; 0xe30 <myTimer_DelayChecker+0x2c>
			expectedTick -= MAX_TICKS;
     e1c:	80 91 03 02 	lds	r24, 0x0203
     e20:	90 91 04 02 	lds	r25, 0x0204
     e24:	8a 5f       	subi	r24, 0xFA	; 250
     e26:	91 09       	sbc	r25, r1
     e28:	90 93 04 02 	sts	0x0204, r25
     e2c:	80 93 03 02 	sts	0x0203, r24

		if(expectedTick2 != IMPOSSIBLE_RANGE)
     e30:	80 91 01 02 	lds	r24, 0x0201
     e34:	90 91 02 02 	lds	r25, 0x0202
     e38:	88 38       	cpi	r24, 0x88	; 136
     e3a:	93 41       	sbci	r25, 0x13	; 19
     e3c:	51 f0       	breq	.+20     	; 0xe52 <myTimer_DelayChecker+0x4e>
			expectedTick2 -= MAX_TICKS;
     e3e:	80 91 01 02 	lds	r24, 0x0201
     e42:	90 91 02 02 	lds	r25, 0x0202
     e46:	8a 5f       	subi	r24, 0xFA	; 250
     e48:	91 09       	sbc	r25, r1
     e4a:	90 93 02 02 	sts	0x0202, r25
     e4e:	80 93 01 02 	sts	0x0201, r24
	}
	
	if( currentTick > expectedTick) // more than => 1 more tick => positive error..
     e52:	d0 e0       	ldi	r29, 0x00	; 0
     e54:	80 91 03 02 	lds	r24, 0x0203
     e58:	90 91 04 02 	lds	r25, 0x0204
     e5c:	8c 17       	cp	r24, r28
     e5e:	9d 07       	cpc	r25, r29
     e60:	84 f4       	brge	.+32     	; 0xe82 <myTimer_DelayChecker+0x7e>
	{
		expectedTick = IMPOSSIBLE_RANGE; // set back to impossible range.
     e62:	88 e8       	ldi	r24, 0x88	; 136
     e64:	93 e1       	ldi	r25, 0x13	; 19
     e66:	90 93 04 02 	sts	0x0204, r25
     e6a:	80 93 03 02 	sts	0x0203, r24
		xSemaphoreGive(semaDelayMicro); // give the semaphore to resume...	
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	40 e0       	ldi	r20, 0x00	; 0
     e72:	50 e0       	ldi	r21, 0x00	; 0
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	80 91 a1 08 	lds	r24, 0x08A1
     e7c:	90 91 a2 08 	lds	r25, 0x08A2
     e80:	a9 d4       	rcall	.+2386   	; 0x17d4 <xQueueGenericSend>
	}
	
	
	if( currentTick > expectedTick2) // more than => 1 more tick => positive error..
     e82:	80 91 01 02 	lds	r24, 0x0201
     e86:	90 91 02 02 	lds	r25, 0x0202
     e8a:	8c 17       	cp	r24, r28
     e8c:	9d 07       	cpc	r25, r29
     e8e:	84 f4       	brge	.+32     	; 0xeb0 <myTimer_DelayChecker+0xac>
	{
		expectedTick2 = IMPOSSIBLE_RANGE; // set back to impossible range.
     e90:	88 e8       	ldi	r24, 0x88	; 136
     e92:	93 e1       	ldi	r25, 0x13	; 19
     e94:	90 93 02 02 	sts	0x0202, r25
     e98:	80 93 01 02 	sts	0x0201, r24
		xSemaphoreGive(semaDelayMicro2); // give the semaphore to resume...
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	80 91 a3 08 	lds	r24, 0x08A3
     eaa:	90 91 a4 08 	lds	r25, 0x08A4
     eae:	92 d4       	rcall	.+2340   	; 0x17d4 <xQueueGenericSend>
	}
	
	if(expectedTick == IMPOSSIBLE_RANGE && expectedTick2 == IMPOSSIBLE_RANGE)
     eb0:	80 91 03 02 	lds	r24, 0x0203
     eb4:	90 91 04 02 	lds	r25, 0x0204
     eb8:	88 38       	cpi	r24, 0x88	; 136
     eba:	93 41       	sbci	r25, 0x13	; 19
     ebc:	79 f4       	brne	.+30     	; 0xedc <myTimer_DelayChecker+0xd8>
     ebe:	80 91 01 02 	lds	r24, 0x0201
     ec2:	90 91 02 02 	lds	r25, 0x0202
     ec6:	88 38       	cpi	r24, 0x88	; 136
     ec8:	93 41       	sbci	r25, 0x13	; 19
     eca:	41 f4       	brne	.+16     	; 0xedc <myTimer_DelayChecker+0xd8>
	{
		vTaskSuspend(*timerTask); // suspend when both is done..
     ecc:	e0 91 a5 08 	lds	r30, 0x08A5
     ed0:	f0 91 a6 08 	lds	r31, 0x08A6
     ed4:	80 81       	ld	r24, Z
     ed6:	91 81       	ldd	r25, Z+1	; 0x01
     ed8:	0e 94 e6 11 	call	0x23cc	; 0x23cc <vTaskSuspend>
	}
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	08 95       	ret

00000ee2 <__vector_36>:


char myUSART_receiveHandShakeFin(unsigned char message)
{
	return (message == HANDSHAKE_FIN);
}
     ee2:	1f 92       	push	r1
     ee4:	0f 92       	push	r0
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	0f 92       	push	r0
     eea:	11 24       	eor	r1, r1
     eec:	0b b6       	in	r0, 0x3b	; 59
     eee:	0f 92       	push	r0
     ef0:	2f 93       	push	r18
     ef2:	3f 93       	push	r19
     ef4:	4f 93       	push	r20
     ef6:	5f 93       	push	r21
     ef8:	6f 93       	push	r22
     efa:	7f 93       	push	r23
     efc:	8f 93       	push	r24
     efe:	9f 93       	push	r25
     f00:	af 93       	push	r26
     f02:	bf 93       	push	r27
     f04:	ef 93       	push	r30
     f06:	ff 93       	push	r31
     f08:	60 91 ce 00 	lds	r22, 0x00CE
     f0c:	8c e3       	ldi	r24, 0x3C	; 60
     f0e:	99 e0       	ldi	r25, 0x09	; 9
     f10:	2f d6       	rcall	.+3166   	; 0x1b70 <ringBufferPush>
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	40 e0       	ldi	r20, 0x00	; 0
     f16:	50 e0       	ldi	r21, 0x00	; 0
     f18:	60 e0       	ldi	r22, 0x00	; 0
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	80 91 30 09 	lds	r24, 0x0930
     f20:	90 91 31 09 	lds	r25, 0x0931
     f24:	15 d5       	rcall	.+2602   	; 0x1950 <xQueueGenericSendFromISR>
     f26:	8c e3       	ldi	r24, 0x3C	; 60
     f28:	99 e0       	ldi	r25, 0x09	; 9
     f2a:	39 d6       	rcall	.+3186   	; 0x1b9e <ringBufferFull>
     f2c:	ff 91       	pop	r31
     f2e:	ef 91       	pop	r30
     f30:	bf 91       	pop	r27
     f32:	af 91       	pop	r26
     f34:	9f 91       	pop	r25
     f36:	8f 91       	pop	r24
     f38:	7f 91       	pop	r23
     f3a:	6f 91       	pop	r22
     f3c:	5f 91       	pop	r21
     f3e:	4f 91       	pop	r20
     f40:	3f 91       	pop	r19
     f42:	2f 91       	pop	r18
     f44:	0f 90       	pop	r0
     f46:	0b be       	out	0x3b, r0	; 59
     f48:	0f 90       	pop	r0
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	0f 90       	pop	r0
     f4e:	1f 90       	pop	r1
     f50:	18 95       	reti

00000f52 <__vector_25>:
     f52:	1f 92       	push	r1
     f54:	0f 92       	push	r0
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	0f 92       	push	r0
     f5a:	11 24       	eor	r1, r1
     f5c:	0b b6       	in	r0, 0x3b	; 59
     f5e:	0f 92       	push	r0
     f60:	2f 93       	push	r18
     f62:	3f 93       	push	r19
     f64:	4f 93       	push	r20
     f66:	5f 93       	push	r21
     f68:	6f 93       	push	r22
     f6a:	7f 93       	push	r23
     f6c:	8f 93       	push	r24
     f6e:	9f 93       	push	r25
     f70:	af 93       	push	r26
     f72:	bf 93       	push	r27
     f74:	ef 93       	push	r30
     f76:	ff 93       	push	r31
     f78:	60 91 c6 00 	lds	r22, 0x00C6
     f7c:	87 ec       	ldi	r24, 0xC7	; 199
     f7e:	98 e0       	ldi	r25, 0x08	; 8
     f80:	f7 d5       	rcall	.+3054   	; 0x1b70 <ringBufferPush>
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	40 e0       	ldi	r20, 0x00	; 0
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	60 e0       	ldi	r22, 0x00	; 0
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	80 91 30 09 	lds	r24, 0x0930
     f90:	90 91 31 09 	lds	r25, 0x0931
     f94:	dd d4       	rcall	.+2490   	; 0x1950 <xQueueGenericSendFromISR>
     f96:	87 ec       	ldi	r24, 0xC7	; 199
     f98:	98 e0       	ldi	r25, 0x08	; 8
     f9a:	01 d6       	rcall	.+3074   	; 0x1b9e <ringBufferFull>
     f9c:	ff 91       	pop	r31
     f9e:	ef 91       	pop	r30
     fa0:	bf 91       	pop	r27
     fa2:	af 91       	pop	r26
     fa4:	9f 91       	pop	r25
     fa6:	8f 91       	pop	r24
     fa8:	7f 91       	pop	r23
     faa:	6f 91       	pop	r22
     fac:	5f 91       	pop	r21
     fae:	4f 91       	pop	r20
     fb0:	3f 91       	pop	r19
     fb2:	2f 91       	pop	r18
     fb4:	0f 90       	pop	r0
     fb6:	0b be       	out	0x3b, r0	; 59
     fb8:	0f 90       	pop	r0
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	0f 90       	pop	r0
     fbe:	1f 90       	pop	r1
     fc0:	18 95       	reti

00000fc2 <__vector_37>:
     fc2:	1f 92       	push	r1
     fc4:	0f 92       	push	r0
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	0f 92       	push	r0
     fca:	11 24       	eor	r1, r1
     fcc:	0b b6       	in	r0, 0x3b	; 59
     fce:	0f 92       	push	r0
     fd0:	2f 93       	push	r18
     fd2:	3f 93       	push	r19
     fd4:	4f 93       	push	r20
     fd6:	5f 93       	push	r21
     fd8:	6f 93       	push	r22
     fda:	7f 93       	push	r23
     fdc:	8f 93       	push	r24
     fde:	9f 93       	push	r25
     fe0:	af 93       	push	r26
     fe2:	bf 93       	push	r27
     fe4:	ef 93       	push	r30
     fe6:	ff 93       	push	r31
     fe8:	82 e3       	ldi	r24, 0x32	; 50
     fea:	99 e0       	ldi	r25, 0x09	; 9
     fec:	df d5       	rcall	.+3006   	; 0x1bac <ringBufferNotEmpty>
     fee:	88 23       	and	r24, r24
     ff0:	31 f0       	breq	.+12     	; 0xffe <__vector_37+0x3c>
     ff2:	82 e3       	ldi	r24, 0x32	; 50
     ff4:	99 e0       	ldi	r25, 0x09	; 9
     ff6:	aa d5       	rcall	.+2900   	; 0x1b4c <ringBufferPop>
     ff8:	80 93 ce 00 	sts	0x00CE, r24
     ffc:	05 c0       	rjmp	.+10     	; 0x1008 <__vector_37+0x46>
     ffe:	e9 ec       	ldi	r30, 0xC9	; 201
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	8f 7d       	andi	r24, 0xDF	; 223
    1006:	80 83       	st	Z, r24
    1008:	ff 91       	pop	r31
    100a:	ef 91       	pop	r30
    100c:	bf 91       	pop	r27
    100e:	af 91       	pop	r26
    1010:	9f 91       	pop	r25
    1012:	8f 91       	pop	r24
    1014:	7f 91       	pop	r23
    1016:	6f 91       	pop	r22
    1018:	5f 91       	pop	r21
    101a:	4f 91       	pop	r20
    101c:	3f 91       	pop	r19
    101e:	2f 91       	pop	r18
    1020:	0f 90       	pop	r0
    1022:	0b be       	out	0x3b, r0	; 59
    1024:	0f 90       	pop	r0
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	0f 90       	pop	r0
    102a:	1f 90       	pop	r1
    102c:	18 95       	reti

0000102e <__vector_26>:
    102e:	1f 92       	push	r1
    1030:	0f 92       	push	r0
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	0f 92       	push	r0
    1036:	11 24       	eor	r1, r1
    1038:	0b b6       	in	r0, 0x3b	; 59
    103a:	0f 92       	push	r0
    103c:	2f 93       	push	r18
    103e:	3f 93       	push	r19
    1040:	4f 93       	push	r20
    1042:	5f 93       	push	r21
    1044:	6f 93       	push	r22
    1046:	7f 93       	push	r23
    1048:	8f 93       	push	r24
    104a:	9f 93       	push	r25
    104c:	af 93       	push	r26
    104e:	bf 93       	push	r27
    1050:	ef 93       	push	r30
    1052:	ff 93       	push	r31
    1054:	87 e3       	ldi	r24, 0x37	; 55
    1056:	99 e0       	ldi	r25, 0x09	; 9
    1058:	a9 d5       	rcall	.+2898   	; 0x1bac <ringBufferNotEmpty>
    105a:	88 23       	and	r24, r24
    105c:	31 f0       	breq	.+12     	; 0x106a <__vector_26+0x3c>
    105e:	87 e3       	ldi	r24, 0x37	; 55
    1060:	99 e0       	ldi	r25, 0x09	; 9
    1062:	74 d5       	rcall	.+2792   	; 0x1b4c <ringBufferPop>
    1064:	80 93 c6 00 	sts	0x00C6, r24
    1068:	05 c0       	rjmp	.+10     	; 0x1074 <__vector_26+0x46>
    106a:	e1 ec       	ldi	r30, 0xC1	; 193
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	8f 7d       	andi	r24, 0xDF	; 223
    1072:	80 83       	st	Z, r24
    1074:	ff 91       	pop	r31
    1076:	ef 91       	pop	r30
    1078:	bf 91       	pop	r27
    107a:	af 91       	pop	r26
    107c:	9f 91       	pop	r25
    107e:	8f 91       	pop	r24
    1080:	7f 91       	pop	r23
    1082:	6f 91       	pop	r22
    1084:	5f 91       	pop	r21
    1086:	4f 91       	pop	r20
    1088:	3f 91       	pop	r19
    108a:	2f 91       	pop	r18
    108c:	0f 90       	pop	r0
    108e:	0b be       	out	0x3b, r0	; 59
    1090:	0f 90       	pop	r0
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	0f 90       	pop	r0
    1096:	1f 90       	pop	r1
    1098:	18 95       	reti

0000109a <myUSART_USART0_Init>:
    109a:	10 92 c5 00 	sts	0x00C5, r1
    109e:	87 e6       	ldi	r24, 0x67	; 103
    10a0:	80 93 c4 00 	sts	0x00C4, r24
    10a4:	88 eb       	ldi	r24, 0xB8	; 184
    10a6:	80 93 c1 00 	sts	0x00C1, r24
    10aa:	86 e0       	ldi	r24, 0x06	; 6
    10ac:	80 93 c2 00 	sts	0x00C2, r24
    10b0:	40 e2       	ldi	r20, 0x20	; 32
    10b2:	6e ee       	ldi	r22, 0xEE	; 238
    10b4:	78 e0       	ldi	r23, 0x08	; 8
    10b6:	87 ec       	ldi	r24, 0xC7	; 199
    10b8:	98 e0       	ldi	r25, 0x08	; 8
    10ba:	37 d5       	rcall	.+2670   	; 0x1b2a <ringBufferInit>
    10bc:	40 e2       	ldi	r20, 0x20	; 32
    10be:	6c ec       	ldi	r22, 0xCC	; 204
    10c0:	78 e0       	ldi	r23, 0x08	; 8
    10c2:	87 e3       	ldi	r24, 0x37	; 55
    10c4:	99 e0       	ldi	r25, 0x09	; 9
    10c6:	31 d5       	rcall	.+2658   	; 0x1b2a <ringBufferInit>
    10c8:	43 e0       	ldi	r20, 0x03	; 3
    10ca:	60 e0       	ldi	r22, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	55 d3       	rcall	.+1706   	; 0x177a <xQueueGenericCreate>
    10d0:	90 93 2f 09 	sts	0x092F, r25
    10d4:	80 93 2e 09 	sts	0x092E, r24
    10d8:	08 95       	ret

000010da <myUSART_USART1_Init>:
    10da:	10 92 cd 00 	sts	0x00CD, r1
    10de:	87 e6       	ldi	r24, 0x67	; 103
    10e0:	80 93 cc 00 	sts	0x00CC, r24
    10e4:	88 eb       	ldi	r24, 0xB8	; 184
    10e6:	80 93 c9 00 	sts	0x00C9, r24
    10ea:	86 e0       	ldi	r24, 0x06	; 6
    10ec:	80 93 ca 00 	sts	0x00CA, r24
    10f0:	40 e2       	ldi	r20, 0x20	; 32
    10f2:	67 ea       	ldi	r22, 0xA7	; 167
    10f4:	78 e0       	ldi	r23, 0x08	; 8
    10f6:	8c e3       	ldi	r24, 0x3C	; 60
    10f8:	99 e0       	ldi	r25, 0x09	; 9
    10fa:	17 d5       	rcall	.+2606   	; 0x1b2a <ringBufferInit>
    10fc:	40 e2       	ldi	r20, 0x20	; 32
    10fe:	6e e0       	ldi	r22, 0x0E	; 14
    1100:	79 e0       	ldi	r23, 0x09	; 9
    1102:	82 e3       	ldi	r24, 0x32	; 50
    1104:	99 e0       	ldi	r25, 0x09	; 9
    1106:	11 d5       	rcall	.+2594   	; 0x1b2a <ringBufferInit>
    1108:	43 e0       	ldi	r20, 0x03	; 3
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	35 d3       	rcall	.+1642   	; 0x177a <xQueueGenericCreate>
    1110:	90 93 31 09 	sts	0x0931, r25
    1114:	80 93 30 09 	sts	0x0930, r24
    1118:	43 e0       	ldi	r20, 0x03	; 3
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	2d d3       	rcall	.+1626   	; 0x177a <xQueueGenericCreate>
    1120:	90 93 ed 08 	sts	0x08ED, r25
    1124:	80 93 ec 08 	sts	0x08EC, r24
    1128:	08 95       	ret

0000112a <myUSART_transmitUSART0_c>:
    112a:	cf 93       	push	r28
    112c:	c8 2f       	mov	r28, r24
    112e:	87 e3       	ldi	r24, 0x37	; 55
    1130:	99 e0       	ldi	r25, 0x09	; 9
    1132:	35 d5       	rcall	.+2666   	; 0x1b9e <ringBufferFull>
    1134:	81 11       	cpse	r24, r1
    1136:	fb cf       	rjmp	.-10     	; 0x112e <myUSART_transmitUSART0_c+0x4>
    1138:	6c 2f       	mov	r22, r28
    113a:	87 e3       	ldi	r24, 0x37	; 55
    113c:	99 e0       	ldi	r25, 0x09	; 9
    113e:	18 d5       	rcall	.+2608   	; 0x1b70 <ringBufferPush>
    1140:	e1 ec       	ldi	r30, 0xC1	; 193
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	80 62       	ori	r24, 0x20	; 32
    1148:	80 83       	st	Z, r24
    114a:	e0 ec       	ldi	r30, 0xC0	; 192
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	80 64       	ori	r24, 0x40	; 64
    1152:	80 83       	st	Z, r24
    1154:	cf 91       	pop	r28
    1156:	08 95       	ret

00001158 <myUSART_transmitUSART1_c>:
    1158:	cf 93       	push	r28
    115a:	c8 2f       	mov	r28, r24
    115c:	82 e3       	ldi	r24, 0x32	; 50
    115e:	99 e0       	ldi	r25, 0x09	; 9
    1160:	1e d5       	rcall	.+2620   	; 0x1b9e <ringBufferFull>
    1162:	81 11       	cpse	r24, r1
    1164:	fb cf       	rjmp	.-10     	; 0x115c <myUSART_transmitUSART1_c+0x4>
    1166:	6c 2f       	mov	r22, r28
    1168:	82 e3       	ldi	r24, 0x32	; 50
    116a:	99 e0       	ldi	r25, 0x09	; 9
    116c:	01 d5       	rcall	.+2562   	; 0x1b70 <ringBufferPush>
    116e:	e9 ec       	ldi	r30, 0xC9	; 201
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	80 62       	ori	r24, 0x20	; 32
    1176:	80 83       	st	Z, r24
    1178:	e8 ec       	ldi	r30, 0xC8	; 200
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	80 64       	ori	r24, 0x40	; 64
    1180:	80 83       	st	Z, r24
    1182:	cf 91       	pop	r28
    1184:	08 95       	ret

00001186 <myUSART_transmitUSART1>:
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	ec 01       	movw	r28, r24
    118c:	88 81       	ld	r24, Y
    118e:	88 23       	and	r24, r24
    1190:	29 f0       	breq	.+10     	; 0x119c <myUSART_transmitUSART1+0x16>
    1192:	21 96       	adiw	r28, 0x01	; 1
    1194:	e1 df       	rcall	.-62     	; 0x1158 <myUSART_transmitUSART1_c>
    1196:	89 91       	ld	r24, Y+
    1198:	81 11       	cpse	r24, r1
    119a:	fc cf       	rjmp	.-8      	; 0x1194 <myUSART_transmitUSART1+0xe>
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	08 95       	ret

000011a2 <myUSART_transmitUSART0>:
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	ec 01       	movw	r28, r24
    11a8:	88 81       	ld	r24, Y
    11aa:	88 23       	and	r24, r24
    11ac:	29 f0       	breq	.+10     	; 0x11b8 <myUSART_transmitUSART0+0x16>
    11ae:	21 96       	adiw	r28, 0x01	; 1
    11b0:	bc df       	rcall	.-136    	; 0x112a <myUSART_transmitUSART0_c>
    11b2:	89 91       	ld	r24, Y+
    11b4:	81 11       	cpse	r24, r1
    11b6:	fc cf       	rjmp	.-8      	; 0x11b0 <myUSART_transmitUSART0+0xe>
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	08 95       	ret

000011be <myUSART_receiveUSART1>:
    11be:	cf 93       	push	r28
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	4f ef       	ldi	r20, 0xFF	; 255
    11c4:	5f ef       	ldi	r21, 0xFF	; 255
    11c6:	60 e0       	ldi	r22, 0x00	; 0
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	80 91 30 09 	lds	r24, 0x0930
    11ce:	90 91 31 09 	lds	r25, 0x0931
    11d2:	f8 d3       	rcall	.+2032   	; 0x19c4 <xQueueGenericReceive>
    11d4:	8c e3       	ldi	r24, 0x3C	; 60
    11d6:	99 e0       	ldi	r25, 0x09	; 9
    11d8:	b9 d4       	rcall	.+2418   	; 0x1b4c <ringBufferPop>
    11da:	c8 2f       	mov	r28, r24
    11dc:	8c e3       	ldi	r24, 0x3C	; 60
    11de:	99 e0       	ldi	r25, 0x09	; 9
    11e0:	e5 d4       	rcall	.+2506   	; 0x1bac <ringBufferNotEmpty>
    11e2:	88 23       	and	r24, r24
    11e4:	51 f0       	breq	.+20     	; 0x11fa <myUSART_receiveUSART1+0x3c>
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	40 e0       	ldi	r20, 0x00	; 0
    11ea:	50 e0       	ldi	r21, 0x00	; 0
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	70 e0       	ldi	r23, 0x00	; 0
    11f0:	80 91 30 09 	lds	r24, 0x0930
    11f4:	90 91 31 09 	lds	r25, 0x0931
    11f8:	ed d2       	rcall	.+1498   	; 0x17d4 <xQueueGenericSend>
    11fa:	8c 2f       	mov	r24, r28
    11fc:	cf 91       	pop	r28
    11fe:	08 95       	ret

00001200 <myUSART_waitForHandshake>:
    1200:	de df       	rcall	.-68     	; 0x11be <myUSART_receiveUSART1>
    1202:	86 31       	cpi	r24, 0x16	; 22
    1204:	51 f4       	brne	.+20     	; 0x121a <myUSART_waitForHandshake+0x1a>
    1206:	85 e0       	ldi	r24, 0x05	; 5
    1208:	a7 df       	rcall	.-178    	; 0x1158 <myUSART_transmitUSART1_c>
    120a:	d9 df       	rcall	.-78     	; 0x11be <myUSART_receiveUSART1>
    120c:	91 e0       	ldi	r25, 0x01	; 1
    120e:	86 31       	cpi	r24, 0x16	; 22
    1210:	09 f4       	brne	.+2      	; 0x1214 <myUSART_waitForHandshake+0x14>
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	89 2f       	mov	r24, r25
    1216:	81 95       	neg	r24
    1218:	08 95       	ret
    121a:	8f ef       	ldi	r24, 0xFF	; 255
    121c:	08 95       	ret

0000121e <myUSART_completeHandShake>:
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	40 e0       	ldi	r20, 0x00	; 0
    1222:	50 e0       	ldi	r21, 0x00	; 0
    1224:	60 e0       	ldi	r22, 0x00	; 0
    1226:	70 e0       	ldi	r23, 0x00	; 0
    1228:	80 91 ec 08 	lds	r24, 0x08EC
    122c:	90 91 ed 08 	lds	r25, 0x08ED
    1230:	d1 c2       	rjmp	.+1442   	; 0x17d4 <xQueueGenericSend>
    1232:	08 95       	ret

00001234 <myUSART_receiveHandShakeAck>:
    1234:	91 e0       	ldi	r25, 0x01	; 1
    1236:	85 30       	cpi	r24, 0x05	; 5
    1238:	09 f0       	breq	.+2      	; 0x123c <myUSART_receiveHandShakeAck+0x8>
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	89 2f       	mov	r24, r25
    123e:	08 95       	ret

00001240 <myUSART_receiveHandShakeStart>:
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	86 31       	cpi	r24, 0x16	; 22
    1244:	09 f0       	breq	.+2      	; 0x1248 <myUSART_receiveHandShakeStart+0x8>
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	89 2f       	mov	r24, r25
    124a:	08 95       	ret

0000124c <myUSART_receiveMessageACK>:


char myUSART_receiveMessageACK(unsigned char message)
{
	return (message == MESSAGE_ACK);
    124c:	91 e0       	ldi	r25, 0x01	; 1
    124e:	86 30       	cpi	r24, 0x06	; 6
    1250:	09 f0       	breq	.+2      	; 0x1254 <myUSART_receiveMessageACK+0x8>
    1252:	90 e0       	ldi	r25, 0x00	; 0
}
    1254:	89 2f       	mov	r24, r25
    1256:	08 95       	ret

00001258 <myUSART_peekReceiveUSART1>:


unsigned char myUSART_peekReceiveUSART1()
{
    1258:	cf 93       	push	r28
	unsigned char data;
	
	xSemaphoreTake(semaUsart1Receive, portMAX_DELAY);
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	4f ef       	ldi	r20, 0xFF	; 255
    125e:	5f ef       	ldi	r21, 0xFF	; 255
    1260:	60 e0       	ldi	r22, 0x00	; 0
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	80 91 30 09 	lds	r24, 0x0930
    1268:	90 91 31 09 	lds	r25, 0x0931
    126c:	ab d3       	rcall	.+1878   	; 0x19c4 <xQueueGenericReceive>
	data = ringBufferPeek(&uart1_rxRingBuffer);
    126e:	8c e3       	ldi	r24, 0x3C	; 60
    1270:	99 e0       	ldi	r25, 0x09	; 9
    1272:	62 d4       	rcall	.+2244   	; 0x1b38 <ringBufferPeek>
    1274:	c8 2f       	mov	r28, r24
	
	//need?
	if(ringBufferNotEmpty(&uart1_rxRingBuffer))
    1276:	8c e3       	ldi	r24, 0x3C	; 60
    1278:	99 e0       	ldi	r25, 0x09	; 9
    127a:	98 d4       	rcall	.+2352   	; 0x1bac <ringBufferNotEmpty>
    127c:	88 23       	and	r24, r24
    127e:	51 f0       	breq	.+20     	; 0x1294 <myUSART_peekReceiveUSART1+0x3c>
	{
		xSemaphoreGive(semaUsart1Receive);
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	40 e0       	ldi	r20, 0x00	; 0
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	60 e0       	ldi	r22, 0x00	; 0
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	80 91 30 09 	lds	r24, 0x0930
    128e:	90 91 31 09 	lds	r25, 0x0931
    1292:	a0 d2       	rcall	.+1344   	; 0x17d4 <xQueueGenericSend>
	}
	
	return data;
    1294:	8c 2f       	mov	r24, r28
    1296:	cf 91       	pop	r28
    1298:	08 95       	ret

0000129a <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    129a:	31 e1       	ldi	r19, 0x11	; 17
    129c:	fc 01       	movw	r30, r24
    129e:	30 83       	st	Z, r19
    12a0:	31 97       	sbiw	r30, 0x01	; 1
    12a2:	22 e2       	ldi	r18, 0x22	; 34
    12a4:	20 83       	st	Z, r18
    12a6:	31 97       	sbiw	r30, 0x01	; 1
    12a8:	a3 e3       	ldi	r26, 0x33	; 51
    12aa:	a0 83       	st	Z, r26
    12ac:	31 97       	sbiw	r30, 0x01	; 1
    12ae:	60 83       	st	Z, r22
    12b0:	31 97       	sbiw	r30, 0x01	; 1
    12b2:	70 83       	st	Z, r23
    12b4:	31 97       	sbiw	r30, 0x01	; 1
    12b6:	10 82       	st	Z, r1
    12b8:	31 97       	sbiw	r30, 0x01	; 1
    12ba:	10 82       	st	Z, r1
    12bc:	31 97       	sbiw	r30, 0x01	; 1
    12be:	60 e8       	ldi	r22, 0x80	; 128
    12c0:	60 83       	st	Z, r22
    12c2:	31 97       	sbiw	r30, 0x01	; 1
    12c4:	10 82       	st	Z, r1
    12c6:	31 97       	sbiw	r30, 0x01	; 1
    12c8:	10 82       	st	Z, r1
    12ca:	31 97       	sbiw	r30, 0x01	; 1
    12cc:	10 82       	st	Z, r1
    12ce:	31 97       	sbiw	r30, 0x01	; 1
    12d0:	62 e0       	ldi	r22, 0x02	; 2
    12d2:	60 83       	st	Z, r22
    12d4:	31 97       	sbiw	r30, 0x01	; 1
    12d6:	63 e0       	ldi	r22, 0x03	; 3
    12d8:	60 83       	st	Z, r22
    12da:	31 97       	sbiw	r30, 0x01	; 1
    12dc:	64 e0       	ldi	r22, 0x04	; 4
    12de:	60 83       	st	Z, r22
    12e0:	31 97       	sbiw	r30, 0x01	; 1
    12e2:	65 e0       	ldi	r22, 0x05	; 5
    12e4:	60 83       	st	Z, r22
    12e6:	31 97       	sbiw	r30, 0x01	; 1
    12e8:	66 e0       	ldi	r22, 0x06	; 6
    12ea:	60 83       	st	Z, r22
    12ec:	31 97       	sbiw	r30, 0x01	; 1
    12ee:	67 e0       	ldi	r22, 0x07	; 7
    12f0:	60 83       	st	Z, r22
    12f2:	31 97       	sbiw	r30, 0x01	; 1
    12f4:	68 e0       	ldi	r22, 0x08	; 8
    12f6:	60 83       	st	Z, r22
    12f8:	31 97       	sbiw	r30, 0x01	; 1
    12fa:	69 e0       	ldi	r22, 0x09	; 9
    12fc:	60 83       	st	Z, r22
    12fe:	31 97       	sbiw	r30, 0x01	; 1
    1300:	60 e1       	ldi	r22, 0x10	; 16
    1302:	60 83       	st	Z, r22
    1304:	31 97       	sbiw	r30, 0x01	; 1
    1306:	30 83       	st	Z, r19
    1308:	31 97       	sbiw	r30, 0x01	; 1
    130a:	32 e1       	ldi	r19, 0x12	; 18
    130c:	30 83       	st	Z, r19
    130e:	31 97       	sbiw	r30, 0x01	; 1
    1310:	33 e1       	ldi	r19, 0x13	; 19
    1312:	30 83       	st	Z, r19
    1314:	31 97       	sbiw	r30, 0x01	; 1
    1316:	34 e1       	ldi	r19, 0x14	; 20
    1318:	30 83       	st	Z, r19
    131a:	31 97       	sbiw	r30, 0x01	; 1
    131c:	35 e1       	ldi	r19, 0x15	; 21
    131e:	30 83       	st	Z, r19
    1320:	31 97       	sbiw	r30, 0x01	; 1
    1322:	36 e1       	ldi	r19, 0x16	; 22
    1324:	30 83       	st	Z, r19
    1326:	31 97       	sbiw	r30, 0x01	; 1
    1328:	37 e1       	ldi	r19, 0x17	; 23
    132a:	30 83       	st	Z, r19
    132c:	31 97       	sbiw	r30, 0x01	; 1
    132e:	38 e1       	ldi	r19, 0x18	; 24
    1330:	30 83       	st	Z, r19
    1332:	31 97       	sbiw	r30, 0x01	; 1
    1334:	39 e1       	ldi	r19, 0x19	; 25
    1336:	30 83       	st	Z, r19
    1338:	31 97       	sbiw	r30, 0x01	; 1
    133a:	30 e2       	ldi	r19, 0x20	; 32
    133c:	30 83       	st	Z, r19
    133e:	31 97       	sbiw	r30, 0x01	; 1
    1340:	31 e2       	ldi	r19, 0x21	; 33
    1342:	30 83       	st	Z, r19
    1344:	31 97       	sbiw	r30, 0x01	; 1
    1346:	20 83       	st	Z, r18
    1348:	31 97       	sbiw	r30, 0x01	; 1
    134a:	23 e2       	ldi	r18, 0x23	; 35
    134c:	20 83       	st	Z, r18
    134e:	31 97       	sbiw	r30, 0x01	; 1
    1350:	40 83       	st	Z, r20
    1352:	31 97       	sbiw	r30, 0x01	; 1
    1354:	50 83       	st	Z, r21
    1356:	31 97       	sbiw	r30, 0x01	; 1
    1358:	26 e2       	ldi	r18, 0x26	; 38
    135a:	20 83       	st	Z, r18
    135c:	31 97       	sbiw	r30, 0x01	; 1
    135e:	27 e2       	ldi	r18, 0x27	; 39
    1360:	20 83       	st	Z, r18
    1362:	31 97       	sbiw	r30, 0x01	; 1
    1364:	28 e2       	ldi	r18, 0x28	; 40
    1366:	20 83       	st	Z, r18
    1368:	31 97       	sbiw	r30, 0x01	; 1
    136a:	29 e2       	ldi	r18, 0x29	; 41
    136c:	20 83       	st	Z, r18
    136e:	31 97       	sbiw	r30, 0x01	; 1
    1370:	20 e3       	ldi	r18, 0x30	; 48
    1372:	20 83       	st	Z, r18
    1374:	31 97       	sbiw	r30, 0x01	; 1
    1376:	21 e3       	ldi	r18, 0x31	; 49
    1378:	20 83       	st	Z, r18
    137a:	89 97       	sbiw	r24, 0x29	; 41
    137c:	08 95       	ret

0000137e <xPortStartScheduler>:
    137e:	82 e0       	ldi	r24, 0x02	; 2
    1380:	84 bd       	out	0x24, r24	; 36
    1382:	16 bc       	out	0x26, r1	; 38
    1384:	80 e3       	ldi	r24, 0x30	; 48
    1386:	87 bd       	out	0x27, r24	; 39
    1388:	ee e6       	ldi	r30, 0x6E	; 110
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	82 60       	ori	r24, 0x02	; 2
    1390:	80 83       	st	Z, r24
    1392:	83 e0       	ldi	r24, 0x03	; 3
    1394:	85 bd       	out	0x25, r24	; 37
    1396:	a0 91 87 08 	lds	r26, 0x0887
    139a:	b0 91 88 08 	lds	r27, 0x0888
    139e:	cd 91       	ld	r28, X+
    13a0:	cd bf       	out	0x3d, r28	; 61
    13a2:	dd 91       	ld	r29, X+
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	ff 91       	pop	r31
    13a8:	ef 91       	pop	r30
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	bf 91       	pop	r27
    13b0:	af 91       	pop	r26
    13b2:	9f 91       	pop	r25
    13b4:	8f 91       	pop	r24
    13b6:	7f 91       	pop	r23
    13b8:	6f 91       	pop	r22
    13ba:	5f 91       	pop	r21
    13bc:	4f 91       	pop	r20
    13be:	3f 91       	pop	r19
    13c0:	2f 91       	pop	r18
    13c2:	1f 91       	pop	r17
    13c4:	0f 91       	pop	r16
    13c6:	ff 90       	pop	r15
    13c8:	ef 90       	pop	r14
    13ca:	df 90       	pop	r13
    13cc:	cf 90       	pop	r12
    13ce:	bf 90       	pop	r11
    13d0:	af 90       	pop	r10
    13d2:	9f 90       	pop	r9
    13d4:	8f 90       	pop	r8
    13d6:	7f 90       	pop	r7
    13d8:	6f 90       	pop	r6
    13da:	5f 90       	pop	r5
    13dc:	4f 90       	pop	r4
    13de:	3f 90       	pop	r3
    13e0:	2f 90       	pop	r2
    13e2:	1f 90       	pop	r1
    13e4:	0f 90       	pop	r0
    13e6:	0c be       	out	0x3c, r0	; 60
    13e8:	0f 90       	pop	r0
    13ea:	0b be       	out	0x3b, r0	; 59
    13ec:	0f 90       	pop	r0
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	0f 90       	pop	r0
    13f2:	08 95       	ret
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	08 95       	ret

000013f8 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    13f8:	0f 92       	push	r0
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	0f 92       	push	r0
    1400:	0b b6       	in	r0, 0x3b	; 59
    1402:	0f 92       	push	r0
    1404:	0c b6       	in	r0, 0x3c	; 60
    1406:	0f 92       	push	r0
    1408:	1f 92       	push	r1
    140a:	11 24       	eor	r1, r1
    140c:	2f 92       	push	r2
    140e:	3f 92       	push	r3
    1410:	4f 92       	push	r4
    1412:	5f 92       	push	r5
    1414:	6f 92       	push	r6
    1416:	7f 92       	push	r7
    1418:	8f 92       	push	r8
    141a:	9f 92       	push	r9
    141c:	af 92       	push	r10
    141e:	bf 92       	push	r11
    1420:	cf 92       	push	r12
    1422:	df 92       	push	r13
    1424:	ef 92       	push	r14
    1426:	ff 92       	push	r15
    1428:	0f 93       	push	r16
    142a:	1f 93       	push	r17
    142c:	2f 93       	push	r18
    142e:	3f 93       	push	r19
    1430:	4f 93       	push	r20
    1432:	5f 93       	push	r21
    1434:	6f 93       	push	r22
    1436:	7f 93       	push	r23
    1438:	8f 93       	push	r24
    143a:	9f 93       	push	r25
    143c:	af 93       	push	r26
    143e:	bf 93       	push	r27
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
    1444:	ef 93       	push	r30
    1446:	ff 93       	push	r31
    1448:	a0 91 87 08 	lds	r26, 0x0887
    144c:	b0 91 88 08 	lds	r27, 0x0888
    1450:	0d b6       	in	r0, 0x3d	; 61
    1452:	0d 92       	st	X+, r0
    1454:	0e b6       	in	r0, 0x3e	; 62
    1456:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1458:	5b d7       	rcall	.+3766   	; 0x2310 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    145a:	a0 91 87 08 	lds	r26, 0x0887
    145e:	b0 91 88 08 	lds	r27, 0x0888
    1462:	cd 91       	ld	r28, X+
    1464:	cd bf       	out	0x3d, r28	; 61
    1466:	dd 91       	ld	r29, X+
    1468:	de bf       	out	0x3e, r29	; 62
    146a:	ff 91       	pop	r31
    146c:	ef 91       	pop	r30
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	bf 91       	pop	r27
    1474:	af 91       	pop	r26
    1476:	9f 91       	pop	r25
    1478:	8f 91       	pop	r24
    147a:	7f 91       	pop	r23
    147c:	6f 91       	pop	r22
    147e:	5f 91       	pop	r21
    1480:	4f 91       	pop	r20
    1482:	3f 91       	pop	r19
    1484:	2f 91       	pop	r18
    1486:	1f 91       	pop	r17
    1488:	0f 91       	pop	r16
    148a:	ff 90       	pop	r15
    148c:	ef 90       	pop	r14
    148e:	df 90       	pop	r13
    1490:	cf 90       	pop	r12
    1492:	bf 90       	pop	r11
    1494:	af 90       	pop	r10
    1496:	9f 90       	pop	r9
    1498:	8f 90       	pop	r8
    149a:	7f 90       	pop	r7
    149c:	6f 90       	pop	r6
    149e:	5f 90       	pop	r5
    14a0:	4f 90       	pop	r4
    14a2:	3f 90       	pop	r3
    14a4:	2f 90       	pop	r2
    14a6:	1f 90       	pop	r1
    14a8:	0f 90       	pop	r0
    14aa:	0c be       	out	0x3c, r0	; 60
    14ac:	0f 90       	pop	r0
    14ae:	0b be       	out	0x3b, r0	; 59
    14b0:	0f 90       	pop	r0
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	0f 90       	pop	r0

	asm volatile ( "ret" );
    14b6:	08 95       	ret

000014b8 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    14b8:	0f 92       	push	r0
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	f8 94       	cli
    14be:	0f 92       	push	r0
    14c0:	0b b6       	in	r0, 0x3b	; 59
    14c2:	0f 92       	push	r0
    14c4:	0c b6       	in	r0, 0x3c	; 60
    14c6:	0f 92       	push	r0
    14c8:	1f 92       	push	r1
    14ca:	11 24       	eor	r1, r1
    14cc:	2f 92       	push	r2
    14ce:	3f 92       	push	r3
    14d0:	4f 92       	push	r4
    14d2:	5f 92       	push	r5
    14d4:	6f 92       	push	r6
    14d6:	7f 92       	push	r7
    14d8:	8f 92       	push	r8
    14da:	9f 92       	push	r9
    14dc:	af 92       	push	r10
    14de:	bf 92       	push	r11
    14e0:	cf 92       	push	r12
    14e2:	df 92       	push	r13
    14e4:	ef 92       	push	r14
    14e6:	ff 92       	push	r15
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	2f 93       	push	r18
    14ee:	3f 93       	push	r19
    14f0:	4f 93       	push	r20
    14f2:	5f 93       	push	r21
    14f4:	6f 93       	push	r22
    14f6:	7f 93       	push	r23
    14f8:	8f 93       	push	r24
    14fa:	9f 93       	push	r25
    14fc:	af 93       	push	r26
    14fe:	bf 93       	push	r27
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	ef 93       	push	r30
    1506:	ff 93       	push	r31
    1508:	a0 91 87 08 	lds	r26, 0x0887
    150c:	b0 91 88 08 	lds	r27, 0x0888
    1510:	0d b6       	in	r0, 0x3d	; 61
    1512:	0d 92       	st	X+, r0
    1514:	0e b6       	in	r0, 0x3e	; 62
    1516:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    1518:	45 d5       	rcall	.+2698   	; 0x1fa4 <xTaskIncrementTick>
    151a:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    151c:	f9 d6       	rcall	.+3570   	; 0x2310 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    151e:	a0 91 87 08 	lds	r26, 0x0887
    1522:	b0 91 88 08 	lds	r27, 0x0888
    1526:	cd 91       	ld	r28, X+
    1528:	cd bf       	out	0x3d, r28	; 61
    152a:	dd 91       	ld	r29, X+
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	ff 91       	pop	r31
    1530:	ef 91       	pop	r30
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	bf 91       	pop	r27
    1538:	af 91       	pop	r26
    153a:	9f 91       	pop	r25
    153c:	8f 91       	pop	r24
    153e:	7f 91       	pop	r23
    1540:	6f 91       	pop	r22
    1542:	5f 91       	pop	r21
    1544:	4f 91       	pop	r20
    1546:	3f 91       	pop	r19
    1548:	2f 91       	pop	r18
    154a:	1f 91       	pop	r17
    154c:	0f 91       	pop	r16
    154e:	ff 90       	pop	r15
    1550:	ef 90       	pop	r14
    1552:	df 90       	pop	r13
    1554:	cf 90       	pop	r12
    1556:	bf 90       	pop	r11
    1558:	af 90       	pop	r10
    155a:	9f 90       	pop	r9
    155c:	8f 90       	pop	r8
    155e:	7f 90       	pop	r7
    1560:	6f 90       	pop	r6
    1562:	5f 90       	pop	r5
    1564:	4f 90       	pop	r4
    1566:	3f 90       	pop	r3
    1568:	2f 90       	pop	r2
    156a:	1f 90       	pop	r1
    156c:	0f 90       	pop	r0
    156e:	0c be       	out	0x3c, r0	; 60
    1570:	0f 90       	pop	r0
    1572:	0b be       	out	0x3b, r0	; 59
    1574:	0f 90       	pop	r0
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	0f 90       	pop	r0

	asm volatile ( "ret" );
    157a:	08 95       	ret

0000157c <__vector_21>:
	 * the context is saved at the start of vPortYieldFromTick().  The tick
	 * count is incremented after the context is saved.
	 */
	 ISR(TIMER0_COMPA_vect, ISR_NAKED)
	 {
		 vPortYieldFromTick();
    157c:	9d df       	rcall	.-198    	; 0x14b8 <vPortYieldFromTick>
		 asm volatile ("reti");
    157e:	18 95       	reti

00001580 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    1580:	1f 93       	push	r17
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
    1586:	ec 01       	movw	r28, r24
    1588:	14 2f       	mov	r17, r20
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    158a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    158c:	81 11       	cpse	r24, r1
    158e:	0c c0       	rjmp	.+24     	; 0x15a8 <prvCopyDataToQueue+0x28>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1590:	88 81       	ld	r24, Y
    1592:	99 81       	ldd	r25, Y+1	; 0x01
    1594:	89 2b       	or	r24, r25
    1596:	09 f0       	breq	.+2      	; 0x159a <prvCopyDataToQueue+0x1a>
    1598:	47 c0       	rjmp	.+142    	; 0x1628 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	9b 81       	ldd	r25, Y+3	; 0x03
    159e:	0e 94 4b 13 	call	0x2696	; 0x2696 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    15a2:	1b 82       	std	Y+3, r1	; 0x03
    15a4:	1a 82       	std	Y+2, r1	; 0x02
    15a6:	47 c0       	rjmp	.+142    	; 0x1636 <prvCopyDataToQueue+0xb6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    15a8:	41 11       	cpse	r20, r1
    15aa:	18 c0       	rjmp	.+48     	; 0x15dc <prvCopyDataToQueue+0x5c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    15ac:	48 2f       	mov	r20, r24
    15ae:	50 e0       	ldi	r21, 0x00	; 0
    15b0:	8c 81       	ldd	r24, Y+4	; 0x04
    15b2:	9d 81       	ldd	r25, Y+5	; 0x05
    15b4:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    15b8:	2c 8d       	ldd	r18, Y+28	; 0x1c
    15ba:	8c 81       	ldd	r24, Y+4	; 0x04
    15bc:	9d 81       	ldd	r25, Y+5	; 0x05
    15be:	82 0f       	add	r24, r18
    15c0:	91 1d       	adc	r25, r1
    15c2:	9d 83       	std	Y+5, r25	; 0x05
    15c4:	8c 83       	std	Y+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    15c6:	2a 81       	ldd	r18, Y+2	; 0x02
    15c8:	3b 81       	ldd	r19, Y+3	; 0x03
    15ca:	82 17       	cp	r24, r18
    15cc:	93 07       	cpc	r25, r19
    15ce:	70 f1       	brcs	.+92     	; 0x162c <prvCopyDataToQueue+0xac>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    15d0:	88 81       	ld	r24, Y
    15d2:	99 81       	ldd	r25, Y+1	; 0x01
    15d4:	9d 83       	std	Y+5, r25	; 0x05
    15d6:	8c 83       	std	Y+4, r24	; 0x04
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	2d c0       	rjmp	.+90     	; 0x1636 <prvCopyDataToQueue+0xb6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    15dc:	48 2f       	mov	r20, r24
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	8e 81       	ldd	r24, Y+6	; 0x06
    15e2:	9f 81       	ldd	r25, Y+7	; 0x07
    15e4:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    15e8:	2c 8d       	ldd	r18, Y+28	; 0x1c
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	31 95       	neg	r19
    15ee:	21 95       	neg	r18
    15f0:	31 09       	sbc	r19, r1
    15f2:	8e 81       	ldd	r24, Y+6	; 0x06
    15f4:	9f 81       	ldd	r25, Y+7	; 0x07
    15f6:	82 0f       	add	r24, r18
    15f8:	93 1f       	adc	r25, r19
    15fa:	9f 83       	std	Y+7, r25	; 0x07
    15fc:	8e 83       	std	Y+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    15fe:	68 81       	ld	r22, Y
    1600:	79 81       	ldd	r23, Y+1	; 0x01
    1602:	86 17       	cp	r24, r22
    1604:	97 07       	cpc	r25, r23
    1606:	30 f4       	brcc	.+12     	; 0x1614 <prvCopyDataToQueue+0x94>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	9b 81       	ldd	r25, Y+3	; 0x03
    160c:	28 0f       	add	r18, r24
    160e:	39 1f       	adc	r19, r25
    1610:	3f 83       	std	Y+7, r19	; 0x07
    1612:	2e 83       	std	Y+6, r18	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    1614:	12 30       	cpi	r17, 0x02	; 2
    1616:	61 f4       	brne	.+24     	; 0x1630 <prvCopyDataToQueue+0xb0>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    1618:	8a 8d       	ldd	r24, Y+26	; 0x1a
    161a:	88 23       	and	r24, r24
    161c:	59 f0       	breq	.+22     	; 0x1634 <prvCopyDataToQueue+0xb4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
    161e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1620:	81 50       	subi	r24, 0x01	; 1
    1622:	8a 8f       	std	Y+26, r24	; 0x1a
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	07 c0       	rjmp	.+14     	; 0x1636 <prvCopyDataToQueue+0xb6>
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	05 c0       	rjmp	.+10     	; 0x1636 <prvCopyDataToQueue+0xb6>
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	03 c0       	rjmp	.+6      	; 0x1636 <prvCopyDataToQueue+0xb6>
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	01 c0       	rjmp	.+2      	; 0x1636 <prvCopyDataToQueue+0xb6>
    1634:	80 e0       	ldi	r24, 0x00	; 0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    1636:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1638:	9f 5f       	subi	r25, 0xFF	; 255
    163a:	9a 8f       	std	Y+26, r25	; 0x1a

	return xReturn;
}
    163c:	df 91       	pop	r29
    163e:	cf 91       	pop	r28
    1640:	1f 91       	pop	r17
    1642:	08 95       	ret

00001644 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    1644:	fc 01       	movw	r30, r24
    1646:	cb 01       	movw	r24, r22
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    1648:	44 8d       	ldd	r20, Z+28	; 0x1c
    164a:	44 23       	and	r20, r20
    164c:	a1 f0       	breq	.+40     	; 0x1676 <prvCopyDataFromQueue+0x32>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	26 81       	ldd	r18, Z+6	; 0x06
    1652:	37 81       	ldd	r19, Z+7	; 0x07
    1654:	24 0f       	add	r18, r20
    1656:	35 1f       	adc	r19, r21
    1658:	37 83       	std	Z+7, r19	; 0x07
    165a:	26 83       	std	Z+6, r18	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    165c:	62 81       	ldd	r22, Z+2	; 0x02
    165e:	73 81       	ldd	r23, Z+3	; 0x03
    1660:	26 17       	cp	r18, r22
    1662:	37 07       	cpc	r19, r23
    1664:	20 f0       	brcs	.+8      	; 0x166e <prvCopyDataFromQueue+0x2a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    1666:	20 81       	ld	r18, Z
    1668:	31 81       	ldd	r19, Z+1	; 0x01
    166a:	37 83       	std	Z+7, r19	; 0x07
    166c:	26 83       	std	Z+6, r18	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    166e:	66 81       	ldd	r22, Z+6	; 0x06
    1670:	77 81       	ldd	r23, Z+7	; 0x07
    1672:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <memcpy>
    1676:	08 95       	ret

00001678 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    1678:	0f 93       	push	r16
    167a:	1f 93       	push	r17
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
    1680:	ec 01       	movw	r28, r24

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    1688:	8e 8d       	ldd	r24, Y+30	; 0x1e
    168a:	18 16       	cp	r1, r24
    168c:	a4 f4       	brge	.+40     	; 0x16b6 <prvUnlockQueue+0x3e>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    168e:	89 89       	ldd	r24, Y+17	; 0x11
    1690:	88 23       	and	r24, r24
    1692:	89 f0       	breq	.+34     	; 0x16b6 <prvUnlockQueue+0x3e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1694:	8e 01       	movw	r16, r28
    1696:	0f 5e       	subi	r16, 0xEF	; 239
    1698:	1f 4f       	sbci	r17, 0xFF	; 255
    169a:	03 c0       	rjmp	.+6      	; 0x16a2 <prvUnlockQueue+0x2a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    169c:	89 89       	ldd	r24, Y+17	; 0x11
    169e:	88 23       	and	r24, r24
    16a0:	51 f0       	breq	.+20     	; 0x16b6 <prvUnlockQueue+0x3e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    16a2:	c8 01       	movw	r24, r16
    16a4:	0b d7       	rcall	.+3606   	; 0x24bc <xTaskRemoveFromEventList>
    16a6:	81 11       	cpse	r24, r1
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    16a8:	94 d7       	rcall	.+3880   	; 0x25d2 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    16aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16ac:	81 50       	subi	r24, 0x01	; 1
    16ae:	8e 8f       	std	Y+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    16b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16b2:	18 16       	cp	r1, r24
    16b4:	9c f3       	brlt	.-26     	; 0x169c <prvUnlockQueue+0x24>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    16b6:	8f ef       	ldi	r24, 0xFF	; 255
    16b8:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    16ba:	0f 90       	pop	r0
    16bc:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    16c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16c6:	18 16       	cp	r1, r24
    16c8:	a4 f4       	brge	.+40     	; 0x16f2 <prvUnlockQueue+0x7a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    16ca:	88 85       	ldd	r24, Y+8	; 0x08
    16cc:	88 23       	and	r24, r24
    16ce:	89 f0       	breq	.+34     	; 0x16f2 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    16d0:	8e 01       	movw	r16, r28
    16d2:	08 5f       	subi	r16, 0xF8	; 248
    16d4:	1f 4f       	sbci	r17, 0xFF	; 255
    16d6:	03 c0       	rjmp	.+6      	; 0x16de <prvUnlockQueue+0x66>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    16d8:	88 85       	ldd	r24, Y+8	; 0x08
    16da:	88 23       	and	r24, r24
    16dc:	51 f0       	breq	.+20     	; 0x16f2 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    16de:	c8 01       	movw	r24, r16
    16e0:	ed d6       	rcall	.+3546   	; 0x24bc <xTaskRemoveFromEventList>
    16e2:	81 11       	cpse	r24, r1
				{
					vTaskMissedYield();
    16e4:	76 d7       	rcall	.+3820   	; 0x25d2 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    16e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16e8:	81 50       	subi	r24, 0x01	; 1
    16ea:	8d 8f       	std	Y+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    16ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16ee:	18 16       	cp	r1, r24
    16f0:	9c f3       	brlt	.-26     	; 0x16d8 <prvUnlockQueue+0x60>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    16f2:	8f ef       	ldi	r24, 0xFF	; 255
    16f4:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    16f6:	0f 90       	pop	r0
    16f8:	0f be       	out	0x3f, r0	; 63
}
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	1f 91       	pop	r17
    1700:	0f 91       	pop	r16
    1702:	08 95       	ret

00001704 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    1704:	cf 93       	push	r28
    1706:	df 93       	push	r29
    1708:	ec 01       	movw	r28, r24
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1710:	88 81       	ld	r24, Y
    1712:	99 81       	ldd	r25, Y+1	; 0x01
    1714:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	7b 8d       	ldd	r23, Y+27	; 0x1b
    171a:	72 9f       	mul	r23, r18
    171c:	a0 01       	movw	r20, r0
    171e:	73 9f       	mul	r23, r19
    1720:	50 0d       	add	r21, r0
    1722:	11 24       	eor	r1, r1
    1724:	fc 01       	movw	r30, r24
    1726:	e4 0f       	add	r30, r20
    1728:	f5 1f       	adc	r31, r21
    172a:	fb 83       	std	Y+3, r31	; 0x03
    172c:	ea 83       	std	Y+2, r30	; 0x02
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    172e:	1a 8e       	std	Y+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1730:	9d 83       	std	Y+5, r25	; 0x05
    1732:	8c 83       	std	Y+4, r24	; 0x04
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1734:	42 1b       	sub	r20, r18
    1736:	53 0b       	sbc	r21, r19
    1738:	84 0f       	add	r24, r20
    173a:	95 1f       	adc	r25, r21
    173c:	9f 83       	std	Y+7, r25	; 0x07
    173e:	8e 83       	std	Y+6, r24	; 0x06
		pxQueue->xRxLock = queueUNLOCKED;
    1740:	8f ef       	ldi	r24, 0xFF	; 255
    1742:	8d 8f       	std	Y+29, r24	; 0x1d
		pxQueue->xTxLock = queueUNLOCKED;
    1744:	8e 8f       	std	Y+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    1746:	61 11       	cpse	r22, r1
    1748:	0a c0       	rjmp	.+20     	; 0x175e <xQueueGenericReset+0x5a>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    174a:	88 85       	ldd	r24, Y+8	; 0x08
    174c:	88 23       	and	r24, r24
    174e:	79 f0       	breq	.+30     	; 0x176e <xQueueGenericReset+0x6a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1750:	ce 01       	movw	r24, r28
    1752:	08 96       	adiw	r24, 0x08	; 8
    1754:	b3 d6       	rcall	.+3430   	; 0x24bc <xTaskRemoveFromEventList>
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	51 f4       	brne	.+20     	; 0x176e <xQueueGenericReset+0x6a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    175a:	4e de       	rcall	.-868    	; 0x13f8 <vPortYield>
    175c:	08 c0       	rjmp	.+16     	; 0x176e <xQueueGenericReset+0x6a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    175e:	ce 01       	movw	r24, r28
    1760:	08 96       	adiw	r24, 0x08	; 8
    1762:	0e 94 2c 03 	call	0x658	; 0x658 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1766:	ce 01       	movw	r24, r28
    1768:	41 96       	adiw	r24, 0x11	; 17
    176a:	0e 94 2c 03 	call	0x658	; 0x658 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    176e:	0f 90       	pop	r0
    1770:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	08 95       	ret

0000177a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    177a:	0f 93       	push	r16
    177c:	1f 93       	push	r17
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
    1782:	18 2f       	mov	r17, r24
    1784:	06 2f       	mov	r16, r22
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
    1786:	88 23       	and	r24, r24
    1788:	e9 f0       	breq	.+58     	; 0x17c4 <xQueueGenericCreate+0x4a>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    178a:	8f e1       	ldi	r24, 0x1F	; 31
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <pvPortMalloc>
    1792:	ec 01       	movw	r28, r24
		if( pxNewQueue != NULL )
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	c1 f0       	breq	.+48     	; 0x17c8 <xQueueGenericCreate+0x4e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1798:	10 9f       	mul	r17, r16
    179a:	c0 01       	movw	r24, r0
    179c:	11 24       	eor	r1, r1

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
    179e:	01 96       	adiw	r24, 0x01	; 1
    17a0:	0e 94 f6 02 	call	0x5ec	; 0x5ec <pvPortMalloc>
    17a4:	99 83       	std	Y+1, r25	; 0x01
    17a6:	88 83       	st	Y, r24
			if( pxNewQueue->pcHead != NULL )
    17a8:	89 2b       	or	r24, r25
    17aa:	31 f0       	breq	.+12     	; 0x17b8 <xQueueGenericCreate+0x3e>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    17ac:	1b 8f       	std	Y+27, r17	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    17ae:	0c 8f       	std	Y+28, r16	; 0x1c
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    17b0:	61 e0       	ldi	r22, 0x01	; 1
    17b2:	ce 01       	movw	r24, r28
    17b4:	a7 df       	rcall	.-178    	; 0x1704 <xQueueGenericReset>
    17b6:	08 c0       	rjmp	.+16     	; 0x17c8 <xQueueGenericCreate+0x4e>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    17b8:	ce 01       	movw	r24, r28
    17ba:	0e 94 2b 03 	call	0x656	; 0x656 <vPortFree>

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
    17be:	c0 e0       	ldi	r28, 0x00	; 0
    17c0:	d0 e0       	ldi	r29, 0x00	; 0
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <xQueueGenericCreate+0x4e>
    17c4:	c0 e0       	ldi	r28, 0x00	; 0
    17c6:	d0 e0       	ldi	r29, 0x00	; 0
	}

	configASSERT( xReturn );

	return xReturn;
}
    17c8:	ce 01       	movw	r24, r28
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	1f 91       	pop	r17
    17d0:	0f 91       	pop	r16
    17d2:	08 95       	ret

000017d4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    17d4:	9f 92       	push	r9
    17d6:	af 92       	push	r10
    17d8:	bf 92       	push	r11
    17da:	cf 92       	push	r12
    17dc:	df 92       	push	r13
    17de:	ef 92       	push	r14
    17e0:	ff 92       	push	r15
    17e2:	0f 93       	push	r16
    17e4:	1f 93       	push	r17
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	00 d0       	rcall	.+0      	; 0x17ec <xQueueGenericSend+0x18>
    17ec:	1f 92       	push	r1
    17ee:	1f 92       	push	r1
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62
    17f4:	8c 01       	movw	r16, r24
    17f6:	6b 01       	movw	r12, r22
    17f8:	5d 83       	std	Y+5, r21	; 0x05
    17fa:	4c 83       	std	Y+4, r20	; 0x04
    17fc:	a2 2e       	mov	r10, r18
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    17fe:	b1 2c       	mov	r11, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    1800:	99 24       	eor	r9, r9
    1802:	93 94       	inc	r9
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1804:	7c 01       	movw	r14, r24
    1806:	88 e0       	ldi	r24, 0x08	; 8
    1808:	e8 0e       	add	r14, r24
    180a:	f1 1c       	adc	r15, r1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    180c:	0f b6       	in	r0, 0x3f	; 63
    180e:	f8 94       	cli
    1810:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1812:	f8 01       	movw	r30, r16
    1814:	92 8d       	ldd	r25, Z+26	; 0x1a
    1816:	83 8d       	ldd	r24, Z+27	; 0x1b
    1818:	98 17       	cp	r25, r24
    181a:	18 f0       	brcs	.+6      	; 0x1822 <xQueueGenericSend+0x4e>
    181c:	f2 e0       	ldi	r31, 0x02	; 2
    181e:	af 12       	cpse	r10, r31
    1820:	15 c0       	rjmp	.+42     	; 0x184c <xQueueGenericSend+0x78>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1822:	4a 2d       	mov	r20, r10
    1824:	b6 01       	movw	r22, r12
    1826:	c8 01       	movw	r24, r16
    1828:	ab de       	rcall	.-682    	; 0x1580 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    182a:	f8 01       	movw	r30, r16
    182c:	91 89       	ldd	r25, Z+17	; 0x11
    182e:	99 23       	and	r25, r25
    1830:	39 f0       	breq	.+14     	; 0x1840 <xQueueGenericSend+0x6c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    1832:	c8 01       	movw	r24, r16
    1834:	41 96       	adiw	r24, 0x11	; 17
    1836:	42 d6       	rcall	.+3204   	; 0x24bc <xTaskRemoveFromEventList>
    1838:	81 30       	cpi	r24, 0x01	; 1
    183a:	21 f4       	brne	.+8      	; 0x1844 <xQueueGenericSend+0x70>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    183c:	dd dd       	rcall	.-1094   	; 0x13f8 <vPortYield>
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <xQueueGenericSend+0x70>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    1840:	81 11       	cpse	r24, r1
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    1842:	da dd       	rcall	.-1100   	; 0x13f8 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    1844:	0f 90       	pop	r0
    1846:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	46 c0       	rjmp	.+140    	; 0x18d8 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    184c:	ec 81       	ldd	r30, Y+4	; 0x04
    184e:	fd 81       	ldd	r31, Y+5	; 0x05
    1850:	ef 2b       	or	r30, r31
    1852:	21 f4       	brne	.+8      	; 0x185c <xQueueGenericSend+0x88>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1854:	0f 90       	pop	r0
    1856:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	3e c0       	rjmp	.+124    	; 0x18d8 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    185c:	b1 10       	cpse	r11, r1
    185e:	04 c0       	rjmp	.+8      	; 0x1868 <xQueueGenericSend+0x94>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1860:	ce 01       	movw	r24, r28
    1862:	01 96       	adiw	r24, 0x01	; 1
    1864:	73 d6       	rcall	.+3302   	; 0x254c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1866:	b9 2c       	mov	r11, r9
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1868:	0f 90       	pop	r0
    186a:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    186c:	86 d3       	rcall	.+1804   	; 0x1f7a <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	f8 94       	cli
    1872:	0f 92       	push	r0
    1874:	f8 01       	movw	r30, r16
    1876:	85 8d       	ldd	r24, Z+29	; 0x1d
    1878:	8f 3f       	cpi	r24, 0xFF	; 255
    187a:	09 f4       	brne	.+2      	; 0x187e <xQueueGenericSend+0xaa>
    187c:	15 8e       	std	Z+29, r1	; 0x1d
    187e:	f8 01       	movw	r30, r16
    1880:	86 8d       	ldd	r24, Z+30	; 0x1e
    1882:	8f 3f       	cpi	r24, 0xFF	; 255
    1884:	09 f4       	brne	.+2      	; 0x1888 <xQueueGenericSend+0xb4>
    1886:	16 8e       	std	Z+30, r1	; 0x1e
    1888:	0f 90       	pop	r0
    188a:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    188c:	be 01       	movw	r22, r28
    188e:	6c 5f       	subi	r22, 0xFC	; 252
    1890:	7f 4f       	sbci	r23, 0xFF	; 255
    1892:	ce 01       	movw	r24, r28
    1894:	01 96       	adiw	r24, 0x01	; 1
    1896:	65 d6       	rcall	.+3274   	; 0x2562 <xTaskCheckForTimeOut>
    1898:	81 11       	cpse	r24, r1
    189a:	1a c0       	rjmp	.+52     	; 0x18d0 <xQueueGenericSend+0xfc>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	f8 94       	cli
    18a0:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    18a2:	f8 01       	movw	r30, r16
    18a4:	92 8d       	ldd	r25, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    18a6:	0f 90       	pop	r0
    18a8:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    18aa:	f8 01       	movw	r30, r16
    18ac:	83 8d       	ldd	r24, Z+27	; 0x1b
    18ae:	98 13       	cpse	r25, r24
    18b0:	0b c0       	rjmp	.+22     	; 0x18c8 <xQueueGenericSend+0xf4>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    18b2:	6c 81       	ldd	r22, Y+4	; 0x04
    18b4:	7d 81       	ldd	r23, Y+5	; 0x05
    18b6:	c7 01       	movw	r24, r14
    18b8:	d6 d5       	rcall	.+2988   	; 0x2466 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    18ba:	c8 01       	movw	r24, r16
    18bc:	dd de       	rcall	.-582    	; 0x1678 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    18be:	30 d4       	rcall	.+2144   	; 0x2120 <xTaskResumeAll>
    18c0:	81 11       	cpse	r24, r1
    18c2:	a4 cf       	rjmp	.-184    	; 0x180c <xQueueGenericSend+0x38>
				{
					portYIELD_WITHIN_API();
    18c4:	99 dd       	rcall	.-1230   	; 0x13f8 <vPortYield>
    18c6:	a2 cf       	rjmp	.-188    	; 0x180c <xQueueGenericSend+0x38>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    18c8:	c8 01       	movw	r24, r16
    18ca:	d6 de       	rcall	.-596    	; 0x1678 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    18cc:	29 d4       	rcall	.+2130   	; 0x2120 <xTaskResumeAll>
    18ce:	9e cf       	rjmp	.-196    	; 0x180c <xQueueGenericSend+0x38>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    18d0:	c8 01       	movw	r24, r16
    18d2:	d2 de       	rcall	.-604    	; 0x1678 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    18d4:	25 d4       	rcall	.+2122   	; 0x2120 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    18d6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	ff 90       	pop	r15
    18ec:	ef 90       	pop	r14
    18ee:	df 90       	pop	r13
    18f0:	cf 90       	pop	r12
    18f2:	bf 90       	pop	r11
    18f4:	af 90       	pop	r10
    18f6:	9f 90       	pop	r9
    18f8:	08 95       	ret

000018fa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    18fa:	cf 93       	push	r28
    18fc:	df 93       	push	r29
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    18fe:	8f e1       	ldi	r24, 0x1F	; 31
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	0e 94 f6 02 	call	0x5ec	; 0x5ec <pvPortMalloc>
    1906:	ec 01       	movw	r28, r24
		if( pxNewQueue != NULL )
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	f1 f0       	breq	.+60     	; 0x1948 <xQueueCreateMutex+0x4e>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    190c:	1b 82       	std	Y+3, r1	; 0x03
    190e:	1a 82       	std	Y+2, r1	; 0x02
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    1910:	19 82       	std	Y+1, r1	; 0x01
    1912:	18 82       	st	Y, r1

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    1914:	1d 82       	std	Y+5, r1	; 0x05
    1916:	1c 82       	std	Y+4, r1	; 0x04
			pxNewQueue->u.pcReadFrom = NULL;
    1918:	1f 82       	std	Y+7, r1	; 0x07
    191a:	1e 82       	std	Y+6, r1	; 0x06

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    191c:	1a 8e       	std	Y+26, r1	; 0x1a
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	8b 8f       	std	Y+27, r24	; 0x1b
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
    1922:	1c 8e       	std	Y+28, r1	; 0x1c
			pxNewQueue->xRxLock = queueUNLOCKED;
    1924:	8f ef       	ldi	r24, 0xFF	; 255
    1926:	8d 8f       	std	Y+29, r24	; 0x1d
			pxNewQueue->xTxLock = queueUNLOCKED;
    1928:	8e 8f       	std	Y+30, r24	; 0x1e
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    192a:	ce 01       	movw	r24, r28
    192c:	08 96       	adiw	r24, 0x08	; 8
    192e:	0e 94 2c 03 	call	0x658	; 0x658 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    1932:	ce 01       	movw	r24, r28
    1934:	41 96       	adiw	r24, 0x11	; 17
    1936:	0e 94 2c 03 	call	0x658	; 0x658 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	40 e0       	ldi	r20, 0x00	; 0
    193e:	50 e0       	ldi	r21, 0x00	; 0
    1940:	60 e0       	ldi	r22, 0x00	; 0
    1942:	70 e0       	ldi	r23, 0x00	; 0
    1944:	ce 01       	movw	r24, r28
    1946:	46 df       	rcall	.-372    	; 0x17d4 <xQueueGenericSend>
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
    1948:	ce 01       	movw	r24, r28
    194a:	df 91       	pop	r29
    194c:	cf 91       	pop	r28
    194e:	08 95       	ret

00001950 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    1950:	0f 93       	push	r16
    1952:	1f 93       	push	r17
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	ec 01       	movw	r28, r24
    195a:	8a 01       	movw	r16, r20
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    195c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    195e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1960:	98 17       	cp	r25, r24
    1962:	10 f0       	brcs	.+4      	; 0x1968 <xQueueGenericSendFromISR+0x18>
    1964:	22 30       	cpi	r18, 0x02	; 2
    1966:	11 f5       	brne	.+68     	; 0x19ac <xQueueGenericSendFromISR+0x5c>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			if( prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition ) != pdFALSE )
    1968:	42 2f       	mov	r20, r18
    196a:	ce 01       	movw	r24, r28
    196c:	09 de       	rcall	.-1006   	; 0x1580 <prvCopyDataToQueue>
    196e:	88 23       	and	r24, r24
    1970:	31 f0       	breq	.+12     	; 0x197e <xQueueGenericSendFromISR+0x2e>
			{
				/* This is a special case that can only be executed if a task
				holds multiple mutexes and then gives the mutexes back in an
				order that is different to that in which they were taken. */
				if( pxHigherPriorityTaskWoken != NULL )
    1972:	01 15       	cp	r16, r1
    1974:	11 05       	cpc	r17, r1
    1976:	19 f0       	breq	.+6      	; 0x197e <xQueueGenericSendFromISR+0x2e>
				{
					*pxHigherPriorityTaskWoken = pdTRUE;
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	f8 01       	movw	r30, r16
    197c:	80 83       	st	Z, r24
				}
			}

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    197e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1980:	8f 3f       	cpi	r24, 0xFF	; 255
    1982:	79 f4       	brne	.+30     	; 0x19a2 <xQueueGenericSendFromISR+0x52>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1984:	89 89       	ldd	r24, Y+17	; 0x11
    1986:	88 23       	and	r24, r24
    1988:	99 f0       	breq	.+38     	; 0x19b0 <xQueueGenericSendFromISR+0x60>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    198a:	ce 01       	movw	r24, r28
    198c:	41 96       	adiw	r24, 0x11	; 17
    198e:	96 d5       	rcall	.+2860   	; 0x24bc <xTaskRemoveFromEventList>
    1990:	88 23       	and	r24, r24
    1992:	81 f0       	breq	.+32     	; 0x19b4 <xQueueGenericSendFromISR+0x64>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    1994:	01 15       	cp	r16, r1
    1996:	11 05       	cpc	r17, r1
    1998:	79 f0       	breq	.+30     	; 0x19b8 <xQueueGenericSendFromISR+0x68>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	f8 01       	movw	r30, r16
    199e:	80 83       	st	Z, r24
    19a0:	0c c0       	rjmp	.+24     	; 0x19ba <xQueueGenericSendFromISR+0x6a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    19a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19a4:	8f 5f       	subi	r24, 0xFF	; 255
    19a6:	8e 8f       	std	Y+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	07 c0       	rjmp	.+14     	; 0x19ba <xQueueGenericSendFromISR+0x6a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	05 c0       	rjmp	.+10     	; 0x19ba <xQueueGenericSendFromISR+0x6a>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	03 c0       	rjmp	.+6      	; 0x19ba <xQueueGenericSendFromISR+0x6a>
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	01 c0       	rjmp	.+2      	; 0x19ba <xQueueGenericSendFromISR+0x6a>
    19b8:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    19ba:	df 91       	pop	r29
    19bc:	cf 91       	pop	r28
    19be:	1f 91       	pop	r17
    19c0:	0f 91       	pop	r16
    19c2:	08 95       	ret

000019c4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    19c4:	9f 92       	push	r9
    19c6:	af 92       	push	r10
    19c8:	bf 92       	push	r11
    19ca:	cf 92       	push	r12
    19cc:	df 92       	push	r13
    19ce:	ef 92       	push	r14
    19d0:	ff 92       	push	r15
    19d2:	0f 93       	push	r16
    19d4:	1f 93       	push	r17
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	00 d0       	rcall	.+0      	; 0x19dc <xQueueGenericReceive+0x18>
    19dc:	1f 92       	push	r1
    19de:	1f 92       	push	r1
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	8c 01       	movw	r16, r24
    19e6:	6b 01       	movw	r12, r22
    19e8:	5d 83       	std	Y+5, r21	; 0x05
    19ea:	4c 83       	std	Y+4, r20	; 0x04
    19ec:	b2 2e       	mov	r11, r18
BaseType_t xEntryTimeSet = pdFALSE;
    19ee:	a1 2c       	mov	r10, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    19f0:	99 24       	eor	r9, r9
    19f2:	93 94       	inc	r9
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    19f4:	7c 01       	movw	r14, r24
    19f6:	81 e1       	ldi	r24, 0x11	; 17
    19f8:	e8 0e       	add	r14, r24
    19fa:	f1 1c       	adc	r15, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    1a02:	f8 01       	movw	r30, r16
    1a04:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a06:	88 23       	and	r24, r24
    1a08:	69 f1       	breq	.+90     	; 0x1a64 <xQueueGenericReceive+0xa0>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    1a0a:	e6 80       	ldd	r14, Z+6	; 0x06
    1a0c:	f7 80       	ldd	r15, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1a0e:	b6 01       	movw	r22, r12
    1a10:	c8 01       	movw	r24, r16
    1a12:	18 de       	rcall	.-976    	; 0x1644 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1a14:	b1 10       	cpse	r11, r1
    1a16:	17 c0       	rjmp	.+46     	; 0x1a46 <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    1a18:	f8 01       	movw	r30, r16
    1a1a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a1c:	81 50       	subi	r24, 0x01	; 1
    1a1e:	82 8f       	std	Z+26, r24	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1a20:	80 81       	ld	r24, Z
    1a22:	91 81       	ldd	r25, Z+1	; 0x01
    1a24:	89 2b       	or	r24, r25
    1a26:	21 f4       	brne	.+8      	; 0x1a30 <xQueueGenericReceive+0x6c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    1a28:	75 d6       	rcall	.+3306   	; 0x2714 <pvTaskIncrementMutexHeldCount>
    1a2a:	f8 01       	movw	r30, r16
    1a2c:	93 83       	std	Z+3, r25	; 0x03
    1a2e:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1a30:	f8 01       	movw	r30, r16
    1a32:	80 85       	ldd	r24, Z+8	; 0x08
    1a34:	88 23       	and	r24, r24
    1a36:	91 f0       	breq	.+36     	; 0x1a5c <xQueueGenericReceive+0x98>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1a38:	c8 01       	movw	r24, r16
    1a3a:	08 96       	adiw	r24, 0x08	; 8
    1a3c:	3f d5       	rcall	.+2686   	; 0x24bc <xTaskRemoveFromEventList>
    1a3e:	81 30       	cpi	r24, 0x01	; 1
    1a40:	69 f4       	brne	.+26     	; 0x1a5c <xQueueGenericReceive+0x98>
						{
							queueYIELD_IF_USING_PREEMPTION();
    1a42:	da dc       	rcall	.-1612   	; 0x13f8 <vPortYield>
    1a44:	0b c0       	rjmp	.+22     	; 0x1a5c <xQueueGenericReceive+0x98>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    1a46:	f8 01       	movw	r30, r16
    1a48:	f7 82       	std	Z+7, r15	; 0x07
    1a4a:	e6 82       	std	Z+6, r14	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1a4c:	81 89       	ldd	r24, Z+17	; 0x11
    1a4e:	88 23       	and	r24, r24
    1a50:	29 f0       	breq	.+10     	; 0x1a5c <xQueueGenericReceive+0x98>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1a52:	c8 01       	movw	r24, r16
    1a54:	41 96       	adiw	r24, 0x11	; 17
    1a56:	32 d5       	rcall	.+2660   	; 0x24bc <xTaskRemoveFromEventList>
    1a58:	81 11       	cpse	r24, r1
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    1a5a:	ce dc       	rcall	.-1636   	; 0x13f8 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    1a5c:	0f 90       	pop	r0
    1a5e:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	52 c0       	rjmp	.+164    	; 0x1b08 <xQueueGenericReceive+0x144>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1a64:	4c 81       	ldd	r20, Y+4	; 0x04
    1a66:	5d 81       	ldd	r21, Y+5	; 0x05
    1a68:	45 2b       	or	r20, r21
    1a6a:	21 f4       	brne	.+8      	; 0x1a74 <xQueueGenericReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1a6c:	0f 90       	pop	r0
    1a6e:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	4a c0       	rjmp	.+148    	; 0x1b08 <xQueueGenericReceive+0x144>
				}
				else if( xEntryTimeSet == pdFALSE )
    1a74:	a1 10       	cpse	r10, r1
    1a76:	04 c0       	rjmp	.+8      	; 0x1a80 <xQueueGenericReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1a78:	ce 01       	movw	r24, r28
    1a7a:	01 96       	adiw	r24, 0x01	; 1
    1a7c:	67 d5       	rcall	.+2766   	; 0x254c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1a7e:	a9 2c       	mov	r10, r9
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1a80:	0f 90       	pop	r0
    1a82:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1a84:	7a d2       	rcall	.+1268   	; 0x1f7a <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	f8 94       	cli
    1a8a:	0f 92       	push	r0
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a90:	8f 3f       	cpi	r24, 0xFF	; 255
    1a92:	09 f4       	brne	.+2      	; 0x1a96 <xQueueGenericReceive+0xd2>
    1a94:	15 8e       	std	Z+29, r1	; 0x1d
    1a96:	f8 01       	movw	r30, r16
    1a98:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a9a:	8f 3f       	cpi	r24, 0xFF	; 255
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <xQueueGenericReceive+0xdc>
    1a9e:	16 8e       	std	Z+30, r1	; 0x1e
    1aa0:	0f 90       	pop	r0
    1aa2:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1aa4:	be 01       	movw	r22, r28
    1aa6:	6c 5f       	subi	r22, 0xFC	; 252
    1aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aaa:	ce 01       	movw	r24, r28
    1aac:	01 96       	adiw	r24, 0x01	; 1
    1aae:	59 d5       	rcall	.+2738   	; 0x2562 <xTaskCheckForTimeOut>
    1ab0:	81 11       	cpse	r24, r1
    1ab2:	26 c0       	rjmp	.+76     	; 0x1b00 <xQueueGenericReceive+0x13c>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1aba:	f8 01       	movw	r30, r16
    1abc:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1abe:	0f 90       	pop	r0
    1ac0:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1ac2:	81 11       	cpse	r24, r1
    1ac4:	19 c0       	rjmp	.+50     	; 0x1af8 <xQueueGenericReceive+0x134>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1ac6:	f8 01       	movw	r30, r16
    1ac8:	80 81       	ld	r24, Z
    1aca:	91 81       	ldd	r25, Z+1	; 0x01
    1acc:	89 2b       	or	r24, r25
    1ace:	49 f4       	brne	.+18     	; 0x1ae2 <xQueueGenericReceive+0x11e>
					{
						taskENTER_CRITICAL();
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1ad6:	f8 01       	movw	r30, r16
    1ad8:	82 81       	ldd	r24, Z+2	; 0x02
    1ada:	93 81       	ldd	r25, Z+3	; 0x03
    1adc:	7e d5       	rcall	.+2812   	; 0x25da <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    1ade:	0f 90       	pop	r0
    1ae0:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1ae2:	6c 81       	ldd	r22, Y+4	; 0x04
    1ae4:	7d 81       	ldd	r23, Y+5	; 0x05
    1ae6:	c7 01       	movw	r24, r14
    1ae8:	be d4       	rcall	.+2428   	; 0x2466 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1aea:	c8 01       	movw	r24, r16
    1aec:	c5 dd       	rcall	.-1142   	; 0x1678 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1aee:	18 d3       	rcall	.+1584   	; 0x2120 <xTaskResumeAll>
    1af0:	81 11       	cpse	r24, r1
    1af2:	84 cf       	rjmp	.-248    	; 0x19fc <xQueueGenericReceive+0x38>
				{
					portYIELD_WITHIN_API();
    1af4:	81 dc       	rcall	.-1790   	; 0x13f8 <vPortYield>
    1af6:	82 cf       	rjmp	.-252    	; 0x19fc <xQueueGenericReceive+0x38>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1af8:	c8 01       	movw	r24, r16
    1afa:	be dd       	rcall	.-1156   	; 0x1678 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1afc:	11 d3       	rcall	.+1570   	; 0x2120 <xTaskResumeAll>
    1afe:	7e cf       	rjmp	.-260    	; 0x19fc <xQueueGenericReceive+0x38>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1b00:	c8 01       	movw	r24, r16
    1b02:	ba dd       	rcall	.-1164   	; 0x1678 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1b04:	0d d3       	rcall	.+1562   	; 0x2120 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    1b06:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	df 91       	pop	r29
    1b14:	cf 91       	pop	r28
    1b16:	1f 91       	pop	r17
    1b18:	0f 91       	pop	r16
    1b1a:	ff 90       	pop	r15
    1b1c:	ef 90       	pop	r14
    1b1e:	df 90       	pop	r13
    1b20:	cf 90       	pop	r12
    1b22:	bf 90       	pop	r11
    1b24:	af 90       	pop	r10
    1b26:	9f 90       	pop	r9
    1b28:	08 95       	ret

00001b2a <ringBufferInit>:

#include <ringBuffer.h>


void ringBufferInit(ringBuffer *ring, unsigned char* buffer, unsigned char size)
{
    1b2a:	fc 01       	movw	r30, r24
	ring->rBuffer = buffer;
    1b2c:	71 83       	std	Z+1, r23	; 0x01
    1b2e:	60 83       	st	Z, r22
	ring->rSize = size;
    1b30:	42 83       	std	Z+2, r20	; 0x02
	ring->rIndex = 0;
    1b32:	14 82       	std	Z+4, r1	; 0x04
	ring->rLength = 0;	 
    1b34:	13 82       	std	Z+3, r1	; 0x03
    1b36:	08 95       	ret

00001b38 <ringBufferPeek>:
}

unsigned char ringBufferPeek(ringBuffer *ring)
{
	   return ring->rBuffer[ ring->rIndex ];	
    1b38:	dc 01       	movw	r26, r24
    1b3a:	14 96       	adiw	r26, 0x04	; 4
    1b3c:	2c 91       	ld	r18, X
    1b3e:	14 97       	sbiw	r26, 0x04	; 4
    1b40:	ed 91       	ld	r30, X+
    1b42:	fc 91       	ld	r31, X
    1b44:	e2 0f       	add	r30, r18
    1b46:	f1 1d       	adc	r31, r1
}
    1b48:	80 81       	ld	r24, Z
    1b4a:	08 95       	ret

00001b4c <ringBufferPop>:

// int?
unsigned char ringBufferPop(ringBuffer *ring)
{
    1b4c:	fc 01       	movw	r30, r24
    unsigned char element;
	
            element = ring->rBuffer[ ring->rIndex ];
    1b4e:	94 81       	ldd	r25, Z+4	; 0x04
    1b50:	a0 81       	ld	r26, Z
    1b52:	b1 81       	ldd	r27, Z+1	; 0x01
    1b54:	a9 0f       	add	r26, r25
    1b56:	b1 1d       	adc	r27, r1
    1b58:	8c 91       	ld	r24, X
            ring->rIndex ++;
    1b5a:	9f 5f       	subi	r25, 0xFF	; 255
    1b5c:	94 83       	std	Z+4, r25	; 0x04
            if ( ring->rIndex >= ring->rSize )
    1b5e:	22 81       	ldd	r18, Z+2	; 0x02
    1b60:	92 17       	cp	r25, r18
    1b62:	10 f0       	brcs	.+4      	; 0x1b68 <ringBufferPop+0x1c>
            {
                ring->rIndex -= ring->rSize;
    1b64:	92 1b       	sub	r25, r18
    1b66:	94 83       	std	Z+4, r25	; 0x04
            }
            ring->rLength --;
    1b68:	93 81       	ldd	r25, Z+3	; 0x03
    1b6a:	91 50       	subi	r25, 0x01	; 1
    1b6c:	93 83       	std	Z+3, r25	; 0x03
    
    return element;
}
    1b6e:	08 95       	ret

00001b70 <ringBufferPush>:



void ringBufferPush( ringBuffer *ring, unsigned char element )
{
    1b70:	fc 01       	movw	r30, r24
    1b72:	46 2f       	mov	r20, r22
    
        if ( ring->rLength < ring->rSize )
    1b74:	83 81       	ldd	r24, Z+3	; 0x03
    1b76:	22 81       	ldd	r18, Z+2	; 0x02
    1b78:	82 17       	cp	r24, r18
    1b7a:	80 f4       	brcc	.+32     	; 0x1b9c <ringBufferPush+0x2c>
        {
            ring->rBuffer[ ( ring->rIndex + ring->rLength ) % ring->rSize ] = element;
    1b7c:	34 81       	ldd	r19, Z+4	; 0x04
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	83 0f       	add	r24, r19
    1b82:	91 1d       	adc	r25, r1
    1b84:	62 2f       	mov	r22, r18
    1b86:	70 e0       	ldi	r23, 0x00	; 0
    1b88:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__divmodhi4>
    1b8c:	a0 81       	ld	r26, Z
    1b8e:	b1 81       	ldd	r27, Z+1	; 0x01
    1b90:	a8 0f       	add	r26, r24
    1b92:	b9 1f       	adc	r27, r25
    1b94:	4c 93       	st	X, r20
            ring->rLength++;
    1b96:	83 81       	ldd	r24, Z+3	; 0x03
    1b98:	8f 5f       	subi	r24, 0xFF	; 255
    1b9a:	83 83       	std	Z+3, r24	; 0x03
    1b9c:	08 95       	ret

00001b9e <ringBufferFull>:


// return 1 if full
// return 0 if not full
char ringBufferFull(ringBuffer *ring)
{
    1b9e:	fc 01       	movw	r30, r24
   return (ring->rSize == ring->rLength);
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	22 81       	ldd	r18, Z+2	; 0x02
    1ba4:	93 81       	ldd	r25, Z+3	; 0x03
    1ba6:	29 13       	cpse	r18, r25
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
}
    1baa:	08 95       	ret

00001bac <ringBufferNotEmpty>:

// return 1 if not empty
// return 0 if empty
char ringBufferNotEmpty(ringBuffer *ring)
{
	return (ring->rLength > 0);
    1bac:	21 e0       	ldi	r18, 0x01	; 1
    1bae:	fc 01       	movw	r30, r24
    1bb0:	83 81       	ldd	r24, Z+3	; 0x03
    1bb2:	81 11       	cpse	r24, r1
    1bb4:	01 c0       	rjmp	.+2      	; 0x1bb8 <ringBufferNotEmpty+0xc>
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
}
    1bb8:	82 2f       	mov	r24, r18
    1bba:	08 95       	ret

00001bbc <prvResetNextTaskUnblockTime>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
    1bbc:	e0 91 46 08 	lds	r30, 0x0846
    1bc0:	f0 91 47 08 	lds	r31, 0x0847
    1bc4:	80 81       	ld	r24, Z
    1bc6:	81 11       	cpse	r24, r1
    1bc8:	07 c0       	rjmp	.+14     	; 0x1bd8 <prvResetNextTaskUnblockTime+0x1c>
    1bca:	8f ef       	ldi	r24, 0xFF	; 255
    1bcc:	9f ef       	ldi	r25, 0xFF	; 255
    1bce:	90 93 06 02 	sts	0x0206, r25
    1bd2:	80 93 05 02 	sts	0x0205, r24
    1bd6:	08 95       	ret
    1bd8:	e0 91 46 08 	lds	r30, 0x0846
    1bdc:	f0 91 47 08 	lds	r31, 0x0847
    1be0:	05 80       	ldd	r0, Z+5	; 0x05
    1be2:	f6 81       	ldd	r31, Z+6	; 0x06
    1be4:	e0 2d       	mov	r30, r0
    1be6:	06 80       	ldd	r0, Z+6	; 0x06
    1be8:	f7 81       	ldd	r31, Z+7	; 0x07
    1bea:	e0 2d       	mov	r30, r0
    1bec:	82 81       	ldd	r24, Z+2	; 0x02
    1bee:	93 81       	ldd	r25, Z+3	; 0x03
    1bf0:	90 93 06 02 	sts	0x0206, r25
    1bf4:	80 93 05 02 	sts	0x0205, r24
    1bf8:	08 95       	ret

00001bfa <prvAddCurrentTaskToDelayedList>:
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	ec 01       	movw	r28, r24
    1c00:	e0 91 87 08 	lds	r30, 0x0887
    1c04:	f0 91 88 08 	lds	r31, 0x0888
    1c08:	93 83       	std	Z+3, r25	; 0x03
    1c0a:	82 83       	std	Z+2, r24	; 0x02
    1c0c:	80 91 25 08 	lds	r24, 0x0825
    1c10:	90 91 26 08 	lds	r25, 0x0826
    1c14:	c8 17       	cp	r28, r24
    1c16:	d9 07       	cpc	r29, r25
    1c18:	68 f4       	brcc	.+26     	; 0x1c34 <prvAddCurrentTaskToDelayedList+0x3a>
    1c1a:	60 91 87 08 	lds	r22, 0x0887
    1c1e:	70 91 88 08 	lds	r23, 0x0888
    1c22:	80 91 44 08 	lds	r24, 0x0844
    1c26:	90 91 45 08 	lds	r25, 0x0845
    1c2a:	6e 5f       	subi	r22, 0xFE	; 254
    1c2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2e:	0e 94 5f 03 	call	0x6be	; 0x6be <vListInsert>
    1c32:	17 c0       	rjmp	.+46     	; 0x1c62 <prvAddCurrentTaskToDelayedList+0x68>
    1c34:	60 91 87 08 	lds	r22, 0x0887
    1c38:	70 91 88 08 	lds	r23, 0x0888
    1c3c:	80 91 46 08 	lds	r24, 0x0846
    1c40:	90 91 47 08 	lds	r25, 0x0847
    1c44:	6e 5f       	subi	r22, 0xFE	; 254
    1c46:	7f 4f       	sbci	r23, 0xFF	; 255
    1c48:	0e 94 5f 03 	call	0x6be	; 0x6be <vListInsert>
    1c4c:	80 91 05 02 	lds	r24, 0x0205
    1c50:	90 91 06 02 	lds	r25, 0x0206
    1c54:	c8 17       	cp	r28, r24
    1c56:	d9 07       	cpc	r29, r25
    1c58:	20 f4       	brcc	.+8      	; 0x1c62 <prvAddCurrentTaskToDelayedList+0x68>
    1c5a:	d0 93 06 02 	sts	0x0206, r29
    1c5e:	c0 93 05 02 	sts	0x0205, r28
    1c62:	df 91       	pop	r29
    1c64:	cf 91       	pop	r28
    1c66:	08 95       	ret

00001c68 <xTaskGenericCreate>:
    1c68:	4f 92       	push	r4
    1c6a:	5f 92       	push	r5
    1c6c:	6f 92       	push	r6
    1c6e:	7f 92       	push	r7
    1c70:	8f 92       	push	r8
    1c72:	9f 92       	push	r9
    1c74:	af 92       	push	r10
    1c76:	bf 92       	push	r11
    1c78:	cf 92       	push	r12
    1c7a:	df 92       	push	r13
    1c7c:	ef 92       	push	r14
    1c7e:	ff 92       	push	r15
    1c80:	0f 93       	push	r16
    1c82:	1f 93       	push	r17
    1c84:	cf 93       	push	r28
    1c86:	df 93       	push	r29
    1c88:	4c 01       	movw	r8, r24
    1c8a:	5b 01       	movw	r10, r22
    1c8c:	2a 01       	movw	r4, r20
    1c8e:	39 01       	movw	r6, r18
    1c90:	83 e2       	ldi	r24, 0x23	; 35
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	0e 94 f6 02 	call	0x5ec	; 0x5ec <pvPortMalloc>
    1c98:	ec 01       	movw	r28, r24
    1c9a:	00 97       	sbiw	r24, 0x00	; 0
    1c9c:	09 f4       	brne	.+2      	; 0x1ca0 <xTaskGenericCreate+0x38>
    1c9e:	e7 c0       	rjmp	.+462    	; 0x1e6e <xTaskGenericCreate+0x206>
    1ca0:	c1 14       	cp	r12, r1
    1ca2:	d1 04       	cpc	r13, r1
    1ca4:	09 f0       	breq	.+2      	; 0x1ca8 <xTaskGenericCreate+0x40>
    1ca6:	cc c0       	rjmp	.+408    	; 0x1e40 <xTaskGenericCreate+0x1d8>
    1ca8:	c2 01       	movw	r24, r4
    1caa:	0e 94 f6 02 	call	0x5ec	; 0x5ec <pvPortMalloc>
    1cae:	98 8f       	std	Y+24, r25	; 0x18
    1cb0:	8f 8b       	std	Y+23, r24	; 0x17
    1cb2:	89 2b       	or	r24, r25
    1cb4:	09 f0       	breq	.+2      	; 0x1cb8 <xTaskGenericCreate+0x50>
    1cb6:	c6 c0       	rjmp	.+396    	; 0x1e44 <xTaskGenericCreate+0x1dc>
    1cb8:	ce 01       	movw	r24, r28
    1cba:	0e 94 2b 03 	call	0x656	; 0x656 <vPortFree>
    1cbe:	d7 c0       	rjmp	.+430    	; 0x1e6e <xTaskGenericCreate+0x206>
    1cc0:	cf 01       	movw	r24, r30
    1cc2:	31 91       	ld	r19, Z+
    1cc4:	da 01       	movw	r26, r20
    1cc6:	3d 93       	st	X+, r19
    1cc8:	ad 01       	movw	r20, r26
    1cca:	dc 01       	movw	r26, r24
    1ccc:	8c 91       	ld	r24, X
    1cce:	88 23       	and	r24, r24
    1cd0:	11 f0       	breq	.+4      	; 0x1cd6 <xTaskGenericCreate+0x6e>
    1cd2:	21 50       	subi	r18, 0x01	; 1
    1cd4:	a9 f7       	brne	.-22     	; 0x1cc0 <xTaskGenericCreate+0x58>
    1cd6:	18 a2       	std	Y+32, r1	; 0x20
    1cd8:	10 2f       	mov	r17, r16
    1cda:	05 30       	cpi	r16, 0x05	; 5
    1cdc:	08 f0       	brcs	.+2      	; 0x1ce0 <xTaskGenericCreate+0x78>
    1cde:	14 e0       	ldi	r17, 0x04	; 4
    1ce0:	1e 8b       	std	Y+22, r17	; 0x16
    1ce2:	19 a3       	std	Y+33, r17	; 0x21
    1ce4:	1a a2       	std	Y+34, r1	; 0x22
    1ce6:	5e 01       	movw	r10, r28
    1ce8:	b2 e0       	ldi	r27, 0x02	; 2
    1cea:	ab 0e       	add	r10, r27
    1cec:	b1 1c       	adc	r11, r1
    1cee:	c5 01       	movw	r24, r10
    1cf0:	0e 94 3a 03 	call	0x674	; 0x674 <vListInitialiseItem>
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	0c 96       	adiw	r24, 0x0c	; 12
    1cf8:	0e 94 3a 03 	call	0x674	; 0x674 <vListInitialiseItem>
    1cfc:	d9 87       	std	Y+9, r29	; 0x09
    1cfe:	c8 87       	std	Y+8, r28	; 0x08
    1d00:	85 e0       	ldi	r24, 0x05	; 5
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	81 1b       	sub	r24, r17
    1d06:	91 09       	sbc	r25, r1
    1d08:	9d 87       	std	Y+13, r25	; 0x0d
    1d0a:	8c 87       	std	Y+12, r24	; 0x0c
    1d0c:	db 8b       	std	Y+19, r29	; 0x13
    1d0e:	ca 8b       	std	Y+18, r28	; 0x12
    1d10:	a3 01       	movw	r20, r6
    1d12:	b4 01       	movw	r22, r8
    1d14:	c6 01       	movw	r24, r12
    1d16:	c1 da       	rcall	.-2686   	; 0x129a <pxPortInitialiseStack>
    1d18:	99 83       	std	Y+1, r25	; 0x01
    1d1a:	88 83       	st	Y, r24
    1d1c:	e1 14       	cp	r14, r1
    1d1e:	f1 04       	cpc	r15, r1
    1d20:	19 f0       	breq	.+6      	; 0x1d28 <xTaskGenericCreate+0xc0>
    1d22:	f7 01       	movw	r30, r14
    1d24:	d1 83       	std	Z+1, r29	; 0x01
    1d26:	c0 83       	st	Z, r28
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	f8 94       	cli
    1d2c:	0f 92       	push	r0
    1d2e:	80 91 27 08 	lds	r24, 0x0827
    1d32:	8f 5f       	subi	r24, 0xFF	; 255
    1d34:	80 93 27 08 	sts	0x0827, r24
    1d38:	80 91 87 08 	lds	r24, 0x0887
    1d3c:	90 91 88 08 	lds	r25, 0x0888
    1d40:	89 2b       	or	r24, r25
    1d42:	09 f0       	breq	.+2      	; 0x1d46 <xTaskGenericCreate+0xde>
    1d44:	3f c0       	rjmp	.+126    	; 0x1dc4 <xTaskGenericCreate+0x15c>
    1d46:	d0 93 88 08 	sts	0x0888, r29
    1d4a:	c0 93 87 08 	sts	0x0887, r28
    1d4e:	80 91 27 08 	lds	r24, 0x0827
    1d52:	81 30       	cpi	r24, 0x01	; 1
    1d54:	09 f0       	breq	.+2      	; 0x1d58 <xTaskGenericCreate+0xf0>
    1d56:	45 c0       	rjmp	.+138    	; 0x1de2 <xTaskGenericCreate+0x17a>
    1d58:	0f 2e       	mov	r0, r31
    1d5a:	fa e5       	ldi	r31, 0x5A	; 90
    1d5c:	ef 2e       	mov	r14, r31
    1d5e:	f8 e0       	ldi	r31, 0x08	; 8
    1d60:	ff 2e       	mov	r15, r31
    1d62:	f0 2d       	mov	r31, r0
    1d64:	0f 2e       	mov	r0, r31
    1d66:	f7 e8       	ldi	r31, 0x87	; 135
    1d68:	cf 2e       	mov	r12, r31
    1d6a:	f8 e0       	ldi	r31, 0x08	; 8
    1d6c:	df 2e       	mov	r13, r31
    1d6e:	f0 2d       	mov	r31, r0
    1d70:	c7 01       	movw	r24, r14
    1d72:	0e 94 2c 03 	call	0x658	; 0x658 <vListInitialise>
    1d76:	f9 e0       	ldi	r31, 0x09	; 9
    1d78:	ef 0e       	add	r14, r31
    1d7a:	f1 1c       	adc	r15, r1
    1d7c:	ec 14       	cp	r14, r12
    1d7e:	fd 04       	cpc	r15, r13
    1d80:	b9 f7       	brne	.-18     	; 0x1d70 <xTaskGenericCreate+0x108>
    1d82:	81 e5       	ldi	r24, 0x51	; 81
    1d84:	98 e0       	ldi	r25, 0x08	; 8
    1d86:	0e 94 2c 03 	call	0x658	; 0x658 <vListInitialise>
    1d8a:	88 e4       	ldi	r24, 0x48	; 72
    1d8c:	98 e0       	ldi	r25, 0x08	; 8
    1d8e:	0e 94 2c 03 	call	0x658	; 0x658 <vListInitialise>
    1d92:	8b e3       	ldi	r24, 0x3B	; 59
    1d94:	98 e0       	ldi	r25, 0x08	; 8
    1d96:	0e 94 2c 03 	call	0x658	; 0x658 <vListInitialise>
    1d9a:	82 e3       	ldi	r24, 0x32	; 50
    1d9c:	98 e0       	ldi	r25, 0x08	; 8
    1d9e:	0e 94 2c 03 	call	0x658	; 0x658 <vListInitialise>
    1da2:	88 e2       	ldi	r24, 0x28	; 40
    1da4:	98 e0       	ldi	r25, 0x08	; 8
    1da6:	0e 94 2c 03 	call	0x658	; 0x658 <vListInitialise>
    1daa:	81 e5       	ldi	r24, 0x51	; 81
    1dac:	98 e0       	ldi	r25, 0x08	; 8
    1dae:	90 93 47 08 	sts	0x0847, r25
    1db2:	80 93 46 08 	sts	0x0846, r24
    1db6:	88 e4       	ldi	r24, 0x48	; 72
    1db8:	98 e0       	ldi	r25, 0x08	; 8
    1dba:	90 93 45 08 	sts	0x0845, r25
    1dbe:	80 93 44 08 	sts	0x0844, r24
    1dc2:	0f c0       	rjmp	.+30     	; 0x1de2 <xTaskGenericCreate+0x17a>
    1dc4:	80 91 23 08 	lds	r24, 0x0823
    1dc8:	81 11       	cpse	r24, r1
    1dca:	0b c0       	rjmp	.+22     	; 0x1de2 <xTaskGenericCreate+0x17a>
    1dcc:	e0 91 87 08 	lds	r30, 0x0887
    1dd0:	f0 91 88 08 	lds	r31, 0x0888
    1dd4:	86 89       	ldd	r24, Z+22	; 0x16
    1dd6:	08 17       	cp	r16, r24
    1dd8:	20 f0       	brcs	.+8      	; 0x1de2 <xTaskGenericCreate+0x17a>
    1dda:	d0 93 88 08 	sts	0x0888, r29
    1dde:	c0 93 87 08 	sts	0x0887, r28
    1de2:	80 91 1f 08 	lds	r24, 0x081F
    1de6:	8f 5f       	subi	r24, 0xFF	; 255
    1de8:	80 93 1f 08 	sts	0x081F, r24
    1dec:	8e 89       	ldd	r24, Y+22	; 0x16
    1dee:	90 91 24 08 	lds	r25, 0x0824
    1df2:	98 17       	cp	r25, r24
    1df4:	10 f4       	brcc	.+4      	; 0x1dfa <xTaskGenericCreate+0x192>
    1df6:	80 93 24 08 	sts	0x0824, r24
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	9c 01       	movw	r18, r24
    1dfe:	22 0f       	add	r18, r18
    1e00:	33 1f       	adc	r19, r19
    1e02:	22 0f       	add	r18, r18
    1e04:	33 1f       	adc	r19, r19
    1e06:	22 0f       	add	r18, r18
    1e08:	33 1f       	adc	r19, r19
    1e0a:	82 0f       	add	r24, r18
    1e0c:	93 1f       	adc	r25, r19
    1e0e:	b5 01       	movw	r22, r10
    1e10:	86 5a       	subi	r24, 0xA6	; 166
    1e12:	97 4f       	sbci	r25, 0xF7	; 247
    1e14:	0e 94 3e 03 	call	0x67c	; 0x67c <vListInsertEnd>
    1e18:	0f 90       	pop	r0
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	80 91 23 08 	lds	r24, 0x0823
    1e20:	88 23       	and	r24, r24
    1e22:	51 f0       	breq	.+20     	; 0x1e38 <xTaskGenericCreate+0x1d0>
    1e24:	e0 91 87 08 	lds	r30, 0x0887
    1e28:	f0 91 88 08 	lds	r31, 0x0888
    1e2c:	86 89       	ldd	r24, Z+22	; 0x16
    1e2e:	80 17       	cp	r24, r16
    1e30:	28 f4       	brcc	.+10     	; 0x1e3c <xTaskGenericCreate+0x1d4>
    1e32:	e2 da       	rcall	.-2620   	; 0x13f8 <vPortYield>
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	1c c0       	rjmp	.+56     	; 0x1e70 <xTaskGenericCreate+0x208>
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	1a c0       	rjmp	.+52     	; 0x1e70 <xTaskGenericCreate+0x208>
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	18 c0       	rjmp	.+48     	; 0x1e70 <xTaskGenericCreate+0x208>
    1e40:	d8 8e       	std	Y+24, r13	; 0x18
    1e42:	cf 8a       	std	Y+23, r12	; 0x17
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	48 1a       	sub	r4, r24
    1e48:	51 08       	sbc	r5, r1
    1e4a:	cf 88       	ldd	r12, Y+23	; 0x17
    1e4c:	d8 8c       	ldd	r13, Y+24	; 0x18
    1e4e:	c4 0c       	add	r12, r4
    1e50:	d5 1c       	adc	r13, r5
    1e52:	d5 01       	movw	r26, r10
    1e54:	8c 91       	ld	r24, X
    1e56:	89 8f       	std	Y+25, r24	; 0x19
    1e58:	8c 91       	ld	r24, X
    1e5a:	88 23       	and	r24, r24
    1e5c:	09 f4       	brne	.+2      	; 0x1e60 <xTaskGenericCreate+0x1f8>
    1e5e:	3b cf       	rjmp	.-394    	; 0x1cd6 <xTaskGenericCreate+0x6e>
    1e60:	ae 01       	movw	r20, r28
    1e62:	46 5e       	subi	r20, 0xE6	; 230
    1e64:	5f 4f       	sbci	r21, 0xFF	; 255
    1e66:	f5 01       	movw	r30, r10
    1e68:	31 96       	adiw	r30, 0x01	; 1
    1e6a:	27 e0       	ldi	r18, 0x07	; 7
    1e6c:	29 cf       	rjmp	.-430    	; 0x1cc0 <xTaskGenericCreate+0x58>
    1e6e:	8f ef       	ldi	r24, 0xFF	; 255
    1e70:	df 91       	pop	r29
    1e72:	cf 91       	pop	r28
    1e74:	1f 91       	pop	r17
    1e76:	0f 91       	pop	r16
    1e78:	ff 90       	pop	r15
    1e7a:	ef 90       	pop	r14
    1e7c:	df 90       	pop	r13
    1e7e:	cf 90       	pop	r12
    1e80:	bf 90       	pop	r11
    1e82:	af 90       	pop	r10
    1e84:	9f 90       	pop	r9
    1e86:	8f 90       	pop	r8
    1e88:	7f 90       	pop	r7
    1e8a:	6f 90       	pop	r6
    1e8c:	5f 90       	pop	r5
    1e8e:	4f 90       	pop	r4
    1e90:	08 95       	ret

00001e92 <vTaskResume>:
    1e92:	0f 93       	push	r16
    1e94:	1f 93       	push	r17
    1e96:	cf 93       	push	r28
    1e98:	df 93       	push	r29
    1e9a:	ec 01       	movw	r28, r24
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	09 f4       	brne	.+2      	; 0x1ea2 <vTaskResume+0x10>
    1ea0:	3e c0       	rjmp	.+124    	; 0x1f1e <vTaskResume+0x8c>
    1ea2:	80 91 87 08 	lds	r24, 0x0887
    1ea6:	90 91 88 08 	lds	r25, 0x0888
    1eaa:	c8 17       	cp	r28, r24
    1eac:	d9 07       	cpc	r29, r25
    1eae:	b9 f1       	breq	.+110    	; 0x1f1e <vTaskResume+0x8c>
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	0f 92       	push	r0
    1eb6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eb8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eba:	88 52       	subi	r24, 0x28	; 40
    1ebc:	98 40       	sbci	r25, 0x08	; 8
    1ebe:	69 f5       	brne	.+90     	; 0x1f1a <vTaskResume+0x88>
    1ec0:	8c 89       	ldd	r24, Y+20	; 0x14
    1ec2:	9d 89       	ldd	r25, Y+21	; 0x15
    1ec4:	28 e0       	ldi	r18, 0x08	; 8
    1ec6:	8b 33       	cpi	r24, 0x3B	; 59
    1ec8:	92 07       	cpc	r25, r18
    1eca:	39 f1       	breq	.+78     	; 0x1f1a <vTaskResume+0x88>
    1ecc:	89 2b       	or	r24, r25
    1ece:	29 f5       	brne	.+74     	; 0x1f1a <vTaskResume+0x88>
    1ed0:	8e 01       	movw	r16, r28
    1ed2:	0e 5f       	subi	r16, 0xFE	; 254
    1ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed6:	c8 01       	movw	r24, r16
    1ed8:	0e 94 90 03 	call	0x720	; 0x720 <uxListRemove>
    1edc:	8e 89       	ldd	r24, Y+22	; 0x16
    1ede:	90 91 24 08 	lds	r25, 0x0824
    1ee2:	98 17       	cp	r25, r24
    1ee4:	10 f4       	brcc	.+4      	; 0x1eea <vTaskResume+0x58>
    1ee6:	80 93 24 08 	sts	0x0824, r24
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	9c 01       	movw	r18, r24
    1eee:	22 0f       	add	r18, r18
    1ef0:	33 1f       	adc	r19, r19
    1ef2:	22 0f       	add	r18, r18
    1ef4:	33 1f       	adc	r19, r19
    1ef6:	22 0f       	add	r18, r18
    1ef8:	33 1f       	adc	r19, r19
    1efa:	82 0f       	add	r24, r18
    1efc:	93 1f       	adc	r25, r19
    1efe:	b8 01       	movw	r22, r16
    1f00:	86 5a       	subi	r24, 0xA6	; 166
    1f02:	97 4f       	sbci	r25, 0xF7	; 247
    1f04:	0e 94 3e 03 	call	0x67c	; 0x67c <vListInsertEnd>
    1f08:	e0 91 87 08 	lds	r30, 0x0887
    1f0c:	f0 91 88 08 	lds	r31, 0x0888
    1f10:	9e 89       	ldd	r25, Y+22	; 0x16
    1f12:	86 89       	ldd	r24, Z+22	; 0x16
    1f14:	98 17       	cp	r25, r24
    1f16:	08 f0       	brcs	.+2      	; 0x1f1a <vTaskResume+0x88>
    1f18:	6f da       	rcall	.-2850   	; 0x13f8 <vPortYield>
    1f1a:	0f 90       	pop	r0
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	df 91       	pop	r29
    1f20:	cf 91       	pop	r28
    1f22:	1f 91       	pop	r17
    1f24:	0f 91       	pop	r16
    1f26:	08 95       	ret

00001f28 <vTaskStartScheduler>:
    1f28:	af 92       	push	r10
    1f2a:	bf 92       	push	r11
    1f2c:	cf 92       	push	r12
    1f2e:	df 92       	push	r13
    1f30:	ef 92       	push	r14
    1f32:	ff 92       	push	r15
    1f34:	0f 93       	push	r16
    1f36:	a1 2c       	mov	r10, r1
    1f38:	b1 2c       	mov	r11, r1
    1f3a:	c1 2c       	mov	r12, r1
    1f3c:	d1 2c       	mov	r13, r1
    1f3e:	e1 2c       	mov	r14, r1
    1f40:	f1 2c       	mov	r15, r1
    1f42:	00 e0       	ldi	r16, 0x00	; 0
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	45 e5       	ldi	r20, 0x55	; 85
    1f4a:	50 e0       	ldi	r21, 0x00	; 0
    1f4c:	63 e3       	ldi	r22, 0x33	; 51
    1f4e:	72 e0       	ldi	r23, 0x02	; 2
    1f50:	8f e4       	ldi	r24, 0x4F	; 79
    1f52:	91 e1       	ldi	r25, 0x11	; 17
    1f54:	89 de       	rcall	.-750    	; 0x1c68 <xTaskGenericCreate>
    1f56:	81 30       	cpi	r24, 0x01	; 1
    1f58:	41 f4       	brne	.+16     	; 0x1f6a <vTaskStartScheduler+0x42>
    1f5a:	f8 94       	cli
    1f5c:	80 93 23 08 	sts	0x0823, r24
    1f60:	10 92 26 08 	sts	0x0826, r1
    1f64:	10 92 25 08 	sts	0x0825, r1
    1f68:	0a da       	rcall	.-3052   	; 0x137e <xPortStartScheduler>
    1f6a:	0f 91       	pop	r16
    1f6c:	ff 90       	pop	r15
    1f6e:	ef 90       	pop	r14
    1f70:	df 90       	pop	r13
    1f72:	cf 90       	pop	r12
    1f74:	bf 90       	pop	r11
    1f76:	af 90       	pop	r10
    1f78:	08 95       	ret

00001f7a <vTaskSuspendAll>:
    1f7a:	80 91 1e 08 	lds	r24, 0x081E
    1f7e:	8f 5f       	subi	r24, 0xFF	; 255
    1f80:	80 93 1e 08 	sts	0x081E, r24
    1f84:	08 95       	ret

00001f86 <xTaskGetTickCount>:
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	0f 92       	push	r0
    1f8c:	80 91 25 08 	lds	r24, 0x0825
    1f90:	90 91 26 08 	lds	r25, 0x0826
    1f94:	0f 90       	pop	r0
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	08 95       	ret

00001f9a <xTaskGetTickCountFromISR>:
    1f9a:	80 91 25 08 	lds	r24, 0x0825
    1f9e:	90 91 26 08 	lds	r25, 0x0826
    1fa2:	08 95       	ret

00001fa4 <xTaskIncrementTick>:
    1fa4:	cf 92       	push	r12
    1fa6:	df 92       	push	r13
    1fa8:	ef 92       	push	r14
    1faa:	ff 92       	push	r15
    1fac:	0f 93       	push	r16
    1fae:	1f 93       	push	r17
    1fb0:	cf 93       	push	r28
    1fb2:	df 93       	push	r29
    1fb4:	80 91 1e 08 	lds	r24, 0x081E
    1fb8:	81 11       	cpse	r24, r1
    1fba:	99 c0       	rjmp	.+306    	; 0x20ee <xTaskIncrementTick+0x14a>
    1fbc:	80 91 25 08 	lds	r24, 0x0825
    1fc0:	90 91 26 08 	lds	r25, 0x0826
    1fc4:	01 96       	adiw	r24, 0x01	; 1
    1fc6:	90 93 26 08 	sts	0x0826, r25
    1fca:	80 93 25 08 	sts	0x0825, r24
    1fce:	e0 90 25 08 	lds	r14, 0x0825
    1fd2:	f0 90 26 08 	lds	r15, 0x0826
    1fd6:	e1 14       	cp	r14, r1
    1fd8:	f1 04       	cpc	r15, r1
    1fda:	b1 f4       	brne	.+44     	; 0x2008 <xTaskIncrementTick+0x64>
    1fdc:	80 91 46 08 	lds	r24, 0x0846
    1fe0:	90 91 47 08 	lds	r25, 0x0847
    1fe4:	20 91 44 08 	lds	r18, 0x0844
    1fe8:	30 91 45 08 	lds	r19, 0x0845
    1fec:	30 93 47 08 	sts	0x0847, r19
    1ff0:	20 93 46 08 	sts	0x0846, r18
    1ff4:	90 93 45 08 	sts	0x0845, r25
    1ff8:	80 93 44 08 	sts	0x0844, r24
    1ffc:	80 91 20 08 	lds	r24, 0x0820
    2000:	8f 5f       	subi	r24, 0xFF	; 255
    2002:	80 93 20 08 	sts	0x0820, r24
    2006:	da dd       	rcall	.-1100   	; 0x1bbc <prvResetNextTaskUnblockTime>
    2008:	80 91 05 02 	lds	r24, 0x0205
    200c:	90 91 06 02 	lds	r25, 0x0206
    2010:	e8 16       	cp	r14, r24
    2012:	f9 06       	cpc	r15, r25
    2014:	08 f4       	brcc	.+2      	; 0x2018 <xTaskIncrementTick+0x74>
    2016:	54 c0       	rjmp	.+168    	; 0x20c0 <xTaskIncrementTick+0x11c>
    2018:	d1 2c       	mov	r13, r1
    201a:	cc 24       	eor	r12, r12
    201c:	c3 94       	inc	r12
    201e:	01 c0       	rjmp	.+2      	; 0x2022 <xTaskIncrementTick+0x7e>
    2020:	dc 2c       	mov	r13, r12
    2022:	e0 91 46 08 	lds	r30, 0x0846
    2026:	f0 91 47 08 	lds	r31, 0x0847
    202a:	80 81       	ld	r24, Z
    202c:	81 11       	cpse	r24, r1
    202e:	07 c0       	rjmp	.+14     	; 0x203e <xTaskIncrementTick+0x9a>
    2030:	8f ef       	ldi	r24, 0xFF	; 255
    2032:	9f ef       	ldi	r25, 0xFF	; 255
    2034:	90 93 06 02 	sts	0x0206, r25
    2038:	80 93 05 02 	sts	0x0205, r24
    203c:	42 c0       	rjmp	.+132    	; 0x20c2 <xTaskIncrementTick+0x11e>
    203e:	e0 91 46 08 	lds	r30, 0x0846
    2042:	f0 91 47 08 	lds	r31, 0x0847
    2046:	05 80       	ldd	r0, Z+5	; 0x05
    2048:	f6 81       	ldd	r31, Z+6	; 0x06
    204a:	e0 2d       	mov	r30, r0
    204c:	c6 81       	ldd	r28, Z+6	; 0x06
    204e:	d7 81       	ldd	r29, Z+7	; 0x07
    2050:	2a 81       	ldd	r18, Y+2	; 0x02
    2052:	3b 81       	ldd	r19, Y+3	; 0x03
    2054:	e2 16       	cp	r14, r18
    2056:	f3 06       	cpc	r15, r19
    2058:	28 f4       	brcc	.+10     	; 0x2064 <xTaskIncrementTick+0xc0>
    205a:	30 93 06 02 	sts	0x0206, r19
    205e:	20 93 05 02 	sts	0x0205, r18
    2062:	2f c0       	rjmp	.+94     	; 0x20c2 <xTaskIncrementTick+0x11e>
    2064:	8e 01       	movw	r16, r28
    2066:	0e 5f       	subi	r16, 0xFE	; 254
    2068:	1f 4f       	sbci	r17, 0xFF	; 255
    206a:	c8 01       	movw	r24, r16
    206c:	0e 94 90 03 	call	0x720	; 0x720 <uxListRemove>
    2070:	8c 89       	ldd	r24, Y+20	; 0x14
    2072:	9d 89       	ldd	r25, Y+21	; 0x15
    2074:	89 2b       	or	r24, r25
    2076:	21 f0       	breq	.+8      	; 0x2080 <xTaskIncrementTick+0xdc>
    2078:	ce 01       	movw	r24, r28
    207a:	0c 96       	adiw	r24, 0x0c	; 12
    207c:	0e 94 90 03 	call	0x720	; 0x720 <uxListRemove>
    2080:	2e 89       	ldd	r18, Y+22	; 0x16
    2082:	80 91 24 08 	lds	r24, 0x0824
    2086:	82 17       	cp	r24, r18
    2088:	10 f4       	brcc	.+4      	; 0x208e <xTaskIncrementTick+0xea>
    208a:	20 93 24 08 	sts	0x0824, r18
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	c9 01       	movw	r24, r18
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	88 0f       	add	r24, r24
    2098:	99 1f       	adc	r25, r25
    209a:	88 0f       	add	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	82 0f       	add	r24, r18
    20a0:	93 1f       	adc	r25, r19
    20a2:	b8 01       	movw	r22, r16
    20a4:	86 5a       	subi	r24, 0xA6	; 166
    20a6:	97 4f       	sbci	r25, 0xF7	; 247
    20a8:	0e 94 3e 03 	call	0x67c	; 0x67c <vListInsertEnd>
    20ac:	e0 91 87 08 	lds	r30, 0x0887
    20b0:	f0 91 88 08 	lds	r31, 0x0888
    20b4:	9e 89       	ldd	r25, Y+22	; 0x16
    20b6:	86 89       	ldd	r24, Z+22	; 0x16
    20b8:	98 17       	cp	r25, r24
    20ba:	08 f0       	brcs	.+2      	; 0x20be <xTaskIncrementTick+0x11a>
    20bc:	b1 cf       	rjmp	.-158    	; 0x2020 <xTaskIncrementTick+0x7c>
    20be:	b1 cf       	rjmp	.-158    	; 0x2022 <xTaskIncrementTick+0x7e>
    20c0:	d1 2c       	mov	r13, r1
    20c2:	e0 91 87 08 	lds	r30, 0x0887
    20c6:	f0 91 88 08 	lds	r31, 0x0888
    20ca:	86 89       	ldd	r24, Z+22	; 0x16
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	fc 01       	movw	r30, r24
    20d0:	ee 0f       	add	r30, r30
    20d2:	ff 1f       	adc	r31, r31
    20d4:	ee 0f       	add	r30, r30
    20d6:	ff 1f       	adc	r31, r31
    20d8:	ee 0f       	add	r30, r30
    20da:	ff 1f       	adc	r31, r31
    20dc:	8e 0f       	add	r24, r30
    20de:	9f 1f       	adc	r25, r31
    20e0:	fc 01       	movw	r30, r24
    20e2:	e6 5a       	subi	r30, 0xA6	; 166
    20e4:	f7 4f       	sbci	r31, 0xF7	; 247
    20e6:	80 81       	ld	r24, Z
    20e8:	82 30       	cpi	r24, 0x02	; 2
    20ea:	40 f4       	brcc	.+16     	; 0x20fc <xTaskIncrementTick+0x158>
    20ec:	09 c0       	rjmp	.+18     	; 0x2100 <xTaskIncrementTick+0x15c>
    20ee:	80 91 22 08 	lds	r24, 0x0822
    20f2:	8f 5f       	subi	r24, 0xFF	; 255
    20f4:	80 93 22 08 	sts	0x0822, r24
    20f8:	d1 2c       	mov	r13, r1
    20fa:	02 c0       	rjmp	.+4      	; 0x2100 <xTaskIncrementTick+0x15c>
    20fc:	dd 24       	eor	r13, r13
    20fe:	d3 94       	inc	r13
    2100:	80 91 21 08 	lds	r24, 0x0821
    2104:	88 23       	and	r24, r24
    2106:	11 f0       	breq	.+4      	; 0x210c <xTaskIncrementTick+0x168>
    2108:	dd 24       	eor	r13, r13
    210a:	d3 94       	inc	r13
    210c:	8d 2d       	mov	r24, r13
    210e:	df 91       	pop	r29
    2110:	cf 91       	pop	r28
    2112:	1f 91       	pop	r17
    2114:	0f 91       	pop	r16
    2116:	ff 90       	pop	r15
    2118:	ef 90       	pop	r14
    211a:	df 90       	pop	r13
    211c:	cf 90       	pop	r12
    211e:	08 95       	ret

00002120 <xTaskResumeAll>:
    2120:	df 92       	push	r13
    2122:	ef 92       	push	r14
    2124:	ff 92       	push	r15
    2126:	0f 93       	push	r16
    2128:	1f 93       	push	r17
    212a:	cf 93       	push	r28
    212c:	df 93       	push	r29
    212e:	0f b6       	in	r0, 0x3f	; 63
    2130:	f8 94       	cli
    2132:	0f 92       	push	r0
    2134:	80 91 1e 08 	lds	r24, 0x081E
    2138:	81 50       	subi	r24, 0x01	; 1
    213a:	80 93 1e 08 	sts	0x081E, r24
    213e:	80 91 1e 08 	lds	r24, 0x081E
    2142:	81 11       	cpse	r24, r1
    2144:	5f c0       	rjmp	.+190    	; 0x2204 <__stack+0x5>
    2146:	80 91 27 08 	lds	r24, 0x0827
    214a:	88 23       	and	r24, r24
    214c:	09 f4       	brne	.+2      	; 0x2150 <xTaskResumeAll+0x30>
    214e:	5c c0       	rjmp	.+184    	; 0x2208 <__stack+0x9>
    2150:	0f 2e       	mov	r0, r31
    2152:	fb e3       	ldi	r31, 0x3B	; 59
    2154:	ef 2e       	mov	r14, r31
    2156:	f8 e0       	ldi	r31, 0x08	; 8
    2158:	ff 2e       	mov	r15, r31
    215a:	f0 2d       	mov	r31, r0
    215c:	dd 24       	eor	r13, r13
    215e:	d3 94       	inc	r13
    2160:	30 c0       	rjmp	.+96     	; 0x21c2 <xTaskResumeAll+0xa2>
    2162:	e0 91 40 08 	lds	r30, 0x0840
    2166:	f0 91 41 08 	lds	r31, 0x0841
    216a:	c6 81       	ldd	r28, Z+6	; 0x06
    216c:	d7 81       	ldd	r29, Z+7	; 0x07
    216e:	ce 01       	movw	r24, r28
    2170:	0c 96       	adiw	r24, 0x0c	; 12
    2172:	0e 94 90 03 	call	0x720	; 0x720 <uxListRemove>
    2176:	8e 01       	movw	r16, r28
    2178:	0e 5f       	subi	r16, 0xFE	; 254
    217a:	1f 4f       	sbci	r17, 0xFF	; 255
    217c:	c8 01       	movw	r24, r16
    217e:	0e 94 90 03 	call	0x720	; 0x720 <uxListRemove>
    2182:	8e 89       	ldd	r24, Y+22	; 0x16
    2184:	90 91 24 08 	lds	r25, 0x0824
    2188:	98 17       	cp	r25, r24
    218a:	10 f4       	brcc	.+4      	; 0x2190 <xTaskResumeAll+0x70>
    218c:	80 93 24 08 	sts	0x0824, r24
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	9c 01       	movw	r18, r24
    2194:	22 0f       	add	r18, r18
    2196:	33 1f       	adc	r19, r19
    2198:	22 0f       	add	r18, r18
    219a:	33 1f       	adc	r19, r19
    219c:	22 0f       	add	r18, r18
    219e:	33 1f       	adc	r19, r19
    21a0:	82 0f       	add	r24, r18
    21a2:	93 1f       	adc	r25, r19
    21a4:	b8 01       	movw	r22, r16
    21a6:	86 5a       	subi	r24, 0xA6	; 166
    21a8:	97 4f       	sbci	r25, 0xF7	; 247
    21aa:	0e 94 3e 03 	call	0x67c	; 0x67c <vListInsertEnd>
    21ae:	e0 91 87 08 	lds	r30, 0x0887
    21b2:	f0 91 88 08 	lds	r31, 0x0888
    21b6:	9e 89       	ldd	r25, Y+22	; 0x16
    21b8:	86 89       	ldd	r24, Z+22	; 0x16
    21ba:	98 17       	cp	r25, r24
    21bc:	10 f0       	brcs	.+4      	; 0x21c2 <xTaskResumeAll+0xa2>
    21be:	d0 92 21 08 	sts	0x0821, r13
    21c2:	f7 01       	movw	r30, r14
    21c4:	80 81       	ld	r24, Z
    21c6:	81 11       	cpse	r24, r1
    21c8:	cc cf       	rjmp	.-104    	; 0x2162 <xTaskResumeAll+0x42>
    21ca:	80 91 22 08 	lds	r24, 0x0822
    21ce:	88 23       	and	r24, r24
    21d0:	91 f0       	breq	.+36     	; 0x21f6 <xTaskResumeAll+0xd6>
    21d2:	80 91 22 08 	lds	r24, 0x0822
    21d6:	88 23       	and	r24, r24
    21d8:	71 f0       	breq	.+28     	; 0x21f6 <xTaskResumeAll+0xd6>
    21da:	c1 e0       	ldi	r28, 0x01	; 1
    21dc:	e3 de       	rcall	.-570    	; 0x1fa4 <xTaskIncrementTick>
    21de:	81 11       	cpse	r24, r1
    21e0:	c0 93 21 08 	sts	0x0821, r28
    21e4:	80 91 22 08 	lds	r24, 0x0822
    21e8:	81 50       	subi	r24, 0x01	; 1
    21ea:	80 93 22 08 	sts	0x0822, r24
    21ee:	80 91 22 08 	lds	r24, 0x0822
    21f2:	81 11       	cpse	r24, r1
    21f4:	f3 cf       	rjmp	.-26     	; 0x21dc <xTaskResumeAll+0xbc>
    21f6:	80 91 21 08 	lds	r24, 0x0821
    21fa:	81 30       	cpi	r24, 0x01	; 1
    21fc:	39 f4       	brne	.+14     	; 0x220c <__stack+0xd>
    21fe:	fc d8       	rcall	.-3592   	; 0x13f8 <vPortYield>
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	05 c0       	rjmp	.+10     	; 0x220e <__stack+0xf>
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	03 c0       	rjmp	.+6      	; 0x220e <__stack+0xf>
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	01 c0       	rjmp	.+2      	; 0x220e <__stack+0xf>
    220c:	80 e0       	ldi	r24, 0x00	; 0
    220e:	0f 90       	pop	r0
    2210:	0f be       	out	0x3f, r0	; 63
    2212:	df 91       	pop	r29
    2214:	cf 91       	pop	r28
    2216:	1f 91       	pop	r17
    2218:	0f 91       	pop	r16
    221a:	ff 90       	pop	r15
    221c:	ef 90       	pop	r14
    221e:	df 90       	pop	r13
    2220:	08 95       	ret

00002222 <vTaskDelayUntil>:
    2222:	0f 93       	push	r16
    2224:	1f 93       	push	r17
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	8c 01       	movw	r16, r24
    222c:	eb 01       	movw	r28, r22
    222e:	a5 de       	rcall	.-694    	; 0x1f7a <vTaskSuspendAll>
    2230:	80 91 25 08 	lds	r24, 0x0825
    2234:	90 91 26 08 	lds	r25, 0x0826
    2238:	f8 01       	movw	r30, r16
    223a:	20 81       	ld	r18, Z
    223c:	31 81       	ldd	r19, Z+1	; 0x01
    223e:	c2 0f       	add	r28, r18
    2240:	d3 1f       	adc	r29, r19
    2242:	82 17       	cp	r24, r18
    2244:	93 07       	cpc	r25, r19
    2246:	48 f4       	brcc	.+18     	; 0x225a <vTaskDelayUntil+0x38>
    2248:	c2 17       	cp	r28, r18
    224a:	d3 07       	cpc	r29, r19
    224c:	f8 f4       	brcc	.+62     	; 0x228c <vTaskDelayUntil+0x6a>
    224e:	d1 83       	std	Z+1, r29	; 0x01
    2250:	c0 83       	st	Z, r28
    2252:	8c 17       	cp	r24, r28
    2254:	9d 07       	cpc	r25, r29
    2256:	88 f4       	brcc	.+34     	; 0x227a <vTaskDelayUntil+0x58>
    2258:	07 c0       	rjmp	.+14     	; 0x2268 <vTaskDelayUntil+0x46>
    225a:	c2 17       	cp	r28, r18
    225c:	d3 07       	cpc	r29, r19
    225e:	90 f0       	brcs	.+36     	; 0x2284 <vTaskDelayUntil+0x62>
    2260:	8c 17       	cp	r24, r28
    2262:	9d 07       	cpc	r25, r29
    2264:	78 f0       	brcs	.+30     	; 0x2284 <vTaskDelayUntil+0x62>
    2266:	12 c0       	rjmp	.+36     	; 0x228c <vTaskDelayUntil+0x6a>
    2268:	80 91 87 08 	lds	r24, 0x0887
    226c:	90 91 88 08 	lds	r25, 0x0888
    2270:	02 96       	adiw	r24, 0x02	; 2
    2272:	0e 94 90 03 	call	0x720	; 0x720 <uxListRemove>
    2276:	ce 01       	movw	r24, r28
    2278:	c0 dc       	rcall	.-1664   	; 0x1bfa <prvAddCurrentTaskToDelayedList>
    227a:	52 df       	rcall	.-348    	; 0x2120 <xTaskResumeAll>
    227c:	81 11       	cpse	r24, r1
    227e:	0a c0       	rjmp	.+20     	; 0x2294 <vTaskDelayUntil+0x72>
    2280:	bb d8       	rcall	.-3722   	; 0x13f8 <vPortYield>
    2282:	08 c0       	rjmp	.+16     	; 0x2294 <vTaskDelayUntil+0x72>
    2284:	f8 01       	movw	r30, r16
    2286:	d1 83       	std	Z+1, r29	; 0x01
    2288:	c0 83       	st	Z, r28
    228a:	ee cf       	rjmp	.-36     	; 0x2268 <vTaskDelayUntil+0x46>
    228c:	f8 01       	movw	r30, r16
    228e:	d1 83       	std	Z+1, r29	; 0x01
    2290:	c0 83       	st	Z, r28
    2292:	f3 cf       	rjmp	.-26     	; 0x227a <vTaskDelayUntil+0x58>
    2294:	df 91       	pop	r29
    2296:	cf 91       	pop	r28
    2298:	1f 91       	pop	r17
    229a:	0f 91       	pop	r16
    229c:	08 95       	ret

0000229e <prvIdleTask>:
    229e:	0f 2e       	mov	r0, r31
    22a0:	fa e5       	ldi	r31, 0x5A	; 90
    22a2:	ef 2e       	mov	r14, r31
    22a4:	f8 e0       	ldi	r31, 0x08	; 8
    22a6:	ff 2e       	mov	r15, r31
    22a8:	f0 2d       	mov	r31, r0
    22aa:	c2 e3       	ldi	r28, 0x32	; 50
    22ac:	d8 e0       	ldi	r29, 0x08	; 8
    22ae:	26 c0       	rjmp	.+76     	; 0x22fc <prvIdleTask+0x5e>
    22b0:	64 de       	rcall	.-824    	; 0x1f7a <vTaskSuspendAll>
    22b2:	18 81       	ld	r17, Y
    22b4:	35 df       	rcall	.-406    	; 0x2120 <xTaskResumeAll>
    22b6:	11 23       	and	r17, r17
    22b8:	09 f1       	breq	.+66     	; 0x22fc <prvIdleTask+0x5e>
    22ba:	0f b6       	in	r0, 0x3f	; 63
    22bc:	f8 94       	cli
    22be:	0f 92       	push	r0
    22c0:	e0 91 37 08 	lds	r30, 0x0837
    22c4:	f0 91 38 08 	lds	r31, 0x0838
    22c8:	06 81       	ldd	r16, Z+6	; 0x06
    22ca:	17 81       	ldd	r17, Z+7	; 0x07
    22cc:	c8 01       	movw	r24, r16
    22ce:	02 96       	adiw	r24, 0x02	; 2
    22d0:	0e 94 90 03 	call	0x720	; 0x720 <uxListRemove>
    22d4:	80 91 27 08 	lds	r24, 0x0827
    22d8:	81 50       	subi	r24, 0x01	; 1
    22da:	80 93 27 08 	sts	0x0827, r24
    22de:	80 91 31 08 	lds	r24, 0x0831
    22e2:	81 50       	subi	r24, 0x01	; 1
    22e4:	80 93 31 08 	sts	0x0831, r24
    22e8:	0f 90       	pop	r0
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	f8 01       	movw	r30, r16
    22ee:	87 89       	ldd	r24, Z+23	; 0x17
    22f0:	90 8d       	ldd	r25, Z+24	; 0x18
    22f2:	0e 94 2b 03 	call	0x656	; 0x656 <vPortFree>
    22f6:	c8 01       	movw	r24, r16
    22f8:	0e 94 2b 03 	call	0x656	; 0x656 <vPortFree>
    22fc:	80 91 31 08 	lds	r24, 0x0831
    2300:	81 11       	cpse	r24, r1
    2302:	d6 cf       	rjmp	.-84     	; 0x22b0 <prvIdleTask+0x12>
    2304:	f7 01       	movw	r30, r14
    2306:	80 81       	ld	r24, Z
    2308:	82 30       	cpi	r24, 0x02	; 2
    230a:	c0 f3       	brcs	.-16     	; 0x22fc <prvIdleTask+0x5e>
    230c:	75 d8       	rcall	.-3862   	; 0x13f8 <vPortYield>
    230e:	f6 cf       	rjmp	.-20     	; 0x22fc <prvIdleTask+0x5e>

00002310 <vTaskSwitchContext>:
    2310:	80 91 1e 08 	lds	r24, 0x081E
    2314:	88 23       	and	r24, r24
    2316:	21 f0       	breq	.+8      	; 0x2320 <vTaskSwitchContext+0x10>
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	80 93 21 08 	sts	0x0821, r24
    231e:	08 95       	ret
    2320:	10 92 21 08 	sts	0x0821, r1
    2324:	80 91 24 08 	lds	r24, 0x0824
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	fc 01       	movw	r30, r24
    232c:	ee 0f       	add	r30, r30
    232e:	ff 1f       	adc	r31, r31
    2330:	ee 0f       	add	r30, r30
    2332:	ff 1f       	adc	r31, r31
    2334:	ee 0f       	add	r30, r30
    2336:	ff 1f       	adc	r31, r31
    2338:	8e 0f       	add	r24, r30
    233a:	9f 1f       	adc	r25, r31
    233c:	fc 01       	movw	r30, r24
    233e:	e6 5a       	subi	r30, 0xA6	; 166
    2340:	f7 4f       	sbci	r31, 0xF7	; 247
    2342:	80 81       	ld	r24, Z
    2344:	81 11       	cpse	r24, r1
    2346:	17 c0       	rjmp	.+46     	; 0x2376 <vTaskSwitchContext+0x66>
    2348:	80 91 24 08 	lds	r24, 0x0824
    234c:	81 50       	subi	r24, 0x01	; 1
    234e:	80 93 24 08 	sts	0x0824, r24
    2352:	80 91 24 08 	lds	r24, 0x0824
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	fc 01       	movw	r30, r24
    235a:	ee 0f       	add	r30, r30
    235c:	ff 1f       	adc	r31, r31
    235e:	ee 0f       	add	r30, r30
    2360:	ff 1f       	adc	r31, r31
    2362:	ee 0f       	add	r30, r30
    2364:	ff 1f       	adc	r31, r31
    2366:	8e 0f       	add	r24, r30
    2368:	9f 1f       	adc	r25, r31
    236a:	fc 01       	movw	r30, r24
    236c:	e6 5a       	subi	r30, 0xA6	; 166
    236e:	f7 4f       	sbci	r31, 0xF7	; 247
    2370:	80 81       	ld	r24, Z
    2372:	88 23       	and	r24, r24
    2374:	49 f3       	breq	.-46     	; 0x2348 <vTaskSwitchContext+0x38>
    2376:	e0 91 24 08 	lds	r30, 0x0824
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	cf 01       	movw	r24, r30
    237e:	88 0f       	add	r24, r24
    2380:	99 1f       	adc	r25, r25
    2382:	88 0f       	add	r24, r24
    2384:	99 1f       	adc	r25, r25
    2386:	88 0f       	add	r24, r24
    2388:	99 1f       	adc	r25, r25
    238a:	e8 0f       	add	r30, r24
    238c:	f9 1f       	adc	r31, r25
    238e:	e6 5a       	subi	r30, 0xA6	; 166
    2390:	f7 4f       	sbci	r31, 0xF7	; 247
    2392:	a1 81       	ldd	r26, Z+1	; 0x01
    2394:	b2 81       	ldd	r27, Z+2	; 0x02
    2396:	12 96       	adiw	r26, 0x02	; 2
    2398:	0d 90       	ld	r0, X+
    239a:	bc 91       	ld	r27, X
    239c:	a0 2d       	mov	r26, r0
    239e:	b2 83       	std	Z+2, r27	; 0x02
    23a0:	a1 83       	std	Z+1, r26	; 0x01
    23a2:	cf 01       	movw	r24, r30
    23a4:	03 96       	adiw	r24, 0x03	; 3
    23a6:	a8 17       	cp	r26, r24
    23a8:	b9 07       	cpc	r27, r25
    23aa:	31 f4       	brne	.+12     	; 0x23b8 <vTaskSwitchContext+0xa8>
    23ac:	12 96       	adiw	r26, 0x02	; 2
    23ae:	8d 91       	ld	r24, X+
    23b0:	9c 91       	ld	r25, X
    23b2:	13 97       	sbiw	r26, 0x03	; 3
    23b4:	92 83       	std	Z+2, r25	; 0x02
    23b6:	81 83       	std	Z+1, r24	; 0x01
    23b8:	01 80       	ldd	r0, Z+1	; 0x01
    23ba:	f2 81       	ldd	r31, Z+2	; 0x02
    23bc:	e0 2d       	mov	r30, r0
    23be:	86 81       	ldd	r24, Z+6	; 0x06
    23c0:	97 81       	ldd	r25, Z+7	; 0x07
    23c2:	90 93 88 08 	sts	0x0888, r25
    23c6:	80 93 87 08 	sts	0x0887, r24
    23ca:	08 95       	ret

000023cc <vTaskSuspend>:
    23cc:	0f 93       	push	r16
    23ce:	1f 93       	push	r17
    23d0:	cf 93       	push	r28
    23d2:	df 93       	push	r29
    23d4:	ec 01       	movw	r28, r24
    23d6:	0f b6       	in	r0, 0x3f	; 63
    23d8:	f8 94       	cli
    23da:	0f 92       	push	r0
    23dc:	00 97       	sbiw	r24, 0x00	; 0
    23de:	21 f4       	brne	.+8      	; 0x23e8 <vTaskSuspend+0x1c>
    23e0:	c0 91 87 08 	lds	r28, 0x0887
    23e4:	d0 91 88 08 	lds	r29, 0x0888
    23e8:	8e 01       	movw	r16, r28
    23ea:	0e 5f       	subi	r16, 0xFE	; 254
    23ec:	1f 4f       	sbci	r17, 0xFF	; 255
    23ee:	c8 01       	movw	r24, r16
    23f0:	0e 94 90 03 	call	0x720	; 0x720 <uxListRemove>
    23f4:	8c 89       	ldd	r24, Y+20	; 0x14
    23f6:	9d 89       	ldd	r25, Y+21	; 0x15
    23f8:	89 2b       	or	r24, r25
    23fa:	21 f0       	breq	.+8      	; 0x2404 <vTaskSuspend+0x38>
    23fc:	ce 01       	movw	r24, r28
    23fe:	0c 96       	adiw	r24, 0x0c	; 12
    2400:	0e 94 90 03 	call	0x720	; 0x720 <uxListRemove>
    2404:	b8 01       	movw	r22, r16
    2406:	88 e2       	ldi	r24, 0x28	; 40
    2408:	98 e0       	ldi	r25, 0x08	; 8
    240a:	0e 94 3e 03 	call	0x67c	; 0x67c <vListInsertEnd>
    240e:	0f 90       	pop	r0
    2410:	0f be       	out	0x3f, r0	; 63
    2412:	80 91 87 08 	lds	r24, 0x0887
    2416:	90 91 88 08 	lds	r25, 0x0888
    241a:	c8 17       	cp	r28, r24
    241c:	d9 07       	cpc	r29, r25
    241e:	a1 f4       	brne	.+40     	; 0x2448 <vTaskSuspend+0x7c>
    2420:	80 91 23 08 	lds	r24, 0x0823
    2424:	88 23       	and	r24, r24
    2426:	19 f0       	breq	.+6      	; 0x242e <vTaskSuspend+0x62>
    2428:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <vPortYield>
    242c:	17 c0       	rjmp	.+46     	; 0x245c <vTaskSuspend+0x90>
    242e:	80 91 27 08 	lds	r24, 0x0827
    2432:	90 91 28 08 	lds	r25, 0x0828
    2436:	98 13       	cpse	r25, r24
    2438:	05 c0       	rjmp	.+10     	; 0x2444 <vTaskSuspend+0x78>
    243a:	10 92 88 08 	sts	0x0888, r1
    243e:	10 92 87 08 	sts	0x0887, r1
    2442:	0c c0       	rjmp	.+24     	; 0x245c <vTaskSuspend+0x90>
    2444:	65 df       	rcall	.-310    	; 0x2310 <vTaskSwitchContext>
    2446:	0a c0       	rjmp	.+20     	; 0x245c <vTaskSuspend+0x90>
    2448:	80 91 23 08 	lds	r24, 0x0823
    244c:	88 23       	and	r24, r24
    244e:	31 f0       	breq	.+12     	; 0x245c <vTaskSuspend+0x90>
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	f8 94       	cli
    2454:	0f 92       	push	r0
    2456:	b2 db       	rcall	.-2204   	; 0x1bbc <prvResetNextTaskUnblockTime>
    2458:	0f 90       	pop	r0
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	df 91       	pop	r29
    245e:	cf 91       	pop	r28
    2460:	1f 91       	pop	r17
    2462:	0f 91       	pop	r16
    2464:	08 95       	ret

00002466 <vTaskPlaceOnEventList>:
    2466:	cf 93       	push	r28
    2468:	df 93       	push	r29
    246a:	eb 01       	movw	r28, r22
    246c:	60 91 87 08 	lds	r22, 0x0887
    2470:	70 91 88 08 	lds	r23, 0x0888
    2474:	64 5f       	subi	r22, 0xF4	; 244
    2476:	7f 4f       	sbci	r23, 0xFF	; 255
    2478:	0e 94 5f 03 	call	0x6be	; 0x6be <vListInsert>
    247c:	80 91 87 08 	lds	r24, 0x0887
    2480:	90 91 88 08 	lds	r25, 0x0888
    2484:	02 96       	adiw	r24, 0x02	; 2
    2486:	0e 94 90 03 	call	0x720	; 0x720 <uxListRemove>
    248a:	cf 3f       	cpi	r28, 0xFF	; 255
    248c:	8f ef       	ldi	r24, 0xFF	; 255
    248e:	d8 07       	cpc	r29, r24
    2490:	59 f4       	brne	.+22     	; 0x24a8 <vTaskPlaceOnEventList+0x42>
    2492:	60 91 87 08 	lds	r22, 0x0887
    2496:	70 91 88 08 	lds	r23, 0x0888
    249a:	6e 5f       	subi	r22, 0xFE	; 254
    249c:	7f 4f       	sbci	r23, 0xFF	; 255
    249e:	88 e2       	ldi	r24, 0x28	; 40
    24a0:	98 e0       	ldi	r25, 0x08	; 8
    24a2:	0e 94 3e 03 	call	0x67c	; 0x67c <vListInsertEnd>
    24a6:	07 c0       	rjmp	.+14     	; 0x24b6 <vTaskPlaceOnEventList+0x50>
    24a8:	80 91 25 08 	lds	r24, 0x0825
    24ac:	90 91 26 08 	lds	r25, 0x0826
    24b0:	8c 0f       	add	r24, r28
    24b2:	9d 1f       	adc	r25, r29
    24b4:	a2 db       	rcall	.-2236   	; 0x1bfa <prvAddCurrentTaskToDelayedList>
    24b6:	df 91       	pop	r29
    24b8:	cf 91       	pop	r28
    24ba:	08 95       	ret

000024bc <xTaskRemoveFromEventList>:
    24bc:	0f 93       	push	r16
    24be:	1f 93       	push	r17
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	dc 01       	movw	r26, r24
    24c6:	15 96       	adiw	r26, 0x05	; 5
    24c8:	ed 91       	ld	r30, X+
    24ca:	fc 91       	ld	r31, X
    24cc:	16 97       	sbiw	r26, 0x06	; 6
    24ce:	c6 81       	ldd	r28, Z+6	; 0x06
    24d0:	d7 81       	ldd	r29, Z+7	; 0x07
    24d2:	8e 01       	movw	r16, r28
    24d4:	04 5f       	subi	r16, 0xF4	; 244
    24d6:	1f 4f       	sbci	r17, 0xFF	; 255
    24d8:	c8 01       	movw	r24, r16
    24da:	0e 94 90 03 	call	0x720	; 0x720 <uxListRemove>
    24de:	80 91 1e 08 	lds	r24, 0x081E
    24e2:	81 11       	cpse	r24, r1
    24e4:	1c c0       	rjmp	.+56     	; 0x251e <xTaskRemoveFromEventList+0x62>
    24e6:	0a 50       	subi	r16, 0x0A	; 10
    24e8:	11 09       	sbc	r17, r1
    24ea:	c8 01       	movw	r24, r16
    24ec:	0e 94 90 03 	call	0x720	; 0x720 <uxListRemove>
    24f0:	8e 89       	ldd	r24, Y+22	; 0x16
    24f2:	90 91 24 08 	lds	r25, 0x0824
    24f6:	98 17       	cp	r25, r24
    24f8:	10 f4       	brcc	.+4      	; 0x24fe <xTaskRemoveFromEventList+0x42>
    24fa:	80 93 24 08 	sts	0x0824, r24
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	9c 01       	movw	r18, r24
    2502:	22 0f       	add	r18, r18
    2504:	33 1f       	adc	r19, r19
    2506:	22 0f       	add	r18, r18
    2508:	33 1f       	adc	r19, r19
    250a:	22 0f       	add	r18, r18
    250c:	33 1f       	adc	r19, r19
    250e:	82 0f       	add	r24, r18
    2510:	93 1f       	adc	r25, r19
    2512:	b8 01       	movw	r22, r16
    2514:	86 5a       	subi	r24, 0xA6	; 166
    2516:	97 4f       	sbci	r25, 0xF7	; 247
    2518:	0e 94 3e 03 	call	0x67c	; 0x67c <vListInsertEnd>
    251c:	05 c0       	rjmp	.+10     	; 0x2528 <xTaskRemoveFromEventList+0x6c>
    251e:	b8 01       	movw	r22, r16
    2520:	8b e3       	ldi	r24, 0x3B	; 59
    2522:	98 e0       	ldi	r25, 0x08	; 8
    2524:	0e 94 3e 03 	call	0x67c	; 0x67c <vListInsertEnd>
    2528:	e0 91 87 08 	lds	r30, 0x0887
    252c:	f0 91 88 08 	lds	r31, 0x0888
    2530:	9e 89       	ldd	r25, Y+22	; 0x16
    2532:	86 89       	ldd	r24, Z+22	; 0x16
    2534:	89 17       	cp	r24, r25
    2536:	20 f4       	brcc	.+8      	; 0x2540 <xTaskRemoveFromEventList+0x84>
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	80 93 21 08 	sts	0x0821, r24
    253e:	01 c0       	rjmp	.+2      	; 0x2542 <xTaskRemoveFromEventList+0x86>
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	df 91       	pop	r29
    2544:	cf 91       	pop	r28
    2546:	1f 91       	pop	r17
    2548:	0f 91       	pop	r16
    254a:	08 95       	ret

0000254c <vTaskSetTimeOutState>:
    254c:	20 91 20 08 	lds	r18, 0x0820
    2550:	fc 01       	movw	r30, r24
    2552:	20 83       	st	Z, r18
    2554:	20 91 25 08 	lds	r18, 0x0825
    2558:	30 91 26 08 	lds	r19, 0x0826
    255c:	32 83       	std	Z+2, r19	; 0x02
    255e:	21 83       	std	Z+1, r18	; 0x01
    2560:	08 95       	ret

00002562 <xTaskCheckForTimeOut>:
    2562:	0f b6       	in	r0, 0x3f	; 63
    2564:	f8 94       	cli
    2566:	0f 92       	push	r0
    2568:	40 91 25 08 	lds	r20, 0x0825
    256c:	50 91 26 08 	lds	r21, 0x0826
    2570:	db 01       	movw	r26, r22
    2572:	2d 91       	ld	r18, X+
    2574:	3c 91       	ld	r19, X
    2576:	2f 3f       	cpi	r18, 0xFF	; 255
    2578:	bf ef       	ldi	r27, 0xFF	; 255
    257a:	3b 07       	cpc	r19, r27
    257c:	11 f1       	breq	.+68     	; 0x25c2 <xTaskCheckForTimeOut+0x60>
    257e:	e0 91 20 08 	lds	r30, 0x0820
    2582:	dc 01       	movw	r26, r24
    2584:	fc 91       	ld	r31, X
    2586:	fe 17       	cp	r31, r30
    2588:	39 f0       	breq	.+14     	; 0x2598 <xTaskCheckForTimeOut+0x36>
    258a:	11 96       	adiw	r26, 0x01	; 1
    258c:	ed 91       	ld	r30, X+
    258e:	fc 91       	ld	r31, X
    2590:	12 97       	sbiw	r26, 0x02	; 2
    2592:	4e 17       	cp	r20, r30
    2594:	5f 07       	cpc	r21, r31
    2596:	b8 f4       	brcc	.+46     	; 0x25c6 <xTaskCheckForTimeOut+0x64>
    2598:	dc 01       	movw	r26, r24
    259a:	11 96       	adiw	r26, 0x01	; 1
    259c:	ed 91       	ld	r30, X+
    259e:	fc 91       	ld	r31, X
    25a0:	12 97       	sbiw	r26, 0x02	; 2
    25a2:	da 01       	movw	r26, r20
    25a4:	ae 1b       	sub	r26, r30
    25a6:	bf 0b       	sbc	r27, r31
    25a8:	a2 17       	cp	r26, r18
    25aa:	b3 07       	cpc	r27, r19
    25ac:	70 f4       	brcc	.+28     	; 0x25ca <xTaskCheckForTimeOut+0x68>
    25ae:	e4 1b       	sub	r30, r20
    25b0:	f5 0b       	sbc	r31, r21
    25b2:	2e 0f       	add	r18, r30
    25b4:	3f 1f       	adc	r19, r31
    25b6:	fb 01       	movw	r30, r22
    25b8:	31 83       	std	Z+1, r19	; 0x01
    25ba:	20 83       	st	Z, r18
    25bc:	c7 df       	rcall	.-114    	; 0x254c <vTaskSetTimeOutState>
    25be:	80 e0       	ldi	r24, 0x00	; 0
    25c0:	05 c0       	rjmp	.+10     	; 0x25cc <xTaskCheckForTimeOut+0x6a>
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	03 c0       	rjmp	.+6      	; 0x25cc <xTaskCheckForTimeOut+0x6a>
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	01 c0       	rjmp	.+2      	; 0x25cc <xTaskCheckForTimeOut+0x6a>
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	0f 90       	pop	r0
    25ce:	0f be       	out	0x3f, r0	; 63
    25d0:	08 95       	ret

000025d2 <vTaskMissedYield>:
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	80 93 21 08 	sts	0x0821, r24
    25d8:	08 95       	ret

000025da <vTaskPriorityInherit>:
    25da:	0f 93       	push	r16
    25dc:	1f 93       	push	r17
    25de:	cf 93       	push	r28
    25e0:	df 93       	push	r29
    25e2:	ec 01       	movw	r28, r24
    25e4:	00 97       	sbiw	r24, 0x00	; 0
    25e6:	09 f4       	brne	.+2      	; 0x25ea <vTaskPriorityInherit+0x10>
    25e8:	51 c0       	rjmp	.+162    	; 0x268c <vTaskPriorityInherit+0xb2>
    25ea:	8e 89       	ldd	r24, Y+22	; 0x16
    25ec:	e0 91 87 08 	lds	r30, 0x0887
    25f0:	f0 91 88 08 	lds	r31, 0x0888
    25f4:	96 89       	ldd	r25, Z+22	; 0x16
    25f6:	89 17       	cp	r24, r25
    25f8:	08 f0       	brcs	.+2      	; 0x25fc <vTaskPriorityInherit+0x22>
    25fa:	48 c0       	rjmp	.+144    	; 0x268c <vTaskPriorityInherit+0xb2>
    25fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    25fe:	3d 85       	ldd	r19, Y+13	; 0x0d
    2600:	33 23       	and	r19, r19
    2602:	5c f0       	brlt	.+22     	; 0x261a <vTaskPriorityInherit+0x40>
    2604:	e0 91 87 08 	lds	r30, 0x0887
    2608:	f0 91 88 08 	lds	r31, 0x0888
    260c:	96 89       	ldd	r25, Z+22	; 0x16
    260e:	25 e0       	ldi	r18, 0x05	; 5
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	29 1b       	sub	r18, r25
    2614:	31 09       	sbc	r19, r1
    2616:	3d 87       	std	Y+13, r19	; 0x0d
    2618:	2c 87       	std	Y+12, r18	; 0x0c
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	9c 01       	movw	r18, r24
    261e:	22 0f       	add	r18, r18
    2620:	33 1f       	adc	r19, r19
    2622:	22 0f       	add	r18, r18
    2624:	33 1f       	adc	r19, r19
    2626:	22 0f       	add	r18, r18
    2628:	33 1f       	adc	r19, r19
    262a:	82 0f       	add	r24, r18
    262c:	93 1f       	adc	r25, r19
    262e:	86 5a       	subi	r24, 0xA6	; 166
    2630:	97 4f       	sbci	r25, 0xF7	; 247
    2632:	2a 85       	ldd	r18, Y+10	; 0x0a
    2634:	3b 85       	ldd	r19, Y+11	; 0x0b
    2636:	28 17       	cp	r18, r24
    2638:	39 07       	cpc	r19, r25
    263a:	11 f5       	brne	.+68     	; 0x2680 <vTaskPriorityInherit+0xa6>
    263c:	8e 01       	movw	r16, r28
    263e:	0e 5f       	subi	r16, 0xFE	; 254
    2640:	1f 4f       	sbci	r17, 0xFF	; 255
    2642:	c8 01       	movw	r24, r16
    2644:	0e 94 90 03 	call	0x720	; 0x720 <uxListRemove>
    2648:	e0 91 87 08 	lds	r30, 0x0887
    264c:	f0 91 88 08 	lds	r31, 0x0888
    2650:	86 89       	ldd	r24, Z+22	; 0x16
    2652:	8e 8b       	std	Y+22, r24	; 0x16
    2654:	90 91 24 08 	lds	r25, 0x0824
    2658:	98 17       	cp	r25, r24
    265a:	10 f4       	brcc	.+4      	; 0x2660 <vTaskPriorityInherit+0x86>
    265c:	80 93 24 08 	sts	0x0824, r24
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	9c 01       	movw	r18, r24
    2664:	22 0f       	add	r18, r18
    2666:	33 1f       	adc	r19, r19
    2668:	22 0f       	add	r18, r18
    266a:	33 1f       	adc	r19, r19
    266c:	22 0f       	add	r18, r18
    266e:	33 1f       	adc	r19, r19
    2670:	82 0f       	add	r24, r18
    2672:	93 1f       	adc	r25, r19
    2674:	b8 01       	movw	r22, r16
    2676:	86 5a       	subi	r24, 0xA6	; 166
    2678:	97 4f       	sbci	r25, 0xF7	; 247
    267a:	0e 94 3e 03 	call	0x67c	; 0x67c <vListInsertEnd>
    267e:	06 c0       	rjmp	.+12     	; 0x268c <vTaskPriorityInherit+0xb2>
    2680:	e0 91 87 08 	lds	r30, 0x0887
    2684:	f0 91 88 08 	lds	r31, 0x0888
    2688:	86 89       	ldd	r24, Z+22	; 0x16
    268a:	8e 8b       	std	Y+22, r24	; 0x16
    268c:	df 91       	pop	r29
    268e:	cf 91       	pop	r28
    2690:	1f 91       	pop	r17
    2692:	0f 91       	pop	r16
    2694:	08 95       	ret

00002696 <xTaskPriorityDisinherit>:
    2696:	0f 93       	push	r16
    2698:	1f 93       	push	r17
    269a:	cf 93       	push	r28
    269c:	df 93       	push	r29
    269e:	ec 01       	movw	r28, r24
    26a0:	00 97       	sbiw	r24, 0x00	; 0
    26a2:	71 f1       	breq	.+92     	; 0x2700 <xTaskPriorityDisinherit+0x6a>
    26a4:	8a a1       	ldd	r24, Y+34	; 0x22
    26a6:	81 50       	subi	r24, 0x01	; 1
    26a8:	8a a3       	std	Y+34, r24	; 0x22
    26aa:	2e 89       	ldd	r18, Y+22	; 0x16
    26ac:	99 a1       	ldd	r25, Y+33	; 0x21
    26ae:	29 17       	cp	r18, r25
    26b0:	49 f1       	breq	.+82     	; 0x2704 <xTaskPriorityDisinherit+0x6e>
    26b2:	81 11       	cpse	r24, r1
    26b4:	29 c0       	rjmp	.+82     	; 0x2708 <xTaskPriorityDisinherit+0x72>
    26b6:	8e 01       	movw	r16, r28
    26b8:	0e 5f       	subi	r16, 0xFE	; 254
    26ba:	1f 4f       	sbci	r17, 0xFF	; 255
    26bc:	c8 01       	movw	r24, r16
    26be:	0e 94 90 03 	call	0x720	; 0x720 <uxListRemove>
    26c2:	89 a1       	ldd	r24, Y+33	; 0x21
    26c4:	8e 8b       	std	Y+22, r24	; 0x16
    26c6:	25 e0       	ldi	r18, 0x05	; 5
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	28 1b       	sub	r18, r24
    26cc:	31 09       	sbc	r19, r1
    26ce:	3d 87       	std	Y+13, r19	; 0x0d
    26d0:	2c 87       	std	Y+12, r18	; 0x0c
    26d2:	90 91 24 08 	lds	r25, 0x0824
    26d6:	98 17       	cp	r25, r24
    26d8:	10 f4       	brcc	.+4      	; 0x26de <xTaskPriorityDisinherit+0x48>
    26da:	80 93 24 08 	sts	0x0824, r24
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	9c 01       	movw	r18, r24
    26e2:	22 0f       	add	r18, r18
    26e4:	33 1f       	adc	r19, r19
    26e6:	22 0f       	add	r18, r18
    26e8:	33 1f       	adc	r19, r19
    26ea:	22 0f       	add	r18, r18
    26ec:	33 1f       	adc	r19, r19
    26ee:	82 0f       	add	r24, r18
    26f0:	93 1f       	adc	r25, r19
    26f2:	b8 01       	movw	r22, r16
    26f4:	86 5a       	subi	r24, 0xA6	; 166
    26f6:	97 4f       	sbci	r25, 0xF7	; 247
    26f8:	0e 94 3e 03 	call	0x67c	; 0x67c <vListInsertEnd>
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	05 c0       	rjmp	.+10     	; 0x270a <xTaskPriorityDisinherit+0x74>
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	03 c0       	rjmp	.+6      	; 0x270a <xTaskPriorityDisinherit+0x74>
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	01 c0       	rjmp	.+2      	; 0x270a <xTaskPriorityDisinherit+0x74>
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	df 91       	pop	r29
    270c:	cf 91       	pop	r28
    270e:	1f 91       	pop	r17
    2710:	0f 91       	pop	r16
    2712:	08 95       	ret

00002714 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    2714:	80 91 87 08 	lds	r24, 0x0887
    2718:	90 91 88 08 	lds	r25, 0x0888
    271c:	89 2b       	or	r24, r25
    271e:	39 f0       	breq	.+14     	; 0x272e <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    2720:	e0 91 87 08 	lds	r30, 0x0887
    2724:	f0 91 88 08 	lds	r31, 0x0888
    2728:	82 a1       	ldd	r24, Z+34	; 0x22
    272a:	8f 5f       	subi	r24, 0xFF	; 255
    272c:	82 a3       	std	Z+34, r24	; 0x22
		}

		return pxCurrentTCB;
    272e:	80 91 87 08 	lds	r24, 0x0887
    2732:	90 91 88 08 	lds	r25, 0x0888
	}
    2736:	08 95       	ret

00002738 <__subsf3>:
    2738:	50 58       	subi	r21, 0x80	; 128

0000273a <__addsf3>:
    273a:	bb 27       	eor	r27, r27
    273c:	aa 27       	eor	r26, r26
    273e:	0e d0       	rcall	.+28     	; 0x275c <__addsf3x>
    2740:	e5 c0       	rjmp	.+458    	; 0x290c <__fp_round>
    2742:	d6 d0       	rcall	.+428    	; 0x28f0 <__fp_pscA>
    2744:	30 f0       	brcs	.+12     	; 0x2752 <__addsf3+0x18>
    2746:	db d0       	rcall	.+438    	; 0x28fe <__fp_pscB>
    2748:	20 f0       	brcs	.+8      	; 0x2752 <__addsf3+0x18>
    274a:	31 f4       	brne	.+12     	; 0x2758 <__addsf3+0x1e>
    274c:	9f 3f       	cpi	r25, 0xFF	; 255
    274e:	11 f4       	brne	.+4      	; 0x2754 <__addsf3+0x1a>
    2750:	1e f4       	brtc	.+6      	; 0x2758 <__addsf3+0x1e>
    2752:	cb c0       	rjmp	.+406    	; 0x28ea <__fp_nan>
    2754:	0e f4       	brtc	.+2      	; 0x2758 <__addsf3+0x1e>
    2756:	e0 95       	com	r30
    2758:	e7 fb       	bst	r30, 7
    275a:	c1 c0       	rjmp	.+386    	; 0x28de <__fp_inf>

0000275c <__addsf3x>:
    275c:	e9 2f       	mov	r30, r25
    275e:	e7 d0       	rcall	.+462    	; 0x292e <__fp_split3>
    2760:	80 f3       	brcs	.-32     	; 0x2742 <__addsf3+0x8>
    2762:	ba 17       	cp	r27, r26
    2764:	62 07       	cpc	r22, r18
    2766:	73 07       	cpc	r23, r19
    2768:	84 07       	cpc	r24, r20
    276a:	95 07       	cpc	r25, r21
    276c:	18 f0       	brcs	.+6      	; 0x2774 <__addsf3x+0x18>
    276e:	71 f4       	brne	.+28     	; 0x278c <__addsf3x+0x30>
    2770:	9e f5       	brtc	.+102    	; 0x27d8 <__addsf3x+0x7c>
    2772:	ff c0       	rjmp	.+510    	; 0x2972 <__fp_zero>
    2774:	0e f4       	brtc	.+2      	; 0x2778 <__addsf3x+0x1c>
    2776:	e0 95       	com	r30
    2778:	0b 2e       	mov	r0, r27
    277a:	ba 2f       	mov	r27, r26
    277c:	a0 2d       	mov	r26, r0
    277e:	0b 01       	movw	r0, r22
    2780:	b9 01       	movw	r22, r18
    2782:	90 01       	movw	r18, r0
    2784:	0c 01       	movw	r0, r24
    2786:	ca 01       	movw	r24, r20
    2788:	a0 01       	movw	r20, r0
    278a:	11 24       	eor	r1, r1
    278c:	ff 27       	eor	r31, r31
    278e:	59 1b       	sub	r21, r25
    2790:	99 f0       	breq	.+38     	; 0x27b8 <__addsf3x+0x5c>
    2792:	59 3f       	cpi	r21, 0xF9	; 249
    2794:	50 f4       	brcc	.+20     	; 0x27aa <__addsf3x+0x4e>
    2796:	50 3e       	cpi	r21, 0xE0	; 224
    2798:	68 f1       	brcs	.+90     	; 0x27f4 <__addsf3x+0x98>
    279a:	1a 16       	cp	r1, r26
    279c:	f0 40       	sbci	r31, 0x00	; 0
    279e:	a2 2f       	mov	r26, r18
    27a0:	23 2f       	mov	r18, r19
    27a2:	34 2f       	mov	r19, r20
    27a4:	44 27       	eor	r20, r20
    27a6:	58 5f       	subi	r21, 0xF8	; 248
    27a8:	f3 cf       	rjmp	.-26     	; 0x2790 <__addsf3x+0x34>
    27aa:	46 95       	lsr	r20
    27ac:	37 95       	ror	r19
    27ae:	27 95       	ror	r18
    27b0:	a7 95       	ror	r26
    27b2:	f0 40       	sbci	r31, 0x00	; 0
    27b4:	53 95       	inc	r21
    27b6:	c9 f7       	brne	.-14     	; 0x27aa <__addsf3x+0x4e>
    27b8:	7e f4       	brtc	.+30     	; 0x27d8 <__addsf3x+0x7c>
    27ba:	1f 16       	cp	r1, r31
    27bc:	ba 0b       	sbc	r27, r26
    27be:	62 0b       	sbc	r22, r18
    27c0:	73 0b       	sbc	r23, r19
    27c2:	84 0b       	sbc	r24, r20
    27c4:	ba f0       	brmi	.+46     	; 0x27f4 <__addsf3x+0x98>
    27c6:	91 50       	subi	r25, 0x01	; 1
    27c8:	a1 f0       	breq	.+40     	; 0x27f2 <__addsf3x+0x96>
    27ca:	ff 0f       	add	r31, r31
    27cc:	bb 1f       	adc	r27, r27
    27ce:	66 1f       	adc	r22, r22
    27d0:	77 1f       	adc	r23, r23
    27d2:	88 1f       	adc	r24, r24
    27d4:	c2 f7       	brpl	.-16     	; 0x27c6 <__addsf3x+0x6a>
    27d6:	0e c0       	rjmp	.+28     	; 0x27f4 <__addsf3x+0x98>
    27d8:	ba 0f       	add	r27, r26
    27da:	62 1f       	adc	r22, r18
    27dc:	73 1f       	adc	r23, r19
    27de:	84 1f       	adc	r24, r20
    27e0:	48 f4       	brcc	.+18     	; 0x27f4 <__addsf3x+0x98>
    27e2:	87 95       	ror	r24
    27e4:	77 95       	ror	r23
    27e6:	67 95       	ror	r22
    27e8:	b7 95       	ror	r27
    27ea:	f7 95       	ror	r31
    27ec:	9e 3f       	cpi	r25, 0xFE	; 254
    27ee:	08 f0       	brcs	.+2      	; 0x27f2 <__addsf3x+0x96>
    27f0:	b3 cf       	rjmp	.-154    	; 0x2758 <__addsf3+0x1e>
    27f2:	93 95       	inc	r25
    27f4:	88 0f       	add	r24, r24
    27f6:	08 f0       	brcs	.+2      	; 0x27fa <__addsf3x+0x9e>
    27f8:	99 27       	eor	r25, r25
    27fa:	ee 0f       	add	r30, r30
    27fc:	97 95       	ror	r25
    27fe:	87 95       	ror	r24
    2800:	08 95       	ret

00002802 <__fixsfsi>:
    2802:	04 d0       	rcall	.+8      	; 0x280c <__fixunssfsi>
    2804:	68 94       	set
    2806:	b1 11       	cpse	r27, r1
    2808:	b5 c0       	rjmp	.+362    	; 0x2974 <__fp_szero>
    280a:	08 95       	ret

0000280c <__fixunssfsi>:
    280c:	98 d0       	rcall	.+304    	; 0x293e <__fp_splitA>
    280e:	88 f0       	brcs	.+34     	; 0x2832 <__fixunssfsi+0x26>
    2810:	9f 57       	subi	r25, 0x7F	; 127
    2812:	90 f0       	brcs	.+36     	; 0x2838 <__fixunssfsi+0x2c>
    2814:	b9 2f       	mov	r27, r25
    2816:	99 27       	eor	r25, r25
    2818:	b7 51       	subi	r27, 0x17	; 23
    281a:	a0 f0       	brcs	.+40     	; 0x2844 <__fixunssfsi+0x38>
    281c:	d1 f0       	breq	.+52     	; 0x2852 <__fixunssfsi+0x46>
    281e:	66 0f       	add	r22, r22
    2820:	77 1f       	adc	r23, r23
    2822:	88 1f       	adc	r24, r24
    2824:	99 1f       	adc	r25, r25
    2826:	1a f0       	brmi	.+6      	; 0x282e <__fixunssfsi+0x22>
    2828:	ba 95       	dec	r27
    282a:	c9 f7       	brne	.-14     	; 0x281e <__fixunssfsi+0x12>
    282c:	12 c0       	rjmp	.+36     	; 0x2852 <__fixunssfsi+0x46>
    282e:	b1 30       	cpi	r27, 0x01	; 1
    2830:	81 f0       	breq	.+32     	; 0x2852 <__fixunssfsi+0x46>
    2832:	9f d0       	rcall	.+318    	; 0x2972 <__fp_zero>
    2834:	b1 e0       	ldi	r27, 0x01	; 1
    2836:	08 95       	ret
    2838:	9c c0       	rjmp	.+312    	; 0x2972 <__fp_zero>
    283a:	67 2f       	mov	r22, r23
    283c:	78 2f       	mov	r23, r24
    283e:	88 27       	eor	r24, r24
    2840:	b8 5f       	subi	r27, 0xF8	; 248
    2842:	39 f0       	breq	.+14     	; 0x2852 <__fixunssfsi+0x46>
    2844:	b9 3f       	cpi	r27, 0xF9	; 249
    2846:	cc f3       	brlt	.-14     	; 0x283a <__fixunssfsi+0x2e>
    2848:	86 95       	lsr	r24
    284a:	77 95       	ror	r23
    284c:	67 95       	ror	r22
    284e:	b3 95       	inc	r27
    2850:	d9 f7       	brne	.-10     	; 0x2848 <__fixunssfsi+0x3c>
    2852:	3e f4       	brtc	.+14     	; 0x2862 <__fixunssfsi+0x56>
    2854:	90 95       	com	r25
    2856:	80 95       	com	r24
    2858:	70 95       	com	r23
    285a:	61 95       	neg	r22
    285c:	7f 4f       	sbci	r23, 0xFF	; 255
    285e:	8f 4f       	sbci	r24, 0xFF	; 255
    2860:	9f 4f       	sbci	r25, 0xFF	; 255
    2862:	08 95       	ret

00002864 <__floatunsisf>:
    2864:	e8 94       	clt
    2866:	09 c0       	rjmp	.+18     	; 0x287a <__floatsisf+0x12>

00002868 <__floatsisf>:
    2868:	97 fb       	bst	r25, 7
    286a:	3e f4       	brtc	.+14     	; 0x287a <__floatsisf+0x12>
    286c:	90 95       	com	r25
    286e:	80 95       	com	r24
    2870:	70 95       	com	r23
    2872:	61 95       	neg	r22
    2874:	7f 4f       	sbci	r23, 0xFF	; 255
    2876:	8f 4f       	sbci	r24, 0xFF	; 255
    2878:	9f 4f       	sbci	r25, 0xFF	; 255
    287a:	99 23       	and	r25, r25
    287c:	a9 f0       	breq	.+42     	; 0x28a8 <__floatsisf+0x40>
    287e:	f9 2f       	mov	r31, r25
    2880:	96 e9       	ldi	r25, 0x96	; 150
    2882:	bb 27       	eor	r27, r27
    2884:	93 95       	inc	r25
    2886:	f6 95       	lsr	r31
    2888:	87 95       	ror	r24
    288a:	77 95       	ror	r23
    288c:	67 95       	ror	r22
    288e:	b7 95       	ror	r27
    2890:	f1 11       	cpse	r31, r1
    2892:	f8 cf       	rjmp	.-16     	; 0x2884 <__floatsisf+0x1c>
    2894:	fa f4       	brpl	.+62     	; 0x28d4 <__floatsisf+0x6c>
    2896:	bb 0f       	add	r27, r27
    2898:	11 f4       	brne	.+4      	; 0x289e <__floatsisf+0x36>
    289a:	60 ff       	sbrs	r22, 0
    289c:	1b c0       	rjmp	.+54     	; 0x28d4 <__floatsisf+0x6c>
    289e:	6f 5f       	subi	r22, 0xFF	; 255
    28a0:	7f 4f       	sbci	r23, 0xFF	; 255
    28a2:	8f 4f       	sbci	r24, 0xFF	; 255
    28a4:	9f 4f       	sbci	r25, 0xFF	; 255
    28a6:	16 c0       	rjmp	.+44     	; 0x28d4 <__floatsisf+0x6c>
    28a8:	88 23       	and	r24, r24
    28aa:	11 f0       	breq	.+4      	; 0x28b0 <__floatsisf+0x48>
    28ac:	96 e9       	ldi	r25, 0x96	; 150
    28ae:	11 c0       	rjmp	.+34     	; 0x28d2 <__floatsisf+0x6a>
    28b0:	77 23       	and	r23, r23
    28b2:	21 f0       	breq	.+8      	; 0x28bc <__floatsisf+0x54>
    28b4:	9e e8       	ldi	r25, 0x8E	; 142
    28b6:	87 2f       	mov	r24, r23
    28b8:	76 2f       	mov	r23, r22
    28ba:	05 c0       	rjmp	.+10     	; 0x28c6 <__floatsisf+0x5e>
    28bc:	66 23       	and	r22, r22
    28be:	71 f0       	breq	.+28     	; 0x28dc <__floatsisf+0x74>
    28c0:	96 e8       	ldi	r25, 0x86	; 134
    28c2:	86 2f       	mov	r24, r22
    28c4:	70 e0       	ldi	r23, 0x00	; 0
    28c6:	60 e0       	ldi	r22, 0x00	; 0
    28c8:	2a f0       	brmi	.+10     	; 0x28d4 <__floatsisf+0x6c>
    28ca:	9a 95       	dec	r25
    28cc:	66 0f       	add	r22, r22
    28ce:	77 1f       	adc	r23, r23
    28d0:	88 1f       	adc	r24, r24
    28d2:	da f7       	brpl	.-10     	; 0x28ca <__floatsisf+0x62>
    28d4:	88 0f       	add	r24, r24
    28d6:	96 95       	lsr	r25
    28d8:	87 95       	ror	r24
    28da:	97 f9       	bld	r25, 7
    28dc:	08 95       	ret

000028de <__fp_inf>:
    28de:	97 f9       	bld	r25, 7
    28e0:	9f 67       	ori	r25, 0x7F	; 127
    28e2:	80 e8       	ldi	r24, 0x80	; 128
    28e4:	70 e0       	ldi	r23, 0x00	; 0
    28e6:	60 e0       	ldi	r22, 0x00	; 0
    28e8:	08 95       	ret

000028ea <__fp_nan>:
    28ea:	9f ef       	ldi	r25, 0xFF	; 255
    28ec:	80 ec       	ldi	r24, 0xC0	; 192
    28ee:	08 95       	ret

000028f0 <__fp_pscA>:
    28f0:	00 24       	eor	r0, r0
    28f2:	0a 94       	dec	r0
    28f4:	16 16       	cp	r1, r22
    28f6:	17 06       	cpc	r1, r23
    28f8:	18 06       	cpc	r1, r24
    28fa:	09 06       	cpc	r0, r25
    28fc:	08 95       	ret

000028fe <__fp_pscB>:
    28fe:	00 24       	eor	r0, r0
    2900:	0a 94       	dec	r0
    2902:	12 16       	cp	r1, r18
    2904:	13 06       	cpc	r1, r19
    2906:	14 06       	cpc	r1, r20
    2908:	05 06       	cpc	r0, r21
    290a:	08 95       	ret

0000290c <__fp_round>:
    290c:	09 2e       	mov	r0, r25
    290e:	03 94       	inc	r0
    2910:	00 0c       	add	r0, r0
    2912:	11 f4       	brne	.+4      	; 0x2918 <__fp_round+0xc>
    2914:	88 23       	and	r24, r24
    2916:	52 f0       	brmi	.+20     	; 0x292c <__fp_round+0x20>
    2918:	bb 0f       	add	r27, r27
    291a:	40 f4       	brcc	.+16     	; 0x292c <__fp_round+0x20>
    291c:	bf 2b       	or	r27, r31
    291e:	11 f4       	brne	.+4      	; 0x2924 <__fp_round+0x18>
    2920:	60 ff       	sbrs	r22, 0
    2922:	04 c0       	rjmp	.+8      	; 0x292c <__fp_round+0x20>
    2924:	6f 5f       	subi	r22, 0xFF	; 255
    2926:	7f 4f       	sbci	r23, 0xFF	; 255
    2928:	8f 4f       	sbci	r24, 0xFF	; 255
    292a:	9f 4f       	sbci	r25, 0xFF	; 255
    292c:	08 95       	ret

0000292e <__fp_split3>:
    292e:	57 fd       	sbrc	r21, 7
    2930:	90 58       	subi	r25, 0x80	; 128
    2932:	44 0f       	add	r20, r20
    2934:	55 1f       	adc	r21, r21
    2936:	59 f0       	breq	.+22     	; 0x294e <__fp_splitA+0x10>
    2938:	5f 3f       	cpi	r21, 0xFF	; 255
    293a:	71 f0       	breq	.+28     	; 0x2958 <__fp_splitA+0x1a>
    293c:	47 95       	ror	r20

0000293e <__fp_splitA>:
    293e:	88 0f       	add	r24, r24
    2940:	97 fb       	bst	r25, 7
    2942:	99 1f       	adc	r25, r25
    2944:	61 f0       	breq	.+24     	; 0x295e <__fp_splitA+0x20>
    2946:	9f 3f       	cpi	r25, 0xFF	; 255
    2948:	79 f0       	breq	.+30     	; 0x2968 <__fp_splitA+0x2a>
    294a:	87 95       	ror	r24
    294c:	08 95       	ret
    294e:	12 16       	cp	r1, r18
    2950:	13 06       	cpc	r1, r19
    2952:	14 06       	cpc	r1, r20
    2954:	55 1f       	adc	r21, r21
    2956:	f2 cf       	rjmp	.-28     	; 0x293c <__fp_split3+0xe>
    2958:	46 95       	lsr	r20
    295a:	f1 df       	rcall	.-30     	; 0x293e <__fp_splitA>
    295c:	08 c0       	rjmp	.+16     	; 0x296e <__fp_splitA+0x30>
    295e:	16 16       	cp	r1, r22
    2960:	17 06       	cpc	r1, r23
    2962:	18 06       	cpc	r1, r24
    2964:	99 1f       	adc	r25, r25
    2966:	f1 cf       	rjmp	.-30     	; 0x294a <__fp_splitA+0xc>
    2968:	86 95       	lsr	r24
    296a:	71 05       	cpc	r23, r1
    296c:	61 05       	cpc	r22, r1
    296e:	08 94       	sec
    2970:	08 95       	ret

00002972 <__fp_zero>:
    2972:	e8 94       	clt

00002974 <__fp_szero>:
    2974:	bb 27       	eor	r27, r27
    2976:	66 27       	eor	r22, r22
    2978:	77 27       	eor	r23, r23
    297a:	cb 01       	movw	r24, r22
    297c:	97 f9       	bld	r25, 7
    297e:	08 95       	ret

00002980 <__mulsf3>:
    2980:	0b d0       	rcall	.+22     	; 0x2998 <__mulsf3x>
    2982:	c4 cf       	rjmp	.-120    	; 0x290c <__fp_round>
    2984:	b5 df       	rcall	.-150    	; 0x28f0 <__fp_pscA>
    2986:	28 f0       	brcs	.+10     	; 0x2992 <__mulsf3+0x12>
    2988:	ba df       	rcall	.-140    	; 0x28fe <__fp_pscB>
    298a:	18 f0       	brcs	.+6      	; 0x2992 <__mulsf3+0x12>
    298c:	95 23       	and	r25, r21
    298e:	09 f0       	breq	.+2      	; 0x2992 <__mulsf3+0x12>
    2990:	a6 cf       	rjmp	.-180    	; 0x28de <__fp_inf>
    2992:	ab cf       	rjmp	.-170    	; 0x28ea <__fp_nan>
    2994:	11 24       	eor	r1, r1
    2996:	ee cf       	rjmp	.-36     	; 0x2974 <__fp_szero>

00002998 <__mulsf3x>:
    2998:	ca df       	rcall	.-108    	; 0x292e <__fp_split3>
    299a:	a0 f3       	brcs	.-24     	; 0x2984 <__mulsf3+0x4>

0000299c <__mulsf3_pse>:
    299c:	95 9f       	mul	r25, r21
    299e:	d1 f3       	breq	.-12     	; 0x2994 <__mulsf3+0x14>
    29a0:	95 0f       	add	r25, r21
    29a2:	50 e0       	ldi	r21, 0x00	; 0
    29a4:	55 1f       	adc	r21, r21
    29a6:	62 9f       	mul	r22, r18
    29a8:	f0 01       	movw	r30, r0
    29aa:	72 9f       	mul	r23, r18
    29ac:	bb 27       	eor	r27, r27
    29ae:	f0 0d       	add	r31, r0
    29b0:	b1 1d       	adc	r27, r1
    29b2:	63 9f       	mul	r22, r19
    29b4:	aa 27       	eor	r26, r26
    29b6:	f0 0d       	add	r31, r0
    29b8:	b1 1d       	adc	r27, r1
    29ba:	aa 1f       	adc	r26, r26
    29bc:	64 9f       	mul	r22, r20
    29be:	66 27       	eor	r22, r22
    29c0:	b0 0d       	add	r27, r0
    29c2:	a1 1d       	adc	r26, r1
    29c4:	66 1f       	adc	r22, r22
    29c6:	82 9f       	mul	r24, r18
    29c8:	22 27       	eor	r18, r18
    29ca:	b0 0d       	add	r27, r0
    29cc:	a1 1d       	adc	r26, r1
    29ce:	62 1f       	adc	r22, r18
    29d0:	73 9f       	mul	r23, r19
    29d2:	b0 0d       	add	r27, r0
    29d4:	a1 1d       	adc	r26, r1
    29d6:	62 1f       	adc	r22, r18
    29d8:	83 9f       	mul	r24, r19
    29da:	a0 0d       	add	r26, r0
    29dc:	61 1d       	adc	r22, r1
    29de:	22 1f       	adc	r18, r18
    29e0:	74 9f       	mul	r23, r20
    29e2:	33 27       	eor	r19, r19
    29e4:	a0 0d       	add	r26, r0
    29e6:	61 1d       	adc	r22, r1
    29e8:	23 1f       	adc	r18, r19
    29ea:	84 9f       	mul	r24, r20
    29ec:	60 0d       	add	r22, r0
    29ee:	21 1d       	adc	r18, r1
    29f0:	82 2f       	mov	r24, r18
    29f2:	76 2f       	mov	r23, r22
    29f4:	6a 2f       	mov	r22, r26
    29f6:	11 24       	eor	r1, r1
    29f8:	9f 57       	subi	r25, 0x7F	; 127
    29fa:	50 40       	sbci	r21, 0x00	; 0
    29fc:	8a f0       	brmi	.+34     	; 0x2a20 <__mulsf3_pse+0x84>
    29fe:	e1 f0       	breq	.+56     	; 0x2a38 <__mulsf3_pse+0x9c>
    2a00:	88 23       	and	r24, r24
    2a02:	4a f0       	brmi	.+18     	; 0x2a16 <__mulsf3_pse+0x7a>
    2a04:	ee 0f       	add	r30, r30
    2a06:	ff 1f       	adc	r31, r31
    2a08:	bb 1f       	adc	r27, r27
    2a0a:	66 1f       	adc	r22, r22
    2a0c:	77 1f       	adc	r23, r23
    2a0e:	88 1f       	adc	r24, r24
    2a10:	91 50       	subi	r25, 0x01	; 1
    2a12:	50 40       	sbci	r21, 0x00	; 0
    2a14:	a9 f7       	brne	.-22     	; 0x2a00 <__mulsf3_pse+0x64>
    2a16:	9e 3f       	cpi	r25, 0xFE	; 254
    2a18:	51 05       	cpc	r21, r1
    2a1a:	70 f0       	brcs	.+28     	; 0x2a38 <__mulsf3_pse+0x9c>
    2a1c:	60 cf       	rjmp	.-320    	; 0x28de <__fp_inf>
    2a1e:	aa cf       	rjmp	.-172    	; 0x2974 <__fp_szero>
    2a20:	5f 3f       	cpi	r21, 0xFF	; 255
    2a22:	ec f3       	brlt	.-6      	; 0x2a1e <__mulsf3_pse+0x82>
    2a24:	98 3e       	cpi	r25, 0xE8	; 232
    2a26:	dc f3       	brlt	.-10     	; 0x2a1e <__mulsf3_pse+0x82>
    2a28:	86 95       	lsr	r24
    2a2a:	77 95       	ror	r23
    2a2c:	67 95       	ror	r22
    2a2e:	b7 95       	ror	r27
    2a30:	f7 95       	ror	r31
    2a32:	e7 95       	ror	r30
    2a34:	9f 5f       	subi	r25, 0xFF	; 255
    2a36:	c1 f7       	brne	.-16     	; 0x2a28 <__mulsf3_pse+0x8c>
    2a38:	fe 2b       	or	r31, r30
    2a3a:	88 0f       	add	r24, r24
    2a3c:	91 1d       	adc	r25, r1
    2a3e:	96 95       	lsr	r25
    2a40:	87 95       	ror	r24
    2a42:	97 f9       	bld	r25, 7
    2a44:	08 95       	ret

00002a46 <pow>:
    2a46:	fa 01       	movw	r30, r20
    2a48:	ee 0f       	add	r30, r30
    2a4a:	ff 1f       	adc	r31, r31
    2a4c:	30 96       	adiw	r30, 0x00	; 0
    2a4e:	21 05       	cpc	r18, r1
    2a50:	31 05       	cpc	r19, r1
    2a52:	99 f1       	breq	.+102    	; 0x2aba <pow+0x74>
    2a54:	61 15       	cp	r22, r1
    2a56:	71 05       	cpc	r23, r1
    2a58:	61 f4       	brne	.+24     	; 0x2a72 <pow+0x2c>
    2a5a:	80 38       	cpi	r24, 0x80	; 128
    2a5c:	bf e3       	ldi	r27, 0x3F	; 63
    2a5e:	9b 07       	cpc	r25, r27
    2a60:	49 f1       	breq	.+82     	; 0x2ab4 <pow+0x6e>
    2a62:	68 94       	set
    2a64:	90 38       	cpi	r25, 0x80	; 128
    2a66:	81 05       	cpc	r24, r1
    2a68:	61 f0       	breq	.+24     	; 0x2a82 <pow+0x3c>
    2a6a:	80 38       	cpi	r24, 0x80	; 128
    2a6c:	bf ef       	ldi	r27, 0xFF	; 255
    2a6e:	9b 07       	cpc	r25, r27
    2a70:	41 f0       	breq	.+16     	; 0x2a82 <pow+0x3c>
    2a72:	99 23       	and	r25, r25
    2a74:	42 f5       	brpl	.+80     	; 0x2ac6 <pow+0x80>
    2a76:	ff 3f       	cpi	r31, 0xFF	; 255
    2a78:	e1 05       	cpc	r30, r1
    2a7a:	31 05       	cpc	r19, r1
    2a7c:	21 05       	cpc	r18, r1
    2a7e:	11 f1       	breq	.+68     	; 0x2ac4 <pow+0x7e>
    2a80:	e8 94       	clt
    2a82:	08 94       	sec
    2a84:	e7 95       	ror	r30
    2a86:	d9 01       	movw	r26, r18
    2a88:	aa 23       	and	r26, r26
    2a8a:	29 f4       	brne	.+10     	; 0x2a96 <pow+0x50>
    2a8c:	ab 2f       	mov	r26, r27
    2a8e:	be 2f       	mov	r27, r30
    2a90:	f8 5f       	subi	r31, 0xF8	; 248
    2a92:	d0 f3       	brcs	.-12     	; 0x2a88 <pow+0x42>
    2a94:	10 c0       	rjmp	.+32     	; 0x2ab6 <pow+0x70>
    2a96:	ff 5f       	subi	r31, 0xFF	; 255
    2a98:	70 f4       	brcc	.+28     	; 0x2ab6 <pow+0x70>
    2a9a:	a6 95       	lsr	r26
    2a9c:	e0 f7       	brcc	.-8      	; 0x2a96 <pow+0x50>
    2a9e:	f7 39       	cpi	r31, 0x97	; 151
    2aa0:	50 f0       	brcs	.+20     	; 0x2ab6 <pow+0x70>
    2aa2:	19 f0       	breq	.+6      	; 0x2aaa <pow+0x64>
    2aa4:	ff 3a       	cpi	r31, 0xAF	; 175
    2aa6:	38 f4       	brcc	.+14     	; 0x2ab6 <pow+0x70>
    2aa8:	9f 77       	andi	r25, 0x7F	; 127
    2aaa:	9f 93       	push	r25
    2aac:	0c d0       	rcall	.+24     	; 0x2ac6 <pow+0x80>
    2aae:	0f 90       	pop	r0
    2ab0:	07 fc       	sbrc	r0, 7
    2ab2:	90 58       	subi	r25, 0x80	; 128
    2ab4:	08 95       	ret
    2ab6:	3e f0       	brts	.+14     	; 0x2ac6 <pow+0x80>
    2ab8:	18 cf       	rjmp	.-464    	; 0x28ea <__fp_nan>
    2aba:	60 e0       	ldi	r22, 0x00	; 0
    2abc:	70 e0       	ldi	r23, 0x00	; 0
    2abe:	80 e8       	ldi	r24, 0x80	; 128
    2ac0:	9f e3       	ldi	r25, 0x3F	; 63
    2ac2:	08 95       	ret
    2ac4:	4f e7       	ldi	r20, 0x7F	; 127
    2ac6:	9f 77       	andi	r25, 0x7F	; 127
    2ac8:	5f 93       	push	r21
    2aca:	4f 93       	push	r20
    2acc:	3f 93       	push	r19
    2ace:	2f 93       	push	r18
    2ad0:	9e d0       	rcall	.+316    	; 0x2c0e <log>
    2ad2:	2f 91       	pop	r18
    2ad4:	3f 91       	pop	r19
    2ad6:	4f 91       	pop	r20
    2ad8:	5f 91       	pop	r21
    2ada:	52 df       	rcall	.-348    	; 0x2980 <__mulsf3>
    2adc:	05 c0       	rjmp	.+10     	; 0x2ae8 <exp>
    2ade:	19 f4       	brne	.+6      	; 0x2ae6 <pow+0xa0>
    2ae0:	0e f0       	brts	.+2      	; 0x2ae4 <pow+0x9e>
    2ae2:	fd ce       	rjmp	.-518    	; 0x28de <__fp_inf>
    2ae4:	46 cf       	rjmp	.-372    	; 0x2972 <__fp_zero>
    2ae6:	01 cf       	rjmp	.-510    	; 0x28ea <__fp_nan>

00002ae8 <exp>:
    2ae8:	2a df       	rcall	.-428    	; 0x293e <__fp_splitA>
    2aea:	c8 f3       	brcs	.-14     	; 0x2ade <pow+0x98>
    2aec:	96 38       	cpi	r25, 0x86	; 134
    2aee:	c0 f7       	brcc	.-16     	; 0x2ae0 <pow+0x9a>
    2af0:	07 f8       	bld	r0, 7
    2af2:	0f 92       	push	r0
    2af4:	e8 94       	clt
    2af6:	2b e3       	ldi	r18, 0x3B	; 59
    2af8:	3a ea       	ldi	r19, 0xAA	; 170
    2afa:	48 eb       	ldi	r20, 0xB8	; 184
    2afc:	5f e7       	ldi	r21, 0x7F	; 127
    2afe:	4e df       	rcall	.-356    	; 0x299c <__mulsf3_pse>
    2b00:	0f 92       	push	r0
    2b02:	0f 92       	push	r0
    2b04:	0f 92       	push	r0
    2b06:	4d b7       	in	r20, 0x3d	; 61
    2b08:	5e b7       	in	r21, 0x3e	; 62
    2b0a:	0f 92       	push	r0
    2b0c:	c0 d0       	rcall	.+384    	; 0x2c8e <modf>
    2b0e:	e4 ee       	ldi	r30, 0xE4	; 228
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	16 d0       	rcall	.+44     	; 0x2b40 <__fp_powser>
    2b14:	4f 91       	pop	r20
    2b16:	5f 91       	pop	r21
    2b18:	ef 91       	pop	r30
    2b1a:	ff 91       	pop	r31
    2b1c:	e5 95       	asr	r30
    2b1e:	ee 1f       	adc	r30, r30
    2b20:	ff 1f       	adc	r31, r31
    2b22:	49 f0       	breq	.+18     	; 0x2b36 <exp+0x4e>
    2b24:	fe 57       	subi	r31, 0x7E	; 126
    2b26:	e0 68       	ori	r30, 0x80	; 128
    2b28:	44 27       	eor	r20, r20
    2b2a:	ee 0f       	add	r30, r30
    2b2c:	44 1f       	adc	r20, r20
    2b2e:	fa 95       	dec	r31
    2b30:	e1 f7       	brne	.-8      	; 0x2b2a <exp+0x42>
    2b32:	41 95       	neg	r20
    2b34:	55 0b       	sbc	r21, r21
    2b36:	32 d0       	rcall	.+100    	; 0x2b9c <ldexp>
    2b38:	0f 90       	pop	r0
    2b3a:	07 fe       	sbrs	r0, 7
    2b3c:	26 c0       	rjmp	.+76     	; 0x2b8a <inverse>
    2b3e:	08 95       	ret

00002b40 <__fp_powser>:
    2b40:	df 93       	push	r29
    2b42:	cf 93       	push	r28
    2b44:	1f 93       	push	r17
    2b46:	0f 93       	push	r16
    2b48:	ff 92       	push	r15
    2b4a:	ef 92       	push	r14
    2b4c:	df 92       	push	r13
    2b4e:	7b 01       	movw	r14, r22
    2b50:	8c 01       	movw	r16, r24
    2b52:	68 94       	set
    2b54:	05 c0       	rjmp	.+10     	; 0x2b60 <__fp_powser+0x20>
    2b56:	da 2e       	mov	r13, r26
    2b58:	ef 01       	movw	r28, r30
    2b5a:	1e df       	rcall	.-452    	; 0x2998 <__mulsf3x>
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	e8 94       	clt
    2b60:	a5 91       	lpm	r26, Z+
    2b62:	25 91       	lpm	r18, Z+
    2b64:	35 91       	lpm	r19, Z+
    2b66:	45 91       	lpm	r20, Z+
    2b68:	55 91       	lpm	r21, Z+
    2b6a:	ae f3       	brts	.-22     	; 0x2b56 <__fp_powser+0x16>
    2b6c:	ef 01       	movw	r28, r30
    2b6e:	f6 dd       	rcall	.-1044   	; 0x275c <__addsf3x>
    2b70:	fe 01       	movw	r30, r28
    2b72:	97 01       	movw	r18, r14
    2b74:	a8 01       	movw	r20, r16
    2b76:	da 94       	dec	r13
    2b78:	79 f7       	brne	.-34     	; 0x2b58 <__fp_powser+0x18>
    2b7a:	df 90       	pop	r13
    2b7c:	ef 90       	pop	r14
    2b7e:	ff 90       	pop	r15
    2b80:	0f 91       	pop	r16
    2b82:	1f 91       	pop	r17
    2b84:	cf 91       	pop	r28
    2b86:	df 91       	pop	r29
    2b88:	08 95       	ret

00002b8a <inverse>:
    2b8a:	9b 01       	movw	r18, r22
    2b8c:	ac 01       	movw	r20, r24
    2b8e:	60 e0       	ldi	r22, 0x00	; 0
    2b90:	70 e0       	ldi	r23, 0x00	; 0
    2b92:	80 e8       	ldi	r24, 0x80	; 128
    2b94:	9f e3       	ldi	r25, 0x3F	; 63
    2b96:	ae c0       	rjmp	.+348    	; 0x2cf4 <__divsf3>
    2b98:	a2 ce       	rjmp	.-700    	; 0x28de <__fp_inf>
    2b9a:	14 c1       	rjmp	.+552    	; 0x2dc4 <__fp_mpack>

00002b9c <ldexp>:
    2b9c:	d0 de       	rcall	.-608    	; 0x293e <__fp_splitA>
    2b9e:	e8 f3       	brcs	.-6      	; 0x2b9a <inverse+0x10>
    2ba0:	99 23       	and	r25, r25
    2ba2:	d9 f3       	breq	.-10     	; 0x2b9a <inverse+0x10>
    2ba4:	94 0f       	add	r25, r20
    2ba6:	51 1d       	adc	r21, r1
    2ba8:	bb f3       	brvs	.-18     	; 0x2b98 <inverse+0xe>
    2baa:	91 50       	subi	r25, 0x01	; 1
    2bac:	50 40       	sbci	r21, 0x00	; 0
    2bae:	94 f0       	brlt	.+36     	; 0x2bd4 <ldexp+0x38>
    2bb0:	59 f0       	breq	.+22     	; 0x2bc8 <ldexp+0x2c>
    2bb2:	88 23       	and	r24, r24
    2bb4:	32 f0       	brmi	.+12     	; 0x2bc2 <ldexp+0x26>
    2bb6:	66 0f       	add	r22, r22
    2bb8:	77 1f       	adc	r23, r23
    2bba:	88 1f       	adc	r24, r24
    2bbc:	91 50       	subi	r25, 0x01	; 1
    2bbe:	50 40       	sbci	r21, 0x00	; 0
    2bc0:	c1 f7       	brne	.-16     	; 0x2bb2 <ldexp+0x16>
    2bc2:	9e 3f       	cpi	r25, 0xFE	; 254
    2bc4:	51 05       	cpc	r21, r1
    2bc6:	44 f7       	brge	.-48     	; 0x2b98 <inverse+0xe>
    2bc8:	88 0f       	add	r24, r24
    2bca:	91 1d       	adc	r25, r1
    2bcc:	96 95       	lsr	r25
    2bce:	87 95       	ror	r24
    2bd0:	97 f9       	bld	r25, 7
    2bd2:	08 95       	ret
    2bd4:	5f 3f       	cpi	r21, 0xFF	; 255
    2bd6:	ac f0       	brlt	.+42     	; 0x2c02 <ldexp+0x66>
    2bd8:	98 3e       	cpi	r25, 0xE8	; 232
    2bda:	9c f0       	brlt	.+38     	; 0x2c02 <ldexp+0x66>
    2bdc:	bb 27       	eor	r27, r27
    2bde:	86 95       	lsr	r24
    2be0:	77 95       	ror	r23
    2be2:	67 95       	ror	r22
    2be4:	b7 95       	ror	r27
    2be6:	08 f4       	brcc	.+2      	; 0x2bea <ldexp+0x4e>
    2be8:	b1 60       	ori	r27, 0x01	; 1
    2bea:	93 95       	inc	r25
    2bec:	c1 f7       	brne	.-16     	; 0x2bde <ldexp+0x42>
    2bee:	bb 0f       	add	r27, r27
    2bf0:	58 f7       	brcc	.-42     	; 0x2bc8 <ldexp+0x2c>
    2bf2:	11 f4       	brne	.+4      	; 0x2bf8 <ldexp+0x5c>
    2bf4:	60 ff       	sbrs	r22, 0
    2bf6:	e8 cf       	rjmp	.-48     	; 0x2bc8 <ldexp+0x2c>
    2bf8:	6f 5f       	subi	r22, 0xFF	; 255
    2bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    2bfc:	8f 4f       	sbci	r24, 0xFF	; 255
    2bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    2c00:	e3 cf       	rjmp	.-58     	; 0x2bc8 <ldexp+0x2c>
    2c02:	b8 ce       	rjmp	.-656    	; 0x2974 <__fp_szero>
    2c04:	0e f0       	brts	.+2      	; 0x2c08 <ldexp+0x6c>
    2c06:	de c0       	rjmp	.+444    	; 0x2dc4 <__fp_mpack>
    2c08:	70 ce       	rjmp	.-800    	; 0x28ea <__fp_nan>
    2c0a:	68 94       	set
    2c0c:	68 ce       	rjmp	.-816    	; 0x28de <__fp_inf>

00002c0e <log>:
    2c0e:	97 de       	rcall	.-722    	; 0x293e <__fp_splitA>
    2c10:	c8 f3       	brcs	.-14     	; 0x2c04 <ldexp+0x68>
    2c12:	99 23       	and	r25, r25
    2c14:	d1 f3       	breq	.-12     	; 0x2c0a <ldexp+0x6e>
    2c16:	c6 f3       	brts	.-16     	; 0x2c08 <ldexp+0x6c>
    2c18:	df 93       	push	r29
    2c1a:	cf 93       	push	r28
    2c1c:	1f 93       	push	r17
    2c1e:	0f 93       	push	r16
    2c20:	ff 92       	push	r15
    2c22:	c9 2f       	mov	r28, r25
    2c24:	dd 27       	eor	r29, r29
    2c26:	88 23       	and	r24, r24
    2c28:	2a f0       	brmi	.+10     	; 0x2c34 <log+0x26>
    2c2a:	21 97       	sbiw	r28, 0x01	; 1
    2c2c:	66 0f       	add	r22, r22
    2c2e:	77 1f       	adc	r23, r23
    2c30:	88 1f       	adc	r24, r24
    2c32:	da f7       	brpl	.-10     	; 0x2c2a <log+0x1c>
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	40 e8       	ldi	r20, 0x80	; 128
    2c3a:	5f eb       	ldi	r21, 0xBF	; 191
    2c3c:	9f e3       	ldi	r25, 0x3F	; 63
    2c3e:	88 39       	cpi	r24, 0x98	; 152
    2c40:	20 f0       	brcs	.+8      	; 0x2c4a <log+0x3c>
    2c42:	80 3e       	cpi	r24, 0xE0	; 224
    2c44:	30 f0       	brcs	.+12     	; 0x2c52 <log+0x44>
    2c46:	21 96       	adiw	r28, 0x01	; 1
    2c48:	8f 77       	andi	r24, 0x7F	; 127
    2c4a:	77 dd       	rcall	.-1298   	; 0x273a <__addsf3>
    2c4c:	ec e0       	ldi	r30, 0x0C	; 12
    2c4e:	f1 e0       	ldi	r31, 0x01	; 1
    2c50:	03 c0       	rjmp	.+6      	; 0x2c58 <log+0x4a>
    2c52:	73 dd       	rcall	.-1306   	; 0x273a <__addsf3>
    2c54:	e9 e3       	ldi	r30, 0x39	; 57
    2c56:	f1 e0       	ldi	r31, 0x01	; 1
    2c58:	73 df       	rcall	.-282    	; 0x2b40 <__fp_powser>
    2c5a:	8b 01       	movw	r16, r22
    2c5c:	be 01       	movw	r22, r28
    2c5e:	ec 01       	movw	r28, r24
    2c60:	fb 2e       	mov	r15, r27
    2c62:	6f 57       	subi	r22, 0x7F	; 127
    2c64:	71 09       	sbc	r23, r1
    2c66:	75 95       	asr	r23
    2c68:	77 1f       	adc	r23, r23
    2c6a:	88 0b       	sbc	r24, r24
    2c6c:	99 0b       	sbc	r25, r25
    2c6e:	fc dd       	rcall	.-1032   	; 0x2868 <__floatsisf>
    2c70:	28 e1       	ldi	r18, 0x18	; 24
    2c72:	32 e7       	ldi	r19, 0x72	; 114
    2c74:	41 e3       	ldi	r20, 0x31	; 49
    2c76:	5f e3       	ldi	r21, 0x3F	; 63
    2c78:	8f de       	rcall	.-738    	; 0x2998 <__mulsf3x>
    2c7a:	af 2d       	mov	r26, r15
    2c7c:	98 01       	movw	r18, r16
    2c7e:	ae 01       	movw	r20, r28
    2c80:	ff 90       	pop	r15
    2c82:	0f 91       	pop	r16
    2c84:	1f 91       	pop	r17
    2c86:	cf 91       	pop	r28
    2c88:	df 91       	pop	r29
    2c8a:	68 dd       	rcall	.-1328   	; 0x275c <__addsf3x>
    2c8c:	3f ce       	rjmp	.-898    	; 0x290c <__fp_round>

00002c8e <modf>:
    2c8e:	fa 01       	movw	r30, r20
    2c90:	dc 01       	movw	r26, r24
    2c92:	aa 0f       	add	r26, r26
    2c94:	bb 1f       	adc	r27, r27
    2c96:	9b 01       	movw	r18, r22
    2c98:	ac 01       	movw	r20, r24
    2c9a:	bf 57       	subi	r27, 0x7F	; 127
    2c9c:	28 f4       	brcc	.+10     	; 0x2ca8 <modf+0x1a>
    2c9e:	22 27       	eor	r18, r18
    2ca0:	33 27       	eor	r19, r19
    2ca2:	44 27       	eor	r20, r20
    2ca4:	50 78       	andi	r21, 0x80	; 128
    2ca6:	1f c0       	rjmp	.+62     	; 0x2ce6 <modf+0x58>
    2ca8:	b7 51       	subi	r27, 0x17	; 23
    2caa:	88 f4       	brcc	.+34     	; 0x2cce <modf+0x40>
    2cac:	ab 2f       	mov	r26, r27
    2cae:	00 24       	eor	r0, r0
    2cb0:	46 95       	lsr	r20
    2cb2:	37 95       	ror	r19
    2cb4:	27 95       	ror	r18
    2cb6:	01 1c       	adc	r0, r1
    2cb8:	a3 95       	inc	r26
    2cba:	d2 f3       	brmi	.-12     	; 0x2cb0 <modf+0x22>
    2cbc:	00 20       	and	r0, r0
    2cbe:	69 f0       	breq	.+26     	; 0x2cda <modf+0x4c>
    2cc0:	22 0f       	add	r18, r18
    2cc2:	33 1f       	adc	r19, r19
    2cc4:	44 1f       	adc	r20, r20
    2cc6:	b3 95       	inc	r27
    2cc8:	da f3       	brmi	.-10     	; 0x2cc0 <modf+0x32>
    2cca:	0d d0       	rcall	.+26     	; 0x2ce6 <modf+0x58>
    2ccc:	35 cd       	rjmp	.-1430   	; 0x2738 <__subsf3>
    2cce:	61 30       	cpi	r22, 0x01	; 1
    2cd0:	71 05       	cpc	r23, r1
    2cd2:	a0 e8       	ldi	r26, 0x80	; 128
    2cd4:	8a 07       	cpc	r24, r26
    2cd6:	b9 46       	sbci	r27, 0x69	; 105
    2cd8:	30 f4       	brcc	.+12     	; 0x2ce6 <modf+0x58>
    2cda:	9b 01       	movw	r18, r22
    2cdc:	ac 01       	movw	r20, r24
    2cde:	66 27       	eor	r22, r22
    2ce0:	77 27       	eor	r23, r23
    2ce2:	88 27       	eor	r24, r24
    2ce4:	90 78       	andi	r25, 0x80	; 128
    2ce6:	30 96       	adiw	r30, 0x00	; 0
    2ce8:	21 f0       	breq	.+8      	; 0x2cf2 <modf+0x64>
    2cea:	20 83       	st	Z, r18
    2cec:	31 83       	std	Z+1, r19	; 0x01
    2cee:	42 83       	std	Z+2, r20	; 0x02
    2cf0:	53 83       	std	Z+3, r21	; 0x03
    2cf2:	08 95       	ret

00002cf4 <__divsf3>:
    2cf4:	0c d0       	rcall	.+24     	; 0x2d0e <__divsf3x>
    2cf6:	0a ce       	rjmp	.-1004   	; 0x290c <__fp_round>
    2cf8:	02 de       	rcall	.-1020   	; 0x28fe <__fp_pscB>
    2cfa:	40 f0       	brcs	.+16     	; 0x2d0c <__divsf3+0x18>
    2cfc:	f9 dd       	rcall	.-1038   	; 0x28f0 <__fp_pscA>
    2cfe:	30 f0       	brcs	.+12     	; 0x2d0c <__divsf3+0x18>
    2d00:	21 f4       	brne	.+8      	; 0x2d0a <__divsf3+0x16>
    2d02:	5f 3f       	cpi	r21, 0xFF	; 255
    2d04:	19 f0       	breq	.+6      	; 0x2d0c <__divsf3+0x18>
    2d06:	eb cd       	rjmp	.-1066   	; 0x28de <__fp_inf>
    2d08:	51 11       	cpse	r21, r1
    2d0a:	34 ce       	rjmp	.-920    	; 0x2974 <__fp_szero>
    2d0c:	ee cd       	rjmp	.-1060   	; 0x28ea <__fp_nan>

00002d0e <__divsf3x>:
    2d0e:	0f de       	rcall	.-994    	; 0x292e <__fp_split3>
    2d10:	98 f3       	brcs	.-26     	; 0x2cf8 <__divsf3+0x4>

00002d12 <__divsf3_pse>:
    2d12:	99 23       	and	r25, r25
    2d14:	c9 f3       	breq	.-14     	; 0x2d08 <__divsf3+0x14>
    2d16:	55 23       	and	r21, r21
    2d18:	b1 f3       	breq	.-20     	; 0x2d06 <__divsf3+0x12>
    2d1a:	95 1b       	sub	r25, r21
    2d1c:	55 0b       	sbc	r21, r21
    2d1e:	bb 27       	eor	r27, r27
    2d20:	aa 27       	eor	r26, r26
    2d22:	62 17       	cp	r22, r18
    2d24:	73 07       	cpc	r23, r19
    2d26:	84 07       	cpc	r24, r20
    2d28:	38 f0       	brcs	.+14     	; 0x2d38 <__divsf3_pse+0x26>
    2d2a:	9f 5f       	subi	r25, 0xFF	; 255
    2d2c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d2e:	22 0f       	add	r18, r18
    2d30:	33 1f       	adc	r19, r19
    2d32:	44 1f       	adc	r20, r20
    2d34:	aa 1f       	adc	r26, r26
    2d36:	a9 f3       	breq	.-22     	; 0x2d22 <__divsf3_pse+0x10>
    2d38:	33 d0       	rcall	.+102    	; 0x2da0 <__divsf3_pse+0x8e>
    2d3a:	0e 2e       	mov	r0, r30
    2d3c:	3a f0       	brmi	.+14     	; 0x2d4c <__divsf3_pse+0x3a>
    2d3e:	e0 e8       	ldi	r30, 0x80	; 128
    2d40:	30 d0       	rcall	.+96     	; 0x2da2 <__divsf3_pse+0x90>
    2d42:	91 50       	subi	r25, 0x01	; 1
    2d44:	50 40       	sbci	r21, 0x00	; 0
    2d46:	e6 95       	lsr	r30
    2d48:	00 1c       	adc	r0, r0
    2d4a:	ca f7       	brpl	.-14     	; 0x2d3e <__divsf3_pse+0x2c>
    2d4c:	29 d0       	rcall	.+82     	; 0x2da0 <__divsf3_pse+0x8e>
    2d4e:	fe 2f       	mov	r31, r30
    2d50:	27 d0       	rcall	.+78     	; 0x2da0 <__divsf3_pse+0x8e>
    2d52:	66 0f       	add	r22, r22
    2d54:	77 1f       	adc	r23, r23
    2d56:	88 1f       	adc	r24, r24
    2d58:	bb 1f       	adc	r27, r27
    2d5a:	26 17       	cp	r18, r22
    2d5c:	37 07       	cpc	r19, r23
    2d5e:	48 07       	cpc	r20, r24
    2d60:	ab 07       	cpc	r26, r27
    2d62:	b0 e8       	ldi	r27, 0x80	; 128
    2d64:	09 f0       	breq	.+2      	; 0x2d68 <__divsf3_pse+0x56>
    2d66:	bb 0b       	sbc	r27, r27
    2d68:	80 2d       	mov	r24, r0
    2d6a:	bf 01       	movw	r22, r30
    2d6c:	ff 27       	eor	r31, r31
    2d6e:	93 58       	subi	r25, 0x83	; 131
    2d70:	5f 4f       	sbci	r21, 0xFF	; 255
    2d72:	2a f0       	brmi	.+10     	; 0x2d7e <__divsf3_pse+0x6c>
    2d74:	9e 3f       	cpi	r25, 0xFE	; 254
    2d76:	51 05       	cpc	r21, r1
    2d78:	68 f0       	brcs	.+26     	; 0x2d94 <__divsf3_pse+0x82>
    2d7a:	b1 cd       	rjmp	.-1182   	; 0x28de <__fp_inf>
    2d7c:	fb cd       	rjmp	.-1034   	; 0x2974 <__fp_szero>
    2d7e:	5f 3f       	cpi	r21, 0xFF	; 255
    2d80:	ec f3       	brlt	.-6      	; 0x2d7c <__divsf3_pse+0x6a>
    2d82:	98 3e       	cpi	r25, 0xE8	; 232
    2d84:	dc f3       	brlt	.-10     	; 0x2d7c <__divsf3_pse+0x6a>
    2d86:	86 95       	lsr	r24
    2d88:	77 95       	ror	r23
    2d8a:	67 95       	ror	r22
    2d8c:	b7 95       	ror	r27
    2d8e:	f7 95       	ror	r31
    2d90:	9f 5f       	subi	r25, 0xFF	; 255
    2d92:	c9 f7       	brne	.-14     	; 0x2d86 <__divsf3_pse+0x74>
    2d94:	88 0f       	add	r24, r24
    2d96:	91 1d       	adc	r25, r1
    2d98:	96 95       	lsr	r25
    2d9a:	87 95       	ror	r24
    2d9c:	97 f9       	bld	r25, 7
    2d9e:	08 95       	ret
    2da0:	e1 e0       	ldi	r30, 0x01	; 1
    2da2:	66 0f       	add	r22, r22
    2da4:	77 1f       	adc	r23, r23
    2da6:	88 1f       	adc	r24, r24
    2da8:	bb 1f       	adc	r27, r27
    2daa:	62 17       	cp	r22, r18
    2dac:	73 07       	cpc	r23, r19
    2dae:	84 07       	cpc	r24, r20
    2db0:	ba 07       	cpc	r27, r26
    2db2:	20 f0       	brcs	.+8      	; 0x2dbc <__divsf3_pse+0xaa>
    2db4:	62 1b       	sub	r22, r18
    2db6:	73 0b       	sbc	r23, r19
    2db8:	84 0b       	sbc	r24, r20
    2dba:	ba 0b       	sbc	r27, r26
    2dbc:	ee 1f       	adc	r30, r30
    2dbe:	88 f7       	brcc	.-30     	; 0x2da2 <__divsf3_pse+0x90>
    2dc0:	e0 95       	com	r30
    2dc2:	08 95       	ret

00002dc4 <__fp_mpack>:
    2dc4:	9f 3f       	cpi	r25, 0xFF	; 255
    2dc6:	31 f0       	breq	.+12     	; 0x2dd4 <__fp_mpack_finite+0xc>

00002dc8 <__fp_mpack_finite>:
    2dc8:	91 50       	subi	r25, 0x01	; 1
    2dca:	20 f4       	brcc	.+8      	; 0x2dd4 <__fp_mpack_finite+0xc>
    2dcc:	87 95       	ror	r24
    2dce:	77 95       	ror	r23
    2dd0:	67 95       	ror	r22
    2dd2:	b7 95       	ror	r27
    2dd4:	88 0f       	add	r24, r24
    2dd6:	91 1d       	adc	r25, r1
    2dd8:	96 95       	lsr	r25
    2dda:	87 95       	ror	r24
    2ddc:	97 f9       	bld	r25, 7
    2dde:	08 95       	ret

00002de0 <__divmodhi4>:
    2de0:	97 fb       	bst	r25, 7
    2de2:	07 2e       	mov	r0, r23
    2de4:	16 f4       	brtc	.+4      	; 0x2dea <__divmodhi4+0xa>
    2de6:	00 94       	com	r0
    2de8:	06 d0       	rcall	.+12     	; 0x2df6 <__divmodhi4_neg1>
    2dea:	77 fd       	sbrc	r23, 7
    2dec:	08 d0       	rcall	.+16     	; 0x2dfe <__divmodhi4_neg2>
    2dee:	0b d0       	rcall	.+22     	; 0x2e06 <__udivmodhi4>
    2df0:	07 fc       	sbrc	r0, 7
    2df2:	05 d0       	rcall	.+10     	; 0x2dfe <__divmodhi4_neg2>
    2df4:	3e f4       	brtc	.+14     	; 0x2e04 <__divmodhi4_exit>

00002df6 <__divmodhi4_neg1>:
    2df6:	90 95       	com	r25
    2df8:	81 95       	neg	r24
    2dfa:	9f 4f       	sbci	r25, 0xFF	; 255
    2dfc:	08 95       	ret

00002dfe <__divmodhi4_neg2>:
    2dfe:	70 95       	com	r23
    2e00:	61 95       	neg	r22
    2e02:	7f 4f       	sbci	r23, 0xFF	; 255

00002e04 <__divmodhi4_exit>:
    2e04:	08 95       	ret

00002e06 <__udivmodhi4>:
    2e06:	aa 1b       	sub	r26, r26
    2e08:	bb 1b       	sub	r27, r27
    2e0a:	51 e1       	ldi	r21, 0x11	; 17
    2e0c:	07 c0       	rjmp	.+14     	; 0x2e1c <__udivmodhi4_ep>

00002e0e <__udivmodhi4_loop>:
    2e0e:	aa 1f       	adc	r26, r26
    2e10:	bb 1f       	adc	r27, r27
    2e12:	a6 17       	cp	r26, r22
    2e14:	b7 07       	cpc	r27, r23
    2e16:	10 f0       	brcs	.+4      	; 0x2e1c <__udivmodhi4_ep>
    2e18:	a6 1b       	sub	r26, r22
    2e1a:	b7 0b       	sbc	r27, r23

00002e1c <__udivmodhi4_ep>:
    2e1c:	88 1f       	adc	r24, r24
    2e1e:	99 1f       	adc	r25, r25
    2e20:	5a 95       	dec	r21
    2e22:	a9 f7       	brne	.-22     	; 0x2e0e <__udivmodhi4_loop>
    2e24:	80 95       	com	r24
    2e26:	90 95       	com	r25
    2e28:	bc 01       	movw	r22, r24
    2e2a:	cd 01       	movw	r24, r26
    2e2c:	08 95       	ret

00002e2e <memcpy>:
    2e2e:	fb 01       	movw	r30, r22
    2e30:	dc 01       	movw	r26, r24
    2e32:	02 c0       	rjmp	.+4      	; 0x2e38 <memcpy+0xa>
    2e34:	01 90       	ld	r0, Z+
    2e36:	0d 92       	st	X+, r0
    2e38:	41 50       	subi	r20, 0x01	; 1
    2e3a:	50 40       	sbci	r21, 0x00	; 0
    2e3c:	d8 f7       	brcc	.-10     	; 0x2e34 <memcpy+0x6>
    2e3e:	08 95       	ret

00002e40 <_exit>:
    2e40:	f8 94       	cli

00002e42 <__stop_program>:
    2e42:	ff cf       	rjmp	.-2      	; 0x2e42 <__stop_program>
