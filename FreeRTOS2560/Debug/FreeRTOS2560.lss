
FreeRTOS2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800200  00002d90  00002e24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000709  0080023e  0080023e  00002e62  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002e62  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000550  00000000  00000000  00002e92  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005dc7  00000000  00000000  000033e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000016ad  00000000  00000000  000091a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000037aa  00000000  00000000  0000a856  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000f10  00000000  00000000  0000e000  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000016c9  00000000  00000000  0000ef10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004065  00000000  00000000  000105d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004e0  00000000  00000000  0001463e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b2 c0       	rjmp	.+356    	; 0x166 <__ctors_end>
       2:	00 00       	nop
       4:	d0 c0       	rjmp	.+416    	; 0x1a6 <__bad_interrupt>
       6:	00 00       	nop
       8:	ce c0       	rjmp	.+412    	; 0x1a6 <__bad_interrupt>
       a:	00 00       	nop
       c:	cc c0       	rjmp	.+408    	; 0x1a6 <__bad_interrupt>
       e:	00 00       	nop
      10:	ca c0       	rjmp	.+404    	; 0x1a6 <__bad_interrupt>
      12:	00 00       	nop
      14:	c8 c0       	rjmp	.+400    	; 0x1a6 <__bad_interrupt>
      16:	00 00       	nop
      18:	c6 c0       	rjmp	.+396    	; 0x1a6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c4 c0       	rjmp	.+392    	; 0x1a6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c2 c0       	rjmp	.+388    	; 0x1a6 <__bad_interrupt>
      22:	00 00       	nop
      24:	6c c3       	rjmp	.+1752   	; 0x6fe <__vector_9>
      26:	00 00       	nop
      28:	be c0       	rjmp	.+380    	; 0x1a6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bc c0       	rjmp	.+376    	; 0x1a6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ba c0       	rjmp	.+372    	; 0x1a6 <__bad_interrupt>
      32:	00 00       	nop
      34:	b8 c0       	rjmp	.+368    	; 0x1a6 <__bad_interrupt>
      36:	00 00       	nop
      38:	b6 c0       	rjmp	.+364    	; 0x1a6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b4 c0       	rjmp	.+360    	; 0x1a6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b2 c0       	rjmp	.+356    	; 0x1a6 <__bad_interrupt>
      42:	00 00       	nop
      44:	b0 c0       	rjmp	.+352    	; 0x1a6 <__bad_interrupt>
      46:	00 00       	nop
      48:	ae c0       	rjmp	.+348    	; 0x1a6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ac c0       	rjmp	.+344    	; 0x1a6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	aa c0       	rjmp	.+340    	; 0x1a6 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 15 0a 	jmp	0x142a	; 0x142a <__vector_21>
      58:	a6 c0       	rjmp	.+332    	; 0x1a6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a4 c0       	rjmp	.+328    	; 0x1a6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a2 c0       	rjmp	.+324    	; 0x1a6 <__bad_interrupt>
      62:	00 00       	nop
      64:	cd c6       	rjmp	.+3482   	; 0xe00 <__vector_25>
      66:	00 00       	nop
      68:	39 c7       	rjmp	.+3698   	; 0xedc <__vector_26>
      6a:	00 00       	nop
      6c:	9c c0       	rjmp	.+312    	; 0x1a6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	9a c0       	rjmp	.+308    	; 0x1a6 <__bad_interrupt>
      72:	00 00       	nop
      74:	fa c3       	rjmp	.+2036   	; 0x86a <__vector_29>
      76:	00 00       	nop
      78:	96 c0       	rjmp	.+300    	; 0x1a6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	94 c0       	rjmp	.+296    	; 0x1a6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	92 c0       	rjmp	.+292    	; 0x1a6 <__bad_interrupt>
      82:	00 00       	nop
      84:	90 c0       	rjmp	.+288    	; 0x1a6 <__bad_interrupt>
      86:	00 00       	nop
      88:	8e c0       	rjmp	.+284    	; 0x1a6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8c c0       	rjmp	.+280    	; 0x1a6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	7f c6       	rjmp	.+3326   	; 0xd90 <__vector_36>
      92:	00 00       	nop
      94:	ed c6       	rjmp	.+3546   	; 0xe70 <__vector_37>
      96:	00 00       	nop
      98:	86 c0       	rjmp	.+268    	; 0x1a6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	84 c0       	rjmp	.+264    	; 0x1a6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	82 c0       	rjmp	.+260    	; 0x1a6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	80 c0       	rjmp	.+256    	; 0x1a6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7e c0       	rjmp	.+252    	; 0x1a6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	7c c0       	rjmp	.+248    	; 0x1a6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	7a c0       	rjmp	.+244    	; 0x1a6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	78 c0       	rjmp	.+240    	; 0x1a6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	76 c0       	rjmp	.+236    	; 0x1a6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	74 c0       	rjmp	.+232    	; 0x1a6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	72 c0       	rjmp	.+228    	; 0x1a6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	70 c0       	rjmp	.+224    	; 0x1a6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	6e c0       	rjmp	.+220    	; 0x1a6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	6c c0       	rjmp	.+216    	; 0x1a6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	6a c0       	rjmp	.+212    	; 0x1a6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	68 c0       	rjmp	.+208    	; 0x1a6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	66 c0       	rjmp	.+204    	; 0x1a6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	64 c0       	rjmp	.+200    	; 0x1a6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	62 c0       	rjmp	.+196    	; 0x1a6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <myADC_startADC+0x4c>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e0 e9       	ldi	r30, 0x90	; 144
     17e:	fd e2       	ldi	r31, 0x2D	; 45
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	ae 33       	cpi	r26, 0x3E	; 62
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	29 e0       	ldi	r18, 0x09	; 9
     192:	ae e3       	ldi	r26, 0x3E	; 62
     194:	b2 e0       	ldi	r27, 0x02	; 2
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a7 34       	cpi	r26, 0x47	; 71
     19c:	b2 07       	cpc	r27, r18
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	c7 d0       	rcall	.+398    	; 0x330 <main>
     1a2:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <_exit>

000001a6 <__bad_interrupt>:
     1a6:	2c cf       	rjmp	.-424    	; 0x0 <__vectors>

000001a8 <RPI_receiveTask>:
	}
}


void vApplicationIdleHook()
{
     1a8:	ae d7       	rcall	.+3932   	; 0x1106 <myUSART_peekReceiveUSART1>
     1aa:	c8 2f       	mov	r28, r24
     1ac:	9a d7       	rcall	.+3892   	; 0x10e2 <myUSART_receiveHandShakeAck>
     1ae:	88 23       	and	r24, r24
     1b0:	19 f0       	breq	.+6      	; 0x1b8 <RPI_receiveTask+0x10>
     1b2:	5c d7       	rcall	.+3768   	; 0x106c <myUSART_receiveUSART1>
     1b4:	8b d7       	rcall	.+3862   	; 0x10cc <myUSART_completeHandShake>
     1b6:	f8 cf       	rjmp	.-16     	; 0x1a8 <RPI_receiveTask>
     1b8:	8c 2f       	mov	r24, r28
     1ba:	9f d7       	rcall	.+3902   	; 0x10fa <myUSART_receiveMessageACK>
     1bc:	88 23       	and	r24, r24
     1be:	11 f0       	breq	.+4      	; 0x1c4 <RPI_receiveTask+0x1c>
     1c0:	55 d7       	rcall	.+3754   	; 0x106c <myUSART_receiveUSART1>
     1c2:	f2 cf       	rjmp	.-28     	; 0x1a8 <RPI_receiveTask>
     1c4:	8c 2f       	mov	r24, r28
     1c6:	93 d7       	rcall	.+3878   	; 0x10ee <myUSART_receiveHandShakeStart>
     1c8:	88 23       	and	r24, r24
     1ca:	11 f0       	breq	.+4      	; 0x1d0 <RPI_receiveTask+0x28>
     1cc:	70 d7       	rcall	.+3808   	; 0x10ae <myUSART_waitForHandshake>
     1ce:	ec cf       	rjmp	.-40     	; 0x1a8 <RPI_receiveTask>
     1d0:	4d d7       	rcall	.+3738   	; 0x106c <myUSART_receiveUSART1>
     1d2:	ea cf       	rjmp	.-44     	; 0x1a8 <RPI_receiveTask>

000001d4 <RPI_sendTask>:
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
     1d8:	00 d0       	rcall	.+0      	; 0x1da <RPI_sendTask+0x6>
     1da:	00 d0       	rcall	.+0      	; 0x1dc <RPI_sendTask+0x8>
     1dc:	cd b7       	in	r28, 0x3d	; 61
     1de:	de b7       	in	r29, 0x3e	; 62
     1e0:	20 e0       	ldi	r18, 0x00	; 0
     1e2:	4f ef       	ldi	r20, 0xFF	; 255
     1e4:	5f ef       	ldi	r21, 0xFF	; 255
     1e6:	be 01       	movw	r22, r28
     1e8:	6a 5f       	subi	r22, 0xFA	; 250
     1ea:	7f 4f       	sbci	r23, 0xFF	; 255
     1ec:	80 91 8f 08 	lds	r24, 0x088F
     1f0:	90 91 90 08 	lds	r25, 0x0890
     1f4:	0e 94 39 0c 	call	0x1872	; 0x1872 <xQueueGenericReceive>
     1f8:	8e 81       	ldd	r24, Y+6	; 0x06
     1fa:	80 5d       	subi	r24, 0xD0	; 208
     1fc:	04 d7       	rcall	.+3592   	; 0x1006 <myUSART_transmitUSART1_c>
     1fe:	8a e0       	ldi	r24, 0x0A	; 10
     200:	02 d7       	rcall	.+3588   	; 0x1006 <myUSART_transmitUSART1_c>
     202:	8e 81       	ldd	r24, Y+6	; 0x06
     204:	9f ef       	ldi	r25, 0xFF	; 255
     206:	98 0f       	add	r25, r24
     208:	9e 83       	std	Y+6, r25	; 0x06
     20a:	88 23       	and	r24, r24
     20c:	21 f1       	breq	.+72     	; 0x256 <RPI_sendTask+0x82>
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	4f ef       	ldi	r20, 0xFF	; 255
     212:	5f ef       	ldi	r21, 0xFF	; 255
     214:	be 01       	movw	r22, r28
     216:	6f 5f       	subi	r22, 0xFF	; 255
     218:	7f 4f       	sbci	r23, 0xFF	; 255
     21a:	80 91 91 08 	lds	r24, 0x0891
     21e:	90 91 92 08 	lds	r25, 0x0892
     222:	0e 94 39 0c 	call	0x1872	; 0x1872 <xQueueGenericReceive>
     226:	89 81       	ldd	r24, Y+1	; 0x01
     228:	d7 d6       	rcall	.+3502   	; 0xfd8 <myUSART_transmitUSART0_c>
     22a:	89 81       	ldd	r24, Y+1	; 0x01
     22c:	ec d6       	rcall	.+3544   	; 0x1006 <myUSART_transmitUSART1_c>
     22e:	86 e0       	ldi	r24, 0x06	; 6
     230:	92 e0       	ldi	r25, 0x02	; 2
     232:	0e d7       	rcall	.+3612   	; 0x1050 <myUSART_transmitUSART0>
     234:	ce 01       	movw	r24, r28
     236:	02 96       	adiw	r24, 0x02	; 2
     238:	0b d7       	rcall	.+3606   	; 0x1050 <myUSART_transmitUSART0>
     23a:	ce 01       	movw	r24, r28
     23c:	02 96       	adiw	r24, 0x02	; 2
     23e:	fa d6       	rcall	.+3572   	; 0x1034 <myUSART_transmitUSART1>
     240:	8a e0       	ldi	r24, 0x0A	; 10
     242:	e1 d6       	rcall	.+3522   	; 0x1006 <myUSART_transmitUSART1_c>
     244:	89 e0       	ldi	r24, 0x09	; 9
     246:	92 e0       	ldi	r25, 0x02	; 2
     248:	03 d7       	rcall	.+3590   	; 0x1050 <myUSART_transmitUSART0>
     24a:	8e 81       	ldd	r24, Y+6	; 0x06
     24c:	9f ef       	ldi	r25, 0xFF	; 255
     24e:	98 0f       	add	r25, r24
     250:	9e 83       	std	Y+6, r25	; 0x06
     252:	81 11       	cpse	r24, r1
     254:	dc cf       	rjmp	.-72     	; 0x20e <RPI_sendTask+0x3a>
     256:	8a e0       	ldi	r24, 0x0A	; 10
     258:	bf d6       	rcall	.+3454   	; 0xfd8 <myUSART_transmitUSART0_c>
     25a:	c2 cf       	rjmp	.-124    	; 0x1e0 <RPI_sendTask+0xc>

0000025c <myTimerTask>:
     25c:	ea d4       	rcall	.+2516   	; 0xc32 <myTimer_Init>
     25e:	29 d5       	rcall	.+2642   	; 0xcb2 <myTimer_DelayChecker>
     260:	fe cf       	rjmp	.-4      	; 0x25e <myTimerTask+0x2>

00000262 <task1>:
     262:	26 9a       	sbi	0x04, 6	; 4
     264:	2e 9a       	sbi	0x05, 6	; 5
     266:	88 ee       	ldi	r24, 0xE8	; 232
     268:	93 e0       	ldi	r25, 0x03	; 3
     26a:	0e 94 a6 10 	call	0x214c	; 0x214c <vTaskDelay>
     26e:	85 b1       	in	r24, 0x05	; 5
     270:	15 b8       	out	0x05, r1	; 5
     272:	88 ee       	ldi	r24, 0xE8	; 232
     274:	93 e0       	ldi	r25, 0x03	; 3
     276:	0e 94 a6 10 	call	0x214c	; 0x214c <vTaskDelay>
     27a:	f4 cf       	rjmp	.-24     	; 0x264 <task1+0x2>

0000027c <setDigitalInputPowerReduction>:


void setDigitalInputPowerReduction()
{
	// Set when confirm which ADC pin not used for digital..
	DIDR0 = 0b11111111; // all adc pin not used for digital
     27c:	8f ef       	ldi	r24, 0xFF	; 255
     27e:	80 93 7e 00 	sts	0x007E, r24
	DIDR1 |= (1<<AIN1D) | (1<<AIN0D);
     282:	ef e7       	ldi	r30, 0x7F	; 127
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	90 81       	ld	r25, Z
     288:	93 60       	ori	r25, 0x03	; 3
     28a:	90 83       	st	Z, r25
	DIDR2 = 0b11111111; // add adc pin not used for digital
     28c:	80 93 7d 00 	sts	0x007D, r24
     290:	08 95       	ret

00000292 <setPowerReduction>:
}

// Shut down unused...
void setPowerReduction()
{
	PRR0 = (1<<PRTWI) | (1<<PRTIM2) | (1<<PRTIM1) | (1<<PRSPI); // Shut down I2C, timer2, timer 1, SPI
     292:	8c ec       	ldi	r24, 0xCC	; 204
     294:	80 93 64 00 	sts	0x0064, r24
	// Include USART0 after finish debugging using usb.... (1<<PRUSART0)
	
	PRR1 = (1<<PRTIM5) | (1<<PRTIM4) | (1<<PRTIM3) | (1<<PRUSART3) | (1<<PRUSART2); // Shut down timer5, timer4, timer3, USART3, USART2
     298:	8e e3       	ldi	r24, 0x3E	; 62
     29a:	80 93 65 00 	sts	0x0065, r24
	
	setDigitalInputPowerReduction();
     29e:	ee cf       	rjmp	.-36     	; 0x27c <setDigitalInputPowerReduction>
     2a0:	08 95       	ret

000002a2 <clearTimer>:
}

void clearTimer()
{
	// Clear Timer1
	TCCR1A = 0;     // Clear all settings
     2a2:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;     // Clear all settings
     2a6:	10 92 81 00 	sts	0x0081, r1
	TIMSK1 = 0;     // Disable all interrupts
     2aa:	10 92 6f 00 	sts	0x006F, r1

	// Clear Timer2
	TCCR2A = 0;     // Clear all settings
     2ae:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0;     // Clear all settings
     2b2:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;     // Disable all interrupts
     2b6:	10 92 70 00 	sts	0x0070, r1
	
	// Clear Timer3
	TCCR3A = 0;     // Clear all settings
     2ba:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;     // Clear all settings
     2be:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0;     // Disable all interrupts
     2c2:	10 92 71 00 	sts	0x0071, r1

	// Clear Timer4
	TCCR4A = 0;     // Clear all settings
     2c6:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0;     // Clear all settings
     2ca:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0;     // Disable all interrupts
     2ce:	10 92 72 00 	sts	0x0072, r1

	// Clear Timer5
	TCCR5A = 0;     // Clear all settings
     2d2:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;     // Clear all settings
     2d6:	10 92 21 01 	sts	0x0121, r1
	TIMSK5 = 0;     // Disable all interrupts
     2da:	10 92 73 00 	sts	0x0073, r1
     2de:	08 95       	ret

000002e0 <init>:
}

void init()
{
     2e0:	cf 93       	push	r28
	// Ensure atomic...
	ATOMIC_BLOCK( ATOMIC_RESTORESTATE )
     2e2:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2e4:	f8 94       	cli
	{
		clearTimer();
     2e6:	dd df       	rcall	.-70     	; 0x2a2 <clearTimer>
		setPowerReduction();
     2e8:	d4 df       	rcall	.-88     	; 0x292 <setPowerReduction>
		myUSART_USART0_Init();
     2ea:	2e d6       	rcall	.+3164   	; 0xf48 <myUSART_USART0_Init>
		myUSART_USART1_Init();
     2ec:	4d d6       	rcall	.+3226   	; 0xf88 <myUSART_USART1_Init>
		myADC_Init();
     2ee:	f5 d2       	rcall	.+1514   	; 0x8da <myADC_Init>
		
		MaxSonar_Init();
     2f0:	83 b3       	in	r24, 0x13	; 19
     2f2:	83 60       	ori	r24, 0x03	; 3
     2f4:	83 bb       	out	0x13, r24	; 19
		
		myHcSonar_Init();
     2f6:	8e d2       	rcall	.+1308   	; 0x814 <myHcSonar_Init>
		
		
		queueObstacleNumber = xQueueCreate(QUEUE_SIZE, sizeof (char)); // create queue
     2f8:	40 e0       	ldi	r20, 0x00	; 0
     2fa:	61 e0       	ldi	r22, 0x01	; 1
     2fc:	85 e0       	ldi	r24, 0x05	; 5
     2fe:	0e 94 14 0b 	call	0x1628	; 0x1628 <xQueueGenericCreate>
     302:	90 93 90 08 	sts	0x0890, r25
     306:	80 93 8f 08 	sts	0x088F, r24
		queueObstacleData = xQueueCreate( (QUEUE_SIZE*SONAR_NUM), sizeof (obstacleData)); // create queue
     30a:	40 e0       	ldi	r20, 0x00	; 0
     30c:	65 e0       	ldi	r22, 0x05	; 5
     30e:	84 e1       	ldi	r24, 0x14	; 20
     310:	0e 94 14 0b 	call	0x1628	; 0x1628 <xQueueGenericCreate>
     314:	90 93 92 08 	sts	0x0892, r25
     318:	80 93 91 08 	sts	0x0891, r24
		
		MOTOR_LEFT_INIT();
     31c:	6c 9a       	sbi	0x0d, 4	; 13
		MOTOR_RIGHT_INIT();
     31e:	e1 e0       	ldi	r30, 0x01	; 1
     320:	f1 e0       	ldi	r31, 0x01	; 1
     322:	80 81       	ld	r24, Z
     324:	80 61       	ori	r24, 0x10	; 16
     326:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     328:	cf bf       	out	0x3f, r28	; 63
		
		
	}
	
	sei(); // enable interrupts..
     32a:	78 94       	sei
}
     32c:	cf 91       	pop	r28
     32e:	08 95       	ret

00000330 <main>:
	
	// do nth
}

int main(void)
{
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
     338:	2a 97       	sbiw	r28, 0x0a	; 10
     33a:	0f b6       	in	r0, 0x3f	; 63
     33c:	f8 94       	cli
     33e:	de bf       	out	0x3e, r29	; 62
     340:	0f be       	out	0x3f, r0	; 63
     342:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
		TaskHandle_t t_maxSonar, t_rx, t_tx, t_delay, t1;
	
		init();
     344:	cd df       	rcall	.-102    	; 0x2e0 <init>

		xTaskCreate(task1, "Task 1", BLINK_1_STACK, NULL, BLINK_1_PRIORITY, &t1);
     346:	a1 2c       	mov	r10, r1
     348:	b1 2c       	mov	r11, r1
     34a:	c1 2c       	mov	r12, r1
     34c:	d1 2c       	mov	r13, r1
     34e:	ce 01       	movw	r24, r28
     350:	01 96       	adiw	r24, 0x01	; 1
     352:	7c 01       	movw	r14, r24
     354:	01 e0       	ldi	r16, 0x01	; 1
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	45 e5       	ldi	r20, 0x55	; 85
     35c:	50 e0       	ldi	r21, 0x00	; 0
     35e:	6c e0       	ldi	r22, 0x0C	; 12
     360:	72 e0       	ldi	r23, 0x02	; 2
     362:	81 e3       	ldi	r24, 0x31	; 49
     364:	91 e0       	ldi	r25, 0x01	; 1
     366:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <xTaskGenericCreate>
		//xTaskCreate(task2, "Task 2", BLINK_2_STACK, NULL, BLINK_2_PRIORITY, &t2);
		
		xTaskCreate(myTimerTask, "myTimer", MY_TIMER_STACK, (&t_delay) , MY_TIMER_PRIORITY, &t_delay); // danger?!?		
     36a:	ce 01       	movw	r24, r28
     36c:	03 96       	adiw	r24, 0x03	; 3
     36e:	7c 01       	movw	r14, r24
     370:	04 e0       	ldi	r16, 0x04	; 4
     372:	9c 01       	movw	r18, r24
     374:	49 e6       	ldi	r20, 0x69	; 105
     376:	50 e0       	ldi	r21, 0x00	; 0
     378:	63 e1       	ldi	r22, 0x13	; 19
     37a:	72 e0       	ldi	r23, 0x02	; 2
     37c:	8e e2       	ldi	r24, 0x2E	; 46
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <xTaskGenericCreate>
		xTaskCreate(Sonar_Task, "maxSonar", MAXSONAR_STACK, NULL, MAXSONAR_PRIORITY, &t_maxSonar);
     384:	ce 01       	movw	r24, r28
     386:	09 96       	adiw	r24, 0x09	; 9
     388:	7c 01       	movw	r14, r24
     38a:	02 e0       	ldi	r16, 0x02	; 2
     38c:	20 e0       	ldi	r18, 0x00	; 0
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	4f e4       	ldi	r20, 0x4F	; 79
     392:	51 e0       	ldi	r21, 0x01	; 1
     394:	6b e1       	ldi	r22, 0x1B	; 27
     396:	72 e0       	ldi	r23, 0x02	; 2
     398:	8c e5       	ldi	r24, 0x5C	; 92
     39a:	92 e0       	ldi	r25, 0x02	; 2
     39c:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <xTaskGenericCreate>

		
		// Need fix receive concurrency issues.
		xTaskCreate(RPI_receiveTask, "RPI_Receive", RPI_RECEIVE_STACK, NULL, RPI_RECEIVE_PRIORITY, &t_rx);
     3a0:	ce 01       	movw	r24, r28
     3a2:	07 96       	adiw	r24, 0x07	; 7
     3a4:	7c 01       	movw	r14, r24
     3a6:	03 e0       	ldi	r16, 0x03	; 3
     3a8:	20 e0       	ldi	r18, 0x00	; 0
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	47 e8       	ldi	r20, 0x87	; 135
     3ae:	50 e0       	ldi	r21, 0x00	; 0
     3b0:	64 e2       	ldi	r22, 0x24	; 36
     3b2:	72 e0       	ldi	r23, 0x02	; 2
     3b4:	84 ed       	ldi	r24, 0xD4	; 212
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <xTaskGenericCreate>
		xTaskCreate(RPI_sendTask, "RPI_Send", RPI_SEND_STACK, NULL, RPI_SEND_PRIORITY, &t_tx);
     3bc:	ce 01       	movw	r24, r28
     3be:	05 96       	adiw	r24, 0x05	; 5
     3c0:	7c 01       	movw	r14, r24
     3c2:	01 e0       	ldi	r16, 0x01	; 1
     3c4:	20 e0       	ldi	r18, 0x00	; 0
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	47 e8       	ldi	r20, 0x87	; 135
     3ca:	50 e0       	ldi	r21, 0x00	; 0
     3cc:	60 e3       	ldi	r22, 0x30	; 48
     3ce:	72 e0       	ldi	r23, 0x02	; 2
     3d0:	8a ee       	ldi	r24, 0xEA	; 234
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <xTaskGenericCreate>
	

		
		vTaskStartScheduler();
     3d8:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <vTaskStartScheduler>
     3dc:	b3 cf       	rjmp	.-154    	; 0x344 <main+0x14>

000003de <obstacleSend>:
	sei(); // enable interrupts..
}


void obstacleSend(char deviceBlocked, int reading)
{
     3de:	1f 93       	push	r17
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	00 d0       	rcall	.+0      	; 0x3e6 <obstacleSend+0x8>
     3e6:	1f 92       	push	r1
     3e8:	1f 92       	push	r1
     3ea:	cd b7       	in	r28, 0x3d	; 61
     3ec:	de b7       	in	r29, 0x3e	; 62
     3ee:	18 2f       	mov	r17, r24
     3f0:	cb 01       	movw	r24, r22
	obstacleData queueData;
	
	
	
	if(deviceBlocked)
     3f2:	11 23       	and	r17, r17
     3f4:	99 f0       	breq	.+38     	; 0x41c <obstacleSend+0x3e>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     3f6:	4a e0       	ldi	r20, 0x0A	; 10
     3f8:	be 01       	movw	r22, r28
     3fa:	6e 5f       	subi	r22, 0xFE	; 254
     3fc:	7f 4f       	sbci	r23, 0xFF	; 255
     3fe:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__itoa_ncheck>
	{
		itoa(reading, queueData.data, 10); // convert to ascii
		
		queueData.deviceID = deviceBlocked;
     402:	19 83       	std	Y+1, r17	; 0x01
		
		xQueueSendToBack(queueObstacleData, &queueData, portMAX_DELAY); // send data to queueData
     404:	20 e0       	ldi	r18, 0x00	; 0
     406:	4f ef       	ldi	r20, 0xFF	; 255
     408:	5f ef       	ldi	r21, 0xFF	; 255
     40a:	be 01       	movw	r22, r28
     40c:	6f 5f       	subi	r22, 0xFF	; 255
     40e:	7f 4f       	sbci	r23, 0xFF	; 255
     410:	80 91 91 08 	lds	r24, 0x0891
     414:	90 91 92 08 	lds	r25, 0x0892
     418:	0e 94 41 0b 	call	0x1682	; 0x1682 <xQueueGenericSend>
	}
}
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	1f 91       	pop	r17
     42c:	08 95       	ret

0000042e <sendObstacleDetected>:



// Queue the obstacle to send..
void sendObstacleDetected(char obstacleDetected, char * deviceBlocked, int frontSonar, int leftSonar, int rightSonar, int btmIR, int topSonar)
{
     42e:	6f 92       	push	r6
     430:	7f 92       	push	r7
     432:	8f 92       	push	r8
     434:	9f 92       	push	r9
     436:	af 92       	push	r10
     438:	bf 92       	push	r11
     43a:	cf 92       	push	r12
     43c:	df 92       	push	r13
     43e:	ef 92       	push	r14
     440:	ff 92       	push	r15
     442:	0f 93       	push	r16
     444:	1f 93       	push	r17
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	1f 92       	push	r1
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
     450:	89 83       	std	Y+1, r24	; 0x01
     452:	5b 01       	movw	r10, r22
     454:	3a 01       	movw	r6, r20
     456:	49 01       	movw	r8, r18
	//if(obstacleDetected > 0)
	{
		
		xQueueSendToBack(queueObstacleNumber,  &obstacleDetected, portMAX_DELAY); // send obstacle...
     458:	20 e0       	ldi	r18, 0x00	; 0
     45a:	4f ef       	ldi	r20, 0xFF	; 255
     45c:	5f ef       	ldi	r21, 0xFF	; 255
     45e:	be 01       	movw	r22, r28
     460:	6f 5f       	subi	r22, 0xFF	; 255
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	80 91 8f 08 	lds	r24, 0x088F
     468:	90 91 90 08 	lds	r25, 0x0890
     46c:	0e 94 41 0b 	call	0x1682	; 0x1682 <xQueueGenericSend>
		
		obstacleSend(deviceBlocked[FRONT_DEVICE], frontSonar);
     470:	b3 01       	movw	r22, r6
     472:	f5 01       	movw	r30, r10
     474:	80 81       	ld	r24, Z
     476:	b3 df       	rcall	.-154    	; 0x3de <obstacleSend>

		obstacleSend(deviceBlocked[LEFT_DEVICE], leftSonar);
     478:	b4 01       	movw	r22, r8
     47a:	f5 01       	movw	r30, r10
     47c:	81 81       	ldd	r24, Z+1	; 0x01
     47e:	af df       	rcall	.-162    	; 0x3de <obstacleSend>

		obstacleSend(deviceBlocked[RIGHT_DEVICE], rightSonar);
     480:	b8 01       	movw	r22, r16
     482:	f5 01       	movw	r30, r10
     484:	82 81       	ldd	r24, Z+2	; 0x02
     486:	ab df       	rcall	.-170    	; 0x3de <obstacleSend>

		obstacleSend(deviceBlocked[BTM_DEVICE], btmIR);
     488:	b7 01       	movw	r22, r14
     48a:	f5 01       	movw	r30, r10
     48c:	83 81       	ldd	r24, Z+3	; 0x03
     48e:	a7 df       	rcall	.-178    	; 0x3de <obstacleSend>
		
		obstacleSend(deviceBlocked[TOP_DEVICE], topSonar);
     490:	b6 01       	movw	r22, r12
     492:	f5 01       	movw	r30, r10
     494:	84 81       	ldd	r24, Z+4	; 0x04
     496:	a3 df       	rcall	.-186    	; 0x3de <obstacleSend>
		
	}
}
     498:	0f 90       	pop	r0
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	1f 91       	pop	r17
     4a0:	0f 91       	pop	r16
     4a2:	ff 90       	pop	r15
     4a4:	ef 90       	pop	r14
     4a6:	df 90       	pop	r13
     4a8:	cf 90       	pop	r12
     4aa:	bf 90       	pop	r11
     4ac:	af 90       	pop	r10
     4ae:	9f 90       	pop	r9
     4b0:	8f 90       	pop	r8
     4b2:	7f 90       	pop	r7
     4b4:	6f 90       	pop	r6
     4b6:	08 95       	ret

000004b8 <Sonar_Task>:
	}
}


void Sonar_Task(void *p)
{
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
     4c0:	2c 97       	sbiw	r28, 0x0c	; 12
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	f8 94       	cli
     4c6:	de bf       	out	0x3e, r29	; 62
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	cd bf       	out	0x3d, r28	; 61
	TickType_t xLastWakeTime;
	char obstacleDetected = 0;
     4cc:	1b 82       	std	Y+3, r1	; 0x03
	int topSonar, frontSonar, leftSonar, rightSonar, btmIR;
	char deviceBlocked[5] = {0}; // flag to indicate if we should send the reading to RPI
     4ce:	fe 01       	movw	r30, r28
     4d0:	34 96       	adiw	r30, 0x04	; 4
     4d2:	85 e0       	ldi	r24, 0x05	; 5
     4d4:	df 01       	movw	r26, r30
     4d6:	1d 92       	st	X+, r1
     4d8:	8a 95       	dec	r24
     4da:	e9 f7       	brne	.-6      	; 0x4d6 <Sonar_Task+0x1e>
	
	int calibratedBtmIR = mySharpIR_Read(AN12); // get first value...
     4dc:	84 e2       	ldi	r24, 0x24	; 36
     4de:	0c d3       	rcall	.+1560   	; 0xaf8 <mySharpIR_Read>
     4e0:	9a 87       	std	Y+10, r25	; 0x0a
     4e2:	89 87       	std	Y+9, r24	; 0x09
	
	xLastWakeTime = xTaskGetTickCount(); // get tick count
     4e4:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <xTaskGetTickCount>
     4e8:	9a 83       	std	Y+2, r25	; 0x02
     4ea:	89 83       	std	Y+1, r24	; 0x01
		
	while(1)
	{
		myMaxSonar_TopStart();
     4ec:	ae d1       	rcall	.+860    	; 0x84a <myMaxSonar_TopStart>
		topSonar = myMaxSonar_Read(AN11);
     4ee:	83 e2       	ldi	r24, 0x23	; 35
     4f0:	b2 d1       	rcall	.+868    	; 0x856 <myMaxSonar_Read>
     4f2:	9c 87       	std	Y+12, r25	; 0x0c
     4f4:	8b 87       	std	Y+11, r24	; 0x0b
	
		myMaxSonar_BtmStart();
     4f6:	a3 d1       	rcall	.+838    	; 0x83e <myMaxSonar_BtmStart>
		frontSonar	= myMaxSonar_Read(AN15);
     4f8:	87 e2       	ldi	r24, 0x27	; 39
     4fa:	ad d1       	rcall	.+858    	; 0x856 <myMaxSonar_Read>
     4fc:	3c 01       	movw	r6, r24
		leftSonar	= myMaxSonar_Read(AN14);
     4fe:	86 e2       	ldi	r24, 0x26	; 38
     500:	aa d1       	rcall	.+852    	; 0x856 <myMaxSonar_Read>
     502:	1c 01       	movw	r2, r24
		rightSonar	= myMaxSonar_Read(AN13); 
     504:	85 e2       	ldi	r24, 0x25	; 37
     506:	a7 d1       	rcall	.+846    	; 0x856 <myMaxSonar_Read>
     508:	2c 01       	movw	r4, r24
		
		btmIR		= mySharpIR_Read(AN12);	
     50a:	84 e2       	ldi	r24, 0x24	; 36
     50c:	f5 d2       	rcall	.+1514   	; 0xaf8 <mySharpIR_Read>
     50e:	4c 01       	movw	r8, r24
		
		mySharpIR_ReCalibrate(&calibratedBtmIR, btmIR); // attempt to re-calibrate btm ir sensor if stable enough..
     510:	bc 01       	movw	r22, r24
     512:	ce 01       	movw	r24, r28
     514:	09 96       	adiw	r24, 0x09	; 9
     516:	29 d3       	rcall	.+1618   	; 0xb6a <mySharpIR_ReCalibrate>
	
		obstacleDetected = obstacleDetection(frontSonar, obstacleDetected, deviceBlocked, leftSonar, rightSonar, topSonar, calibratedBtmIR, btmIR);
     518:	c9 84       	ldd	r12, Y+9	; 0x09
     51a:	da 84       	ldd	r13, Y+10	; 0x0a
     51c:	54 01       	movw	r10, r8
     51e:	eb 84       	ldd	r14, Y+11	; 0x0b
     520:	fc 84       	ldd	r15, Y+12	; 0x0c
     522:	82 01       	movw	r16, r4
     524:	91 01       	movw	r18, r2
     526:	ae 01       	movw	r20, r28
     528:	4c 5f       	subi	r20, 0xFC	; 252
     52a:	5f 4f       	sbci	r21, 0xFF	; 255
     52c:	6b 81       	ldd	r22, Y+3	; 0x03
     52e:	c3 01       	movw	r24, r6
     530:	b3 d2       	rcall	.+1382   	; 0xa98 <obstacleDetection>
     532:	8b 83       	std	Y+3, r24	; 0x03
		obstacleAvoidance(frontSonar, leftSonar, rightSonar, btmIR, deviceBlocked);
     534:	8e 01       	movw	r16, r28
     536:	0c 5f       	subi	r16, 0xFC	; 252
     538:	1f 4f       	sbci	r17, 0xFF	; 255
     53a:	94 01       	movw	r18, r8
     53c:	a2 01       	movw	r20, r4
     53e:	b1 01       	movw	r22, r2
     540:	c3 01       	movw	r24, r6
     542:	4c d2       	rcall	.+1176   	; 0x9dc <obstacleAvoidance>
		
		// for debuggin to print all...
		cheatPrintAll(deviceBlocked, &obstacleDetected); 
     544:	be 01       	movw	r22, r28
     546:	6d 5f       	subi	r22, 0xFD	; 253
     548:	7f 4f       	sbci	r23, 0xFF	; 255
     54a:	c8 01       	movw	r24, r16
     54c:	96 d2       	rcall	.+1324   	; 0xa7a <cheatPrintAll>
		// remove top statement... when not debuggin..
		
		sendObstacleDetected(obstacleDetected, deviceBlocked, frontSonar, leftSonar, rightSonar, btmIR, topSonar);
     54e:	cb 84       	ldd	r12, Y+11	; 0x0b
     550:	dc 84       	ldd	r13, Y+12	; 0x0c
     552:	74 01       	movw	r14, r8
     554:	82 01       	movw	r16, r4
     556:	91 01       	movw	r18, r2
     558:	a3 01       	movw	r20, r6
     55a:	be 01       	movw	r22, r28
     55c:	6c 5f       	subi	r22, 0xFC	; 252
     55e:	7f 4f       	sbci	r23, 0xFF	; 255
     560:	8b 81       	ldd	r24, Y+3	; 0x03
     562:	65 df       	rcall	.-310    	; 0x42e <sendObstacleDetected>
	
		// reset the variables back to 0
		obstacleDetected = 0; 
     564:	1b 82       	std	Y+3, r1	; 0x03
		deviceBlocked[0] = deviceBlocked[1] = deviceBlocked[2] = deviceBlocked[3] = deviceBlocked[4] = 0;
     566:	18 86       	std	Y+8, r1	; 0x08
     568:	1f 82       	std	Y+7, r1	; 0x07
     56a:	1e 82       	std	Y+6, r1	; 0x06
     56c:	1d 82       	std	Y+5, r1	; 0x05
     56e:	1c 82       	std	Y+4, r1	; 0x04
		
		vTaskDelayUntil( &xLastWakeTime, 150);  // delay 150 ms for 3 sonar chain...
     570:	66 e9       	ldi	r22, 0x96	; 150
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	ce 01       	movw	r24, r28
     576:	01 96       	adiw	r24, 0x01	; 1
     578:	0e 94 68 10 	call	0x20d0	; 0x20d0 <vTaskDelayUntil>
     57c:	b7 cf       	rjmp	.-146    	; 0x4ec <Sonar_Task+0x34>

0000057e <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     584:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     588:	80 91 3e 02 	lds	r24, 0x023E
     58c:	90 91 3f 02 	lds	r25, 0x023F
     590:	89 2b       	or	r24, r25
     592:	31 f4       	brne	.+12     	; 0x5a0 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     594:	83 e4       	ldi	r24, 0x43	; 67
     596:	92 e0       	ldi	r25, 0x02	; 2
     598:	90 93 3f 02 	sts	0x023F, r25
     59c:	80 93 3e 02 	sts	0x023E, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     5a0:	40 91 40 02 	lds	r20, 0x0240
     5a4:	50 91 41 02 	lds	r21, 0x0241
     5a8:	9e 01       	movw	r18, r28
     5aa:	24 0f       	add	r18, r20
     5ac:	35 1f       	adc	r19, r21
     5ae:	2b 3d       	cpi	r18, 0xDB	; 219
     5b0:	85 e0       	ldi	r24, 0x05	; 5
     5b2:	38 07       	cpc	r19, r24
     5b4:	70 f4       	brcc	.+28     	; 0x5d2 <pvPortMalloc+0x54>
     5b6:	42 17       	cp	r20, r18
     5b8:	53 07       	cpc	r21, r19
     5ba:	70 f4       	brcc	.+28     	; 0x5d8 <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     5bc:	c0 91 3e 02 	lds	r28, 0x023E
     5c0:	d0 91 3f 02 	lds	r29, 0x023F
     5c4:	c4 0f       	add	r28, r20
     5c6:	d5 1f       	adc	r29, r21
			xNextFreeByte += xWantedSize;
     5c8:	30 93 41 02 	sts	0x0241, r19
     5cc:	20 93 40 02 	sts	0x0240, r18
     5d0:	05 c0       	rjmp	.+10     	; 0x5dc <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     5d2:	c0 e0       	ldi	r28, 0x00	; 0
     5d4:	d0 e0       	ldi	r29, 0x00	; 0
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <pvPortMalloc+0x5e>
     5d8:	c0 e0       	ldi	r28, 0x00	; 0
     5da:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     5dc:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     5e0:	ce 01       	movw	r24, r28
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	08 95       	ret

000005e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     5e8:	08 95       	ret

000005ea <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     5ea:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5ec:	03 96       	adiw	r24, 0x03	; 3
     5ee:	92 83       	std	Z+2, r25	; 0x02
     5f0:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     5f2:	2f ef       	ldi	r18, 0xFF	; 255
     5f4:	3f ef       	ldi	r19, 0xFF	; 255
     5f6:	34 83       	std	Z+4, r19	; 0x04
     5f8:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5fa:	96 83       	std	Z+6, r25	; 0x06
     5fc:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5fe:	90 87       	std	Z+8, r25	; 0x08
     600:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     602:	10 82       	st	Z, r1
     604:	08 95       	ret

00000606 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     606:	fc 01       	movw	r30, r24
     608:	11 86       	std	Z+9, r1	; 0x09
     60a:	10 86       	std	Z+8, r1	; 0x08
     60c:	08 95       	ret

0000060e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	9c 01       	movw	r18, r24
     614:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     616:	dc 01       	movw	r26, r24
     618:	11 96       	adiw	r26, 0x01	; 1
     61a:	cd 91       	ld	r28, X+
     61c:	dc 91       	ld	r29, X
     61e:	12 97       	sbiw	r26, 0x02	; 2

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     620:	d3 83       	std	Z+3, r29	; 0x03
     622:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     624:	8c 81       	ldd	r24, Y+4	; 0x04
     626:	9d 81       	ldd	r25, Y+5	; 0x05
     628:	95 83       	std	Z+5, r25	; 0x05
     62a:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxPrevious->pxNext = pxNewListItem;
     62c:	8c 81       	ldd	r24, Y+4	; 0x04
     62e:	9d 81       	ldd	r25, Y+5	; 0x05
     630:	dc 01       	movw	r26, r24
     632:	13 96       	adiw	r26, 0x03	; 3
     634:	7c 93       	st	X, r23
     636:	6e 93       	st	-X, r22
     638:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     63a:	7d 83       	std	Y+5, r23	; 0x05
     63c:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     63e:	31 87       	std	Z+9, r19	; 0x09
     640:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     642:	f9 01       	movw	r30, r18
     644:	80 81       	ld	r24, Z
     646:	8f 5f       	subi	r24, 0xFF	; 255
     648:	80 83       	st	Z, r24
}
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	08 95       	ret

00000650 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     656:	48 81       	ld	r20, Y
     658:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     65a:	4f 3f       	cpi	r20, 0xFF	; 255
     65c:	2f ef       	ldi	r18, 0xFF	; 255
     65e:	52 07       	cpc	r21, r18
     660:	21 f4       	brne	.+8      	; 0x66a <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     662:	fc 01       	movw	r30, r24
     664:	a7 81       	ldd	r26, Z+7	; 0x07
     666:	b0 85       	ldd	r27, Z+8	; 0x08
     668:	0d c0       	rjmp	.+26     	; 0x684 <vListInsert+0x34>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     66a:	dc 01       	movw	r26, r24
     66c:	13 96       	adiw	r26, 0x03	; 3
     66e:	12 96       	adiw	r26, 0x02	; 2
     670:	ed 91       	ld	r30, X+
     672:	fc 91       	ld	r31, X
     674:	13 97       	sbiw	r26, 0x03	; 3
     676:	20 81       	ld	r18, Z
     678:	31 81       	ldd	r19, Z+1	; 0x01
     67a:	42 17       	cp	r20, r18
     67c:	53 07       	cpc	r21, r19
     67e:	10 f0       	brcs	.+4      	; 0x684 <vListInsert+0x34>
     680:	df 01       	movw	r26, r30
     682:	f5 cf       	rjmp	.-22     	; 0x66e <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     684:	12 96       	adiw	r26, 0x02	; 2
     686:	ed 91       	ld	r30, X+
     688:	fc 91       	ld	r31, X
     68a:	13 97       	sbiw	r26, 0x03	; 3
     68c:	fb 83       	std	Y+3, r31	; 0x03
     68e:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     690:	d5 83       	std	Z+5, r29	; 0x05
     692:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     694:	bd 83       	std	Y+5, r27	; 0x05
     696:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     698:	13 96       	adiw	r26, 0x03	; 3
     69a:	dc 93       	st	X, r29
     69c:	ce 93       	st	-X, r28
     69e:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     6a0:	99 87       	std	Y+9, r25	; 0x09
     6a2:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     6a4:	fc 01       	movw	r30, r24
     6a6:	20 81       	ld	r18, Z
     6a8:	2f 5f       	subi	r18, 0xFF	; 255
     6aa:	20 83       	st	Z, r18
}
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	08 95       	ret

000006b2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     6b8:	a0 85       	ldd	r26, Z+8	; 0x08
     6ba:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     6bc:	c2 81       	ldd	r28, Z+2	; 0x02
     6be:	d3 81       	ldd	r29, Z+3	; 0x03
     6c0:	84 81       	ldd	r24, Z+4	; 0x04
     6c2:	95 81       	ldd	r25, Z+5	; 0x05
     6c4:	9d 83       	std	Y+5, r25	; 0x05
     6c6:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     6c8:	c4 81       	ldd	r28, Z+4	; 0x04
     6ca:	d5 81       	ldd	r29, Z+5	; 0x05
     6cc:	82 81       	ldd	r24, Z+2	; 0x02
     6ce:	93 81       	ldd	r25, Z+3	; 0x03
     6d0:	9b 83       	std	Y+3, r25	; 0x03
     6d2:	8a 83       	std	Y+2, r24	; 0x02

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     6d4:	11 96       	adiw	r26, 0x01	; 1
     6d6:	cd 91       	ld	r28, X+
     6d8:	dc 91       	ld	r29, X
     6da:	12 97       	sbiw	r26, 0x02	; 2
     6dc:	ce 17       	cp	r28, r30
     6de:	df 07       	cpc	r29, r31
     6e0:	31 f4       	brne	.+12     	; 0x6ee <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     6e2:	8c 81       	ldd	r24, Y+4	; 0x04
     6e4:	9d 81       	ldd	r25, Y+5	; 0x05
     6e6:	12 96       	adiw	r26, 0x02	; 2
     6e8:	9c 93       	st	X, r25
     6ea:	8e 93       	st	-X, r24
     6ec:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     6ee:	11 86       	std	Z+9, r1	; 0x09
     6f0:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     6f2:	8c 91       	ld	r24, X
     6f4:	81 50       	subi	r24, 0x01	; 1
     6f6:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	08 95       	ret

000006fe <__vector_9>:
volatile int us_tickLapsed;
SemaphoreHandle_t semaReadReady;


ISR(PCINT0_vect) //Digital pin 50
{
     6fe:	1f 92       	push	r1
     700:	0f 92       	push	r0
     702:	0f b6       	in	r0, 0x3f	; 63
     704:	0f 92       	push	r0
     706:	11 24       	eor	r1, r1
     708:	0b b6       	in	r0, 0x3b	; 59
     70a:	0f 92       	push	r0
     70c:	2f 93       	push	r18
     70e:	3f 93       	push	r19
     710:	4f 93       	push	r20
     712:	5f 93       	push	r21
     714:	6f 93       	push	r22
     716:	7f 93       	push	r23
     718:	8f 93       	push	r24
     71a:	9f 93       	push	r25
     71c:	af 93       	push	r26
     71e:	bf 93       	push	r27
     720:	ef 93       	push	r30
     722:	ff 93       	push	r31
		
	if(HC_Echo_Read)
     724:	1b 9b       	sbis	0x03, 3	; 3
     726:	0d c0       	rjmp	.+26     	; 0x742 <__vector_9+0x44>
	{
		us_tickStart = myTimer_Read();
     728:	9e d2       	rcall	.+1340   	; 0xc66 <myTimer_Read>
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	90 93 98 08 	sts	0x0898, r25
     730:	80 93 97 08 	sts	0x0897, r24
		ms_tickStart = xTaskGetTickCountFromISR();
     734:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <xTaskGetTickCountFromISR>
     738:	90 93 94 08 	sts	0x0894, r25
     73c:	80 93 93 08 	sts	0x0893, r24
     740:	56 c0       	rjmp	.+172    	; 0x7ee <__vector_9+0xf0>
	}	
	else if (!(HC_Echo_Read))
     742:	1b 99       	sbic	0x03, 3	; 3
     744:	54 c0       	rjmp	.+168    	; 0x7ee <__vector_9+0xf0>
	{

		if ((ms_tickEnd = xTaskGetTickCountFromISR()) < ms_tickStart)
     746:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <xTaskGetTickCountFromISR>
     74a:	90 93 9e 08 	sts	0x089E, r25
     74e:	80 93 9d 08 	sts	0x089D, r24
     752:	20 91 93 08 	lds	r18, 0x0893
     756:	30 91 94 08 	lds	r19, 0x0894
     75a:	82 17       	cp	r24, r18
     75c:	93 07       	cpc	r25, r19
     75e:	4c f4       	brge	.+18     	; 0x772 <__vector_9+0x74>
			ms_tickEnd += 65535;
     760:	80 91 9d 08 	lds	r24, 0x089D
     764:	90 91 9e 08 	lds	r25, 0x089E
     768:	01 97       	sbiw	r24, 0x01	; 1
     76a:	90 93 9e 08 	sts	0x089E, r25
     76e:	80 93 9d 08 	sts	0x089D, r24
		
		if ((us_tickEnd = myTimer_Read()) < us_tickStart) // if smaller then add...
     772:	79 d2       	rcall	.+1266   	; 0xc66 <myTimer_Read>
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	90 93 a0 08 	sts	0x08A0, r25
     77a:	80 93 9f 08 	sts	0x089F, r24
     77e:	20 91 97 08 	lds	r18, 0x0897
     782:	30 91 98 08 	lds	r19, 0x0898
     786:	82 17       	cp	r24, r18
     788:	93 07       	cpc	r25, r19
     78a:	54 f4       	brge	.+20     	; 0x7a0 <__vector_9+0xa2>
			us_tickEnd += MAX_TICKS;
     78c:	80 91 9f 08 	lds	r24, 0x089F
     790:	90 91 a0 08 	lds	r25, 0x08A0
     794:	86 50       	subi	r24, 0x06	; 6
     796:	9f 4f       	sbci	r25, 0xFF	; 255
     798:	90 93 a0 08 	sts	0x08A0, r25
     79c:	80 93 9f 08 	sts	0x089F, r24
		
			
			
		us_tickLapsed = us_tickEnd - us_tickStart;
     7a0:	80 91 9f 08 	lds	r24, 0x089F
     7a4:	90 91 a0 08 	lds	r25, 0x08A0
     7a8:	20 91 97 08 	lds	r18, 0x0897
     7ac:	30 91 98 08 	lds	r19, 0x0898
     7b0:	82 1b       	sub	r24, r18
     7b2:	93 0b       	sbc	r25, r19
     7b4:	90 93 9a 08 	sts	0x089A, r25
     7b8:	80 93 99 08 	sts	0x0899, r24
		ms_tickLapsed = ms_tickEnd - ms_tickStart;
     7bc:	80 91 9d 08 	lds	r24, 0x089D
     7c0:	90 91 9e 08 	lds	r25, 0x089E
     7c4:	20 91 93 08 	lds	r18, 0x0893
     7c8:	30 91 94 08 	lds	r19, 0x0894
     7cc:	82 1b       	sub	r24, r18
     7ce:	93 0b       	sbc	r25, r19
     7d0:	90 93 96 08 	sts	0x0896, r25
     7d4:	80 93 95 08 	sts	0x0895, r24
		
		xSemaphoreGiveFromISR(semaReadReady, pdFALSE);
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	80 91 9b 08 	lds	r24, 0x089B
     7e6:	90 91 9c 08 	lds	r25, 0x089C
     7ea:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <xQueueGenericSendFromISR>
	}	
}
     7ee:	ff 91       	pop	r31
     7f0:	ef 91       	pop	r30
     7f2:	bf 91       	pop	r27
     7f4:	af 91       	pop	r26
     7f6:	9f 91       	pop	r25
     7f8:	8f 91       	pop	r24
     7fa:	7f 91       	pop	r23
     7fc:	6f 91       	pop	r22
     7fe:	5f 91       	pop	r21
     800:	4f 91       	pop	r20
     802:	3f 91       	pop	r19
     804:	2f 91       	pop	r18
     806:	0f 90       	pop	r0
     808:	0b be       	out	0x3b, r0	; 59
     80a:	0f 90       	pop	r0
     80c:	0f be       	out	0x3f, r0	; 63
     80e:	0f 90       	pop	r0
     810:	1f 90       	pop	r1
     812:	18 95       	reti

00000814 <myHcSonar_Init>:

void myHcSonar_Init()
{
	HC_Trigger_Init(); // set trigger as output
     814:	22 9a       	sbi	0x04, 2	; 4
	HC_Echo_Init(); // set echo as input
     816:	23 98       	cbi	0x04, 3	; 4
		
	PCICR |= (1<<PCIE0); // enable control for PCINT 7:0
     818:	e8 e6       	ldi	r30, 0x68	; 104
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	80 81       	ld	r24, Z
     81e:	81 60       	ori	r24, 0x01	; 1
     820:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT3); // set interrupt for PCINT3
     822:	eb e6       	ldi	r30, 0x6B	; 107
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	80 81       	ld	r24, Z
     828:	88 60       	ori	r24, 0x08	; 8
     82a:	80 83       	st	Z, r24
	
	semaReadReady = xSemaphoreCreateBinary();
     82c:	43 e0       	ldi	r20, 0x03	; 3
     82e:	60 e0       	ldi	r22, 0x00	; 0
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	fa d6       	rcall	.+3572   	; 0x1628 <xQueueGenericCreate>
     834:	90 93 9c 08 	sts	0x089C, r25
     838:	80 93 9b 08 	sts	0x089B, r24
     83c:	08 95       	ret

0000083e <myMaxSonar_BtmStart>:
#include <myADC.h>
#include <myTimer.h>

void myMaxSonar_BtmStart()
{
	MaxSonar_BtmTriggerStart();
     83e:	a1 9a       	sbi	0x14, 1	; 20
	
	myTimer_DelayMicro(25); // delay 25 micro seconds...
     840:	89 e1       	ldi	r24, 0x19	; 25
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	12 d2       	rcall	.+1060   	; 0xc6a <myTimer_DelayMicro>
	//vTaskDelay(5000);	// delay 1ms using vTaskDelay
	
	MaxSonar_BtmTriggerStop();
     846:	a1 98       	cbi	0x14, 1	; 20
     848:	08 95       	ret

0000084a <myMaxSonar_TopStart>:
}

void myMaxSonar_TopStart()
{
	MaxSonar_TopTriggerStart();
     84a:	a0 9a       	sbi	0x14, 0	; 20
	
	myTimer_DelayMicro(25); // delay 25 micro seconds...
     84c:	89 e1       	ldi	r24, 0x19	; 25
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0c d2       	rcall	.+1048   	; 0xc6a <myTimer_DelayMicro>
	//vTaskDelay(5000);	// delay 1ms using vTaskDelay
	
	MaxSonar_TopTriggerStop();
     852:	a0 98       	cbi	0x14, 0	; 20
     854:	08 95       	ret

00000856 <myMaxSonar_Read>:
// Return distance in cm
int myMaxSonar_Read(char analogChannel)
{
	int reading = 0;
	
	int adcReading = myADC_analogRead(analogChannel);
     856:	ab d0       	rcall	.+342    	; 0x9ae <myADC_analogRead>
     858:	9c 01       	movw	r18, r24
	reading = adcReading /FLOAT_TO_CM; // get the decimal point of ADC
     85a:	63 e0       	ldi	r22, 0x03	; 3
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__divmodhi4>
	reading += adcReading; // add the exact adcReading
	
	return reading;
}
     862:	cb 01       	movw	r24, r22
     864:	82 0f       	add	r24, r18
     866:	93 1f       	adc	r25, r19
     868:	08 95       	ret

0000086a <__vector_29>:
volatile unsigned char adcReading_L;


/*ADC Conversion Complete Interrupt Service Routine (ISR)*/
ISR(ADC_vect)
{	
     86a:	1f 92       	push	r1
     86c:	0f 92       	push	r0
     86e:	0f b6       	in	r0, 0x3f	; 63
     870:	0f 92       	push	r0
     872:	11 24       	eor	r1, r1
     874:	0b b6       	in	r0, 0x3b	; 59
     876:	0f 92       	push	r0
     878:	2f 93       	push	r18
     87a:	3f 93       	push	r19
     87c:	4f 93       	push	r20
     87e:	5f 93       	push	r21
     880:	6f 93       	push	r22
     882:	7f 93       	push	r23
     884:	8f 93       	push	r24
     886:	9f 93       	push	r25
     888:	af 93       	push	r26
     88a:	bf 93       	push	r27
     88c:	ef 93       	push	r30
     88e:	ff 93       	push	r31
	adcReading_L = ADCL; // dont change the ORDER L first then H!!! Reading L will hold H value.
     890:	80 91 78 00 	lds	r24, 0x0078
     894:	80 93 a1 08 	sts	0x08A1, r24
	adcReading_H = ADCH; // read value of H (not used, 640cm and 1280cm for the resolution)
     898:	80 91 79 00 	lds	r24, 0x0079
     89c:	80 93 a2 08 	sts	0x08A2, r24
	// give semaphore, dont run block task immediately..
	xSemaphoreGiveFromISR(semaReadADC, pdFALSE);
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	40 e0       	ldi	r20, 0x00	; 0
     8a4:	50 e0       	ldi	r21, 0x00	; 0
     8a6:	60 e0       	ldi	r22, 0x00	; 0
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	80 91 a5 08 	lds	r24, 0x08A5
     8ae:	90 91 a6 08 	lds	r25, 0x08A6
     8b2:	a5 d7       	rcall	.+3914   	; 0x17fe <xQueueGenericSendFromISR>
}
     8b4:	ff 91       	pop	r31
     8b6:	ef 91       	pop	r30
     8b8:	bf 91       	pop	r27
     8ba:	af 91       	pop	r26
     8bc:	9f 91       	pop	r25
     8be:	8f 91       	pop	r24
     8c0:	7f 91       	pop	r23
     8c2:	6f 91       	pop	r22
     8c4:	5f 91       	pop	r21
     8c6:	4f 91       	pop	r20
     8c8:	3f 91       	pop	r19
     8ca:	2f 91       	pop	r18
     8cc:	0f 90       	pop	r0
     8ce:	0b be       	out	0x3b, r0	; 59
     8d0:	0f 90       	pop	r0
     8d2:	0f be       	out	0x3f, r0	; 63
     8d4:	0f 90       	pop	r0
     8d6:	1f 90       	pop	r1
     8d8:	18 95       	reti

000008da <myADC_Init>:

void myADC_Init()
{
	
	ADCSRA = ( 1<<ADEN ) | ( 1<<ADIE ) | ADC_PRESCALER; // enable ADC, enable interrupt, set prescaler
     8da:	8f e8       	ldi	r24, 0x8F	; 143
     8dc:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = 0; // No auto trigger (0 for ADATE), No analog compare... 
     8e0:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = ( 1 << REFS0 ) ; // use AVCC as reference, right adjust (take LSB but not 2 MSB)
     8e4:	80 e4       	ldi	r24, 0x40	; 64
     8e6:	80 93 7c 00 	sts	0x007C, r24
	
	// initialize semaphore..
	semaReadADC = xSemaphoreCreateBinary();
     8ea:	43 e0       	ldi	r20, 0x03	; 3
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	9b d6       	rcall	.+3382   	; 0x1628 <xQueueGenericCreate>
     8f2:	90 93 a6 08 	sts	0x08A6, r25
     8f6:	80 93 a5 08 	sts	0x08A5, r24
	semaGuardStartADC = xSemaphoreCreateMutex();
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	55 d7       	rcall	.+3754   	; 0x17a8 <xQueueCreateMutex>
     8fe:	90 93 a4 08 	sts	0x08A4, r25
     902:	80 93 a3 08 	sts	0x08A3, r24
	xSemaphoreGive(semaGuardStartADC); // free to read at start.
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	40 e0       	ldi	r20, 0x00	; 0
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	b8 c6       	rjmp	.+3440   	; 0x1682 <xQueueGenericSend>
     912:	08 95       	ret

00000914 <myADC_startADC>:
	return myADC_readADC(channel);
}

// channel = AN0 to AN15, use the macro...
void myADC_startADC(char channel)
{
     914:	cf 93       	push	r28
     916:	c8 2f       	mov	r28, r24
	
	 //char buffer [10];	
	xSemaphoreTake(semaGuardStartADC, portMAX_DELAY); // guard against concurrent task starting adc at same time
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	4f ef       	ldi	r20, 0xFF	; 255
     91c:	5f ef       	ldi	r21, 0xFF	; 255
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	80 91 a3 08 	lds	r24, 0x08A3
     926:	90 91 a4 08 	lds	r25, 0x08A4
     92a:	a3 d7       	rcall	.+3910   	; 0x1872 <xQueueGenericReceive>
    ADMUX = ( ADMUX & 11100000 ) | ( channel & 0b00011111 ); // keep bit 5:7, set bit 0:4 as Mux
     92c:	ec e7       	ldi	r30, 0x7C	; 124
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	80 81       	ld	r24, Z
     932:	9c 2f       	mov	r25, r28
     934:	9f 71       	andi	r25, 0x1F	; 31
     936:	80 76       	andi	r24, 0x60	; 96
     938:	89 2b       	or	r24, r25
     93a:	80 83       	st	Z, r24
	
	//transmitUSART0("ADMUX = ");
	//transmitUSART0(itoa(ADMUX, buffer, 2)); // debugging...
	//transmitUSART0(" \n");
	
	ADCSRB = ( ADCSRB & 11100000 ) | (( channel & 0b00100000 ) >> 2); // keep all bits except bit 3, set Mux @ bit 3
     93c:	eb e7       	ldi	r30, 0x7B	; 123
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	20 81       	ld	r18, Z
     942:	c0 72       	andi	r28, 0x20	; 32
     944:	8c 2f       	mov	r24, r28
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	95 95       	asr	r25
     94a:	87 95       	ror	r24
     94c:	95 95       	asr	r25
     94e:	87 95       	ror	r24
     950:	92 2f       	mov	r25, r18
     952:	90 76       	andi	r25, 0x60	; 96
     954:	89 2b       	or	r24, r25
     956:	80 83       	st	Z, r24
	//transmitUSART0(itoa(ADCSRB, buffer, 2)); // debugging...
	//transmitUSART0(" \n");
	//
	
	//vTaskDelay(1);
	ADCSRA |= ( 1 << ADSC );	// READY TO SEND!!
     958:	ea e7       	ldi	r30, 0x7A	; 122
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	80 81       	ld	r24, Z
     95e:	80 64       	ori	r24, 0x40	; 64
     960:	80 83       	st	Z, r24
}
     962:	cf 91       	pop	r28
     964:	08 95       	ret

00000966 <myADC_readADC>:

int myADC_readADC(char channel)
{
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
	int adcReading=0;
	xSemaphoreTake(semaReadADC, portMAX_DELAY); // wait for reading...
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	4f ef       	ldi	r20, 0xFF	; 255
     96e:	5f ef       	ldi	r21, 0xFF	; 255
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	80 91 a5 08 	lds	r24, 0x08A5
     978:	90 91 a6 08 	lds	r25, 0x08A6
     97c:	7a d7       	rcall	.+3828   	; 0x1872 <xQueueGenericReceive>

	adcReading = ((adcReading_H & 0b11) << 8);
     97e:	c0 91 a2 08 	lds	r28, 0x08A2
     982:	c3 70       	andi	r28, 0x03	; 3
     984:	d0 e0       	ldi	r29, 0x00	; 0
     986:	dc 2f       	mov	r29, r28
     988:	cc 27       	eor	r28, r28
	adcReading += adcReading_L;
     98a:	80 91 a1 08 	lds	r24, 0x08A1
     98e:	c8 0f       	add	r28, r24
     990:	d1 1d       	adc	r29, r1

	xSemaphoreGive(semaGuardStartADC); // reading done, nxt task can start ADC
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	40 e0       	ldi	r20, 0x00	; 0
     996:	50 e0       	ldi	r21, 0x00	; 0
     998:	60 e0       	ldi	r22, 0x00	; 0
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	80 91 a3 08 	lds	r24, 0x08A3
     9a0:	90 91 a4 08 	lds	r25, 0x08A4
     9a4:	6e d6       	rcall	.+3292   	; 0x1682 <xQueueGenericSend>
	
	return adcReading;
     9a6:	ce 01       	movw	r24, r28
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	08 95       	ret

000009ae <myADC_analogRead>:
	xSemaphoreGive(semaGuardStartADC); // free to read at start.
}


int myADC_analogRead(char channel)
{
     9ae:	cf 93       	push	r28
     9b0:	c8 2f       	mov	r28, r24
	myADC_startADC(channel);
     9b2:	b0 df       	rcall	.-160    	; 0x914 <myADC_startADC>
	return myADC_readADC(channel);
     9b4:	8c 2f       	mov	r24, r28
     9b6:	d7 df       	rcall	.-82     	; 0x966 <myADC_readADC>
}
     9b8:	cf 91       	pop	r28
     9ba:	08 95       	ret

000009bc <detectStairs>:



char detectStairs(int calibratedBtmIR, int btmIR)
{
	if(btmIR > calibratedBtmIR + STAIRS_OFFSET || btmIR < calibratedBtmIR - STAIRS_OFFSET)
     9bc:	9c 01       	movw	r18, r24
     9be:	26 5f       	subi	r18, 0xF6	; 246
     9c0:	3f 4f       	sbci	r19, 0xFF	; 255
     9c2:	26 17       	cp	r18, r22
     9c4:	37 07       	cpc	r19, r23
     9c6:	44 f0       	brlt	.+16     	; 0x9d8 <detectStairs+0x1c>
     9c8:	24 51       	subi	r18, 0x14	; 20
     9ca:	31 09       	sbc	r19, r1
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	62 17       	cp	r22, r18
     9d0:	73 07       	cpc	r23, r19
     9d2:	1c f0       	brlt	.+6      	; 0x9da <detectStairs+0x1e>
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	08 95       	ret
	{
		return 1; // stairs found
     9d8:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		return 0; // no stairs
		
	}
}
     9da:	08 95       	ret

000009dc <obstacleAvoidance>:


// Priority => BTM, Front, Side
void obstacleAvoidance(int frontSonar, int leftSonar, int rightSonar, int btmIR, char * deviceBlocked)
{
     9dc:	0f 93       	push	r16
     9de:	1f 93       	push	r17
     9e0:	f8 01       	movw	r30, r16
	if(deviceBlocked[BTM_DEVICE])
     9e2:	83 81       	ldd	r24, Z+3	; 0x03
     9e4:	88 23       	and	r24, r24
     9e6:	39 f0       	breq	.+14     	; 0x9f6 <obstacleAvoidance+0x1a>
	{
		// stairs detected
			MOTOR_LEFT_START();
     9e8:	74 9a       	sbi	0x0e, 4	; 14
			MOTOR_RIGHT_START();
     9ea:	e2 e0       	ldi	r30, 0x02	; 2
     9ec:	f1 e0       	ldi	r31, 0x01	; 1
     9ee:	80 81       	ld	r24, Z
     9f0:	80 61       	ori	r24, 0x10	; 16
     9f2:	80 83       	st	Z, r24
     9f4:	3f c0       	rjmp	.+126    	; 0xa74 <obstacleAvoidance+0x98>
	}
	else if(deviceBlocked[FRONT_DEVICE])
     9f6:	80 81       	ld	r24, Z
     9f8:	88 23       	and	r24, r24
     9fa:	f1 f0       	breq	.+60     	; 0xa38 <obstacleAvoidance+0x5c>
	{
		// front sensor detected
		if(deviceBlocked[LEFT_DEVICE] && !(deviceBlocked[RIGHT_DEVICE]))
     9fc:	81 81       	ldd	r24, Z+1	; 0x01
     9fe:	88 23       	and	r24, r24
     a00:	b1 f1       	breq	.+108    	; 0xa6e <obstacleAvoidance+0x92>
     a02:	82 81       	ldd	r24, Z+2	; 0x02
     a04:	81 11       	cpse	r24, r1
     a06:	36 c0       	rjmp	.+108    	; 0xa74 <obstacleAvoidance+0x98>
		{
			// left is blocked but not right
			if((rightSonar - leftSonar) > 5) // if there's enough difference, prompt the user to move..
     a08:	46 1b       	sub	r20, r22
     a0a:	57 0b       	sbc	r21, r23
     a0c:	46 30       	cpi	r20, 0x06	; 6
     a0e:	51 05       	cpc	r21, r1
     a10:	8c f1       	brlt	.+98     	; 0xa74 <obstacleAvoidance+0x98>
			{
				MOTOR_LEFT_STOP();
     a12:	74 98       	cbi	0x0e, 4	; 14
				MOTOR_RIGHT_START();	
     a14:	e2 e0       	ldi	r30, 0x02	; 2
     a16:	f1 e0       	ldi	r31, 0x01	; 1
     a18:	80 81       	ld	r24, Z
     a1a:	80 61       	ori	r24, 0x10	; 16
     a1c:	80 83       	st	Z, r24
     a1e:	2a c0       	rjmp	.+84     	; 0xa74 <obstacleAvoidance+0x98>
			}
		}
		else if (deviceBlocked[RIGHT_DEVICE] && !(deviceBlocked[LEFT_DEVICE]))
		{
			// right is blocked but not left..
			if((leftSonar - rightSonar) > 5) // if there's enought different, prompt the user to move...
     a20:	64 1b       	sub	r22, r20
     a22:	75 0b       	sbc	r23, r21
     a24:	66 30       	cpi	r22, 0x06	; 6
     a26:	71 05       	cpc	r23, r1
     a28:	2c f1       	brlt	.+74     	; 0xa74 <obstacleAvoidance+0x98>
			{
				MOTOR_LEFT_START();
     a2a:	74 9a       	sbi	0x0e, 4	; 14
				MOTOR_RIGHT_STOP();
     a2c:	e2 e0       	ldi	r30, 0x02	; 2
     a2e:	f1 e0       	ldi	r31, 0x01	; 1
     a30:	80 81       	ld	r24, Z
     a32:	8f 7e       	andi	r24, 0xEF	; 239
     a34:	80 83       	st	Z, r24
     a36:	1e c0       	rjmp	.+60     	; 0xa74 <obstacleAvoidance+0x98>
			//MOTOR_LEFT_STOP(); 
			//MOTOR_RIGHT_STOP();	
		}
		
	}
	else if (leftSonar < LEFT_TOO_NEAR)
     a38:	6c 31       	cpi	r22, 0x1C	; 28
     a3a:	71 05       	cpc	r23, r1
     a3c:	3c f4       	brge	.+14     	; 0xa4c <obstacleAvoidance+0x70>
	{
		// front able to walk, too near to wall or obstacle...
			MOTOR_LEFT_STOP();
     a3e:	74 98       	cbi	0x0e, 4	; 14
			MOTOR_RIGHT_START();		
     a40:	e2 e0       	ldi	r30, 0x02	; 2
     a42:	f1 e0       	ldi	r31, 0x01	; 1
     a44:	80 81       	ld	r24, Z
     a46:	80 61       	ori	r24, 0x10	; 16
     a48:	80 83       	st	Z, r24
     a4a:	14 c0       	rjmp	.+40     	; 0xa74 <obstacleAvoidance+0x98>
	}
	else if (rightSonar < RIGHT_TOO_NEAR)
     a4c:	42 31       	cpi	r20, 0x12	; 18
     a4e:	51 05       	cpc	r21, r1
     a50:	3c f4       	brge	.+14     	; 0xa60 <obstacleAvoidance+0x84>
	{
		// front able to walk, too near to wall or obstacle...
			MOTOR_LEFT_START();
     a52:	74 9a       	sbi	0x0e, 4	; 14
			MOTOR_RIGHT_STOP();
     a54:	e2 e0       	ldi	r30, 0x02	; 2
     a56:	f1 e0       	ldi	r31, 0x01	; 1
     a58:	80 81       	ld	r24, Z
     a5a:	8f 7e       	andi	r24, 0xEF	; 239
     a5c:	80 83       	st	Z, r24
     a5e:	0a c0       	rjmp	.+20     	; 0xa74 <obstacleAvoidance+0x98>
	}
	else
	{
			MOTOR_LEFT_STOP();
     a60:	74 98       	cbi	0x0e, 4	; 14
			MOTOR_RIGHT_STOP();
     a62:	e2 e0       	ldi	r30, 0x02	; 2
     a64:	f1 e0       	ldi	r31, 0x01	; 1
     a66:	80 81       	ld	r24, Z
     a68:	8f 7e       	andi	r24, 0xEF	; 239
     a6a:	80 83       	st	Z, r24
     a6c:	03 c0       	rjmp	.+6      	; 0xa74 <obstacleAvoidance+0x98>
			{
				MOTOR_LEFT_STOP();
				MOTOR_RIGHT_START();	
			}
		}
		else if (deviceBlocked[RIGHT_DEVICE] && !(deviceBlocked[LEFT_DEVICE]))
     a6e:	82 81       	ldd	r24, Z+2	; 0x02
     a70:	81 11       	cpse	r24, r1
     a72:	d6 cf       	rjmp	.-84     	; 0xa20 <obstacleAvoidance+0x44>
	else
	{
			MOTOR_LEFT_STOP();
			MOTOR_RIGHT_STOP();
	}
}
     a74:	1f 91       	pop	r17
     a76:	0f 91       	pop	r16
     a78:	08 95       	ret

00000a7a <cheatPrintAll>:


void cheatPrintAll(char* deviceBlocked, char *obstacleDetected)
{
     a7a:	fc 01       	movw	r30, r24
	*obstacleDetected = 5;
     a7c:	85 e0       	ldi	r24, 0x05	; 5
     a7e:	db 01       	movw	r26, r22
     a80:	8c 93       	st	X, r24
	deviceBlocked[FRONT_DEVICE] = FRONT_SONAR_ID;
     a82:	86 e4       	ldi	r24, 0x46	; 70
     a84:	80 83       	st	Z, r24
	deviceBlocked[LEFT_DEVICE] = LEFT_SONAR_ID;
     a86:	8c e4       	ldi	r24, 0x4C	; 76
     a88:	81 83       	std	Z+1, r24	; 0x01
	deviceBlocked[RIGHT_DEVICE] = RIGHT_SONAR_ID;
     a8a:	82 e5       	ldi	r24, 0x52	; 82
     a8c:	82 83       	std	Z+2, r24	; 0x02
	deviceBlocked[BTM_DEVICE] = BTM_SONAR_ID;
     a8e:	82 e4       	ldi	r24, 0x42	; 66
     a90:	83 83       	std	Z+3, r24	; 0x03
	deviceBlocked[TOP_DEVICE] = TOP_SONAR_ID;
     a92:	84 e5       	ldi	r24, 0x54	; 84
     a94:	84 83       	std	Z+4, r24	; 0x04
     a96:	08 95       	ret

00000a98 <obstacleDetection>:


// return number of obstacle detected...
// implicitly return the device to send.
char obstacleDetection(int frontSonar, char obstacleDetected, char * deviceBlocked, int leftSonar, int rightSonar, int topSonar, int calibratedBtmIR, int btmIR)
{
     a98:	af 92       	push	r10
     a9a:	bf 92       	push	r11
     a9c:	cf 92       	push	r12
     a9e:	df 92       	push	r13
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	f6 2e       	mov	r15, r22
     aac:	ea 01       	movw	r28, r20
	// Commented out when debuggin..

	if(frontSonar < FRONT_OBSTACLE_DISTANCE)
     aae:	86 34       	cpi	r24, 0x46	; 70
     ab0:	91 05       	cpc	r25, r1
     ab2:	1c f4       	brge	.+6      	; 0xaba <obstacleDetection+0x22>
	{
		obstacleDetected ++;
     ab4:	f3 94       	inc	r15
		deviceBlocked[FRONT_DEVICE] = FRONT_SONAR_ID;
     ab6:	86 e4       	ldi	r24, 0x46	; 70
     ab8:	88 83       	st	Y, r24
	}
	if (leftSonar < LEFT_OBSTACLE_DISTANCE)
     aba:	28 32       	cpi	r18, 0x28	; 40
     abc:	31 05       	cpc	r19, r1
     abe:	1c f4       	brge	.+6      	; 0xac6 <obstacleDetection+0x2e>
	{
		obstacleDetected ++;
     ac0:	f3 94       	inc	r15
		deviceBlocked[LEFT_DEVICE] = LEFT_SONAR_ID;
     ac2:	8c e4       	ldi	r24, 0x4C	; 76
     ac4:	89 83       	std	Y+1, r24	; 0x01
	}
	if (rightSonar < RIGHT_OBSTACLE_DISTANCE)
     ac6:	0e 31       	cpi	r16, 0x1E	; 30
     ac8:	11 05       	cpc	r17, r1
     aca:	1c f4       	brge	.+6      	; 0xad2 <obstacleDetection+0x3a>
	{
		obstacleDetected++;
     acc:	f3 94       	inc	r15
		deviceBlocked[RIGHT_DEVICE] = RIGHT_SONAR_ID;
     ace:	82 e5       	ldi	r24, 0x52	; 82
     ad0:	8a 83       	std	Y+2, r24	; 0x02
	}
	if (detectStairs(calibratedBtmIR, btmIR))
     ad2:	b5 01       	movw	r22, r10
     ad4:	c6 01       	movw	r24, r12
     ad6:	72 df       	rcall	.-284    	; 0x9bc <detectStairs>
     ad8:	88 23       	and	r24, r24
     ada:	19 f0       	breq	.+6      	; 0xae2 <obstacleDetection+0x4a>
	{
		obstacleDetected++;
     adc:	f3 94       	inc	r15
		deviceBlocked[BTM_DEVICE] = BTM_SONAR_ID;
     ade:	82 e4       	ldi	r24, 0x42	; 66
     ae0:	8b 83       	std	Y+3, r24	; 0x03
	//	obstacleDetected++;
	//	deviceBlocked[TOP_DEVICE] = TOP_SONAR_ID;
	//}
	
	return obstacleDetected;
}
     ae2:	8f 2d       	mov	r24, r15
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	ff 90       	pop	r15
     aee:	df 90       	pop	r13
     af0:	cf 90       	pop	r12
     af2:	bf 90       	pop	r11
     af4:	af 90       	pop	r10
     af6:	08 95       	ret

00000af8 <mySharpIR_Read>:
#include <math.h>

// Return distance in cm
int mySharpIR_Read(char analogChannel)
{
	int adcReading = myADC_analogRead(analogChannel);
     af8:	5a df       	rcall	.-332    	; 0x9ae <myADC_analogRead>
	adcReading = 10650.08 * pow(adcReading,-0.935) - 10;
     afa:	bc 01       	movw	r22, r24
     afc:	88 27       	eor	r24, r24
     afe:	77 fd       	sbrc	r23, 7
     b00:	80 95       	com	r24
     b02:	98 2f       	mov	r25, r24
     b04:	0e 94 a7 13 	call	0x274e	; 0x274e <__floatsisf>
     b08:	29 e2       	ldi	r18, 0x29	; 41
     b0a:	3c e5       	ldi	r19, 0x5C	; 92
     b0c:	4f e6       	ldi	r20, 0x6F	; 111
     b0e:	5f eb       	ldi	r21, 0xBF	; 191
     b10:	0e 94 96 14 	call	0x292c	; 0x292c <pow>
     b14:	22 e5       	ldi	r18, 0x52	; 82
     b16:	38 e6       	ldi	r19, 0x68	; 104
     b18:	46 e2       	ldi	r20, 0x26	; 38
     b1a:	56 e4       	ldi	r21, 0x46	; 70
     b1c:	0e 94 33 14 	call	0x2866	; 0x2866 <__mulsf3>
     b20:	20 e0       	ldi	r18, 0x00	; 0
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	40 e2       	ldi	r20, 0x20	; 32
     b26:	51 e4       	ldi	r21, 0x41	; 65
     b28:	0e 94 0f 13 	call	0x261e	; 0x261e <__subsf3>
     b2c:	0e 94 74 13 	call	0x26e8	; 0x26e8 <__fixsfsi>
     b30:	cb 01       	movw	r24, r22
     b32:	68 3e       	cpi	r22, 0xE8	; 232
     b34:	23 e0       	ldi	r18, 0x03	; 3
     b36:	72 07       	cpc	r23, r18
     b38:	14 f0       	brlt	.+4      	; 0xb3e <mySharpIR_Read+0x46>
     b3a:	87 ee       	ldi	r24, 0xE7	; 231
     b3c:	93 e0       	ldi	r25, 0x03	; 3
	if(adcReading > 999)
		adcReading = 999;
	
	return adcReading;
}
     b3e:	08 95       	ret

00000b40 <checkWithinRange>:

char checkWithinRange(int reading, int * checkReading, const char range)
{
	return reading > (*checkReading + range) || reading < (*checkReading - range);
     b40:	fb 01       	movw	r30, r22
     b42:	20 81       	ld	r18, Z
     b44:	31 81       	ldd	r19, Z+1	; 0x01
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	b9 01       	movw	r22, r18
     b4a:	64 0f       	add	r22, r20
     b4c:	75 1f       	adc	r23, r21
     b4e:	68 17       	cp	r22, r24
     b50:	79 07       	cpc	r23, r25
     b52:	4c f0       	brlt	.+18     	; 0xb66 <checkWithinRange+0x26>
     b54:	24 1b       	sub	r18, r20
     b56:	35 0b       	sbc	r19, r21
     b58:	41 e0       	ldi	r20, 0x01	; 1
     b5a:	82 17       	cp	r24, r18
     b5c:	93 07       	cpc	r25, r19
     b5e:	0c f0       	brlt	.+2      	; 0xb62 <checkWithinRange+0x22>
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	84 2f       	mov	r24, r20
     b64:	08 95       	ret
     b66:	81 e0       	ldi	r24, 0x01	; 1
}
     b68:	08 95       	ret

00000b6a <mySharpIR_ReCalibrate>:
// final reading = btmIR reading (i = CALIBRATE_COUNT)
// firstCheck reading = btmIR reading ( i = CALIBRATE_COUNT/2)
// initial reading  = btmIR reading (i = 0)
// Write new calibrate value if all matches..
void mySharpIR_ReCalibrate(int* calibratedReading, int reading)
{
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	8c 01       	movw	r16, r24
     b74:	eb 01       	movw	r28, r22
	static const char range = 5; // put at header file later...
	static const char CALIBRATE_COUNT = 20; // put at header file later...
	static int i = 0;
	static int checkReading[2] = {0};
	
	if(checkWithinRange(reading, calibratedReading, range) && i == 0)
     b76:	45 e0       	ldi	r20, 0x05	; 5
     b78:	bc 01       	movw	r22, r24
     b7a:	ce 01       	movw	r24, r28
     b7c:	e1 df       	rcall	.-62     	; 0xb40 <checkWithinRange>
     b7e:	88 23       	and	r24, r24
     b80:	41 f0       	breq	.+16     	; 0xb92 <mySharpIR_ReCalibrate+0x28>
     b82:	20 91 22 08 	lds	r18, 0x0822
     b86:	30 91 23 08 	lds	r19, 0x0823
     b8a:	21 15       	cp	r18, r1
     b8c:	31 05       	cpc	r19, r1
     b8e:	69 f4       	brne	.+26     	; 0xbaa <mySharpIR_ReCalibrate+0x40>
     b90:	4b c0       	rjmp	.+150    	; 0xc28 <mySharpIR_ReCalibrate+0xbe>
		// skip the calibration process... not needed
		return;
	}
	
	
	if (i == 0)
     b92:	20 91 22 08 	lds	r18, 0x0822
     b96:	30 91 23 08 	lds	r19, 0x0823
     b9a:	21 15       	cp	r18, r1
     b9c:	31 05       	cpc	r19, r1
     b9e:	29 f4       	brne	.+10     	; 0xbaa <mySharpIR_ReCalibrate+0x40>
	{
		checkReading[0] = reading;
     ba0:	d0 93 1f 08 	sts	0x081F, r29
     ba4:	c0 93 1e 08 	sts	0x081E, r28
     ba8:	32 c0       	rjmp	.+100    	; 0xc0e <mySharpIR_ReCalibrate+0xa4>
	}
	else if (i == CALIBRATE_COUNT/2)
     baa:	2a 30       	cpi	r18, 0x0A	; 10
     bac:	31 05       	cpc	r19, r1
     bae:	a9 f4       	brne	.+42     	; 0xbda <mySharpIR_ReCalibrate+0x70>
	{
		if(checkWithinRange(reading, checkReading, range))
     bb0:	45 e0       	ldi	r20, 0x05	; 5
     bb2:	6e e1       	ldi	r22, 0x1E	; 30
     bb4:	78 e0       	ldi	r23, 0x08	; 8
     bb6:	ce 01       	movw	r24, r28
     bb8:	c3 df       	rcall	.-122    	; 0xb40 <checkWithinRange>
     bba:	88 23       	and	r24, r24
     bbc:	49 f0       	breq	.+18     	; 0xbd0 <mySharpIR_ReCalibrate+0x66>
		{
			// Out of range.. restart to find new calibration point..
			checkReading[0] = reading;
     bbe:	d0 93 1f 08 	sts	0x081F, r29
     bc2:	c0 93 1e 08 	sts	0x081E, r28
			i = 0; // reset to count...
     bc6:	10 92 23 08 	sts	0x0823, r1
     bca:	10 92 22 08 	sts	0x0822, r1
     bce:	1f c0       	rjmp	.+62     	; 0xc0e <mySharpIR_ReCalibrate+0xa4>
		}
		else
		{	// within range.. need more confirmation
			checkReading[1] = reading;
     bd0:	d0 93 21 08 	sts	0x0821, r29
     bd4:	c0 93 20 08 	sts	0x0820, r28
     bd8:	1a c0       	rjmp	.+52     	; 0xc0e <mySharpIR_ReCalibrate+0xa4>
		}
	}
	else if (i == CALIBRATE_COUNT)
     bda:	24 31       	cpi	r18, 0x14	; 20
     bdc:	31 05       	cpc	r19, r1
     bde:	b9 f4       	brne	.+46     	; 0xc0e <mySharpIR_ReCalibrate+0xa4>
	{
		i = 0; // reset to count..
     be0:	10 92 23 08 	sts	0x0823, r1
     be4:	10 92 22 08 	sts	0x0822, r1

		if(checkWithinRange(reading, checkReading, range))
     be8:	45 e0       	ldi	r20, 0x05	; 5
     bea:	6e e1       	ldi	r22, 0x1E	; 30
     bec:	78 e0       	ldi	r23, 0x08	; 8
     bee:	ce 01       	movw	r24, r28
     bf0:	a7 df       	rcall	.-178    	; 0xb40 <checkWithinRange>
     bf2:	88 23       	and	r24, r24
     bf4:	29 f0       	breq	.+10     	; 0xc00 <mySharpIR_ReCalibrate+0x96>
		{
			// Out of range.. restart to find new calibration point..
			checkReading[0] = reading;
     bf6:	d0 93 1f 08 	sts	0x081F, r29
     bfa:	c0 93 1e 08 	sts	0x081E, r28
     bfe:	07 c0       	rjmp	.+14     	; 0xc0e <mySharpIR_ReCalibrate+0xa4>
		}
		else
		{
			// all 3 readings within range... can calibrate as new stable.
			*calibratedReading = checkReading[0]; // btmIR is calibrated..
     c00:	80 91 1e 08 	lds	r24, 0x081E
     c04:	90 91 1f 08 	lds	r25, 0x081F
     c08:	f8 01       	movw	r30, r16
     c0a:	91 83       	std	Z+1, r25	; 0x01
     c0c:	80 83       	st	Z, r24
		}
	}
	
	i = (i+1) % CALIBRATE_COUNT;
     c0e:	80 91 22 08 	lds	r24, 0x0822
     c12:	90 91 23 08 	lds	r25, 0x0823
     c16:	01 96       	adiw	r24, 0x01	; 1
     c18:	64 e1       	ldi	r22, 0x14	; 20
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__divmodhi4>
     c20:	90 93 23 08 	sts	0x0823, r25
     c24:	80 93 22 08 	sts	0x0822, r24
}
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	08 95       	ret

00000c32 <myTimer_Init>:
	unsigned char currentTick = myTimer_Read();

	delay /= MICROSECONDS_PER_TICK; // convert delay into ticks..
	expectedTick2 = currentTick + delay; 
	vTaskResume( *timerTask ); // resume delayMicroCheck..
	xSemaphoreTake(semaDelayMicro2, MAX_SEMA_WAIT);	// delay for the micro here... safety mech: max wait for 2 ms... cannot be more than tht..
     c32:	90 93 ac 08 	sts	0x08AC, r25
     c36:	80 93 ab 08 	sts	0x08AB, r24
     c3a:	fc 01       	movw	r30, r24
     c3c:	80 81       	ld	r24, Z
     c3e:	91 81       	ldd	r25, Z+1	; 0x01
     c40:	0e 94 59 11 	call	0x22b2	; 0x22b2 <vTaskSuspend>
     c44:	43 e0       	ldi	r20, 0x03	; 3
     c46:	60 e0       	ldi	r22, 0x00	; 0
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	ee d4       	rcall	.+2524   	; 0x1628 <xQueueGenericCreate>
     c4c:	90 93 a8 08 	sts	0x08A8, r25
     c50:	80 93 a7 08 	sts	0x08A7, r24
     c54:	43 e0       	ldi	r20, 0x03	; 3
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	e6 d4       	rcall	.+2508   	; 0x1628 <xQueueGenericCreate>
     c5c:	90 93 aa 08 	sts	0x08AA, r25
     c60:	80 93 a9 08 	sts	0x08A9, r24
     c64:	08 95       	ret

00000c66 <myTimer_Read>:
     c66:	86 b5       	in	r24, 0x26	; 38
     c68:	08 95       	ret

00000c6a <myTimer_DelayMicro>:
     c6a:	46 b5       	in	r20, 0x26	; 38
     c6c:	50 e0       	ldi	r21, 0x00	; 0
     c6e:	9c 01       	movw	r18, r24
     c70:	99 23       	and	r25, r25
     c72:	14 f4       	brge	.+4      	; 0xc78 <myTimer_DelayMicro+0xe>
     c74:	2d 5f       	subi	r18, 0xFD	; 253
     c76:	3f 4f       	sbci	r19, 0xFF	; 255
     c78:	35 95       	asr	r19
     c7a:	27 95       	ror	r18
     c7c:	35 95       	asr	r19
     c7e:	27 95       	ror	r18
     c80:	24 0f       	add	r18, r20
     c82:	35 1f       	adc	r19, r21
     c84:	30 93 03 02 	sts	0x0203, r19
     c88:	20 93 02 02 	sts	0x0202, r18
     c8c:	e0 91 ab 08 	lds	r30, 0x08AB
     c90:	f0 91 ac 08 	lds	r31, 0x08AC
     c94:	80 81       	ld	r24, Z
     c96:	91 81       	ldd	r25, Z+1	; 0x01
     c98:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <vTaskResume>
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	42 e0       	ldi	r20, 0x02	; 2
     ca0:	50 e0       	ldi	r21, 0x00	; 0
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	80 91 a7 08 	lds	r24, 0x08A7
     caa:	90 91 a8 08 	lds	r25, 0x08A8
     cae:	e1 c5       	rjmp	.+3010   	; 0x1872 <xQueueGenericReceive>
     cb0:	08 95       	ret

00000cb2 <myTimer_DelayChecker>:
}

// Semaphore on sale if u match lucky number ...
void myTimer_DelayChecker()
{
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
}

// Return timer 0 value
unsigned char myTimer_Read()
{
	return TCNT0;
     cb6:	c6 b5       	in	r28, 0x26	; 38
// Semaphore on sale if u match lucky number ...
void myTimer_DelayChecker()
{
	unsigned char currentTick = myTimer_Read();
	
	if(currentTick == 0) // overflow happened
     cb8:	c1 11       	cpse	r28, r1
     cba:	22 c0       	rjmp	.+68     	; 0xd00 <myTimer_DelayChecker+0x4e>
	{
		if(expectedTick != IMPOSSIBLE_RANGE)
     cbc:	80 91 02 02 	lds	r24, 0x0202
     cc0:	90 91 03 02 	lds	r25, 0x0203
     cc4:	88 38       	cpi	r24, 0x88	; 136
     cc6:	93 41       	sbci	r25, 0x13	; 19
     cc8:	51 f0       	breq	.+20     	; 0xcde <myTimer_DelayChecker+0x2c>
			expectedTick -= MAX_TICKS;
     cca:	80 91 02 02 	lds	r24, 0x0202
     cce:	90 91 03 02 	lds	r25, 0x0203
     cd2:	8a 5f       	subi	r24, 0xFA	; 250
     cd4:	91 09       	sbc	r25, r1
     cd6:	90 93 03 02 	sts	0x0203, r25
     cda:	80 93 02 02 	sts	0x0202, r24

		if(expectedTick2 != IMPOSSIBLE_RANGE)
     cde:	80 91 00 02 	lds	r24, 0x0200
     ce2:	90 91 01 02 	lds	r25, 0x0201
     ce6:	88 38       	cpi	r24, 0x88	; 136
     ce8:	93 41       	sbci	r25, 0x13	; 19
     cea:	51 f0       	breq	.+20     	; 0xd00 <myTimer_DelayChecker+0x4e>
			expectedTick2 -= MAX_TICKS;
     cec:	80 91 00 02 	lds	r24, 0x0200
     cf0:	90 91 01 02 	lds	r25, 0x0201
     cf4:	8a 5f       	subi	r24, 0xFA	; 250
     cf6:	91 09       	sbc	r25, r1
     cf8:	90 93 01 02 	sts	0x0201, r25
     cfc:	80 93 00 02 	sts	0x0200, r24
	}
	
	if( currentTick > expectedTick) // more than => 1 more tick => positive error..
     d00:	d0 e0       	ldi	r29, 0x00	; 0
     d02:	80 91 02 02 	lds	r24, 0x0202
     d06:	90 91 03 02 	lds	r25, 0x0203
     d0a:	8c 17       	cp	r24, r28
     d0c:	9d 07       	cpc	r25, r29
     d0e:	84 f4       	brge	.+32     	; 0xd30 <myTimer_DelayChecker+0x7e>
	{
		expectedTick = IMPOSSIBLE_RANGE; // set back to impossible range.
     d10:	88 e8       	ldi	r24, 0x88	; 136
     d12:	93 e1       	ldi	r25, 0x13	; 19
     d14:	90 93 03 02 	sts	0x0203, r25
     d18:	80 93 02 02 	sts	0x0202, r24
		xSemaphoreGive(semaDelayMicro); // give the semaphore to resume...	
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	40 e0       	ldi	r20, 0x00	; 0
     d20:	50 e0       	ldi	r21, 0x00	; 0
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	80 91 a7 08 	lds	r24, 0x08A7
     d2a:	90 91 a8 08 	lds	r25, 0x08A8
     d2e:	a9 d4       	rcall	.+2386   	; 0x1682 <xQueueGenericSend>
	}
	
	
	if( currentTick > expectedTick2) // more than => 1 more tick => positive error..
     d30:	80 91 00 02 	lds	r24, 0x0200
     d34:	90 91 01 02 	lds	r25, 0x0201
     d38:	8c 17       	cp	r24, r28
     d3a:	9d 07       	cpc	r25, r29
     d3c:	84 f4       	brge	.+32     	; 0xd5e <myTimer_DelayChecker+0xac>
	{
		expectedTick2 = IMPOSSIBLE_RANGE; // set back to impossible range.
     d3e:	88 e8       	ldi	r24, 0x88	; 136
     d40:	93 e1       	ldi	r25, 0x13	; 19
     d42:	90 93 01 02 	sts	0x0201, r25
     d46:	80 93 00 02 	sts	0x0200, r24
		xSemaphoreGive(semaDelayMicro2); // give the semaphore to resume...
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	40 e0       	ldi	r20, 0x00	; 0
     d4e:	50 e0       	ldi	r21, 0x00	; 0
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	80 91 a9 08 	lds	r24, 0x08A9
     d58:	90 91 aa 08 	lds	r25, 0x08AA
     d5c:	92 d4       	rcall	.+2340   	; 0x1682 <xQueueGenericSend>
	}
	
	if(expectedTick == IMPOSSIBLE_RANGE && expectedTick2 == IMPOSSIBLE_RANGE)
     d5e:	80 91 02 02 	lds	r24, 0x0202
     d62:	90 91 03 02 	lds	r25, 0x0203
     d66:	88 38       	cpi	r24, 0x88	; 136
     d68:	93 41       	sbci	r25, 0x13	; 19
     d6a:	79 f4       	brne	.+30     	; 0xd8a <myTimer_DelayChecker+0xd8>
     d6c:	80 91 00 02 	lds	r24, 0x0200
     d70:	90 91 01 02 	lds	r25, 0x0201
     d74:	88 38       	cpi	r24, 0x88	; 136
     d76:	93 41       	sbci	r25, 0x13	; 19
     d78:	41 f4       	brne	.+16     	; 0xd8a <myTimer_DelayChecker+0xd8>
	{
		vTaskSuspend(*timerTask); // suspend when both is done..
     d7a:	e0 91 ab 08 	lds	r30, 0x08AB
     d7e:	f0 91 ac 08 	lds	r31, 0x08AC
     d82:	80 81       	ld	r24, Z
     d84:	91 81       	ldd	r25, Z+1	; 0x01
     d86:	0e 94 59 11 	call	0x22b2	; 0x22b2 <vTaskSuspend>
	}
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	08 95       	ret

00000d90 <__vector_36>:


char myUSART_receiveHandShakeFin(unsigned char message)
{
	return (message == HANDSHAKE_FIN);
}
     d90:	1f 92       	push	r1
     d92:	0f 92       	push	r0
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	0f 92       	push	r0
     d98:	11 24       	eor	r1, r1
     d9a:	0b b6       	in	r0, 0x3b	; 59
     d9c:	0f 92       	push	r0
     d9e:	2f 93       	push	r18
     da0:	3f 93       	push	r19
     da2:	4f 93       	push	r20
     da4:	5f 93       	push	r21
     da6:	6f 93       	push	r22
     da8:	7f 93       	push	r23
     daa:	8f 93       	push	r24
     dac:	9f 93       	push	r25
     dae:	af 93       	push	r26
     db0:	bf 93       	push	r27
     db2:	ef 93       	push	r30
     db4:	ff 93       	push	r31
     db6:	60 91 ce 00 	lds	r22, 0x00CE
     dba:	82 e4       	ldi	r24, 0x42	; 66
     dbc:	99 e0       	ldi	r25, 0x09	; 9
     dbe:	2f d6       	rcall	.+3166   	; 0x1a1e <ringBufferPush>
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	40 e0       	ldi	r20, 0x00	; 0
     dc4:	50 e0       	ldi	r21, 0x00	; 0
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	80 91 36 09 	lds	r24, 0x0936
     dce:	90 91 37 09 	lds	r25, 0x0937
     dd2:	15 d5       	rcall	.+2602   	; 0x17fe <xQueueGenericSendFromISR>
     dd4:	82 e4       	ldi	r24, 0x42	; 66
     dd6:	99 e0       	ldi	r25, 0x09	; 9
     dd8:	39 d6       	rcall	.+3186   	; 0x1a4c <ringBufferFull>
     dda:	ff 91       	pop	r31
     ddc:	ef 91       	pop	r30
     dde:	bf 91       	pop	r27
     de0:	af 91       	pop	r26
     de2:	9f 91       	pop	r25
     de4:	8f 91       	pop	r24
     de6:	7f 91       	pop	r23
     de8:	6f 91       	pop	r22
     dea:	5f 91       	pop	r21
     dec:	4f 91       	pop	r20
     dee:	3f 91       	pop	r19
     df0:	2f 91       	pop	r18
     df2:	0f 90       	pop	r0
     df4:	0b be       	out	0x3b, r0	; 59
     df6:	0f 90       	pop	r0
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	0f 90       	pop	r0
     dfc:	1f 90       	pop	r1
     dfe:	18 95       	reti

00000e00 <__vector_25>:
     e00:	1f 92       	push	r1
     e02:	0f 92       	push	r0
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	0f 92       	push	r0
     e08:	11 24       	eor	r1, r1
     e0a:	0b b6       	in	r0, 0x3b	; 59
     e0c:	0f 92       	push	r0
     e0e:	2f 93       	push	r18
     e10:	3f 93       	push	r19
     e12:	4f 93       	push	r20
     e14:	5f 93       	push	r21
     e16:	6f 93       	push	r22
     e18:	7f 93       	push	r23
     e1a:	8f 93       	push	r24
     e1c:	9f 93       	push	r25
     e1e:	af 93       	push	r26
     e20:	bf 93       	push	r27
     e22:	ef 93       	push	r30
     e24:	ff 93       	push	r31
     e26:	60 91 c6 00 	lds	r22, 0x00C6
     e2a:	8d ec       	ldi	r24, 0xCD	; 205
     e2c:	98 e0       	ldi	r25, 0x08	; 8
     e2e:	f7 d5       	rcall	.+3054   	; 0x1a1e <ringBufferPush>
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	40 e0       	ldi	r20, 0x00	; 0
     e34:	50 e0       	ldi	r21, 0x00	; 0
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	80 91 36 09 	lds	r24, 0x0936
     e3e:	90 91 37 09 	lds	r25, 0x0937
     e42:	dd d4       	rcall	.+2490   	; 0x17fe <xQueueGenericSendFromISR>
     e44:	8d ec       	ldi	r24, 0xCD	; 205
     e46:	98 e0       	ldi	r25, 0x08	; 8
     e48:	01 d6       	rcall	.+3074   	; 0x1a4c <ringBufferFull>
     e4a:	ff 91       	pop	r31
     e4c:	ef 91       	pop	r30
     e4e:	bf 91       	pop	r27
     e50:	af 91       	pop	r26
     e52:	9f 91       	pop	r25
     e54:	8f 91       	pop	r24
     e56:	7f 91       	pop	r23
     e58:	6f 91       	pop	r22
     e5a:	5f 91       	pop	r21
     e5c:	4f 91       	pop	r20
     e5e:	3f 91       	pop	r19
     e60:	2f 91       	pop	r18
     e62:	0f 90       	pop	r0
     e64:	0b be       	out	0x3b, r0	; 59
     e66:	0f 90       	pop	r0
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	0f 90       	pop	r0
     e6c:	1f 90       	pop	r1
     e6e:	18 95       	reti

00000e70 <__vector_37>:
     e70:	1f 92       	push	r1
     e72:	0f 92       	push	r0
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	0f 92       	push	r0
     e78:	11 24       	eor	r1, r1
     e7a:	0b b6       	in	r0, 0x3b	; 59
     e7c:	0f 92       	push	r0
     e7e:	2f 93       	push	r18
     e80:	3f 93       	push	r19
     e82:	4f 93       	push	r20
     e84:	5f 93       	push	r21
     e86:	6f 93       	push	r22
     e88:	7f 93       	push	r23
     e8a:	8f 93       	push	r24
     e8c:	9f 93       	push	r25
     e8e:	af 93       	push	r26
     e90:	bf 93       	push	r27
     e92:	ef 93       	push	r30
     e94:	ff 93       	push	r31
     e96:	88 e3       	ldi	r24, 0x38	; 56
     e98:	99 e0       	ldi	r25, 0x09	; 9
     e9a:	df d5       	rcall	.+3006   	; 0x1a5a <ringBufferNotEmpty>
     e9c:	88 23       	and	r24, r24
     e9e:	31 f0       	breq	.+12     	; 0xeac <__vector_37+0x3c>
     ea0:	88 e3       	ldi	r24, 0x38	; 56
     ea2:	99 e0       	ldi	r25, 0x09	; 9
     ea4:	aa d5       	rcall	.+2900   	; 0x19fa <ringBufferPop>
     ea6:	80 93 ce 00 	sts	0x00CE, r24
     eaa:	05 c0       	rjmp	.+10     	; 0xeb6 <__vector_37+0x46>
     eac:	e9 ec       	ldi	r30, 0xC9	; 201
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	8f 7d       	andi	r24, 0xDF	; 223
     eb4:	80 83       	st	Z, r24
     eb6:	ff 91       	pop	r31
     eb8:	ef 91       	pop	r30
     eba:	bf 91       	pop	r27
     ebc:	af 91       	pop	r26
     ebe:	9f 91       	pop	r25
     ec0:	8f 91       	pop	r24
     ec2:	7f 91       	pop	r23
     ec4:	6f 91       	pop	r22
     ec6:	5f 91       	pop	r21
     ec8:	4f 91       	pop	r20
     eca:	3f 91       	pop	r19
     ecc:	2f 91       	pop	r18
     ece:	0f 90       	pop	r0
     ed0:	0b be       	out	0x3b, r0	; 59
     ed2:	0f 90       	pop	r0
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	0f 90       	pop	r0
     ed8:	1f 90       	pop	r1
     eda:	18 95       	reti

00000edc <__vector_26>:
     edc:	1f 92       	push	r1
     ede:	0f 92       	push	r0
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	0f 92       	push	r0
     ee4:	11 24       	eor	r1, r1
     ee6:	0b b6       	in	r0, 0x3b	; 59
     ee8:	0f 92       	push	r0
     eea:	2f 93       	push	r18
     eec:	3f 93       	push	r19
     eee:	4f 93       	push	r20
     ef0:	5f 93       	push	r21
     ef2:	6f 93       	push	r22
     ef4:	7f 93       	push	r23
     ef6:	8f 93       	push	r24
     ef8:	9f 93       	push	r25
     efa:	af 93       	push	r26
     efc:	bf 93       	push	r27
     efe:	ef 93       	push	r30
     f00:	ff 93       	push	r31
     f02:	8d e3       	ldi	r24, 0x3D	; 61
     f04:	99 e0       	ldi	r25, 0x09	; 9
     f06:	a9 d5       	rcall	.+2898   	; 0x1a5a <ringBufferNotEmpty>
     f08:	88 23       	and	r24, r24
     f0a:	31 f0       	breq	.+12     	; 0xf18 <__vector_26+0x3c>
     f0c:	8d e3       	ldi	r24, 0x3D	; 61
     f0e:	99 e0       	ldi	r25, 0x09	; 9
     f10:	74 d5       	rcall	.+2792   	; 0x19fa <ringBufferPop>
     f12:	80 93 c6 00 	sts	0x00C6, r24
     f16:	05 c0       	rjmp	.+10     	; 0xf22 <__vector_26+0x46>
     f18:	e1 ec       	ldi	r30, 0xC1	; 193
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	8f 7d       	andi	r24, 0xDF	; 223
     f20:	80 83       	st	Z, r24
     f22:	ff 91       	pop	r31
     f24:	ef 91       	pop	r30
     f26:	bf 91       	pop	r27
     f28:	af 91       	pop	r26
     f2a:	9f 91       	pop	r25
     f2c:	8f 91       	pop	r24
     f2e:	7f 91       	pop	r23
     f30:	6f 91       	pop	r22
     f32:	5f 91       	pop	r21
     f34:	4f 91       	pop	r20
     f36:	3f 91       	pop	r19
     f38:	2f 91       	pop	r18
     f3a:	0f 90       	pop	r0
     f3c:	0b be       	out	0x3b, r0	; 59
     f3e:	0f 90       	pop	r0
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	0f 90       	pop	r0
     f44:	1f 90       	pop	r1
     f46:	18 95       	reti

00000f48 <myUSART_USART0_Init>:
     f48:	10 92 c5 00 	sts	0x00C5, r1
     f4c:	87 e6       	ldi	r24, 0x67	; 103
     f4e:	80 93 c4 00 	sts	0x00C4, r24
     f52:	88 eb       	ldi	r24, 0xB8	; 184
     f54:	80 93 c1 00 	sts	0x00C1, r24
     f58:	86 e0       	ldi	r24, 0x06	; 6
     f5a:	80 93 c2 00 	sts	0x00C2, r24
     f5e:	40 e2       	ldi	r20, 0x20	; 32
     f60:	64 ef       	ldi	r22, 0xF4	; 244
     f62:	78 e0       	ldi	r23, 0x08	; 8
     f64:	8d ec       	ldi	r24, 0xCD	; 205
     f66:	98 e0       	ldi	r25, 0x08	; 8
     f68:	37 d5       	rcall	.+2670   	; 0x19d8 <ringBufferInit>
     f6a:	40 e2       	ldi	r20, 0x20	; 32
     f6c:	62 ed       	ldi	r22, 0xD2	; 210
     f6e:	78 e0       	ldi	r23, 0x08	; 8
     f70:	8d e3       	ldi	r24, 0x3D	; 61
     f72:	99 e0       	ldi	r25, 0x09	; 9
     f74:	31 d5       	rcall	.+2658   	; 0x19d8 <ringBufferInit>
     f76:	43 e0       	ldi	r20, 0x03	; 3
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	55 d3       	rcall	.+1706   	; 0x1628 <xQueueGenericCreate>
     f7e:	90 93 35 09 	sts	0x0935, r25
     f82:	80 93 34 09 	sts	0x0934, r24
     f86:	08 95       	ret

00000f88 <myUSART_USART1_Init>:
     f88:	10 92 cd 00 	sts	0x00CD, r1
     f8c:	87 e6       	ldi	r24, 0x67	; 103
     f8e:	80 93 cc 00 	sts	0x00CC, r24
     f92:	88 eb       	ldi	r24, 0xB8	; 184
     f94:	80 93 c9 00 	sts	0x00C9, r24
     f98:	86 e0       	ldi	r24, 0x06	; 6
     f9a:	80 93 ca 00 	sts	0x00CA, r24
     f9e:	40 e2       	ldi	r20, 0x20	; 32
     fa0:	6d ea       	ldi	r22, 0xAD	; 173
     fa2:	78 e0       	ldi	r23, 0x08	; 8
     fa4:	82 e4       	ldi	r24, 0x42	; 66
     fa6:	99 e0       	ldi	r25, 0x09	; 9
     fa8:	17 d5       	rcall	.+2606   	; 0x19d8 <ringBufferInit>
     faa:	40 e2       	ldi	r20, 0x20	; 32
     fac:	64 e1       	ldi	r22, 0x14	; 20
     fae:	79 e0       	ldi	r23, 0x09	; 9
     fb0:	88 e3       	ldi	r24, 0x38	; 56
     fb2:	99 e0       	ldi	r25, 0x09	; 9
     fb4:	11 d5       	rcall	.+2594   	; 0x19d8 <ringBufferInit>
     fb6:	43 e0       	ldi	r20, 0x03	; 3
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	35 d3       	rcall	.+1642   	; 0x1628 <xQueueGenericCreate>
     fbe:	90 93 37 09 	sts	0x0937, r25
     fc2:	80 93 36 09 	sts	0x0936, r24
     fc6:	43 e0       	ldi	r20, 0x03	; 3
     fc8:	60 e0       	ldi	r22, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	2d d3       	rcall	.+1626   	; 0x1628 <xQueueGenericCreate>
     fce:	90 93 f3 08 	sts	0x08F3, r25
     fd2:	80 93 f2 08 	sts	0x08F2, r24
     fd6:	08 95       	ret

00000fd8 <myUSART_transmitUSART0_c>:
     fd8:	cf 93       	push	r28
     fda:	c8 2f       	mov	r28, r24
     fdc:	8d e3       	ldi	r24, 0x3D	; 61
     fde:	99 e0       	ldi	r25, 0x09	; 9
     fe0:	35 d5       	rcall	.+2666   	; 0x1a4c <ringBufferFull>
     fe2:	81 11       	cpse	r24, r1
     fe4:	fb cf       	rjmp	.-10     	; 0xfdc <myUSART_transmitUSART0_c+0x4>
     fe6:	6c 2f       	mov	r22, r28
     fe8:	8d e3       	ldi	r24, 0x3D	; 61
     fea:	99 e0       	ldi	r25, 0x09	; 9
     fec:	18 d5       	rcall	.+2608   	; 0x1a1e <ringBufferPush>
     fee:	e1 ec       	ldi	r30, 0xC1	; 193
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	80 62       	ori	r24, 0x20	; 32
     ff6:	80 83       	st	Z, r24
     ff8:	e0 ec       	ldi	r30, 0xC0	; 192
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	80 64       	ori	r24, 0x40	; 64
    1000:	80 83       	st	Z, r24
    1002:	cf 91       	pop	r28
    1004:	08 95       	ret

00001006 <myUSART_transmitUSART1_c>:
    1006:	cf 93       	push	r28
    1008:	c8 2f       	mov	r28, r24
    100a:	88 e3       	ldi	r24, 0x38	; 56
    100c:	99 e0       	ldi	r25, 0x09	; 9
    100e:	1e d5       	rcall	.+2620   	; 0x1a4c <ringBufferFull>
    1010:	81 11       	cpse	r24, r1
    1012:	fb cf       	rjmp	.-10     	; 0x100a <myUSART_transmitUSART1_c+0x4>
    1014:	6c 2f       	mov	r22, r28
    1016:	88 e3       	ldi	r24, 0x38	; 56
    1018:	99 e0       	ldi	r25, 0x09	; 9
    101a:	01 d5       	rcall	.+2562   	; 0x1a1e <ringBufferPush>
    101c:	e9 ec       	ldi	r30, 0xC9	; 201
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	80 62       	ori	r24, 0x20	; 32
    1024:	80 83       	st	Z, r24
    1026:	e8 ec       	ldi	r30, 0xC8	; 200
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	80 64       	ori	r24, 0x40	; 64
    102e:	80 83       	st	Z, r24
    1030:	cf 91       	pop	r28
    1032:	08 95       	ret

00001034 <myUSART_transmitUSART1>:
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	ec 01       	movw	r28, r24
    103a:	88 81       	ld	r24, Y
    103c:	88 23       	and	r24, r24
    103e:	29 f0       	breq	.+10     	; 0x104a <myUSART_transmitUSART1+0x16>
    1040:	21 96       	adiw	r28, 0x01	; 1
    1042:	e1 df       	rcall	.-62     	; 0x1006 <myUSART_transmitUSART1_c>
    1044:	89 91       	ld	r24, Y+
    1046:	81 11       	cpse	r24, r1
    1048:	fc cf       	rjmp	.-8      	; 0x1042 <myUSART_transmitUSART1+0xe>
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	08 95       	ret

00001050 <myUSART_transmitUSART0>:
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	ec 01       	movw	r28, r24
    1056:	88 81       	ld	r24, Y
    1058:	88 23       	and	r24, r24
    105a:	29 f0       	breq	.+10     	; 0x1066 <myUSART_transmitUSART0+0x16>
    105c:	21 96       	adiw	r28, 0x01	; 1
    105e:	bc df       	rcall	.-136    	; 0xfd8 <myUSART_transmitUSART0_c>
    1060:	89 91       	ld	r24, Y+
    1062:	81 11       	cpse	r24, r1
    1064:	fc cf       	rjmp	.-8      	; 0x105e <myUSART_transmitUSART0+0xe>
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	08 95       	ret

0000106c <myUSART_receiveUSART1>:
    106c:	cf 93       	push	r28
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	4f ef       	ldi	r20, 0xFF	; 255
    1072:	5f ef       	ldi	r21, 0xFF	; 255
    1074:	60 e0       	ldi	r22, 0x00	; 0
    1076:	70 e0       	ldi	r23, 0x00	; 0
    1078:	80 91 36 09 	lds	r24, 0x0936
    107c:	90 91 37 09 	lds	r25, 0x0937
    1080:	f8 d3       	rcall	.+2032   	; 0x1872 <xQueueGenericReceive>
    1082:	82 e4       	ldi	r24, 0x42	; 66
    1084:	99 e0       	ldi	r25, 0x09	; 9
    1086:	b9 d4       	rcall	.+2418   	; 0x19fa <ringBufferPop>
    1088:	c8 2f       	mov	r28, r24
    108a:	82 e4       	ldi	r24, 0x42	; 66
    108c:	99 e0       	ldi	r25, 0x09	; 9
    108e:	e5 d4       	rcall	.+2506   	; 0x1a5a <ringBufferNotEmpty>
    1090:	88 23       	and	r24, r24
    1092:	51 f0       	breq	.+20     	; 0x10a8 <myUSART_receiveUSART1+0x3c>
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	40 e0       	ldi	r20, 0x00	; 0
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	60 e0       	ldi	r22, 0x00	; 0
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	80 91 36 09 	lds	r24, 0x0936
    10a2:	90 91 37 09 	lds	r25, 0x0937
    10a6:	ed d2       	rcall	.+1498   	; 0x1682 <xQueueGenericSend>
    10a8:	8c 2f       	mov	r24, r28
    10aa:	cf 91       	pop	r28
    10ac:	08 95       	ret

000010ae <myUSART_waitForHandshake>:
    10ae:	de df       	rcall	.-68     	; 0x106c <myUSART_receiveUSART1>
    10b0:	86 31       	cpi	r24, 0x16	; 22
    10b2:	51 f4       	brne	.+20     	; 0x10c8 <myUSART_waitForHandshake+0x1a>
    10b4:	85 e0       	ldi	r24, 0x05	; 5
    10b6:	a7 df       	rcall	.-178    	; 0x1006 <myUSART_transmitUSART1_c>
    10b8:	d9 df       	rcall	.-78     	; 0x106c <myUSART_receiveUSART1>
    10ba:	91 e0       	ldi	r25, 0x01	; 1
    10bc:	86 31       	cpi	r24, 0x16	; 22
    10be:	09 f4       	brne	.+2      	; 0x10c2 <myUSART_waitForHandshake+0x14>
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	89 2f       	mov	r24, r25
    10c4:	81 95       	neg	r24
    10c6:	08 95       	ret
    10c8:	8f ef       	ldi	r24, 0xFF	; 255
    10ca:	08 95       	ret

000010cc <myUSART_completeHandShake>:
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	40 e0       	ldi	r20, 0x00	; 0
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	80 91 f2 08 	lds	r24, 0x08F2
    10da:	90 91 f3 08 	lds	r25, 0x08F3
    10de:	d1 c2       	rjmp	.+1442   	; 0x1682 <xQueueGenericSend>
    10e0:	08 95       	ret

000010e2 <myUSART_receiveHandShakeAck>:
    10e2:	91 e0       	ldi	r25, 0x01	; 1
    10e4:	85 30       	cpi	r24, 0x05	; 5
    10e6:	09 f0       	breq	.+2      	; 0x10ea <myUSART_receiveHandShakeAck+0x8>
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	89 2f       	mov	r24, r25
    10ec:	08 95       	ret

000010ee <myUSART_receiveHandShakeStart>:
    10ee:	91 e0       	ldi	r25, 0x01	; 1
    10f0:	86 31       	cpi	r24, 0x16	; 22
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <myUSART_receiveHandShakeStart+0x8>
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	89 2f       	mov	r24, r25
    10f8:	08 95       	ret

000010fa <myUSART_receiveMessageACK>:


char myUSART_receiveMessageACK(unsigned char message)
{
	return (message == MESSAGE_ACK);
    10fa:	91 e0       	ldi	r25, 0x01	; 1
    10fc:	86 30       	cpi	r24, 0x06	; 6
    10fe:	09 f0       	breq	.+2      	; 0x1102 <myUSART_receiveMessageACK+0x8>
    1100:	90 e0       	ldi	r25, 0x00	; 0
}
    1102:	89 2f       	mov	r24, r25
    1104:	08 95       	ret

00001106 <myUSART_peekReceiveUSART1>:


unsigned char myUSART_peekReceiveUSART1()
{
    1106:	cf 93       	push	r28
	unsigned char data;
	
	xSemaphoreTake(semaUsart1Receive, portMAX_DELAY);
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	4f ef       	ldi	r20, 0xFF	; 255
    110c:	5f ef       	ldi	r21, 0xFF	; 255
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	80 91 36 09 	lds	r24, 0x0936
    1116:	90 91 37 09 	lds	r25, 0x0937
    111a:	ab d3       	rcall	.+1878   	; 0x1872 <xQueueGenericReceive>
	data = ringBufferPeek(&uart1_rxRingBuffer);
    111c:	82 e4       	ldi	r24, 0x42	; 66
    111e:	99 e0       	ldi	r25, 0x09	; 9
    1120:	62 d4       	rcall	.+2244   	; 0x19e6 <ringBufferPeek>
    1122:	c8 2f       	mov	r28, r24
	
	//need?
	if(ringBufferNotEmpty(&uart1_rxRingBuffer))
    1124:	82 e4       	ldi	r24, 0x42	; 66
    1126:	99 e0       	ldi	r25, 0x09	; 9
    1128:	98 d4       	rcall	.+2352   	; 0x1a5a <ringBufferNotEmpty>
    112a:	88 23       	and	r24, r24
    112c:	51 f0       	breq	.+20     	; 0x1142 <myUSART_peekReceiveUSART1+0x3c>
	{
		xSemaphoreGive(semaUsart1Receive);
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	40 e0       	ldi	r20, 0x00	; 0
    1132:	50 e0       	ldi	r21, 0x00	; 0
    1134:	60 e0       	ldi	r22, 0x00	; 0
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	80 91 36 09 	lds	r24, 0x0936
    113c:	90 91 37 09 	lds	r25, 0x0937
    1140:	a0 d2       	rcall	.+1344   	; 0x1682 <xQueueGenericSend>
	}
	
	return data;
    1142:	8c 2f       	mov	r24, r28
    1144:	cf 91       	pop	r28
    1146:	08 95       	ret

00001148 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    1148:	31 e1       	ldi	r19, 0x11	; 17
    114a:	fc 01       	movw	r30, r24
    114c:	30 83       	st	Z, r19
    114e:	31 97       	sbiw	r30, 0x01	; 1
    1150:	22 e2       	ldi	r18, 0x22	; 34
    1152:	20 83       	st	Z, r18
    1154:	31 97       	sbiw	r30, 0x01	; 1
    1156:	a3 e3       	ldi	r26, 0x33	; 51
    1158:	a0 83       	st	Z, r26
    115a:	31 97       	sbiw	r30, 0x01	; 1
    115c:	60 83       	st	Z, r22
    115e:	31 97       	sbiw	r30, 0x01	; 1
    1160:	70 83       	st	Z, r23
    1162:	31 97       	sbiw	r30, 0x01	; 1
    1164:	10 82       	st	Z, r1
    1166:	31 97       	sbiw	r30, 0x01	; 1
    1168:	10 82       	st	Z, r1
    116a:	31 97       	sbiw	r30, 0x01	; 1
    116c:	60 e8       	ldi	r22, 0x80	; 128
    116e:	60 83       	st	Z, r22
    1170:	31 97       	sbiw	r30, 0x01	; 1
    1172:	10 82       	st	Z, r1
    1174:	31 97       	sbiw	r30, 0x01	; 1
    1176:	10 82       	st	Z, r1
    1178:	31 97       	sbiw	r30, 0x01	; 1
    117a:	10 82       	st	Z, r1
    117c:	31 97       	sbiw	r30, 0x01	; 1
    117e:	62 e0       	ldi	r22, 0x02	; 2
    1180:	60 83       	st	Z, r22
    1182:	31 97       	sbiw	r30, 0x01	; 1
    1184:	63 e0       	ldi	r22, 0x03	; 3
    1186:	60 83       	st	Z, r22
    1188:	31 97       	sbiw	r30, 0x01	; 1
    118a:	64 e0       	ldi	r22, 0x04	; 4
    118c:	60 83       	st	Z, r22
    118e:	31 97       	sbiw	r30, 0x01	; 1
    1190:	65 e0       	ldi	r22, 0x05	; 5
    1192:	60 83       	st	Z, r22
    1194:	31 97       	sbiw	r30, 0x01	; 1
    1196:	66 e0       	ldi	r22, 0x06	; 6
    1198:	60 83       	st	Z, r22
    119a:	31 97       	sbiw	r30, 0x01	; 1
    119c:	67 e0       	ldi	r22, 0x07	; 7
    119e:	60 83       	st	Z, r22
    11a0:	31 97       	sbiw	r30, 0x01	; 1
    11a2:	68 e0       	ldi	r22, 0x08	; 8
    11a4:	60 83       	st	Z, r22
    11a6:	31 97       	sbiw	r30, 0x01	; 1
    11a8:	69 e0       	ldi	r22, 0x09	; 9
    11aa:	60 83       	st	Z, r22
    11ac:	31 97       	sbiw	r30, 0x01	; 1
    11ae:	60 e1       	ldi	r22, 0x10	; 16
    11b0:	60 83       	st	Z, r22
    11b2:	31 97       	sbiw	r30, 0x01	; 1
    11b4:	30 83       	st	Z, r19
    11b6:	31 97       	sbiw	r30, 0x01	; 1
    11b8:	32 e1       	ldi	r19, 0x12	; 18
    11ba:	30 83       	st	Z, r19
    11bc:	31 97       	sbiw	r30, 0x01	; 1
    11be:	33 e1       	ldi	r19, 0x13	; 19
    11c0:	30 83       	st	Z, r19
    11c2:	31 97       	sbiw	r30, 0x01	; 1
    11c4:	34 e1       	ldi	r19, 0x14	; 20
    11c6:	30 83       	st	Z, r19
    11c8:	31 97       	sbiw	r30, 0x01	; 1
    11ca:	35 e1       	ldi	r19, 0x15	; 21
    11cc:	30 83       	st	Z, r19
    11ce:	31 97       	sbiw	r30, 0x01	; 1
    11d0:	36 e1       	ldi	r19, 0x16	; 22
    11d2:	30 83       	st	Z, r19
    11d4:	31 97       	sbiw	r30, 0x01	; 1
    11d6:	37 e1       	ldi	r19, 0x17	; 23
    11d8:	30 83       	st	Z, r19
    11da:	31 97       	sbiw	r30, 0x01	; 1
    11dc:	38 e1       	ldi	r19, 0x18	; 24
    11de:	30 83       	st	Z, r19
    11e0:	31 97       	sbiw	r30, 0x01	; 1
    11e2:	39 e1       	ldi	r19, 0x19	; 25
    11e4:	30 83       	st	Z, r19
    11e6:	31 97       	sbiw	r30, 0x01	; 1
    11e8:	30 e2       	ldi	r19, 0x20	; 32
    11ea:	30 83       	st	Z, r19
    11ec:	31 97       	sbiw	r30, 0x01	; 1
    11ee:	31 e2       	ldi	r19, 0x21	; 33
    11f0:	30 83       	st	Z, r19
    11f2:	31 97       	sbiw	r30, 0x01	; 1
    11f4:	20 83       	st	Z, r18
    11f6:	31 97       	sbiw	r30, 0x01	; 1
    11f8:	23 e2       	ldi	r18, 0x23	; 35
    11fa:	20 83       	st	Z, r18
    11fc:	31 97       	sbiw	r30, 0x01	; 1
    11fe:	40 83       	st	Z, r20
    1200:	31 97       	sbiw	r30, 0x01	; 1
    1202:	50 83       	st	Z, r21
    1204:	31 97       	sbiw	r30, 0x01	; 1
    1206:	26 e2       	ldi	r18, 0x26	; 38
    1208:	20 83       	st	Z, r18
    120a:	31 97       	sbiw	r30, 0x01	; 1
    120c:	27 e2       	ldi	r18, 0x27	; 39
    120e:	20 83       	st	Z, r18
    1210:	31 97       	sbiw	r30, 0x01	; 1
    1212:	28 e2       	ldi	r18, 0x28	; 40
    1214:	20 83       	st	Z, r18
    1216:	31 97       	sbiw	r30, 0x01	; 1
    1218:	29 e2       	ldi	r18, 0x29	; 41
    121a:	20 83       	st	Z, r18
    121c:	31 97       	sbiw	r30, 0x01	; 1
    121e:	20 e3       	ldi	r18, 0x30	; 48
    1220:	20 83       	st	Z, r18
    1222:	31 97       	sbiw	r30, 0x01	; 1
    1224:	21 e3       	ldi	r18, 0x31	; 49
    1226:	20 83       	st	Z, r18
    1228:	89 97       	sbiw	r24, 0x29	; 41
    122a:	08 95       	ret

0000122c <xPortStartScheduler>:
    122c:	82 e0       	ldi	r24, 0x02	; 2
    122e:	84 bd       	out	0x24, r24	; 36
    1230:	16 bc       	out	0x26, r1	; 38
    1232:	80 e3       	ldi	r24, 0x30	; 48
    1234:	87 bd       	out	0x27, r24	; 39
    1236:	ee e6       	ldi	r30, 0x6E	; 110
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	82 60       	ori	r24, 0x02	; 2
    123e:	80 83       	st	Z, r24
    1240:	83 e0       	ldi	r24, 0x03	; 3
    1242:	85 bd       	out	0x25, r24	; 37
    1244:	a0 91 8d 08 	lds	r26, 0x088D
    1248:	b0 91 8e 08 	lds	r27, 0x088E
    124c:	cd 91       	ld	r28, X+
    124e:	cd bf       	out	0x3d, r28	; 61
    1250:	dd 91       	ld	r29, X+
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	ff 91       	pop	r31
    1256:	ef 91       	pop	r30
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	bf 91       	pop	r27
    125e:	af 91       	pop	r26
    1260:	9f 91       	pop	r25
    1262:	8f 91       	pop	r24
    1264:	7f 91       	pop	r23
    1266:	6f 91       	pop	r22
    1268:	5f 91       	pop	r21
    126a:	4f 91       	pop	r20
    126c:	3f 91       	pop	r19
    126e:	2f 91       	pop	r18
    1270:	1f 91       	pop	r17
    1272:	0f 91       	pop	r16
    1274:	ff 90       	pop	r15
    1276:	ef 90       	pop	r14
    1278:	df 90       	pop	r13
    127a:	cf 90       	pop	r12
    127c:	bf 90       	pop	r11
    127e:	af 90       	pop	r10
    1280:	9f 90       	pop	r9
    1282:	8f 90       	pop	r8
    1284:	7f 90       	pop	r7
    1286:	6f 90       	pop	r6
    1288:	5f 90       	pop	r5
    128a:	4f 90       	pop	r4
    128c:	3f 90       	pop	r3
    128e:	2f 90       	pop	r2
    1290:	1f 90       	pop	r1
    1292:	0f 90       	pop	r0
    1294:	0c be       	out	0x3c, r0	; 60
    1296:	0f 90       	pop	r0
    1298:	0b be       	out	0x3b, r0	; 59
    129a:	0f 90       	pop	r0
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	0f 90       	pop	r0
    12a0:	08 95       	ret
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	08 95       	ret

000012a6 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    12a6:	0f 92       	push	r0
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	0f 92       	push	r0
    12ae:	0b b6       	in	r0, 0x3b	; 59
    12b0:	0f 92       	push	r0
    12b2:	0c b6       	in	r0, 0x3c	; 60
    12b4:	0f 92       	push	r0
    12b6:	1f 92       	push	r1
    12b8:	11 24       	eor	r1, r1
    12ba:	2f 92       	push	r2
    12bc:	3f 92       	push	r3
    12be:	4f 92       	push	r4
    12c0:	5f 92       	push	r5
    12c2:	6f 92       	push	r6
    12c4:	7f 92       	push	r7
    12c6:	8f 92       	push	r8
    12c8:	9f 92       	push	r9
    12ca:	af 92       	push	r10
    12cc:	bf 92       	push	r11
    12ce:	cf 92       	push	r12
    12d0:	df 92       	push	r13
    12d2:	ef 92       	push	r14
    12d4:	ff 92       	push	r15
    12d6:	0f 93       	push	r16
    12d8:	1f 93       	push	r17
    12da:	2f 93       	push	r18
    12dc:	3f 93       	push	r19
    12de:	4f 93       	push	r20
    12e0:	5f 93       	push	r21
    12e2:	6f 93       	push	r22
    12e4:	7f 93       	push	r23
    12e6:	8f 93       	push	r24
    12e8:	9f 93       	push	r25
    12ea:	af 93       	push	r26
    12ec:	bf 93       	push	r27
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	ef 93       	push	r30
    12f4:	ff 93       	push	r31
    12f6:	a0 91 8d 08 	lds	r26, 0x088D
    12fa:	b0 91 8e 08 	lds	r27, 0x088E
    12fe:	0d b6       	in	r0, 0x3d	; 61
    1300:	0d 92       	st	X+, r0
    1302:	0e b6       	in	r0, 0x3e	; 62
    1304:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1306:	77 d7       	rcall	.+3822   	; 0x21f6 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1308:	a0 91 8d 08 	lds	r26, 0x088D
    130c:	b0 91 8e 08 	lds	r27, 0x088E
    1310:	cd 91       	ld	r28, X+
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	dd 91       	ld	r29, X+
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	ff 91       	pop	r31
    131a:	ef 91       	pop	r30
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	bf 91       	pop	r27
    1322:	af 91       	pop	r26
    1324:	9f 91       	pop	r25
    1326:	8f 91       	pop	r24
    1328:	7f 91       	pop	r23
    132a:	6f 91       	pop	r22
    132c:	5f 91       	pop	r21
    132e:	4f 91       	pop	r20
    1330:	3f 91       	pop	r19
    1332:	2f 91       	pop	r18
    1334:	1f 91       	pop	r17
    1336:	0f 91       	pop	r16
    1338:	ff 90       	pop	r15
    133a:	ef 90       	pop	r14
    133c:	df 90       	pop	r13
    133e:	cf 90       	pop	r12
    1340:	bf 90       	pop	r11
    1342:	af 90       	pop	r10
    1344:	9f 90       	pop	r9
    1346:	8f 90       	pop	r8
    1348:	7f 90       	pop	r7
    134a:	6f 90       	pop	r6
    134c:	5f 90       	pop	r5
    134e:	4f 90       	pop	r4
    1350:	3f 90       	pop	r3
    1352:	2f 90       	pop	r2
    1354:	1f 90       	pop	r1
    1356:	0f 90       	pop	r0
    1358:	0c be       	out	0x3c, r0	; 60
    135a:	0f 90       	pop	r0
    135c:	0b be       	out	0x3b, r0	; 59
    135e:	0f 90       	pop	r0
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1364:	08 95       	ret

00001366 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1366:	0f 92       	push	r0
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	f8 94       	cli
    136c:	0f 92       	push	r0
    136e:	0b b6       	in	r0, 0x3b	; 59
    1370:	0f 92       	push	r0
    1372:	0c b6       	in	r0, 0x3c	; 60
    1374:	0f 92       	push	r0
    1376:	1f 92       	push	r1
    1378:	11 24       	eor	r1, r1
    137a:	2f 92       	push	r2
    137c:	3f 92       	push	r3
    137e:	4f 92       	push	r4
    1380:	5f 92       	push	r5
    1382:	6f 92       	push	r6
    1384:	7f 92       	push	r7
    1386:	8f 92       	push	r8
    1388:	9f 92       	push	r9
    138a:	af 92       	push	r10
    138c:	bf 92       	push	r11
    138e:	cf 92       	push	r12
    1390:	df 92       	push	r13
    1392:	ef 92       	push	r14
    1394:	ff 92       	push	r15
    1396:	0f 93       	push	r16
    1398:	1f 93       	push	r17
    139a:	2f 93       	push	r18
    139c:	3f 93       	push	r19
    139e:	4f 93       	push	r20
    13a0:	5f 93       	push	r21
    13a2:	6f 93       	push	r22
    13a4:	7f 93       	push	r23
    13a6:	8f 93       	push	r24
    13a8:	9f 93       	push	r25
    13aa:	af 93       	push	r26
    13ac:	bf 93       	push	r27
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	ef 93       	push	r30
    13b4:	ff 93       	push	r31
    13b6:	a0 91 8d 08 	lds	r26, 0x088D
    13ba:	b0 91 8e 08 	lds	r27, 0x088E
    13be:	0d b6       	in	r0, 0x3d	; 61
    13c0:	0d 92       	st	X+, r0
    13c2:	0e b6       	in	r0, 0x3e	; 62
    13c4:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    13c6:	45 d5       	rcall	.+2698   	; 0x1e52 <xTaskIncrementTick>
    13c8:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    13ca:	15 d7       	rcall	.+3626   	; 0x21f6 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    13cc:	a0 91 8d 08 	lds	r26, 0x088D
    13d0:	b0 91 8e 08 	lds	r27, 0x088E
    13d4:	cd 91       	ld	r28, X+
    13d6:	cd bf       	out	0x3d, r28	; 61
    13d8:	dd 91       	ld	r29, X+
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	ff 91       	pop	r31
    13de:	ef 91       	pop	r30
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	bf 91       	pop	r27
    13e6:	af 91       	pop	r26
    13e8:	9f 91       	pop	r25
    13ea:	8f 91       	pop	r24
    13ec:	7f 91       	pop	r23
    13ee:	6f 91       	pop	r22
    13f0:	5f 91       	pop	r21
    13f2:	4f 91       	pop	r20
    13f4:	3f 91       	pop	r19
    13f6:	2f 91       	pop	r18
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	ff 90       	pop	r15
    13fe:	ef 90       	pop	r14
    1400:	df 90       	pop	r13
    1402:	cf 90       	pop	r12
    1404:	bf 90       	pop	r11
    1406:	af 90       	pop	r10
    1408:	9f 90       	pop	r9
    140a:	8f 90       	pop	r8
    140c:	7f 90       	pop	r7
    140e:	6f 90       	pop	r6
    1410:	5f 90       	pop	r5
    1412:	4f 90       	pop	r4
    1414:	3f 90       	pop	r3
    1416:	2f 90       	pop	r2
    1418:	1f 90       	pop	r1
    141a:	0f 90       	pop	r0
    141c:	0c be       	out	0x3c, r0	; 60
    141e:	0f 90       	pop	r0
    1420:	0b be       	out	0x3b, r0	; 59
    1422:	0f 90       	pop	r0
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1428:	08 95       	ret

0000142a <__vector_21>:
	 * the context is saved at the start of vPortYieldFromTick().  The tick
	 * count is incremented after the context is saved.
	 */
	 ISR(TIMER0_COMPA_vect, ISR_NAKED)
	 {
		 vPortYieldFromTick();
    142a:	9d df       	rcall	.-198    	; 0x1366 <vPortYieldFromTick>
		 asm volatile ("reti");
    142c:	18 95       	reti

0000142e <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    142e:	1f 93       	push	r17
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	ec 01       	movw	r28, r24
    1436:	14 2f       	mov	r17, r20
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    1438:	8c 8d       	ldd	r24, Y+28	; 0x1c
    143a:	81 11       	cpse	r24, r1
    143c:	0c c0       	rjmp	.+24     	; 0x1456 <prvCopyDataToQueue+0x28>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    143e:	88 81       	ld	r24, Y
    1440:	99 81       	ldd	r25, Y+1	; 0x01
    1442:	89 2b       	or	r24, r25
    1444:	09 f0       	breq	.+2      	; 0x1448 <prvCopyDataToQueue+0x1a>
    1446:	47 c0       	rjmp	.+142    	; 0x14d6 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	9b 81       	ldd	r25, Y+3	; 0x03
    144c:	0e 94 be 12 	call	0x257c	; 0x257c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    1450:	1b 82       	std	Y+3, r1	; 0x03
    1452:	1a 82       	std	Y+2, r1	; 0x02
    1454:	47 c0       	rjmp	.+142    	; 0x14e4 <prvCopyDataToQueue+0xb6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    1456:	41 11       	cpse	r20, r1
    1458:	18 c0       	rjmp	.+48     	; 0x148a <prvCopyDataToQueue+0x5c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    145a:	48 2f       	mov	r20, r24
    145c:	50 e0       	ldi	r21, 0x00	; 0
    145e:	8c 81       	ldd	r24, Y+4	; 0x04
    1460:	9d 81       	ldd	r25, Y+5	; 0x05
    1462:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1466:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1468:	8c 81       	ldd	r24, Y+4	; 0x04
    146a:	9d 81       	ldd	r25, Y+5	; 0x05
    146c:	82 0f       	add	r24, r18
    146e:	91 1d       	adc	r25, r1
    1470:	9d 83       	std	Y+5, r25	; 0x05
    1472:	8c 83       	std	Y+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1474:	2a 81       	ldd	r18, Y+2	; 0x02
    1476:	3b 81       	ldd	r19, Y+3	; 0x03
    1478:	82 17       	cp	r24, r18
    147a:	93 07       	cpc	r25, r19
    147c:	70 f1       	brcs	.+92     	; 0x14da <prvCopyDataToQueue+0xac>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    147e:	88 81       	ld	r24, Y
    1480:	99 81       	ldd	r25, Y+1	; 0x01
    1482:	9d 83       	std	Y+5, r25	; 0x05
    1484:	8c 83       	std	Y+4, r24	; 0x04
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	2d c0       	rjmp	.+90     	; 0x14e4 <prvCopyDataToQueue+0xb6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    148a:	48 2f       	mov	r20, r24
    148c:	50 e0       	ldi	r21, 0x00	; 0
    148e:	8e 81       	ldd	r24, Y+6	; 0x06
    1490:	9f 81       	ldd	r25, Y+7	; 0x07
    1492:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    1496:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	31 95       	neg	r19
    149c:	21 95       	neg	r18
    149e:	31 09       	sbc	r19, r1
    14a0:	8e 81       	ldd	r24, Y+6	; 0x06
    14a2:	9f 81       	ldd	r25, Y+7	; 0x07
    14a4:	82 0f       	add	r24, r18
    14a6:	93 1f       	adc	r25, r19
    14a8:	9f 83       	std	Y+7, r25	; 0x07
    14aa:	8e 83       	std	Y+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    14ac:	68 81       	ld	r22, Y
    14ae:	79 81       	ldd	r23, Y+1	; 0x01
    14b0:	86 17       	cp	r24, r22
    14b2:	97 07       	cpc	r25, r23
    14b4:	30 f4       	brcc	.+12     	; 0x14c2 <prvCopyDataToQueue+0x94>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	9b 81       	ldd	r25, Y+3	; 0x03
    14ba:	28 0f       	add	r18, r24
    14bc:	39 1f       	adc	r19, r25
    14be:	3f 83       	std	Y+7, r19	; 0x07
    14c0:	2e 83       	std	Y+6, r18	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    14c2:	12 30       	cpi	r17, 0x02	; 2
    14c4:	61 f4       	brne	.+24     	; 0x14de <prvCopyDataToQueue+0xb0>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    14c6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    14c8:	88 23       	and	r24, r24
    14ca:	59 f0       	breq	.+22     	; 0x14e2 <prvCopyDataToQueue+0xb4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
    14cc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    14ce:	81 50       	subi	r24, 0x01	; 1
    14d0:	8a 8f       	std	Y+26, r24	; 0x1a
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	07 c0       	rjmp	.+14     	; 0x14e4 <prvCopyDataToQueue+0xb6>
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	05 c0       	rjmp	.+10     	; 0x14e4 <prvCopyDataToQueue+0xb6>
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	03 c0       	rjmp	.+6      	; 0x14e4 <prvCopyDataToQueue+0xb6>
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	01 c0       	rjmp	.+2      	; 0x14e4 <prvCopyDataToQueue+0xb6>
    14e2:	80 e0       	ldi	r24, 0x00	; 0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    14e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    14e6:	9f 5f       	subi	r25, 0xFF	; 255
    14e8:	9a 8f       	std	Y+26, r25	; 0x1a

	return xReturn;
}
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	1f 91       	pop	r17
    14f0:	08 95       	ret

000014f2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    14f2:	fc 01       	movw	r30, r24
    14f4:	cb 01       	movw	r24, r22
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    14f6:	44 8d       	ldd	r20, Z+28	; 0x1c
    14f8:	44 23       	and	r20, r20
    14fa:	a1 f0       	breq	.+40     	; 0x1524 <prvCopyDataFromQueue+0x32>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    14fc:	50 e0       	ldi	r21, 0x00	; 0
    14fe:	26 81       	ldd	r18, Z+6	; 0x06
    1500:	37 81       	ldd	r19, Z+7	; 0x07
    1502:	24 0f       	add	r18, r20
    1504:	35 1f       	adc	r19, r21
    1506:	37 83       	std	Z+7, r19	; 0x07
    1508:	26 83       	std	Z+6, r18	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    150a:	62 81       	ldd	r22, Z+2	; 0x02
    150c:	73 81       	ldd	r23, Z+3	; 0x03
    150e:	26 17       	cp	r18, r22
    1510:	37 07       	cpc	r19, r23
    1512:	20 f0       	brcs	.+8      	; 0x151c <prvCopyDataFromQueue+0x2a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    1514:	20 81       	ld	r18, Z
    1516:	31 81       	ldd	r19, Z+1	; 0x01
    1518:	37 83       	std	Z+7, r19	; 0x07
    151a:	26 83       	std	Z+6, r18	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    151c:	66 81       	ldd	r22, Z+6	; 0x06
    151e:	77 81       	ldd	r23, Z+7	; 0x07
    1520:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <memcpy>
    1524:	08 95       	ret

00001526 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    1526:	0f 93       	push	r16
    1528:	1f 93       	push	r17
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	ec 01       	movw	r28, r24

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    1536:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1538:	18 16       	cp	r1, r24
    153a:	a4 f4       	brge	.+40     	; 0x1564 <prvUnlockQueue+0x3e>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    153c:	89 89       	ldd	r24, Y+17	; 0x11
    153e:	88 23       	and	r24, r24
    1540:	89 f0       	breq	.+34     	; 0x1564 <prvUnlockQueue+0x3e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1542:	8e 01       	movw	r16, r28
    1544:	0f 5e       	subi	r16, 0xEF	; 239
    1546:	1f 4f       	sbci	r17, 0xFF	; 255
    1548:	03 c0       	rjmp	.+6      	; 0x1550 <prvUnlockQueue+0x2a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    154a:	89 89       	ldd	r24, Y+17	; 0x11
    154c:	88 23       	and	r24, r24
    154e:	51 f0       	breq	.+20     	; 0x1564 <prvUnlockQueue+0x3e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1550:	c8 01       	movw	r24, r16
    1552:	27 d7       	rcall	.+3662   	; 0x23a2 <xTaskRemoveFromEventList>
    1554:	81 11       	cpse	r24, r1
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    1556:	b0 d7       	rcall	.+3936   	; 0x24b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    1558:	8e 8d       	ldd	r24, Y+30	; 0x1e
    155a:	81 50       	subi	r24, 0x01	; 1
    155c:	8e 8f       	std	Y+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    155e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1560:	18 16       	cp	r1, r24
    1562:	9c f3       	brlt	.-26     	; 0x154a <prvUnlockQueue+0x24>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    1564:	8f ef       	ldi	r24, 0xFF	; 255
    1566:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    1568:	0f 90       	pop	r0
    156a:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    1572:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1574:	18 16       	cp	r1, r24
    1576:	a4 f4       	brge	.+40     	; 0x15a0 <prvUnlockQueue+0x7a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1578:	88 85       	ldd	r24, Y+8	; 0x08
    157a:	88 23       	and	r24, r24
    157c:	89 f0       	breq	.+34     	; 0x15a0 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    157e:	8e 01       	movw	r16, r28
    1580:	08 5f       	subi	r16, 0xF8	; 248
    1582:	1f 4f       	sbci	r17, 0xFF	; 255
    1584:	03 c0       	rjmp	.+6      	; 0x158c <prvUnlockQueue+0x66>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1586:	88 85       	ldd	r24, Y+8	; 0x08
    1588:	88 23       	and	r24, r24
    158a:	51 f0       	breq	.+20     	; 0x15a0 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    158c:	c8 01       	movw	r24, r16
    158e:	09 d7       	rcall	.+3602   	; 0x23a2 <xTaskRemoveFromEventList>
    1590:	81 11       	cpse	r24, r1
				{
					vTaskMissedYield();
    1592:	92 d7       	rcall	.+3876   	; 0x24b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    1594:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1596:	81 50       	subi	r24, 0x01	; 1
    1598:	8d 8f       	std	Y+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    159a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    159c:	18 16       	cp	r1, r24
    159e:	9c f3       	brlt	.-26     	; 0x1586 <prvUnlockQueue+0x60>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    15a0:	8f ef       	ldi	r24, 0xFF	; 255
    15a2:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    15a4:	0f 90       	pop	r0
    15a6:	0f be       	out	0x3f, r0	; 63
}
    15a8:	df 91       	pop	r29
    15aa:	cf 91       	pop	r28
    15ac:	1f 91       	pop	r17
    15ae:	0f 91       	pop	r16
    15b0:	08 95       	ret

000015b2 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    15b2:	cf 93       	push	r28
    15b4:	df 93       	push	r29
    15b6:	ec 01       	movw	r28, r24
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    15be:	88 81       	ld	r24, Y
    15c0:	99 81       	ldd	r25, Y+1	; 0x01
    15c2:	2c 8d       	ldd	r18, Y+28	; 0x1c
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    15c8:	72 9f       	mul	r23, r18
    15ca:	a0 01       	movw	r20, r0
    15cc:	73 9f       	mul	r23, r19
    15ce:	50 0d       	add	r21, r0
    15d0:	11 24       	eor	r1, r1
    15d2:	fc 01       	movw	r30, r24
    15d4:	e4 0f       	add	r30, r20
    15d6:	f5 1f       	adc	r31, r21
    15d8:	fb 83       	std	Y+3, r31	; 0x03
    15da:	ea 83       	std	Y+2, r30	; 0x02
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    15dc:	1a 8e       	std	Y+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    15de:	9d 83       	std	Y+5, r25	; 0x05
    15e0:	8c 83       	std	Y+4, r24	; 0x04
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    15e2:	42 1b       	sub	r20, r18
    15e4:	53 0b       	sbc	r21, r19
    15e6:	84 0f       	add	r24, r20
    15e8:	95 1f       	adc	r25, r21
    15ea:	9f 83       	std	Y+7, r25	; 0x07
    15ec:	8e 83       	std	Y+6, r24	; 0x06
		pxQueue->xRxLock = queueUNLOCKED;
    15ee:	8f ef       	ldi	r24, 0xFF	; 255
    15f0:	8d 8f       	std	Y+29, r24	; 0x1d
		pxQueue->xTxLock = queueUNLOCKED;
    15f2:	8e 8f       	std	Y+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    15f4:	61 11       	cpse	r22, r1
    15f6:	0a c0       	rjmp	.+20     	; 0x160c <xQueueGenericReset+0x5a>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    15f8:	88 85       	ldd	r24, Y+8	; 0x08
    15fa:	88 23       	and	r24, r24
    15fc:	79 f0       	breq	.+30     	; 0x161c <xQueueGenericReset+0x6a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    15fe:	ce 01       	movw	r24, r28
    1600:	08 96       	adiw	r24, 0x08	; 8
    1602:	cf d6       	rcall	.+3486   	; 0x23a2 <xTaskRemoveFromEventList>
    1604:	81 30       	cpi	r24, 0x01	; 1
    1606:	51 f4       	brne	.+20     	; 0x161c <xQueueGenericReset+0x6a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    1608:	4e de       	rcall	.-868    	; 0x12a6 <vPortYield>
    160a:	08 c0       	rjmp	.+16     	; 0x161c <xQueueGenericReset+0x6a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    160c:	ce 01       	movw	r24, r28
    160e:	08 96       	adiw	r24, 0x08	; 8
    1610:	0e 94 f5 02 	call	0x5ea	; 0x5ea <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1614:	ce 01       	movw	r24, r28
    1616:	41 96       	adiw	r24, 0x11	; 17
    1618:	0e 94 f5 02 	call	0x5ea	; 0x5ea <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    161c:	0f 90       	pop	r0
    161e:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	08 95       	ret

00001628 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    1628:	0f 93       	push	r16
    162a:	1f 93       	push	r17
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	18 2f       	mov	r17, r24
    1632:	06 2f       	mov	r16, r22
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
    1634:	88 23       	and	r24, r24
    1636:	e9 f0       	breq	.+58     	; 0x1672 <xQueueGenericCreate+0x4a>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    1638:	8f e1       	ldi	r24, 0x1F	; 31
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	0e 94 bf 02 	call	0x57e	; 0x57e <pvPortMalloc>
    1640:	ec 01       	movw	r28, r24
		if( pxNewQueue != NULL )
    1642:	00 97       	sbiw	r24, 0x00	; 0
    1644:	c1 f0       	breq	.+48     	; 0x1676 <xQueueGenericCreate+0x4e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1646:	10 9f       	mul	r17, r16
    1648:	c0 01       	movw	r24, r0
    164a:	11 24       	eor	r1, r1

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
    164c:	01 96       	adiw	r24, 0x01	; 1
    164e:	0e 94 bf 02 	call	0x57e	; 0x57e <pvPortMalloc>
    1652:	99 83       	std	Y+1, r25	; 0x01
    1654:	88 83       	st	Y, r24
			if( pxNewQueue->pcHead != NULL )
    1656:	89 2b       	or	r24, r25
    1658:	31 f0       	breq	.+12     	; 0x1666 <xQueueGenericCreate+0x3e>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    165a:	1b 8f       	std	Y+27, r17	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    165c:	0c 8f       	std	Y+28, r16	; 0x1c
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    165e:	61 e0       	ldi	r22, 0x01	; 1
    1660:	ce 01       	movw	r24, r28
    1662:	a7 df       	rcall	.-178    	; 0x15b2 <xQueueGenericReset>
    1664:	08 c0       	rjmp	.+16     	; 0x1676 <xQueueGenericCreate+0x4e>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    1666:	ce 01       	movw	r24, r28
    1668:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <vPortFree>

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
    166c:	c0 e0       	ldi	r28, 0x00	; 0
    166e:	d0 e0       	ldi	r29, 0x00	; 0
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <xQueueGenericCreate+0x4e>
    1672:	c0 e0       	ldi	r28, 0x00	; 0
    1674:	d0 e0       	ldi	r29, 0x00	; 0
	}

	configASSERT( xReturn );

	return xReturn;
}
    1676:	ce 01       	movw	r24, r28
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	1f 91       	pop	r17
    167e:	0f 91       	pop	r16
    1680:	08 95       	ret

00001682 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    1682:	9f 92       	push	r9
    1684:	af 92       	push	r10
    1686:	bf 92       	push	r11
    1688:	cf 92       	push	r12
    168a:	df 92       	push	r13
    168c:	ef 92       	push	r14
    168e:	ff 92       	push	r15
    1690:	0f 93       	push	r16
    1692:	1f 93       	push	r17
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	00 d0       	rcall	.+0      	; 0x169a <xQueueGenericSend+0x18>
    169a:	1f 92       	push	r1
    169c:	1f 92       	push	r1
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	8c 01       	movw	r16, r24
    16a4:	6b 01       	movw	r12, r22
    16a6:	5d 83       	std	Y+5, r21	; 0x05
    16a8:	4c 83       	std	Y+4, r20	; 0x04
    16aa:	a2 2e       	mov	r10, r18
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    16ac:	b1 2c       	mov	r11, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    16ae:	99 24       	eor	r9, r9
    16b0:	93 94       	inc	r9
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    16b2:	7c 01       	movw	r14, r24
    16b4:	88 e0       	ldi	r24, 0x08	; 8
    16b6:	e8 0e       	add	r14, r24
    16b8:	f1 1c       	adc	r15, r1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	f8 94       	cli
    16be:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    16c0:	f8 01       	movw	r30, r16
    16c2:	92 8d       	ldd	r25, Z+26	; 0x1a
    16c4:	83 8d       	ldd	r24, Z+27	; 0x1b
    16c6:	98 17       	cp	r25, r24
    16c8:	18 f0       	brcs	.+6      	; 0x16d0 <xQueueGenericSend+0x4e>
    16ca:	f2 e0       	ldi	r31, 0x02	; 2
    16cc:	af 12       	cpse	r10, r31
    16ce:	15 c0       	rjmp	.+42     	; 0x16fa <xQueueGenericSend+0x78>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    16d0:	4a 2d       	mov	r20, r10
    16d2:	b6 01       	movw	r22, r12
    16d4:	c8 01       	movw	r24, r16
    16d6:	ab de       	rcall	.-682    	; 0x142e <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    16d8:	f8 01       	movw	r30, r16
    16da:	91 89       	ldd	r25, Z+17	; 0x11
    16dc:	99 23       	and	r25, r25
    16de:	39 f0       	breq	.+14     	; 0x16ee <xQueueGenericSend+0x6c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    16e0:	c8 01       	movw	r24, r16
    16e2:	41 96       	adiw	r24, 0x11	; 17
    16e4:	5e d6       	rcall	.+3260   	; 0x23a2 <xTaskRemoveFromEventList>
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	21 f4       	brne	.+8      	; 0x16f2 <xQueueGenericSend+0x70>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    16ea:	dd dd       	rcall	.-1094   	; 0x12a6 <vPortYield>
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <xQueueGenericSend+0x70>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    16ee:	81 11       	cpse	r24, r1
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    16f0:	da dd       	rcall	.-1100   	; 0x12a6 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    16f2:	0f 90       	pop	r0
    16f4:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	46 c0       	rjmp	.+140    	; 0x1786 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    16fa:	ec 81       	ldd	r30, Y+4	; 0x04
    16fc:	fd 81       	ldd	r31, Y+5	; 0x05
    16fe:	ef 2b       	or	r30, r31
    1700:	21 f4       	brne	.+8      	; 0x170a <xQueueGenericSend+0x88>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1702:	0f 90       	pop	r0
    1704:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	3e c0       	rjmp	.+124    	; 0x1786 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    170a:	b1 10       	cpse	r11, r1
    170c:	04 c0       	rjmp	.+8      	; 0x1716 <xQueueGenericSend+0x94>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    170e:	ce 01       	movw	r24, r28
    1710:	01 96       	adiw	r24, 0x01	; 1
    1712:	8f d6       	rcall	.+3358   	; 0x2432 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1714:	b9 2c       	mov	r11, r9
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1716:	0f 90       	pop	r0
    1718:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    171a:	86 d3       	rcall	.+1804   	; 0x1e28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	0f 92       	push	r0
    1722:	f8 01       	movw	r30, r16
    1724:	85 8d       	ldd	r24, Z+29	; 0x1d
    1726:	8f 3f       	cpi	r24, 0xFF	; 255
    1728:	09 f4       	brne	.+2      	; 0x172c <xQueueGenericSend+0xaa>
    172a:	15 8e       	std	Z+29, r1	; 0x1d
    172c:	f8 01       	movw	r30, r16
    172e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1730:	8f 3f       	cpi	r24, 0xFF	; 255
    1732:	09 f4       	brne	.+2      	; 0x1736 <xQueueGenericSend+0xb4>
    1734:	16 8e       	std	Z+30, r1	; 0x1e
    1736:	0f 90       	pop	r0
    1738:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    173a:	be 01       	movw	r22, r28
    173c:	6c 5f       	subi	r22, 0xFC	; 252
    173e:	7f 4f       	sbci	r23, 0xFF	; 255
    1740:	ce 01       	movw	r24, r28
    1742:	01 96       	adiw	r24, 0x01	; 1
    1744:	81 d6       	rcall	.+3330   	; 0x2448 <xTaskCheckForTimeOut>
    1746:	81 11       	cpse	r24, r1
    1748:	1a c0       	rjmp	.+52     	; 0x177e <xQueueGenericSend+0xfc>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1750:	f8 01       	movw	r30, r16
    1752:	92 8d       	ldd	r25, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1754:	0f 90       	pop	r0
    1756:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1758:	f8 01       	movw	r30, r16
    175a:	83 8d       	ldd	r24, Z+27	; 0x1b
    175c:	98 13       	cpse	r25, r24
    175e:	0b c0       	rjmp	.+22     	; 0x1776 <xQueueGenericSend+0xf4>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1760:	6c 81       	ldd	r22, Y+4	; 0x04
    1762:	7d 81       	ldd	r23, Y+5	; 0x05
    1764:	c7 01       	movw	r24, r14
    1766:	f2 d5       	rcall	.+3044   	; 0x234c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    1768:	c8 01       	movw	r24, r16
    176a:	dd de       	rcall	.-582    	; 0x1526 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    176c:	30 d4       	rcall	.+2144   	; 0x1fce <xTaskResumeAll>
    176e:	81 11       	cpse	r24, r1
    1770:	a4 cf       	rjmp	.-184    	; 0x16ba <xQueueGenericSend+0x38>
				{
					portYIELD_WITHIN_API();
    1772:	99 dd       	rcall	.-1230   	; 0x12a6 <vPortYield>
    1774:	a2 cf       	rjmp	.-188    	; 0x16ba <xQueueGenericSend+0x38>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1776:	c8 01       	movw	r24, r16
    1778:	d6 de       	rcall	.-596    	; 0x1526 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    177a:	29 d4       	rcall	.+2130   	; 0x1fce <xTaskResumeAll>
    177c:	9e cf       	rjmp	.-196    	; 0x16ba <xQueueGenericSend+0x38>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    177e:	c8 01       	movw	r24, r16
    1780:	d2 de       	rcall	.-604    	; 0x1526 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1782:	25 d4       	rcall	.+2122   	; 0x1fce <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    1784:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	df 91       	pop	r29
    1792:	cf 91       	pop	r28
    1794:	1f 91       	pop	r17
    1796:	0f 91       	pop	r16
    1798:	ff 90       	pop	r15
    179a:	ef 90       	pop	r14
    179c:	df 90       	pop	r13
    179e:	cf 90       	pop	r12
    17a0:	bf 90       	pop	r11
    17a2:	af 90       	pop	r10
    17a4:	9f 90       	pop	r9
    17a6:	08 95       	ret

000017a8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    17ac:	8f e1       	ldi	r24, 0x1F	; 31
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	0e 94 bf 02 	call	0x57e	; 0x57e <pvPortMalloc>
    17b4:	ec 01       	movw	r28, r24
		if( pxNewQueue != NULL )
    17b6:	00 97       	sbiw	r24, 0x00	; 0
    17b8:	f1 f0       	breq	.+60     	; 0x17f6 <xQueueCreateMutex+0x4e>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    17ba:	1b 82       	std	Y+3, r1	; 0x03
    17bc:	1a 82       	std	Y+2, r1	; 0x02
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    17be:	19 82       	std	Y+1, r1	; 0x01
    17c0:	18 82       	st	Y, r1

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    17c2:	1d 82       	std	Y+5, r1	; 0x05
    17c4:	1c 82       	std	Y+4, r1	; 0x04
			pxNewQueue->u.pcReadFrom = NULL;
    17c6:	1f 82       	std	Y+7, r1	; 0x07
    17c8:	1e 82       	std	Y+6, r1	; 0x06

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    17ca:	1a 8e       	std	Y+26, r1	; 0x1a
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	8b 8f       	std	Y+27, r24	; 0x1b
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
    17d0:	1c 8e       	std	Y+28, r1	; 0x1c
			pxNewQueue->xRxLock = queueUNLOCKED;
    17d2:	8f ef       	ldi	r24, 0xFF	; 255
    17d4:	8d 8f       	std	Y+29, r24	; 0x1d
			pxNewQueue->xTxLock = queueUNLOCKED;
    17d6:	8e 8f       	std	Y+30, r24	; 0x1e
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    17d8:	ce 01       	movw	r24, r28
    17da:	08 96       	adiw	r24, 0x08	; 8
    17dc:	0e 94 f5 02 	call	0x5ea	; 0x5ea <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    17e0:	ce 01       	movw	r24, r28
    17e2:	41 96       	adiw	r24, 0x11	; 17
    17e4:	0e 94 f5 02 	call	0x5ea	; 0x5ea <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	40 e0       	ldi	r20, 0x00	; 0
    17ec:	50 e0       	ldi	r21, 0x00	; 0
    17ee:	60 e0       	ldi	r22, 0x00	; 0
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	ce 01       	movw	r24, r28
    17f4:	46 df       	rcall	.-372    	; 0x1682 <xQueueGenericSend>
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
    17f6:	ce 01       	movw	r24, r28
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	08 95       	ret

000017fe <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    17fe:	0f 93       	push	r16
    1800:	1f 93       	push	r17
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
    1806:	ec 01       	movw	r28, r24
    1808:	8a 01       	movw	r16, r20
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    180a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    180c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    180e:	98 17       	cp	r25, r24
    1810:	10 f0       	brcs	.+4      	; 0x1816 <xQueueGenericSendFromISR+0x18>
    1812:	22 30       	cpi	r18, 0x02	; 2
    1814:	11 f5       	brne	.+68     	; 0x185a <xQueueGenericSendFromISR+0x5c>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			if( prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition ) != pdFALSE )
    1816:	42 2f       	mov	r20, r18
    1818:	ce 01       	movw	r24, r28
    181a:	09 de       	rcall	.-1006   	; 0x142e <prvCopyDataToQueue>
    181c:	88 23       	and	r24, r24
    181e:	31 f0       	breq	.+12     	; 0x182c <xQueueGenericSendFromISR+0x2e>
			{
				/* This is a special case that can only be executed if a task
				holds multiple mutexes and then gives the mutexes back in an
				order that is different to that in which they were taken. */
				if( pxHigherPriorityTaskWoken != NULL )
    1820:	01 15       	cp	r16, r1
    1822:	11 05       	cpc	r17, r1
    1824:	19 f0       	breq	.+6      	; 0x182c <xQueueGenericSendFromISR+0x2e>
				{
					*pxHigherPriorityTaskWoken = pdTRUE;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	f8 01       	movw	r30, r16
    182a:	80 83       	st	Z, r24
				}
			}

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    182c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    182e:	8f 3f       	cpi	r24, 0xFF	; 255
    1830:	79 f4       	brne	.+30     	; 0x1850 <xQueueGenericSendFromISR+0x52>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1832:	89 89       	ldd	r24, Y+17	; 0x11
    1834:	88 23       	and	r24, r24
    1836:	99 f0       	breq	.+38     	; 0x185e <xQueueGenericSendFromISR+0x60>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1838:	ce 01       	movw	r24, r28
    183a:	41 96       	adiw	r24, 0x11	; 17
    183c:	b2 d5       	rcall	.+2916   	; 0x23a2 <xTaskRemoveFromEventList>
    183e:	88 23       	and	r24, r24
    1840:	81 f0       	breq	.+32     	; 0x1862 <xQueueGenericSendFromISR+0x64>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    1842:	01 15       	cp	r16, r1
    1844:	11 05       	cpc	r17, r1
    1846:	79 f0       	breq	.+30     	; 0x1866 <xQueueGenericSendFromISR+0x68>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	f8 01       	movw	r30, r16
    184c:	80 83       	st	Z, r24
    184e:	0c c0       	rjmp	.+24     	; 0x1868 <xQueueGenericSendFromISR+0x6a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    1850:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1852:	8f 5f       	subi	r24, 0xFF	; 255
    1854:	8e 8f       	std	Y+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	07 c0       	rjmp	.+14     	; 0x1868 <xQueueGenericSendFromISR+0x6a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	05 c0       	rjmp	.+10     	; 0x1868 <xQueueGenericSendFromISR+0x6a>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	03 c0       	rjmp	.+6      	; 0x1868 <xQueueGenericSendFromISR+0x6a>
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	01 c0       	rjmp	.+2      	; 0x1868 <xQueueGenericSendFromISR+0x6a>
    1866:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1868:	df 91       	pop	r29
    186a:	cf 91       	pop	r28
    186c:	1f 91       	pop	r17
    186e:	0f 91       	pop	r16
    1870:	08 95       	ret

00001872 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    1872:	9f 92       	push	r9
    1874:	af 92       	push	r10
    1876:	bf 92       	push	r11
    1878:	cf 92       	push	r12
    187a:	df 92       	push	r13
    187c:	ef 92       	push	r14
    187e:	ff 92       	push	r15
    1880:	0f 93       	push	r16
    1882:	1f 93       	push	r17
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
    1888:	00 d0       	rcall	.+0      	; 0x188a <xQueueGenericReceive+0x18>
    188a:	1f 92       	push	r1
    188c:	1f 92       	push	r1
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	8c 01       	movw	r16, r24
    1894:	6b 01       	movw	r12, r22
    1896:	5d 83       	std	Y+5, r21	; 0x05
    1898:	4c 83       	std	Y+4, r20	; 0x04
    189a:	b2 2e       	mov	r11, r18
BaseType_t xEntryTimeSet = pdFALSE;
    189c:	a1 2c       	mov	r10, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    189e:	99 24       	eor	r9, r9
    18a0:	93 94       	inc	r9
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    18a2:	7c 01       	movw	r14, r24
    18a4:	81 e1       	ldi	r24, 0x11	; 17
    18a6:	e8 0e       	add	r14, r24
    18a8:	f1 1c       	adc	r15, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    18b0:	f8 01       	movw	r30, r16
    18b2:	82 8d       	ldd	r24, Z+26	; 0x1a
    18b4:	88 23       	and	r24, r24
    18b6:	69 f1       	breq	.+90     	; 0x1912 <xQueueGenericReceive+0xa0>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    18b8:	e6 80       	ldd	r14, Z+6	; 0x06
    18ba:	f7 80       	ldd	r15, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    18bc:	b6 01       	movw	r22, r12
    18be:	c8 01       	movw	r24, r16
    18c0:	18 de       	rcall	.-976    	; 0x14f2 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    18c2:	b1 10       	cpse	r11, r1
    18c4:	17 c0       	rjmp	.+46     	; 0x18f4 <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    18c6:	f8 01       	movw	r30, r16
    18c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    18ca:	81 50       	subi	r24, 0x01	; 1
    18cc:	82 8f       	std	Z+26, r24	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    18ce:	80 81       	ld	r24, Z
    18d0:	91 81       	ldd	r25, Z+1	; 0x01
    18d2:	89 2b       	or	r24, r25
    18d4:	21 f4       	brne	.+8      	; 0x18de <xQueueGenericReceive+0x6c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    18d6:	91 d6       	rcall	.+3362   	; 0x25fa <pvTaskIncrementMutexHeldCount>
    18d8:	f8 01       	movw	r30, r16
    18da:	93 83       	std	Z+3, r25	; 0x03
    18dc:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    18de:	f8 01       	movw	r30, r16
    18e0:	80 85       	ldd	r24, Z+8	; 0x08
    18e2:	88 23       	and	r24, r24
    18e4:	91 f0       	breq	.+36     	; 0x190a <xQueueGenericReceive+0x98>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    18e6:	c8 01       	movw	r24, r16
    18e8:	08 96       	adiw	r24, 0x08	; 8
    18ea:	5b d5       	rcall	.+2742   	; 0x23a2 <xTaskRemoveFromEventList>
    18ec:	81 30       	cpi	r24, 0x01	; 1
    18ee:	69 f4       	brne	.+26     	; 0x190a <xQueueGenericReceive+0x98>
						{
							queueYIELD_IF_USING_PREEMPTION();
    18f0:	da dc       	rcall	.-1612   	; 0x12a6 <vPortYield>
    18f2:	0b c0       	rjmp	.+22     	; 0x190a <xQueueGenericReceive+0x98>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    18f4:	f8 01       	movw	r30, r16
    18f6:	f7 82       	std	Z+7, r15	; 0x07
    18f8:	e6 82       	std	Z+6, r14	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    18fa:	81 89       	ldd	r24, Z+17	; 0x11
    18fc:	88 23       	and	r24, r24
    18fe:	29 f0       	breq	.+10     	; 0x190a <xQueueGenericReceive+0x98>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1900:	c8 01       	movw	r24, r16
    1902:	41 96       	adiw	r24, 0x11	; 17
    1904:	4e d5       	rcall	.+2716   	; 0x23a2 <xTaskRemoveFromEventList>
    1906:	81 11       	cpse	r24, r1
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    1908:	ce dc       	rcall	.-1636   	; 0x12a6 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    190a:	0f 90       	pop	r0
    190c:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	52 c0       	rjmp	.+164    	; 0x19b6 <xQueueGenericReceive+0x144>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1912:	4c 81       	ldd	r20, Y+4	; 0x04
    1914:	5d 81       	ldd	r21, Y+5	; 0x05
    1916:	45 2b       	or	r20, r21
    1918:	21 f4       	brne	.+8      	; 0x1922 <xQueueGenericReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    191a:	0f 90       	pop	r0
    191c:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	4a c0       	rjmp	.+148    	; 0x19b6 <xQueueGenericReceive+0x144>
				}
				else if( xEntryTimeSet == pdFALSE )
    1922:	a1 10       	cpse	r10, r1
    1924:	04 c0       	rjmp	.+8      	; 0x192e <xQueueGenericReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1926:	ce 01       	movw	r24, r28
    1928:	01 96       	adiw	r24, 0x01	; 1
    192a:	83 d5       	rcall	.+2822   	; 0x2432 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    192c:	a9 2c       	mov	r10, r9
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    192e:	0f 90       	pop	r0
    1930:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1932:	7a d2       	rcall	.+1268   	; 0x1e28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	0f 92       	push	r0
    193a:	f8 01       	movw	r30, r16
    193c:	85 8d       	ldd	r24, Z+29	; 0x1d
    193e:	8f 3f       	cpi	r24, 0xFF	; 255
    1940:	09 f4       	brne	.+2      	; 0x1944 <xQueueGenericReceive+0xd2>
    1942:	15 8e       	std	Z+29, r1	; 0x1d
    1944:	f8 01       	movw	r30, r16
    1946:	86 8d       	ldd	r24, Z+30	; 0x1e
    1948:	8f 3f       	cpi	r24, 0xFF	; 255
    194a:	09 f4       	brne	.+2      	; 0x194e <xQueueGenericReceive+0xdc>
    194c:	16 8e       	std	Z+30, r1	; 0x1e
    194e:	0f 90       	pop	r0
    1950:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1952:	be 01       	movw	r22, r28
    1954:	6c 5f       	subi	r22, 0xFC	; 252
    1956:	7f 4f       	sbci	r23, 0xFF	; 255
    1958:	ce 01       	movw	r24, r28
    195a:	01 96       	adiw	r24, 0x01	; 1
    195c:	75 d5       	rcall	.+2794   	; 0x2448 <xTaskCheckForTimeOut>
    195e:	81 11       	cpse	r24, r1
    1960:	26 c0       	rjmp	.+76     	; 0x19ae <xQueueGenericReceive+0x13c>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	f8 94       	cli
    1966:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1968:	f8 01       	movw	r30, r16
    196a:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    196c:	0f 90       	pop	r0
    196e:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1970:	81 11       	cpse	r24, r1
    1972:	19 c0       	rjmp	.+50     	; 0x19a6 <xQueueGenericReceive+0x134>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1974:	f8 01       	movw	r30, r16
    1976:	80 81       	ld	r24, Z
    1978:	91 81       	ldd	r25, Z+1	; 0x01
    197a:	89 2b       	or	r24, r25
    197c:	49 f4       	brne	.+18     	; 0x1990 <xQueueGenericReceive+0x11e>
					{
						taskENTER_CRITICAL();
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1984:	f8 01       	movw	r30, r16
    1986:	82 81       	ldd	r24, Z+2	; 0x02
    1988:	93 81       	ldd	r25, Z+3	; 0x03
    198a:	9a d5       	rcall	.+2868   	; 0x24c0 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    198c:	0f 90       	pop	r0
    198e:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1990:	6c 81       	ldd	r22, Y+4	; 0x04
    1992:	7d 81       	ldd	r23, Y+5	; 0x05
    1994:	c7 01       	movw	r24, r14
    1996:	da d4       	rcall	.+2484   	; 0x234c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1998:	c8 01       	movw	r24, r16
    199a:	c5 dd       	rcall	.-1142   	; 0x1526 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    199c:	18 d3       	rcall	.+1584   	; 0x1fce <xTaskResumeAll>
    199e:	81 11       	cpse	r24, r1
    19a0:	84 cf       	rjmp	.-248    	; 0x18aa <xQueueGenericReceive+0x38>
				{
					portYIELD_WITHIN_API();
    19a2:	81 dc       	rcall	.-1790   	; 0x12a6 <vPortYield>
    19a4:	82 cf       	rjmp	.-252    	; 0x18aa <xQueueGenericReceive+0x38>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    19a6:	c8 01       	movw	r24, r16
    19a8:	be dd       	rcall	.-1156   	; 0x1526 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    19aa:	11 d3       	rcall	.+1570   	; 0x1fce <xTaskResumeAll>
    19ac:	7e cf       	rjmp	.-260    	; 0x18aa <xQueueGenericReceive+0x38>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    19ae:	c8 01       	movw	r24, r16
    19b0:	ba dd       	rcall	.-1164   	; 0x1526 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    19b2:	0d d3       	rcall	.+1562   	; 0x1fce <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    19b4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	1f 91       	pop	r17
    19c6:	0f 91       	pop	r16
    19c8:	ff 90       	pop	r15
    19ca:	ef 90       	pop	r14
    19cc:	df 90       	pop	r13
    19ce:	cf 90       	pop	r12
    19d0:	bf 90       	pop	r11
    19d2:	af 90       	pop	r10
    19d4:	9f 90       	pop	r9
    19d6:	08 95       	ret

000019d8 <ringBufferInit>:

#include <ringBuffer.h>


void ringBufferInit(ringBuffer *ring, unsigned char* buffer, unsigned char size)
{
    19d8:	fc 01       	movw	r30, r24
	ring->rBuffer = buffer;
    19da:	71 83       	std	Z+1, r23	; 0x01
    19dc:	60 83       	st	Z, r22
	ring->rSize = size;
    19de:	42 83       	std	Z+2, r20	; 0x02
	ring->rIndex = 0;
    19e0:	14 82       	std	Z+4, r1	; 0x04
	ring->rLength = 0;	 
    19e2:	13 82       	std	Z+3, r1	; 0x03
    19e4:	08 95       	ret

000019e6 <ringBufferPeek>:
}

unsigned char ringBufferPeek(ringBuffer *ring)
{
	   return ring->rBuffer[ ring->rIndex ];	
    19e6:	dc 01       	movw	r26, r24
    19e8:	14 96       	adiw	r26, 0x04	; 4
    19ea:	2c 91       	ld	r18, X
    19ec:	14 97       	sbiw	r26, 0x04	; 4
    19ee:	ed 91       	ld	r30, X+
    19f0:	fc 91       	ld	r31, X
    19f2:	e2 0f       	add	r30, r18
    19f4:	f1 1d       	adc	r31, r1
}
    19f6:	80 81       	ld	r24, Z
    19f8:	08 95       	ret

000019fa <ringBufferPop>:

// int?
unsigned char ringBufferPop(ringBuffer *ring)
{
    19fa:	fc 01       	movw	r30, r24
    unsigned char element;
	
            element = ring->rBuffer[ ring->rIndex ];
    19fc:	94 81       	ldd	r25, Z+4	; 0x04
    19fe:	a0 81       	ld	r26, Z
    1a00:	b1 81       	ldd	r27, Z+1	; 0x01
    1a02:	a9 0f       	add	r26, r25
    1a04:	b1 1d       	adc	r27, r1
    1a06:	8c 91       	ld	r24, X
            ring->rIndex ++;
    1a08:	9f 5f       	subi	r25, 0xFF	; 255
    1a0a:	94 83       	std	Z+4, r25	; 0x04
            if ( ring->rIndex >= ring->rSize )
    1a0c:	22 81       	ldd	r18, Z+2	; 0x02
    1a0e:	92 17       	cp	r25, r18
    1a10:	10 f0       	brcs	.+4      	; 0x1a16 <ringBufferPop+0x1c>
            {
                ring->rIndex -= ring->rSize;
    1a12:	92 1b       	sub	r25, r18
    1a14:	94 83       	std	Z+4, r25	; 0x04
            }
            ring->rLength --;
    1a16:	93 81       	ldd	r25, Z+3	; 0x03
    1a18:	91 50       	subi	r25, 0x01	; 1
    1a1a:	93 83       	std	Z+3, r25	; 0x03
    
    return element;
}
    1a1c:	08 95       	ret

00001a1e <ringBufferPush>:



void ringBufferPush( ringBuffer *ring, unsigned char element )
{
    1a1e:	fc 01       	movw	r30, r24
    1a20:	46 2f       	mov	r20, r22
    
        if ( ring->rLength < ring->rSize )
    1a22:	83 81       	ldd	r24, Z+3	; 0x03
    1a24:	22 81       	ldd	r18, Z+2	; 0x02
    1a26:	82 17       	cp	r24, r18
    1a28:	80 f4       	brcc	.+32     	; 0x1a4a <ringBufferPush+0x2c>
        {
            ring->rBuffer[ ( ring->rIndex + ring->rLength ) % ring->rSize ] = element;
    1a2a:	34 81       	ldd	r19, Z+4	; 0x04
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	83 0f       	add	r24, r19
    1a30:	91 1d       	adc	r25, r1
    1a32:	62 2f       	mov	r22, r18
    1a34:	70 e0       	ldi	r23, 0x00	; 0
    1a36:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__divmodhi4>
    1a3a:	a0 81       	ld	r26, Z
    1a3c:	b1 81       	ldd	r27, Z+1	; 0x01
    1a3e:	a8 0f       	add	r26, r24
    1a40:	b9 1f       	adc	r27, r25
    1a42:	4c 93       	st	X, r20
            ring->rLength++;
    1a44:	83 81       	ldd	r24, Z+3	; 0x03
    1a46:	8f 5f       	subi	r24, 0xFF	; 255
    1a48:	83 83       	std	Z+3, r24	; 0x03
    1a4a:	08 95       	ret

00001a4c <ringBufferFull>:


// return 1 if full
// return 0 if not full
char ringBufferFull(ringBuffer *ring)
{
    1a4c:	fc 01       	movw	r30, r24
   return (ring->rSize == ring->rLength);
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	22 81       	ldd	r18, Z+2	; 0x02
    1a52:	93 81       	ldd	r25, Z+3	; 0x03
    1a54:	29 13       	cpse	r18, r25
    1a56:	80 e0       	ldi	r24, 0x00	; 0
}
    1a58:	08 95       	ret

00001a5a <ringBufferNotEmpty>:

// return 1 if not empty
// return 0 if empty
char ringBufferNotEmpty(ringBuffer *ring)
{
	return (ring->rLength > 0);
    1a5a:	21 e0       	ldi	r18, 0x01	; 1
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	83 81       	ldd	r24, Z+3	; 0x03
    1a60:	81 11       	cpse	r24, r1
    1a62:	01 c0       	rjmp	.+2      	; 0x1a66 <ringBufferNotEmpty+0xc>
    1a64:	20 e0       	ldi	r18, 0x00	; 0
}
    1a66:	82 2f       	mov	r24, r18
    1a68:	08 95       	ret

00001a6a <prvResetNextTaskUnblockTime>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
    1a6a:	e0 91 4c 08 	lds	r30, 0x084C
    1a6e:	f0 91 4d 08 	lds	r31, 0x084D
    1a72:	80 81       	ld	r24, Z
    1a74:	81 11       	cpse	r24, r1
    1a76:	07 c0       	rjmp	.+14     	; 0x1a86 <prvResetNextTaskUnblockTime+0x1c>
    1a78:	8f ef       	ldi	r24, 0xFF	; 255
    1a7a:	9f ef       	ldi	r25, 0xFF	; 255
    1a7c:	90 93 05 02 	sts	0x0205, r25
    1a80:	80 93 04 02 	sts	0x0204, r24
    1a84:	08 95       	ret
    1a86:	e0 91 4c 08 	lds	r30, 0x084C
    1a8a:	f0 91 4d 08 	lds	r31, 0x084D
    1a8e:	05 80       	ldd	r0, Z+5	; 0x05
    1a90:	f6 81       	ldd	r31, Z+6	; 0x06
    1a92:	e0 2d       	mov	r30, r0
    1a94:	06 80       	ldd	r0, Z+6	; 0x06
    1a96:	f7 81       	ldd	r31, Z+7	; 0x07
    1a98:	e0 2d       	mov	r30, r0
    1a9a:	82 81       	ldd	r24, Z+2	; 0x02
    1a9c:	93 81       	ldd	r25, Z+3	; 0x03
    1a9e:	90 93 05 02 	sts	0x0205, r25
    1aa2:	80 93 04 02 	sts	0x0204, r24
    1aa6:	08 95       	ret

00001aa8 <prvAddCurrentTaskToDelayedList>:
    1aa8:	cf 93       	push	r28
    1aaa:	df 93       	push	r29
    1aac:	ec 01       	movw	r28, r24
    1aae:	e0 91 8d 08 	lds	r30, 0x088D
    1ab2:	f0 91 8e 08 	lds	r31, 0x088E
    1ab6:	93 83       	std	Z+3, r25	; 0x03
    1ab8:	82 83       	std	Z+2, r24	; 0x02
    1aba:	80 91 2b 08 	lds	r24, 0x082B
    1abe:	90 91 2c 08 	lds	r25, 0x082C
    1ac2:	c8 17       	cp	r28, r24
    1ac4:	d9 07       	cpc	r29, r25
    1ac6:	68 f4       	brcc	.+26     	; 0x1ae2 <prvAddCurrentTaskToDelayedList+0x3a>
    1ac8:	60 91 8d 08 	lds	r22, 0x088D
    1acc:	70 91 8e 08 	lds	r23, 0x088E
    1ad0:	80 91 4a 08 	lds	r24, 0x084A
    1ad4:	90 91 4b 08 	lds	r25, 0x084B
    1ad8:	6e 5f       	subi	r22, 0xFE	; 254
    1ada:	7f 4f       	sbci	r23, 0xFF	; 255
    1adc:	0e 94 28 03 	call	0x650	; 0x650 <vListInsert>
    1ae0:	17 c0       	rjmp	.+46     	; 0x1b10 <prvAddCurrentTaskToDelayedList+0x68>
    1ae2:	60 91 8d 08 	lds	r22, 0x088D
    1ae6:	70 91 8e 08 	lds	r23, 0x088E
    1aea:	80 91 4c 08 	lds	r24, 0x084C
    1aee:	90 91 4d 08 	lds	r25, 0x084D
    1af2:	6e 5f       	subi	r22, 0xFE	; 254
    1af4:	7f 4f       	sbci	r23, 0xFF	; 255
    1af6:	0e 94 28 03 	call	0x650	; 0x650 <vListInsert>
    1afa:	80 91 04 02 	lds	r24, 0x0204
    1afe:	90 91 05 02 	lds	r25, 0x0205
    1b02:	c8 17       	cp	r28, r24
    1b04:	d9 07       	cpc	r29, r25
    1b06:	20 f4       	brcc	.+8      	; 0x1b10 <prvAddCurrentTaskToDelayedList+0x68>
    1b08:	d0 93 05 02 	sts	0x0205, r29
    1b0c:	c0 93 04 02 	sts	0x0204, r28
    1b10:	df 91       	pop	r29
    1b12:	cf 91       	pop	r28
    1b14:	08 95       	ret

00001b16 <xTaskGenericCreate>:
    1b16:	4f 92       	push	r4
    1b18:	5f 92       	push	r5
    1b1a:	6f 92       	push	r6
    1b1c:	7f 92       	push	r7
    1b1e:	8f 92       	push	r8
    1b20:	9f 92       	push	r9
    1b22:	af 92       	push	r10
    1b24:	bf 92       	push	r11
    1b26:	cf 92       	push	r12
    1b28:	df 92       	push	r13
    1b2a:	ef 92       	push	r14
    1b2c:	ff 92       	push	r15
    1b2e:	0f 93       	push	r16
    1b30:	1f 93       	push	r17
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
    1b36:	4c 01       	movw	r8, r24
    1b38:	5b 01       	movw	r10, r22
    1b3a:	2a 01       	movw	r4, r20
    1b3c:	39 01       	movw	r6, r18
    1b3e:	83 e2       	ldi	r24, 0x23	; 35
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	0e 94 bf 02 	call	0x57e	; 0x57e <pvPortMalloc>
    1b46:	ec 01       	movw	r28, r24
    1b48:	00 97       	sbiw	r24, 0x00	; 0
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <xTaskGenericCreate+0x38>
    1b4c:	e7 c0       	rjmp	.+462    	; 0x1d1c <xTaskGenericCreate+0x206>
    1b4e:	c1 14       	cp	r12, r1
    1b50:	d1 04       	cpc	r13, r1
    1b52:	09 f0       	breq	.+2      	; 0x1b56 <xTaskGenericCreate+0x40>
    1b54:	cc c0       	rjmp	.+408    	; 0x1cee <xTaskGenericCreate+0x1d8>
    1b56:	c2 01       	movw	r24, r4
    1b58:	0e 94 bf 02 	call	0x57e	; 0x57e <pvPortMalloc>
    1b5c:	98 8f       	std	Y+24, r25	; 0x18
    1b5e:	8f 8b       	std	Y+23, r24	; 0x17
    1b60:	89 2b       	or	r24, r25
    1b62:	09 f0       	breq	.+2      	; 0x1b66 <xTaskGenericCreate+0x50>
    1b64:	c6 c0       	rjmp	.+396    	; 0x1cf2 <xTaskGenericCreate+0x1dc>
    1b66:	ce 01       	movw	r24, r28
    1b68:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <vPortFree>
    1b6c:	d7 c0       	rjmp	.+430    	; 0x1d1c <xTaskGenericCreate+0x206>
    1b6e:	cf 01       	movw	r24, r30
    1b70:	31 91       	ld	r19, Z+
    1b72:	da 01       	movw	r26, r20
    1b74:	3d 93       	st	X+, r19
    1b76:	ad 01       	movw	r20, r26
    1b78:	dc 01       	movw	r26, r24
    1b7a:	8c 91       	ld	r24, X
    1b7c:	88 23       	and	r24, r24
    1b7e:	11 f0       	breq	.+4      	; 0x1b84 <xTaskGenericCreate+0x6e>
    1b80:	21 50       	subi	r18, 0x01	; 1
    1b82:	a9 f7       	brne	.-22     	; 0x1b6e <xTaskGenericCreate+0x58>
    1b84:	18 a2       	std	Y+32, r1	; 0x20
    1b86:	10 2f       	mov	r17, r16
    1b88:	05 30       	cpi	r16, 0x05	; 5
    1b8a:	08 f0       	brcs	.+2      	; 0x1b8e <xTaskGenericCreate+0x78>
    1b8c:	14 e0       	ldi	r17, 0x04	; 4
    1b8e:	1e 8b       	std	Y+22, r17	; 0x16
    1b90:	19 a3       	std	Y+33, r17	; 0x21
    1b92:	1a a2       	std	Y+34, r1	; 0x22
    1b94:	5e 01       	movw	r10, r28
    1b96:	b2 e0       	ldi	r27, 0x02	; 2
    1b98:	ab 0e       	add	r10, r27
    1b9a:	b1 1c       	adc	r11, r1
    1b9c:	c5 01       	movw	r24, r10
    1b9e:	0e 94 03 03 	call	0x606	; 0x606 <vListInitialiseItem>
    1ba2:	ce 01       	movw	r24, r28
    1ba4:	0c 96       	adiw	r24, 0x0c	; 12
    1ba6:	0e 94 03 03 	call	0x606	; 0x606 <vListInitialiseItem>
    1baa:	d9 87       	std	Y+9, r29	; 0x09
    1bac:	c8 87       	std	Y+8, r28	; 0x08
    1bae:	85 e0       	ldi	r24, 0x05	; 5
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	81 1b       	sub	r24, r17
    1bb4:	91 09       	sbc	r25, r1
    1bb6:	9d 87       	std	Y+13, r25	; 0x0d
    1bb8:	8c 87       	std	Y+12, r24	; 0x0c
    1bba:	db 8b       	std	Y+19, r29	; 0x13
    1bbc:	ca 8b       	std	Y+18, r28	; 0x12
    1bbe:	a3 01       	movw	r20, r6
    1bc0:	b4 01       	movw	r22, r8
    1bc2:	c6 01       	movw	r24, r12
    1bc4:	c1 da       	rcall	.-2686   	; 0x1148 <pxPortInitialiseStack>
    1bc6:	99 83       	std	Y+1, r25	; 0x01
    1bc8:	88 83       	st	Y, r24
    1bca:	e1 14       	cp	r14, r1
    1bcc:	f1 04       	cpc	r15, r1
    1bce:	19 f0       	breq	.+6      	; 0x1bd6 <xTaskGenericCreate+0xc0>
    1bd0:	f7 01       	movw	r30, r14
    1bd2:	d1 83       	std	Z+1, r29	; 0x01
    1bd4:	c0 83       	st	Z, r28
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	0f 92       	push	r0
    1bdc:	80 91 2d 08 	lds	r24, 0x082D
    1be0:	8f 5f       	subi	r24, 0xFF	; 255
    1be2:	80 93 2d 08 	sts	0x082D, r24
    1be6:	80 91 8d 08 	lds	r24, 0x088D
    1bea:	90 91 8e 08 	lds	r25, 0x088E
    1bee:	89 2b       	or	r24, r25
    1bf0:	09 f0       	breq	.+2      	; 0x1bf4 <xTaskGenericCreate+0xde>
    1bf2:	3f c0       	rjmp	.+126    	; 0x1c72 <xTaskGenericCreate+0x15c>
    1bf4:	d0 93 8e 08 	sts	0x088E, r29
    1bf8:	c0 93 8d 08 	sts	0x088D, r28
    1bfc:	80 91 2d 08 	lds	r24, 0x082D
    1c00:	81 30       	cpi	r24, 0x01	; 1
    1c02:	09 f0       	breq	.+2      	; 0x1c06 <xTaskGenericCreate+0xf0>
    1c04:	45 c0       	rjmp	.+138    	; 0x1c90 <xTaskGenericCreate+0x17a>
    1c06:	0f 2e       	mov	r0, r31
    1c08:	f0 e6       	ldi	r31, 0x60	; 96
    1c0a:	ef 2e       	mov	r14, r31
    1c0c:	f8 e0       	ldi	r31, 0x08	; 8
    1c0e:	ff 2e       	mov	r15, r31
    1c10:	f0 2d       	mov	r31, r0
    1c12:	0f 2e       	mov	r0, r31
    1c14:	fd e8       	ldi	r31, 0x8D	; 141
    1c16:	cf 2e       	mov	r12, r31
    1c18:	f8 e0       	ldi	r31, 0x08	; 8
    1c1a:	df 2e       	mov	r13, r31
    1c1c:	f0 2d       	mov	r31, r0
    1c1e:	c7 01       	movw	r24, r14
    1c20:	0e 94 f5 02 	call	0x5ea	; 0x5ea <vListInitialise>
    1c24:	f9 e0       	ldi	r31, 0x09	; 9
    1c26:	ef 0e       	add	r14, r31
    1c28:	f1 1c       	adc	r15, r1
    1c2a:	ec 14       	cp	r14, r12
    1c2c:	fd 04       	cpc	r15, r13
    1c2e:	b9 f7       	brne	.-18     	; 0x1c1e <xTaskGenericCreate+0x108>
    1c30:	87 e5       	ldi	r24, 0x57	; 87
    1c32:	98 e0       	ldi	r25, 0x08	; 8
    1c34:	0e 94 f5 02 	call	0x5ea	; 0x5ea <vListInitialise>
    1c38:	8e e4       	ldi	r24, 0x4E	; 78
    1c3a:	98 e0       	ldi	r25, 0x08	; 8
    1c3c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <vListInitialise>
    1c40:	81 e4       	ldi	r24, 0x41	; 65
    1c42:	98 e0       	ldi	r25, 0x08	; 8
    1c44:	0e 94 f5 02 	call	0x5ea	; 0x5ea <vListInitialise>
    1c48:	88 e3       	ldi	r24, 0x38	; 56
    1c4a:	98 e0       	ldi	r25, 0x08	; 8
    1c4c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <vListInitialise>
    1c50:	8e e2       	ldi	r24, 0x2E	; 46
    1c52:	98 e0       	ldi	r25, 0x08	; 8
    1c54:	0e 94 f5 02 	call	0x5ea	; 0x5ea <vListInitialise>
    1c58:	87 e5       	ldi	r24, 0x57	; 87
    1c5a:	98 e0       	ldi	r25, 0x08	; 8
    1c5c:	90 93 4d 08 	sts	0x084D, r25
    1c60:	80 93 4c 08 	sts	0x084C, r24
    1c64:	8e e4       	ldi	r24, 0x4E	; 78
    1c66:	98 e0       	ldi	r25, 0x08	; 8
    1c68:	90 93 4b 08 	sts	0x084B, r25
    1c6c:	80 93 4a 08 	sts	0x084A, r24
    1c70:	0f c0       	rjmp	.+30     	; 0x1c90 <xTaskGenericCreate+0x17a>
    1c72:	80 91 29 08 	lds	r24, 0x0829
    1c76:	81 11       	cpse	r24, r1
    1c78:	0b c0       	rjmp	.+22     	; 0x1c90 <xTaskGenericCreate+0x17a>
    1c7a:	e0 91 8d 08 	lds	r30, 0x088D
    1c7e:	f0 91 8e 08 	lds	r31, 0x088E
    1c82:	86 89       	ldd	r24, Z+22	; 0x16
    1c84:	08 17       	cp	r16, r24
    1c86:	20 f0       	brcs	.+8      	; 0x1c90 <xTaskGenericCreate+0x17a>
    1c88:	d0 93 8e 08 	sts	0x088E, r29
    1c8c:	c0 93 8d 08 	sts	0x088D, r28
    1c90:	80 91 25 08 	lds	r24, 0x0825
    1c94:	8f 5f       	subi	r24, 0xFF	; 255
    1c96:	80 93 25 08 	sts	0x0825, r24
    1c9a:	8e 89       	ldd	r24, Y+22	; 0x16
    1c9c:	90 91 2a 08 	lds	r25, 0x082A
    1ca0:	98 17       	cp	r25, r24
    1ca2:	10 f4       	brcc	.+4      	; 0x1ca8 <xTaskGenericCreate+0x192>
    1ca4:	80 93 2a 08 	sts	0x082A, r24
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	9c 01       	movw	r18, r24
    1cac:	22 0f       	add	r18, r18
    1cae:	33 1f       	adc	r19, r19
    1cb0:	22 0f       	add	r18, r18
    1cb2:	33 1f       	adc	r19, r19
    1cb4:	22 0f       	add	r18, r18
    1cb6:	33 1f       	adc	r19, r19
    1cb8:	82 0f       	add	r24, r18
    1cba:	93 1f       	adc	r25, r19
    1cbc:	b5 01       	movw	r22, r10
    1cbe:	80 5a       	subi	r24, 0xA0	; 160
    1cc0:	97 4f       	sbci	r25, 0xF7	; 247
    1cc2:	0e 94 07 03 	call	0x60e	; 0x60e <vListInsertEnd>
    1cc6:	0f 90       	pop	r0
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	80 91 29 08 	lds	r24, 0x0829
    1cce:	88 23       	and	r24, r24
    1cd0:	51 f0       	breq	.+20     	; 0x1ce6 <xTaskGenericCreate+0x1d0>
    1cd2:	e0 91 8d 08 	lds	r30, 0x088D
    1cd6:	f0 91 8e 08 	lds	r31, 0x088E
    1cda:	86 89       	ldd	r24, Z+22	; 0x16
    1cdc:	80 17       	cp	r24, r16
    1cde:	28 f4       	brcc	.+10     	; 0x1cea <xTaskGenericCreate+0x1d4>
    1ce0:	e2 da       	rcall	.-2620   	; 0x12a6 <vPortYield>
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	1c c0       	rjmp	.+56     	; 0x1d1e <xTaskGenericCreate+0x208>
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	1a c0       	rjmp	.+52     	; 0x1d1e <xTaskGenericCreate+0x208>
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	18 c0       	rjmp	.+48     	; 0x1d1e <xTaskGenericCreate+0x208>
    1cee:	d8 8e       	std	Y+24, r13	; 0x18
    1cf0:	cf 8a       	std	Y+23, r12	; 0x17
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	48 1a       	sub	r4, r24
    1cf6:	51 08       	sbc	r5, r1
    1cf8:	cf 88       	ldd	r12, Y+23	; 0x17
    1cfa:	d8 8c       	ldd	r13, Y+24	; 0x18
    1cfc:	c4 0c       	add	r12, r4
    1cfe:	d5 1c       	adc	r13, r5
    1d00:	d5 01       	movw	r26, r10
    1d02:	8c 91       	ld	r24, X
    1d04:	89 8f       	std	Y+25, r24	; 0x19
    1d06:	8c 91       	ld	r24, X
    1d08:	88 23       	and	r24, r24
    1d0a:	09 f4       	brne	.+2      	; 0x1d0e <xTaskGenericCreate+0x1f8>
    1d0c:	3b cf       	rjmp	.-394    	; 0x1b84 <xTaskGenericCreate+0x6e>
    1d0e:	ae 01       	movw	r20, r28
    1d10:	46 5e       	subi	r20, 0xE6	; 230
    1d12:	5f 4f       	sbci	r21, 0xFF	; 255
    1d14:	f5 01       	movw	r30, r10
    1d16:	31 96       	adiw	r30, 0x01	; 1
    1d18:	27 e0       	ldi	r18, 0x07	; 7
    1d1a:	29 cf       	rjmp	.-430    	; 0x1b6e <xTaskGenericCreate+0x58>
    1d1c:	8f ef       	ldi	r24, 0xFF	; 255
    1d1e:	df 91       	pop	r29
    1d20:	cf 91       	pop	r28
    1d22:	1f 91       	pop	r17
    1d24:	0f 91       	pop	r16
    1d26:	ff 90       	pop	r15
    1d28:	ef 90       	pop	r14
    1d2a:	df 90       	pop	r13
    1d2c:	cf 90       	pop	r12
    1d2e:	bf 90       	pop	r11
    1d30:	af 90       	pop	r10
    1d32:	9f 90       	pop	r9
    1d34:	8f 90       	pop	r8
    1d36:	7f 90       	pop	r7
    1d38:	6f 90       	pop	r6
    1d3a:	5f 90       	pop	r5
    1d3c:	4f 90       	pop	r4
    1d3e:	08 95       	ret

00001d40 <vTaskResume>:
    1d40:	0f 93       	push	r16
    1d42:	1f 93       	push	r17
    1d44:	cf 93       	push	r28
    1d46:	df 93       	push	r29
    1d48:	ec 01       	movw	r28, r24
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <vTaskResume+0x10>
    1d4e:	3e c0       	rjmp	.+124    	; 0x1dcc <vTaskResume+0x8c>
    1d50:	80 91 8d 08 	lds	r24, 0x088D
    1d54:	90 91 8e 08 	lds	r25, 0x088E
    1d58:	c8 17       	cp	r28, r24
    1d5a:	d9 07       	cpc	r29, r25
    1d5c:	b9 f1       	breq	.+110    	; 0x1dcc <vTaskResume+0x8c>
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	f8 94       	cli
    1d62:	0f 92       	push	r0
    1d64:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d66:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d68:	8e 52       	subi	r24, 0x2E	; 46
    1d6a:	98 40       	sbci	r25, 0x08	; 8
    1d6c:	69 f5       	brne	.+90     	; 0x1dc8 <vTaskResume+0x88>
    1d6e:	8c 89       	ldd	r24, Y+20	; 0x14
    1d70:	9d 89       	ldd	r25, Y+21	; 0x15
    1d72:	28 e0       	ldi	r18, 0x08	; 8
    1d74:	81 34       	cpi	r24, 0x41	; 65
    1d76:	92 07       	cpc	r25, r18
    1d78:	39 f1       	breq	.+78     	; 0x1dc8 <vTaskResume+0x88>
    1d7a:	89 2b       	or	r24, r25
    1d7c:	29 f5       	brne	.+74     	; 0x1dc8 <vTaskResume+0x88>
    1d7e:	8e 01       	movw	r16, r28
    1d80:	0e 5f       	subi	r16, 0xFE	; 254
    1d82:	1f 4f       	sbci	r17, 0xFF	; 255
    1d84:	c8 01       	movw	r24, r16
    1d86:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uxListRemove>
    1d8a:	8e 89       	ldd	r24, Y+22	; 0x16
    1d8c:	90 91 2a 08 	lds	r25, 0x082A
    1d90:	98 17       	cp	r25, r24
    1d92:	10 f4       	brcc	.+4      	; 0x1d98 <vTaskResume+0x58>
    1d94:	80 93 2a 08 	sts	0x082A, r24
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	9c 01       	movw	r18, r24
    1d9c:	22 0f       	add	r18, r18
    1d9e:	33 1f       	adc	r19, r19
    1da0:	22 0f       	add	r18, r18
    1da2:	33 1f       	adc	r19, r19
    1da4:	22 0f       	add	r18, r18
    1da6:	33 1f       	adc	r19, r19
    1da8:	82 0f       	add	r24, r18
    1daa:	93 1f       	adc	r25, r19
    1dac:	b8 01       	movw	r22, r16
    1dae:	80 5a       	subi	r24, 0xA0	; 160
    1db0:	97 4f       	sbci	r25, 0xF7	; 247
    1db2:	0e 94 07 03 	call	0x60e	; 0x60e <vListInsertEnd>
    1db6:	e0 91 8d 08 	lds	r30, 0x088D
    1dba:	f0 91 8e 08 	lds	r31, 0x088E
    1dbe:	9e 89       	ldd	r25, Y+22	; 0x16
    1dc0:	86 89       	ldd	r24, Z+22	; 0x16
    1dc2:	98 17       	cp	r25, r24
    1dc4:	08 f0       	brcs	.+2      	; 0x1dc8 <vTaskResume+0x88>
    1dc6:	6f da       	rcall	.-2850   	; 0x12a6 <vPortYield>
    1dc8:	0f 90       	pop	r0
    1dca:	0f be       	out	0x3f, r0	; 63
    1dcc:	df 91       	pop	r29
    1dce:	cf 91       	pop	r28
    1dd0:	1f 91       	pop	r17
    1dd2:	0f 91       	pop	r16
    1dd4:	08 95       	ret

00001dd6 <vTaskStartScheduler>:
    1dd6:	af 92       	push	r10
    1dd8:	bf 92       	push	r11
    1dda:	cf 92       	push	r12
    1ddc:	df 92       	push	r13
    1dde:	ef 92       	push	r14
    1de0:	ff 92       	push	r15
    1de2:	0f 93       	push	r16
    1de4:	a1 2c       	mov	r10, r1
    1de6:	b1 2c       	mov	r11, r1
    1de8:	c1 2c       	mov	r12, r1
    1dea:	d1 2c       	mov	r13, r1
    1dec:	e1 2c       	mov	r14, r1
    1dee:	f1 2c       	mov	r15, r1
    1df0:	00 e0       	ldi	r16, 0x00	; 0
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	45 e5       	ldi	r20, 0x55	; 85
    1df8:	50 e0       	ldi	r21, 0x00	; 0
    1dfa:	69 e3       	ldi	r22, 0x39	; 57
    1dfc:	72 e0       	ldi	r23, 0x02	; 2
    1dfe:	82 ec       	ldi	r24, 0xC2	; 194
    1e00:	90 e1       	ldi	r25, 0x10	; 16
    1e02:	89 de       	rcall	.-750    	; 0x1b16 <xTaskGenericCreate>
    1e04:	81 30       	cpi	r24, 0x01	; 1
    1e06:	41 f4       	brne	.+16     	; 0x1e18 <vTaskStartScheduler+0x42>
    1e08:	f8 94       	cli
    1e0a:	80 93 29 08 	sts	0x0829, r24
    1e0e:	10 92 2c 08 	sts	0x082C, r1
    1e12:	10 92 2b 08 	sts	0x082B, r1
    1e16:	0a da       	rcall	.-3052   	; 0x122c <xPortStartScheduler>
    1e18:	0f 91       	pop	r16
    1e1a:	ff 90       	pop	r15
    1e1c:	ef 90       	pop	r14
    1e1e:	df 90       	pop	r13
    1e20:	cf 90       	pop	r12
    1e22:	bf 90       	pop	r11
    1e24:	af 90       	pop	r10
    1e26:	08 95       	ret

00001e28 <vTaskSuspendAll>:
    1e28:	80 91 24 08 	lds	r24, 0x0824
    1e2c:	8f 5f       	subi	r24, 0xFF	; 255
    1e2e:	80 93 24 08 	sts	0x0824, r24
    1e32:	08 95       	ret

00001e34 <xTaskGetTickCount>:
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	0f 92       	push	r0
    1e3a:	80 91 2b 08 	lds	r24, 0x082B
    1e3e:	90 91 2c 08 	lds	r25, 0x082C
    1e42:	0f 90       	pop	r0
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	08 95       	ret

00001e48 <xTaskGetTickCountFromISR>:
    1e48:	80 91 2b 08 	lds	r24, 0x082B
    1e4c:	90 91 2c 08 	lds	r25, 0x082C
    1e50:	08 95       	ret

00001e52 <xTaskIncrementTick>:
    1e52:	cf 92       	push	r12
    1e54:	df 92       	push	r13
    1e56:	ef 92       	push	r14
    1e58:	ff 92       	push	r15
    1e5a:	0f 93       	push	r16
    1e5c:	1f 93       	push	r17
    1e5e:	cf 93       	push	r28
    1e60:	df 93       	push	r29
    1e62:	80 91 24 08 	lds	r24, 0x0824
    1e66:	81 11       	cpse	r24, r1
    1e68:	99 c0       	rjmp	.+306    	; 0x1f9c <xTaskIncrementTick+0x14a>
    1e6a:	80 91 2b 08 	lds	r24, 0x082B
    1e6e:	90 91 2c 08 	lds	r25, 0x082C
    1e72:	01 96       	adiw	r24, 0x01	; 1
    1e74:	90 93 2c 08 	sts	0x082C, r25
    1e78:	80 93 2b 08 	sts	0x082B, r24
    1e7c:	e0 90 2b 08 	lds	r14, 0x082B
    1e80:	f0 90 2c 08 	lds	r15, 0x082C
    1e84:	e1 14       	cp	r14, r1
    1e86:	f1 04       	cpc	r15, r1
    1e88:	b1 f4       	brne	.+44     	; 0x1eb6 <xTaskIncrementTick+0x64>
    1e8a:	80 91 4c 08 	lds	r24, 0x084C
    1e8e:	90 91 4d 08 	lds	r25, 0x084D
    1e92:	20 91 4a 08 	lds	r18, 0x084A
    1e96:	30 91 4b 08 	lds	r19, 0x084B
    1e9a:	30 93 4d 08 	sts	0x084D, r19
    1e9e:	20 93 4c 08 	sts	0x084C, r18
    1ea2:	90 93 4b 08 	sts	0x084B, r25
    1ea6:	80 93 4a 08 	sts	0x084A, r24
    1eaa:	80 91 26 08 	lds	r24, 0x0826
    1eae:	8f 5f       	subi	r24, 0xFF	; 255
    1eb0:	80 93 26 08 	sts	0x0826, r24
    1eb4:	da dd       	rcall	.-1100   	; 0x1a6a <prvResetNextTaskUnblockTime>
    1eb6:	80 91 04 02 	lds	r24, 0x0204
    1eba:	90 91 05 02 	lds	r25, 0x0205
    1ebe:	e8 16       	cp	r14, r24
    1ec0:	f9 06       	cpc	r15, r25
    1ec2:	08 f4       	brcc	.+2      	; 0x1ec6 <xTaskIncrementTick+0x74>
    1ec4:	54 c0       	rjmp	.+168    	; 0x1f6e <xTaskIncrementTick+0x11c>
    1ec6:	d1 2c       	mov	r13, r1
    1ec8:	cc 24       	eor	r12, r12
    1eca:	c3 94       	inc	r12
    1ecc:	01 c0       	rjmp	.+2      	; 0x1ed0 <xTaskIncrementTick+0x7e>
    1ece:	dc 2c       	mov	r13, r12
    1ed0:	e0 91 4c 08 	lds	r30, 0x084C
    1ed4:	f0 91 4d 08 	lds	r31, 0x084D
    1ed8:	80 81       	ld	r24, Z
    1eda:	81 11       	cpse	r24, r1
    1edc:	07 c0       	rjmp	.+14     	; 0x1eec <xTaskIncrementTick+0x9a>
    1ede:	8f ef       	ldi	r24, 0xFF	; 255
    1ee0:	9f ef       	ldi	r25, 0xFF	; 255
    1ee2:	90 93 05 02 	sts	0x0205, r25
    1ee6:	80 93 04 02 	sts	0x0204, r24
    1eea:	42 c0       	rjmp	.+132    	; 0x1f70 <xTaskIncrementTick+0x11e>
    1eec:	e0 91 4c 08 	lds	r30, 0x084C
    1ef0:	f0 91 4d 08 	lds	r31, 0x084D
    1ef4:	05 80       	ldd	r0, Z+5	; 0x05
    1ef6:	f6 81       	ldd	r31, Z+6	; 0x06
    1ef8:	e0 2d       	mov	r30, r0
    1efa:	c6 81       	ldd	r28, Z+6	; 0x06
    1efc:	d7 81       	ldd	r29, Z+7	; 0x07
    1efe:	2a 81       	ldd	r18, Y+2	; 0x02
    1f00:	3b 81       	ldd	r19, Y+3	; 0x03
    1f02:	e2 16       	cp	r14, r18
    1f04:	f3 06       	cpc	r15, r19
    1f06:	28 f4       	brcc	.+10     	; 0x1f12 <xTaskIncrementTick+0xc0>
    1f08:	30 93 05 02 	sts	0x0205, r19
    1f0c:	20 93 04 02 	sts	0x0204, r18
    1f10:	2f c0       	rjmp	.+94     	; 0x1f70 <xTaskIncrementTick+0x11e>
    1f12:	8e 01       	movw	r16, r28
    1f14:	0e 5f       	subi	r16, 0xFE	; 254
    1f16:	1f 4f       	sbci	r17, 0xFF	; 255
    1f18:	c8 01       	movw	r24, r16
    1f1a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uxListRemove>
    1f1e:	8c 89       	ldd	r24, Y+20	; 0x14
    1f20:	9d 89       	ldd	r25, Y+21	; 0x15
    1f22:	89 2b       	or	r24, r25
    1f24:	21 f0       	breq	.+8      	; 0x1f2e <xTaskIncrementTick+0xdc>
    1f26:	ce 01       	movw	r24, r28
    1f28:	0c 96       	adiw	r24, 0x0c	; 12
    1f2a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uxListRemove>
    1f2e:	2e 89       	ldd	r18, Y+22	; 0x16
    1f30:	80 91 2a 08 	lds	r24, 0x082A
    1f34:	82 17       	cp	r24, r18
    1f36:	10 f4       	brcc	.+4      	; 0x1f3c <xTaskIncrementTick+0xea>
    1f38:	20 93 2a 08 	sts	0x082A, r18
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	c9 01       	movw	r24, r18
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	88 0f       	add	r24, r24
    1f46:	99 1f       	adc	r25, r25
    1f48:	88 0f       	add	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	82 0f       	add	r24, r18
    1f4e:	93 1f       	adc	r25, r19
    1f50:	b8 01       	movw	r22, r16
    1f52:	80 5a       	subi	r24, 0xA0	; 160
    1f54:	97 4f       	sbci	r25, 0xF7	; 247
    1f56:	0e 94 07 03 	call	0x60e	; 0x60e <vListInsertEnd>
    1f5a:	e0 91 8d 08 	lds	r30, 0x088D
    1f5e:	f0 91 8e 08 	lds	r31, 0x088E
    1f62:	9e 89       	ldd	r25, Y+22	; 0x16
    1f64:	86 89       	ldd	r24, Z+22	; 0x16
    1f66:	98 17       	cp	r25, r24
    1f68:	08 f0       	brcs	.+2      	; 0x1f6c <xTaskIncrementTick+0x11a>
    1f6a:	b1 cf       	rjmp	.-158    	; 0x1ece <xTaskIncrementTick+0x7c>
    1f6c:	b1 cf       	rjmp	.-158    	; 0x1ed0 <xTaskIncrementTick+0x7e>
    1f6e:	d1 2c       	mov	r13, r1
    1f70:	e0 91 8d 08 	lds	r30, 0x088D
    1f74:	f0 91 8e 08 	lds	r31, 0x088E
    1f78:	86 89       	ldd	r24, Z+22	; 0x16
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	ee 0f       	add	r30, r30
    1f80:	ff 1f       	adc	r31, r31
    1f82:	ee 0f       	add	r30, r30
    1f84:	ff 1f       	adc	r31, r31
    1f86:	ee 0f       	add	r30, r30
    1f88:	ff 1f       	adc	r31, r31
    1f8a:	8e 0f       	add	r24, r30
    1f8c:	9f 1f       	adc	r25, r31
    1f8e:	fc 01       	movw	r30, r24
    1f90:	e0 5a       	subi	r30, 0xA0	; 160
    1f92:	f7 4f       	sbci	r31, 0xF7	; 247
    1f94:	80 81       	ld	r24, Z
    1f96:	82 30       	cpi	r24, 0x02	; 2
    1f98:	40 f4       	brcc	.+16     	; 0x1faa <xTaskIncrementTick+0x158>
    1f9a:	09 c0       	rjmp	.+18     	; 0x1fae <xTaskIncrementTick+0x15c>
    1f9c:	80 91 28 08 	lds	r24, 0x0828
    1fa0:	8f 5f       	subi	r24, 0xFF	; 255
    1fa2:	80 93 28 08 	sts	0x0828, r24
    1fa6:	d1 2c       	mov	r13, r1
    1fa8:	02 c0       	rjmp	.+4      	; 0x1fae <xTaskIncrementTick+0x15c>
    1faa:	dd 24       	eor	r13, r13
    1fac:	d3 94       	inc	r13
    1fae:	80 91 27 08 	lds	r24, 0x0827
    1fb2:	88 23       	and	r24, r24
    1fb4:	11 f0       	breq	.+4      	; 0x1fba <xTaskIncrementTick+0x168>
    1fb6:	dd 24       	eor	r13, r13
    1fb8:	d3 94       	inc	r13
    1fba:	8d 2d       	mov	r24, r13
    1fbc:	df 91       	pop	r29
    1fbe:	cf 91       	pop	r28
    1fc0:	1f 91       	pop	r17
    1fc2:	0f 91       	pop	r16
    1fc4:	ff 90       	pop	r15
    1fc6:	ef 90       	pop	r14
    1fc8:	df 90       	pop	r13
    1fca:	cf 90       	pop	r12
    1fcc:	08 95       	ret

00001fce <xTaskResumeAll>:
    1fce:	df 92       	push	r13
    1fd0:	ef 92       	push	r14
    1fd2:	ff 92       	push	r15
    1fd4:	0f 93       	push	r16
    1fd6:	1f 93       	push	r17
    1fd8:	cf 93       	push	r28
    1fda:	df 93       	push	r29
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	0f 92       	push	r0
    1fe2:	80 91 24 08 	lds	r24, 0x0824
    1fe6:	81 50       	subi	r24, 0x01	; 1
    1fe8:	80 93 24 08 	sts	0x0824, r24
    1fec:	80 91 24 08 	lds	r24, 0x0824
    1ff0:	81 11       	cpse	r24, r1
    1ff2:	5f c0       	rjmp	.+190    	; 0x20b2 <xTaskResumeAll+0xe4>
    1ff4:	80 91 2d 08 	lds	r24, 0x082D
    1ff8:	88 23       	and	r24, r24
    1ffa:	09 f4       	brne	.+2      	; 0x1ffe <xTaskResumeAll+0x30>
    1ffc:	5c c0       	rjmp	.+184    	; 0x20b6 <xTaskResumeAll+0xe8>
    1ffe:	0f 2e       	mov	r0, r31
    2000:	f1 e4       	ldi	r31, 0x41	; 65
    2002:	ef 2e       	mov	r14, r31
    2004:	f8 e0       	ldi	r31, 0x08	; 8
    2006:	ff 2e       	mov	r15, r31
    2008:	f0 2d       	mov	r31, r0
    200a:	dd 24       	eor	r13, r13
    200c:	d3 94       	inc	r13
    200e:	30 c0       	rjmp	.+96     	; 0x2070 <xTaskResumeAll+0xa2>
    2010:	e0 91 46 08 	lds	r30, 0x0846
    2014:	f0 91 47 08 	lds	r31, 0x0847
    2018:	c6 81       	ldd	r28, Z+6	; 0x06
    201a:	d7 81       	ldd	r29, Z+7	; 0x07
    201c:	ce 01       	movw	r24, r28
    201e:	0c 96       	adiw	r24, 0x0c	; 12
    2020:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uxListRemove>
    2024:	8e 01       	movw	r16, r28
    2026:	0e 5f       	subi	r16, 0xFE	; 254
    2028:	1f 4f       	sbci	r17, 0xFF	; 255
    202a:	c8 01       	movw	r24, r16
    202c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uxListRemove>
    2030:	8e 89       	ldd	r24, Y+22	; 0x16
    2032:	90 91 2a 08 	lds	r25, 0x082A
    2036:	98 17       	cp	r25, r24
    2038:	10 f4       	brcc	.+4      	; 0x203e <xTaskResumeAll+0x70>
    203a:	80 93 2a 08 	sts	0x082A, r24
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	9c 01       	movw	r18, r24
    2042:	22 0f       	add	r18, r18
    2044:	33 1f       	adc	r19, r19
    2046:	22 0f       	add	r18, r18
    2048:	33 1f       	adc	r19, r19
    204a:	22 0f       	add	r18, r18
    204c:	33 1f       	adc	r19, r19
    204e:	82 0f       	add	r24, r18
    2050:	93 1f       	adc	r25, r19
    2052:	b8 01       	movw	r22, r16
    2054:	80 5a       	subi	r24, 0xA0	; 160
    2056:	97 4f       	sbci	r25, 0xF7	; 247
    2058:	0e 94 07 03 	call	0x60e	; 0x60e <vListInsertEnd>
    205c:	e0 91 8d 08 	lds	r30, 0x088D
    2060:	f0 91 8e 08 	lds	r31, 0x088E
    2064:	9e 89       	ldd	r25, Y+22	; 0x16
    2066:	86 89       	ldd	r24, Z+22	; 0x16
    2068:	98 17       	cp	r25, r24
    206a:	10 f0       	brcs	.+4      	; 0x2070 <xTaskResumeAll+0xa2>
    206c:	d0 92 27 08 	sts	0x0827, r13
    2070:	f7 01       	movw	r30, r14
    2072:	80 81       	ld	r24, Z
    2074:	81 11       	cpse	r24, r1
    2076:	cc cf       	rjmp	.-104    	; 0x2010 <xTaskResumeAll+0x42>
    2078:	80 91 28 08 	lds	r24, 0x0828
    207c:	88 23       	and	r24, r24
    207e:	91 f0       	breq	.+36     	; 0x20a4 <xTaskResumeAll+0xd6>
    2080:	80 91 28 08 	lds	r24, 0x0828
    2084:	88 23       	and	r24, r24
    2086:	71 f0       	breq	.+28     	; 0x20a4 <xTaskResumeAll+0xd6>
    2088:	c1 e0       	ldi	r28, 0x01	; 1
    208a:	e3 de       	rcall	.-570    	; 0x1e52 <xTaskIncrementTick>
    208c:	81 11       	cpse	r24, r1
    208e:	c0 93 27 08 	sts	0x0827, r28
    2092:	80 91 28 08 	lds	r24, 0x0828
    2096:	81 50       	subi	r24, 0x01	; 1
    2098:	80 93 28 08 	sts	0x0828, r24
    209c:	80 91 28 08 	lds	r24, 0x0828
    20a0:	81 11       	cpse	r24, r1
    20a2:	f3 cf       	rjmp	.-26     	; 0x208a <xTaskResumeAll+0xbc>
    20a4:	80 91 27 08 	lds	r24, 0x0827
    20a8:	81 30       	cpi	r24, 0x01	; 1
    20aa:	39 f4       	brne	.+14     	; 0x20ba <xTaskResumeAll+0xec>
    20ac:	fc d8       	rcall	.-3592   	; 0x12a6 <vPortYield>
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	05 c0       	rjmp	.+10     	; 0x20bc <xTaskResumeAll+0xee>
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	03 c0       	rjmp	.+6      	; 0x20bc <xTaskResumeAll+0xee>
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	01 c0       	rjmp	.+2      	; 0x20bc <xTaskResumeAll+0xee>
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	0f 90       	pop	r0
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	df 91       	pop	r29
    20c2:	cf 91       	pop	r28
    20c4:	1f 91       	pop	r17
    20c6:	0f 91       	pop	r16
    20c8:	ff 90       	pop	r15
    20ca:	ef 90       	pop	r14
    20cc:	df 90       	pop	r13
    20ce:	08 95       	ret

000020d0 <vTaskDelayUntil>:
    20d0:	0f 93       	push	r16
    20d2:	1f 93       	push	r17
    20d4:	cf 93       	push	r28
    20d6:	df 93       	push	r29
    20d8:	8c 01       	movw	r16, r24
    20da:	eb 01       	movw	r28, r22
    20dc:	a5 de       	rcall	.-694    	; 0x1e28 <vTaskSuspendAll>
    20de:	80 91 2b 08 	lds	r24, 0x082B
    20e2:	90 91 2c 08 	lds	r25, 0x082C
    20e6:	f8 01       	movw	r30, r16
    20e8:	20 81       	ld	r18, Z
    20ea:	31 81       	ldd	r19, Z+1	; 0x01
    20ec:	c2 0f       	add	r28, r18
    20ee:	d3 1f       	adc	r29, r19
    20f0:	82 17       	cp	r24, r18
    20f2:	93 07       	cpc	r25, r19
    20f4:	48 f4       	brcc	.+18     	; 0x2108 <vTaskDelayUntil+0x38>
    20f6:	c2 17       	cp	r28, r18
    20f8:	d3 07       	cpc	r29, r19
    20fa:	f8 f4       	brcc	.+62     	; 0x213a <vTaskDelayUntil+0x6a>
    20fc:	d1 83       	std	Z+1, r29	; 0x01
    20fe:	c0 83       	st	Z, r28
    2100:	8c 17       	cp	r24, r28
    2102:	9d 07       	cpc	r25, r29
    2104:	88 f4       	brcc	.+34     	; 0x2128 <vTaskDelayUntil+0x58>
    2106:	07 c0       	rjmp	.+14     	; 0x2116 <vTaskDelayUntil+0x46>
    2108:	c2 17       	cp	r28, r18
    210a:	d3 07       	cpc	r29, r19
    210c:	90 f0       	brcs	.+36     	; 0x2132 <vTaskDelayUntil+0x62>
    210e:	8c 17       	cp	r24, r28
    2110:	9d 07       	cpc	r25, r29
    2112:	78 f0       	brcs	.+30     	; 0x2132 <vTaskDelayUntil+0x62>
    2114:	12 c0       	rjmp	.+36     	; 0x213a <vTaskDelayUntil+0x6a>
    2116:	80 91 8d 08 	lds	r24, 0x088D
    211a:	90 91 8e 08 	lds	r25, 0x088E
    211e:	02 96       	adiw	r24, 0x02	; 2
    2120:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uxListRemove>
    2124:	ce 01       	movw	r24, r28
    2126:	c0 dc       	rcall	.-1664   	; 0x1aa8 <prvAddCurrentTaskToDelayedList>
    2128:	52 df       	rcall	.-348    	; 0x1fce <xTaskResumeAll>
    212a:	81 11       	cpse	r24, r1
    212c:	0a c0       	rjmp	.+20     	; 0x2142 <vTaskDelayUntil+0x72>
    212e:	bb d8       	rcall	.-3722   	; 0x12a6 <vPortYield>
    2130:	08 c0       	rjmp	.+16     	; 0x2142 <vTaskDelayUntil+0x72>
    2132:	f8 01       	movw	r30, r16
    2134:	d1 83       	std	Z+1, r29	; 0x01
    2136:	c0 83       	st	Z, r28
    2138:	ee cf       	rjmp	.-36     	; 0x2116 <vTaskDelayUntil+0x46>
    213a:	f8 01       	movw	r30, r16
    213c:	d1 83       	std	Z+1, r29	; 0x01
    213e:	c0 83       	st	Z, r28
    2140:	f3 cf       	rjmp	.-26     	; 0x2128 <vTaskDelayUntil+0x58>
    2142:	df 91       	pop	r29
    2144:	cf 91       	pop	r28
    2146:	1f 91       	pop	r17
    2148:	0f 91       	pop	r16
    214a:	08 95       	ret

0000214c <vTaskDelay>:
    214c:	cf 93       	push	r28
    214e:	df 93       	push	r29
    2150:	ec 01       	movw	r28, r24
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	99 f0       	breq	.+38     	; 0x217c <vTaskDelay+0x30>
    2156:	68 de       	rcall	.-816    	; 0x1e28 <vTaskSuspendAll>
    2158:	80 91 2b 08 	lds	r24, 0x082B
    215c:	90 91 2c 08 	lds	r25, 0x082C
    2160:	c8 0f       	add	r28, r24
    2162:	d9 1f       	adc	r29, r25
    2164:	80 91 8d 08 	lds	r24, 0x088D
    2168:	90 91 8e 08 	lds	r25, 0x088E
    216c:	02 96       	adiw	r24, 0x02	; 2
    216e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uxListRemove>
    2172:	ce 01       	movw	r24, r28
    2174:	99 dc       	rcall	.-1742   	; 0x1aa8 <prvAddCurrentTaskToDelayedList>
    2176:	2b df       	rcall	.-426    	; 0x1fce <xTaskResumeAll>
    2178:	81 11       	cpse	r24, r1
    217a:	01 c0       	rjmp	.+2      	; 0x217e <vTaskDelay+0x32>
    217c:	94 d8       	rcall	.-3800   	; 0x12a6 <vPortYield>
    217e:	df 91       	pop	r29
    2180:	cf 91       	pop	r28
    2182:	08 95       	ret

00002184 <prvIdleTask>:
    2184:	0f 2e       	mov	r0, r31
    2186:	f0 e6       	ldi	r31, 0x60	; 96
    2188:	ef 2e       	mov	r14, r31
    218a:	f8 e0       	ldi	r31, 0x08	; 8
    218c:	ff 2e       	mov	r15, r31
    218e:	f0 2d       	mov	r31, r0
    2190:	c8 e3       	ldi	r28, 0x38	; 56
    2192:	d8 e0       	ldi	r29, 0x08	; 8
    2194:	26 c0       	rjmp	.+76     	; 0x21e2 <prvIdleTask+0x5e>
    2196:	48 de       	rcall	.-880    	; 0x1e28 <vTaskSuspendAll>
    2198:	18 81       	ld	r17, Y
    219a:	19 df       	rcall	.-462    	; 0x1fce <xTaskResumeAll>
    219c:	11 23       	and	r17, r17
    219e:	09 f1       	breq	.+66     	; 0x21e2 <prvIdleTask+0x5e>
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	f8 94       	cli
    21a4:	0f 92       	push	r0
    21a6:	e0 91 3d 08 	lds	r30, 0x083D
    21aa:	f0 91 3e 08 	lds	r31, 0x083E
    21ae:	06 81       	ldd	r16, Z+6	; 0x06
    21b0:	17 81       	ldd	r17, Z+7	; 0x07
    21b2:	c8 01       	movw	r24, r16
    21b4:	02 96       	adiw	r24, 0x02	; 2
    21b6:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uxListRemove>
    21ba:	80 91 2d 08 	lds	r24, 0x082D
    21be:	81 50       	subi	r24, 0x01	; 1
    21c0:	80 93 2d 08 	sts	0x082D, r24
    21c4:	80 91 37 08 	lds	r24, 0x0837
    21c8:	81 50       	subi	r24, 0x01	; 1
    21ca:	80 93 37 08 	sts	0x0837, r24
    21ce:	0f 90       	pop	r0
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	f8 01       	movw	r30, r16
    21d4:	87 89       	ldd	r24, Z+23	; 0x17
    21d6:	90 8d       	ldd	r25, Z+24	; 0x18
    21d8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <vPortFree>
    21dc:	c8 01       	movw	r24, r16
    21de:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <vPortFree>
    21e2:	80 91 37 08 	lds	r24, 0x0837
    21e6:	81 11       	cpse	r24, r1
    21e8:	d6 cf       	rjmp	.-84     	; 0x2196 <prvIdleTask+0x12>
    21ea:	f7 01       	movw	r30, r14
    21ec:	80 81       	ld	r24, Z
    21ee:	82 30       	cpi	r24, 0x02	; 2
    21f0:	c0 f3       	brcs	.-16     	; 0x21e2 <prvIdleTask+0x5e>
    21f2:	59 d8       	rcall	.-3918   	; 0x12a6 <vPortYield>
    21f4:	f6 cf       	rjmp	.-20     	; 0x21e2 <prvIdleTask+0x5e>

000021f6 <vTaskSwitchContext>:
    21f6:	80 91 24 08 	lds	r24, 0x0824
    21fa:	88 23       	and	r24, r24
    21fc:	21 f0       	breq	.+8      	; 0x2206 <__stack+0x7>
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	80 93 27 08 	sts	0x0827, r24
    2204:	08 95       	ret
    2206:	10 92 27 08 	sts	0x0827, r1
    220a:	80 91 2a 08 	lds	r24, 0x082A
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	fc 01       	movw	r30, r24
    2212:	ee 0f       	add	r30, r30
    2214:	ff 1f       	adc	r31, r31
    2216:	ee 0f       	add	r30, r30
    2218:	ff 1f       	adc	r31, r31
    221a:	ee 0f       	add	r30, r30
    221c:	ff 1f       	adc	r31, r31
    221e:	8e 0f       	add	r24, r30
    2220:	9f 1f       	adc	r25, r31
    2222:	fc 01       	movw	r30, r24
    2224:	e0 5a       	subi	r30, 0xA0	; 160
    2226:	f7 4f       	sbci	r31, 0xF7	; 247
    2228:	80 81       	ld	r24, Z
    222a:	81 11       	cpse	r24, r1
    222c:	17 c0       	rjmp	.+46     	; 0x225c <__stack+0x5d>
    222e:	80 91 2a 08 	lds	r24, 0x082A
    2232:	81 50       	subi	r24, 0x01	; 1
    2234:	80 93 2a 08 	sts	0x082A, r24
    2238:	80 91 2a 08 	lds	r24, 0x082A
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	fc 01       	movw	r30, r24
    2240:	ee 0f       	add	r30, r30
    2242:	ff 1f       	adc	r31, r31
    2244:	ee 0f       	add	r30, r30
    2246:	ff 1f       	adc	r31, r31
    2248:	ee 0f       	add	r30, r30
    224a:	ff 1f       	adc	r31, r31
    224c:	8e 0f       	add	r24, r30
    224e:	9f 1f       	adc	r25, r31
    2250:	fc 01       	movw	r30, r24
    2252:	e0 5a       	subi	r30, 0xA0	; 160
    2254:	f7 4f       	sbci	r31, 0xF7	; 247
    2256:	80 81       	ld	r24, Z
    2258:	88 23       	and	r24, r24
    225a:	49 f3       	breq	.-46     	; 0x222e <__stack+0x2f>
    225c:	e0 91 2a 08 	lds	r30, 0x082A
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	cf 01       	movw	r24, r30
    2264:	88 0f       	add	r24, r24
    2266:	99 1f       	adc	r25, r25
    2268:	88 0f       	add	r24, r24
    226a:	99 1f       	adc	r25, r25
    226c:	88 0f       	add	r24, r24
    226e:	99 1f       	adc	r25, r25
    2270:	e8 0f       	add	r30, r24
    2272:	f9 1f       	adc	r31, r25
    2274:	e0 5a       	subi	r30, 0xA0	; 160
    2276:	f7 4f       	sbci	r31, 0xF7	; 247
    2278:	a1 81       	ldd	r26, Z+1	; 0x01
    227a:	b2 81       	ldd	r27, Z+2	; 0x02
    227c:	12 96       	adiw	r26, 0x02	; 2
    227e:	0d 90       	ld	r0, X+
    2280:	bc 91       	ld	r27, X
    2282:	a0 2d       	mov	r26, r0
    2284:	b2 83       	std	Z+2, r27	; 0x02
    2286:	a1 83       	std	Z+1, r26	; 0x01
    2288:	cf 01       	movw	r24, r30
    228a:	03 96       	adiw	r24, 0x03	; 3
    228c:	a8 17       	cp	r26, r24
    228e:	b9 07       	cpc	r27, r25
    2290:	31 f4       	brne	.+12     	; 0x229e <__stack+0x9f>
    2292:	12 96       	adiw	r26, 0x02	; 2
    2294:	8d 91       	ld	r24, X+
    2296:	9c 91       	ld	r25, X
    2298:	13 97       	sbiw	r26, 0x03	; 3
    229a:	92 83       	std	Z+2, r25	; 0x02
    229c:	81 83       	std	Z+1, r24	; 0x01
    229e:	01 80       	ldd	r0, Z+1	; 0x01
    22a0:	f2 81       	ldd	r31, Z+2	; 0x02
    22a2:	e0 2d       	mov	r30, r0
    22a4:	86 81       	ldd	r24, Z+6	; 0x06
    22a6:	97 81       	ldd	r25, Z+7	; 0x07
    22a8:	90 93 8e 08 	sts	0x088E, r25
    22ac:	80 93 8d 08 	sts	0x088D, r24
    22b0:	08 95       	ret

000022b2 <vTaskSuspend>:
    22b2:	0f 93       	push	r16
    22b4:	1f 93       	push	r17
    22b6:	cf 93       	push	r28
    22b8:	df 93       	push	r29
    22ba:	ec 01       	movw	r28, r24
    22bc:	0f b6       	in	r0, 0x3f	; 63
    22be:	f8 94       	cli
    22c0:	0f 92       	push	r0
    22c2:	00 97       	sbiw	r24, 0x00	; 0
    22c4:	21 f4       	brne	.+8      	; 0x22ce <vTaskSuspend+0x1c>
    22c6:	c0 91 8d 08 	lds	r28, 0x088D
    22ca:	d0 91 8e 08 	lds	r29, 0x088E
    22ce:	8e 01       	movw	r16, r28
    22d0:	0e 5f       	subi	r16, 0xFE	; 254
    22d2:	1f 4f       	sbci	r17, 0xFF	; 255
    22d4:	c8 01       	movw	r24, r16
    22d6:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uxListRemove>
    22da:	8c 89       	ldd	r24, Y+20	; 0x14
    22dc:	9d 89       	ldd	r25, Y+21	; 0x15
    22de:	89 2b       	or	r24, r25
    22e0:	21 f0       	breq	.+8      	; 0x22ea <vTaskSuspend+0x38>
    22e2:	ce 01       	movw	r24, r28
    22e4:	0c 96       	adiw	r24, 0x0c	; 12
    22e6:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uxListRemove>
    22ea:	b8 01       	movw	r22, r16
    22ec:	8e e2       	ldi	r24, 0x2E	; 46
    22ee:	98 e0       	ldi	r25, 0x08	; 8
    22f0:	0e 94 07 03 	call	0x60e	; 0x60e <vListInsertEnd>
    22f4:	0f 90       	pop	r0
    22f6:	0f be       	out	0x3f, r0	; 63
    22f8:	80 91 8d 08 	lds	r24, 0x088D
    22fc:	90 91 8e 08 	lds	r25, 0x088E
    2300:	c8 17       	cp	r28, r24
    2302:	d9 07       	cpc	r29, r25
    2304:	a1 f4       	brne	.+40     	; 0x232e <vTaskSuspend+0x7c>
    2306:	80 91 29 08 	lds	r24, 0x0829
    230a:	88 23       	and	r24, r24
    230c:	19 f0       	breq	.+6      	; 0x2314 <vTaskSuspend+0x62>
    230e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <vPortYield>
    2312:	17 c0       	rjmp	.+46     	; 0x2342 <vTaskSuspend+0x90>
    2314:	80 91 2d 08 	lds	r24, 0x082D
    2318:	90 91 2e 08 	lds	r25, 0x082E
    231c:	98 13       	cpse	r25, r24
    231e:	05 c0       	rjmp	.+10     	; 0x232a <vTaskSuspend+0x78>
    2320:	10 92 8e 08 	sts	0x088E, r1
    2324:	10 92 8d 08 	sts	0x088D, r1
    2328:	0c c0       	rjmp	.+24     	; 0x2342 <vTaskSuspend+0x90>
    232a:	65 df       	rcall	.-310    	; 0x21f6 <vTaskSwitchContext>
    232c:	0a c0       	rjmp	.+20     	; 0x2342 <vTaskSuspend+0x90>
    232e:	80 91 29 08 	lds	r24, 0x0829
    2332:	88 23       	and	r24, r24
    2334:	31 f0       	breq	.+12     	; 0x2342 <vTaskSuspend+0x90>
    2336:	0f b6       	in	r0, 0x3f	; 63
    2338:	f8 94       	cli
    233a:	0f 92       	push	r0
    233c:	96 db       	rcall	.-2260   	; 0x1a6a <prvResetNextTaskUnblockTime>
    233e:	0f 90       	pop	r0
    2340:	0f be       	out	0x3f, r0	; 63
    2342:	df 91       	pop	r29
    2344:	cf 91       	pop	r28
    2346:	1f 91       	pop	r17
    2348:	0f 91       	pop	r16
    234a:	08 95       	ret

0000234c <vTaskPlaceOnEventList>:
    234c:	cf 93       	push	r28
    234e:	df 93       	push	r29
    2350:	eb 01       	movw	r28, r22
    2352:	60 91 8d 08 	lds	r22, 0x088D
    2356:	70 91 8e 08 	lds	r23, 0x088E
    235a:	64 5f       	subi	r22, 0xF4	; 244
    235c:	7f 4f       	sbci	r23, 0xFF	; 255
    235e:	0e 94 28 03 	call	0x650	; 0x650 <vListInsert>
    2362:	80 91 8d 08 	lds	r24, 0x088D
    2366:	90 91 8e 08 	lds	r25, 0x088E
    236a:	02 96       	adiw	r24, 0x02	; 2
    236c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uxListRemove>
    2370:	cf 3f       	cpi	r28, 0xFF	; 255
    2372:	8f ef       	ldi	r24, 0xFF	; 255
    2374:	d8 07       	cpc	r29, r24
    2376:	59 f4       	brne	.+22     	; 0x238e <vTaskPlaceOnEventList+0x42>
    2378:	60 91 8d 08 	lds	r22, 0x088D
    237c:	70 91 8e 08 	lds	r23, 0x088E
    2380:	6e 5f       	subi	r22, 0xFE	; 254
    2382:	7f 4f       	sbci	r23, 0xFF	; 255
    2384:	8e e2       	ldi	r24, 0x2E	; 46
    2386:	98 e0       	ldi	r25, 0x08	; 8
    2388:	0e 94 07 03 	call	0x60e	; 0x60e <vListInsertEnd>
    238c:	07 c0       	rjmp	.+14     	; 0x239c <vTaskPlaceOnEventList+0x50>
    238e:	80 91 2b 08 	lds	r24, 0x082B
    2392:	90 91 2c 08 	lds	r25, 0x082C
    2396:	8c 0f       	add	r24, r28
    2398:	9d 1f       	adc	r25, r29
    239a:	86 db       	rcall	.-2292   	; 0x1aa8 <prvAddCurrentTaskToDelayedList>
    239c:	df 91       	pop	r29
    239e:	cf 91       	pop	r28
    23a0:	08 95       	ret

000023a2 <xTaskRemoveFromEventList>:
    23a2:	0f 93       	push	r16
    23a4:	1f 93       	push	r17
    23a6:	cf 93       	push	r28
    23a8:	df 93       	push	r29
    23aa:	dc 01       	movw	r26, r24
    23ac:	15 96       	adiw	r26, 0x05	; 5
    23ae:	ed 91       	ld	r30, X+
    23b0:	fc 91       	ld	r31, X
    23b2:	16 97       	sbiw	r26, 0x06	; 6
    23b4:	c6 81       	ldd	r28, Z+6	; 0x06
    23b6:	d7 81       	ldd	r29, Z+7	; 0x07
    23b8:	8e 01       	movw	r16, r28
    23ba:	04 5f       	subi	r16, 0xF4	; 244
    23bc:	1f 4f       	sbci	r17, 0xFF	; 255
    23be:	c8 01       	movw	r24, r16
    23c0:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uxListRemove>
    23c4:	80 91 24 08 	lds	r24, 0x0824
    23c8:	81 11       	cpse	r24, r1
    23ca:	1c c0       	rjmp	.+56     	; 0x2404 <xTaskRemoveFromEventList+0x62>
    23cc:	0a 50       	subi	r16, 0x0A	; 10
    23ce:	11 09       	sbc	r17, r1
    23d0:	c8 01       	movw	r24, r16
    23d2:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uxListRemove>
    23d6:	8e 89       	ldd	r24, Y+22	; 0x16
    23d8:	90 91 2a 08 	lds	r25, 0x082A
    23dc:	98 17       	cp	r25, r24
    23de:	10 f4       	brcc	.+4      	; 0x23e4 <xTaskRemoveFromEventList+0x42>
    23e0:	80 93 2a 08 	sts	0x082A, r24
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	9c 01       	movw	r18, r24
    23e8:	22 0f       	add	r18, r18
    23ea:	33 1f       	adc	r19, r19
    23ec:	22 0f       	add	r18, r18
    23ee:	33 1f       	adc	r19, r19
    23f0:	22 0f       	add	r18, r18
    23f2:	33 1f       	adc	r19, r19
    23f4:	82 0f       	add	r24, r18
    23f6:	93 1f       	adc	r25, r19
    23f8:	b8 01       	movw	r22, r16
    23fa:	80 5a       	subi	r24, 0xA0	; 160
    23fc:	97 4f       	sbci	r25, 0xF7	; 247
    23fe:	0e 94 07 03 	call	0x60e	; 0x60e <vListInsertEnd>
    2402:	05 c0       	rjmp	.+10     	; 0x240e <xTaskRemoveFromEventList+0x6c>
    2404:	b8 01       	movw	r22, r16
    2406:	81 e4       	ldi	r24, 0x41	; 65
    2408:	98 e0       	ldi	r25, 0x08	; 8
    240a:	0e 94 07 03 	call	0x60e	; 0x60e <vListInsertEnd>
    240e:	e0 91 8d 08 	lds	r30, 0x088D
    2412:	f0 91 8e 08 	lds	r31, 0x088E
    2416:	9e 89       	ldd	r25, Y+22	; 0x16
    2418:	86 89       	ldd	r24, Z+22	; 0x16
    241a:	89 17       	cp	r24, r25
    241c:	20 f4       	brcc	.+8      	; 0x2426 <xTaskRemoveFromEventList+0x84>
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	80 93 27 08 	sts	0x0827, r24
    2424:	01 c0       	rjmp	.+2      	; 0x2428 <xTaskRemoveFromEventList+0x86>
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	df 91       	pop	r29
    242a:	cf 91       	pop	r28
    242c:	1f 91       	pop	r17
    242e:	0f 91       	pop	r16
    2430:	08 95       	ret

00002432 <vTaskSetTimeOutState>:
    2432:	20 91 26 08 	lds	r18, 0x0826
    2436:	fc 01       	movw	r30, r24
    2438:	20 83       	st	Z, r18
    243a:	20 91 2b 08 	lds	r18, 0x082B
    243e:	30 91 2c 08 	lds	r19, 0x082C
    2442:	32 83       	std	Z+2, r19	; 0x02
    2444:	21 83       	std	Z+1, r18	; 0x01
    2446:	08 95       	ret

00002448 <xTaskCheckForTimeOut>:
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	f8 94       	cli
    244c:	0f 92       	push	r0
    244e:	40 91 2b 08 	lds	r20, 0x082B
    2452:	50 91 2c 08 	lds	r21, 0x082C
    2456:	db 01       	movw	r26, r22
    2458:	2d 91       	ld	r18, X+
    245a:	3c 91       	ld	r19, X
    245c:	2f 3f       	cpi	r18, 0xFF	; 255
    245e:	bf ef       	ldi	r27, 0xFF	; 255
    2460:	3b 07       	cpc	r19, r27
    2462:	11 f1       	breq	.+68     	; 0x24a8 <xTaskCheckForTimeOut+0x60>
    2464:	e0 91 26 08 	lds	r30, 0x0826
    2468:	dc 01       	movw	r26, r24
    246a:	fc 91       	ld	r31, X
    246c:	fe 17       	cp	r31, r30
    246e:	39 f0       	breq	.+14     	; 0x247e <xTaskCheckForTimeOut+0x36>
    2470:	11 96       	adiw	r26, 0x01	; 1
    2472:	ed 91       	ld	r30, X+
    2474:	fc 91       	ld	r31, X
    2476:	12 97       	sbiw	r26, 0x02	; 2
    2478:	4e 17       	cp	r20, r30
    247a:	5f 07       	cpc	r21, r31
    247c:	b8 f4       	brcc	.+46     	; 0x24ac <xTaskCheckForTimeOut+0x64>
    247e:	dc 01       	movw	r26, r24
    2480:	11 96       	adiw	r26, 0x01	; 1
    2482:	ed 91       	ld	r30, X+
    2484:	fc 91       	ld	r31, X
    2486:	12 97       	sbiw	r26, 0x02	; 2
    2488:	da 01       	movw	r26, r20
    248a:	ae 1b       	sub	r26, r30
    248c:	bf 0b       	sbc	r27, r31
    248e:	a2 17       	cp	r26, r18
    2490:	b3 07       	cpc	r27, r19
    2492:	70 f4       	brcc	.+28     	; 0x24b0 <xTaskCheckForTimeOut+0x68>
    2494:	e4 1b       	sub	r30, r20
    2496:	f5 0b       	sbc	r31, r21
    2498:	2e 0f       	add	r18, r30
    249a:	3f 1f       	adc	r19, r31
    249c:	fb 01       	movw	r30, r22
    249e:	31 83       	std	Z+1, r19	; 0x01
    24a0:	20 83       	st	Z, r18
    24a2:	c7 df       	rcall	.-114    	; 0x2432 <vTaskSetTimeOutState>
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	05 c0       	rjmp	.+10     	; 0x24b2 <xTaskCheckForTimeOut+0x6a>
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	03 c0       	rjmp	.+6      	; 0x24b2 <xTaskCheckForTimeOut+0x6a>
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	01 c0       	rjmp	.+2      	; 0x24b2 <xTaskCheckForTimeOut+0x6a>
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	0f 90       	pop	r0
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	08 95       	ret

000024b8 <vTaskMissedYield>:
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	80 93 27 08 	sts	0x0827, r24
    24be:	08 95       	ret

000024c0 <vTaskPriorityInherit>:
    24c0:	0f 93       	push	r16
    24c2:	1f 93       	push	r17
    24c4:	cf 93       	push	r28
    24c6:	df 93       	push	r29
    24c8:	ec 01       	movw	r28, r24
    24ca:	00 97       	sbiw	r24, 0x00	; 0
    24cc:	09 f4       	brne	.+2      	; 0x24d0 <vTaskPriorityInherit+0x10>
    24ce:	51 c0       	rjmp	.+162    	; 0x2572 <vTaskPriorityInherit+0xb2>
    24d0:	8e 89       	ldd	r24, Y+22	; 0x16
    24d2:	e0 91 8d 08 	lds	r30, 0x088D
    24d6:	f0 91 8e 08 	lds	r31, 0x088E
    24da:	96 89       	ldd	r25, Z+22	; 0x16
    24dc:	89 17       	cp	r24, r25
    24de:	08 f0       	brcs	.+2      	; 0x24e2 <vTaskPriorityInherit+0x22>
    24e0:	48 c0       	rjmp	.+144    	; 0x2572 <vTaskPriorityInherit+0xb2>
    24e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    24e4:	3d 85       	ldd	r19, Y+13	; 0x0d
    24e6:	33 23       	and	r19, r19
    24e8:	5c f0       	brlt	.+22     	; 0x2500 <vTaskPriorityInherit+0x40>
    24ea:	e0 91 8d 08 	lds	r30, 0x088D
    24ee:	f0 91 8e 08 	lds	r31, 0x088E
    24f2:	96 89       	ldd	r25, Z+22	; 0x16
    24f4:	25 e0       	ldi	r18, 0x05	; 5
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	29 1b       	sub	r18, r25
    24fa:	31 09       	sbc	r19, r1
    24fc:	3d 87       	std	Y+13, r19	; 0x0d
    24fe:	2c 87       	std	Y+12, r18	; 0x0c
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	9c 01       	movw	r18, r24
    2504:	22 0f       	add	r18, r18
    2506:	33 1f       	adc	r19, r19
    2508:	22 0f       	add	r18, r18
    250a:	33 1f       	adc	r19, r19
    250c:	22 0f       	add	r18, r18
    250e:	33 1f       	adc	r19, r19
    2510:	82 0f       	add	r24, r18
    2512:	93 1f       	adc	r25, r19
    2514:	80 5a       	subi	r24, 0xA0	; 160
    2516:	97 4f       	sbci	r25, 0xF7	; 247
    2518:	2a 85       	ldd	r18, Y+10	; 0x0a
    251a:	3b 85       	ldd	r19, Y+11	; 0x0b
    251c:	28 17       	cp	r18, r24
    251e:	39 07       	cpc	r19, r25
    2520:	11 f5       	brne	.+68     	; 0x2566 <vTaskPriorityInherit+0xa6>
    2522:	8e 01       	movw	r16, r28
    2524:	0e 5f       	subi	r16, 0xFE	; 254
    2526:	1f 4f       	sbci	r17, 0xFF	; 255
    2528:	c8 01       	movw	r24, r16
    252a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uxListRemove>
    252e:	e0 91 8d 08 	lds	r30, 0x088D
    2532:	f0 91 8e 08 	lds	r31, 0x088E
    2536:	86 89       	ldd	r24, Z+22	; 0x16
    2538:	8e 8b       	std	Y+22, r24	; 0x16
    253a:	90 91 2a 08 	lds	r25, 0x082A
    253e:	98 17       	cp	r25, r24
    2540:	10 f4       	brcc	.+4      	; 0x2546 <vTaskPriorityInherit+0x86>
    2542:	80 93 2a 08 	sts	0x082A, r24
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	9c 01       	movw	r18, r24
    254a:	22 0f       	add	r18, r18
    254c:	33 1f       	adc	r19, r19
    254e:	22 0f       	add	r18, r18
    2550:	33 1f       	adc	r19, r19
    2552:	22 0f       	add	r18, r18
    2554:	33 1f       	adc	r19, r19
    2556:	82 0f       	add	r24, r18
    2558:	93 1f       	adc	r25, r19
    255a:	b8 01       	movw	r22, r16
    255c:	80 5a       	subi	r24, 0xA0	; 160
    255e:	97 4f       	sbci	r25, 0xF7	; 247
    2560:	0e 94 07 03 	call	0x60e	; 0x60e <vListInsertEnd>
    2564:	06 c0       	rjmp	.+12     	; 0x2572 <vTaskPriorityInherit+0xb2>
    2566:	e0 91 8d 08 	lds	r30, 0x088D
    256a:	f0 91 8e 08 	lds	r31, 0x088E
    256e:	86 89       	ldd	r24, Z+22	; 0x16
    2570:	8e 8b       	std	Y+22, r24	; 0x16
    2572:	df 91       	pop	r29
    2574:	cf 91       	pop	r28
    2576:	1f 91       	pop	r17
    2578:	0f 91       	pop	r16
    257a:	08 95       	ret

0000257c <xTaskPriorityDisinherit>:
    257c:	0f 93       	push	r16
    257e:	1f 93       	push	r17
    2580:	cf 93       	push	r28
    2582:	df 93       	push	r29
    2584:	ec 01       	movw	r28, r24
    2586:	00 97       	sbiw	r24, 0x00	; 0
    2588:	71 f1       	breq	.+92     	; 0x25e6 <xTaskPriorityDisinherit+0x6a>
    258a:	8a a1       	ldd	r24, Y+34	; 0x22
    258c:	81 50       	subi	r24, 0x01	; 1
    258e:	8a a3       	std	Y+34, r24	; 0x22
    2590:	2e 89       	ldd	r18, Y+22	; 0x16
    2592:	99 a1       	ldd	r25, Y+33	; 0x21
    2594:	29 17       	cp	r18, r25
    2596:	49 f1       	breq	.+82     	; 0x25ea <xTaskPriorityDisinherit+0x6e>
    2598:	81 11       	cpse	r24, r1
    259a:	29 c0       	rjmp	.+82     	; 0x25ee <xTaskPriorityDisinherit+0x72>
    259c:	8e 01       	movw	r16, r28
    259e:	0e 5f       	subi	r16, 0xFE	; 254
    25a0:	1f 4f       	sbci	r17, 0xFF	; 255
    25a2:	c8 01       	movw	r24, r16
    25a4:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uxListRemove>
    25a8:	89 a1       	ldd	r24, Y+33	; 0x21
    25aa:	8e 8b       	std	Y+22, r24	; 0x16
    25ac:	25 e0       	ldi	r18, 0x05	; 5
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	28 1b       	sub	r18, r24
    25b2:	31 09       	sbc	r19, r1
    25b4:	3d 87       	std	Y+13, r19	; 0x0d
    25b6:	2c 87       	std	Y+12, r18	; 0x0c
    25b8:	90 91 2a 08 	lds	r25, 0x082A
    25bc:	98 17       	cp	r25, r24
    25be:	10 f4       	brcc	.+4      	; 0x25c4 <xTaskPriorityDisinherit+0x48>
    25c0:	80 93 2a 08 	sts	0x082A, r24
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	9c 01       	movw	r18, r24
    25c8:	22 0f       	add	r18, r18
    25ca:	33 1f       	adc	r19, r19
    25cc:	22 0f       	add	r18, r18
    25ce:	33 1f       	adc	r19, r19
    25d0:	22 0f       	add	r18, r18
    25d2:	33 1f       	adc	r19, r19
    25d4:	82 0f       	add	r24, r18
    25d6:	93 1f       	adc	r25, r19
    25d8:	b8 01       	movw	r22, r16
    25da:	80 5a       	subi	r24, 0xA0	; 160
    25dc:	97 4f       	sbci	r25, 0xF7	; 247
    25de:	0e 94 07 03 	call	0x60e	; 0x60e <vListInsertEnd>
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	05 c0       	rjmp	.+10     	; 0x25f0 <xTaskPriorityDisinherit+0x74>
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	03 c0       	rjmp	.+6      	; 0x25f0 <xTaskPriorityDisinherit+0x74>
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	01 c0       	rjmp	.+2      	; 0x25f0 <xTaskPriorityDisinherit+0x74>
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	df 91       	pop	r29
    25f2:	cf 91       	pop	r28
    25f4:	1f 91       	pop	r17
    25f6:	0f 91       	pop	r16
    25f8:	08 95       	ret

000025fa <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    25fa:	80 91 8d 08 	lds	r24, 0x088D
    25fe:	90 91 8e 08 	lds	r25, 0x088E
    2602:	89 2b       	or	r24, r25
    2604:	39 f0       	breq	.+14     	; 0x2614 <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    2606:	e0 91 8d 08 	lds	r30, 0x088D
    260a:	f0 91 8e 08 	lds	r31, 0x088E
    260e:	82 a1       	ldd	r24, Z+34	; 0x22
    2610:	8f 5f       	subi	r24, 0xFF	; 255
    2612:	82 a3       	std	Z+34, r24	; 0x22
		}

		return pxCurrentTCB;
    2614:	80 91 8d 08 	lds	r24, 0x088D
    2618:	90 91 8e 08 	lds	r25, 0x088E
	}
    261c:	08 95       	ret

0000261e <__subsf3>:
    261e:	50 58       	subi	r21, 0x80	; 128

00002620 <__addsf3>:
    2620:	bb 27       	eor	r27, r27
    2622:	aa 27       	eor	r26, r26
    2624:	0e d0       	rcall	.+28     	; 0x2642 <__addsf3x>
    2626:	e5 c0       	rjmp	.+458    	; 0x27f2 <__fp_round>
    2628:	d6 d0       	rcall	.+428    	; 0x27d6 <__fp_pscA>
    262a:	30 f0       	brcs	.+12     	; 0x2638 <__addsf3+0x18>
    262c:	db d0       	rcall	.+438    	; 0x27e4 <__fp_pscB>
    262e:	20 f0       	brcs	.+8      	; 0x2638 <__addsf3+0x18>
    2630:	31 f4       	brne	.+12     	; 0x263e <__addsf3+0x1e>
    2632:	9f 3f       	cpi	r25, 0xFF	; 255
    2634:	11 f4       	brne	.+4      	; 0x263a <__addsf3+0x1a>
    2636:	1e f4       	brtc	.+6      	; 0x263e <__addsf3+0x1e>
    2638:	cb c0       	rjmp	.+406    	; 0x27d0 <__fp_nan>
    263a:	0e f4       	brtc	.+2      	; 0x263e <__addsf3+0x1e>
    263c:	e0 95       	com	r30
    263e:	e7 fb       	bst	r30, 7
    2640:	c1 c0       	rjmp	.+386    	; 0x27c4 <__fp_inf>

00002642 <__addsf3x>:
    2642:	e9 2f       	mov	r30, r25
    2644:	e7 d0       	rcall	.+462    	; 0x2814 <__fp_split3>
    2646:	80 f3       	brcs	.-32     	; 0x2628 <__addsf3+0x8>
    2648:	ba 17       	cp	r27, r26
    264a:	62 07       	cpc	r22, r18
    264c:	73 07       	cpc	r23, r19
    264e:	84 07       	cpc	r24, r20
    2650:	95 07       	cpc	r25, r21
    2652:	18 f0       	brcs	.+6      	; 0x265a <__addsf3x+0x18>
    2654:	71 f4       	brne	.+28     	; 0x2672 <__addsf3x+0x30>
    2656:	9e f5       	brtc	.+102    	; 0x26be <__addsf3x+0x7c>
    2658:	ff c0       	rjmp	.+510    	; 0x2858 <__fp_zero>
    265a:	0e f4       	brtc	.+2      	; 0x265e <__addsf3x+0x1c>
    265c:	e0 95       	com	r30
    265e:	0b 2e       	mov	r0, r27
    2660:	ba 2f       	mov	r27, r26
    2662:	a0 2d       	mov	r26, r0
    2664:	0b 01       	movw	r0, r22
    2666:	b9 01       	movw	r22, r18
    2668:	90 01       	movw	r18, r0
    266a:	0c 01       	movw	r0, r24
    266c:	ca 01       	movw	r24, r20
    266e:	a0 01       	movw	r20, r0
    2670:	11 24       	eor	r1, r1
    2672:	ff 27       	eor	r31, r31
    2674:	59 1b       	sub	r21, r25
    2676:	99 f0       	breq	.+38     	; 0x269e <__addsf3x+0x5c>
    2678:	59 3f       	cpi	r21, 0xF9	; 249
    267a:	50 f4       	brcc	.+20     	; 0x2690 <__addsf3x+0x4e>
    267c:	50 3e       	cpi	r21, 0xE0	; 224
    267e:	68 f1       	brcs	.+90     	; 0x26da <__addsf3x+0x98>
    2680:	1a 16       	cp	r1, r26
    2682:	f0 40       	sbci	r31, 0x00	; 0
    2684:	a2 2f       	mov	r26, r18
    2686:	23 2f       	mov	r18, r19
    2688:	34 2f       	mov	r19, r20
    268a:	44 27       	eor	r20, r20
    268c:	58 5f       	subi	r21, 0xF8	; 248
    268e:	f3 cf       	rjmp	.-26     	; 0x2676 <__addsf3x+0x34>
    2690:	46 95       	lsr	r20
    2692:	37 95       	ror	r19
    2694:	27 95       	ror	r18
    2696:	a7 95       	ror	r26
    2698:	f0 40       	sbci	r31, 0x00	; 0
    269a:	53 95       	inc	r21
    269c:	c9 f7       	brne	.-14     	; 0x2690 <__addsf3x+0x4e>
    269e:	7e f4       	brtc	.+30     	; 0x26be <__addsf3x+0x7c>
    26a0:	1f 16       	cp	r1, r31
    26a2:	ba 0b       	sbc	r27, r26
    26a4:	62 0b       	sbc	r22, r18
    26a6:	73 0b       	sbc	r23, r19
    26a8:	84 0b       	sbc	r24, r20
    26aa:	ba f0       	brmi	.+46     	; 0x26da <__addsf3x+0x98>
    26ac:	91 50       	subi	r25, 0x01	; 1
    26ae:	a1 f0       	breq	.+40     	; 0x26d8 <__addsf3x+0x96>
    26b0:	ff 0f       	add	r31, r31
    26b2:	bb 1f       	adc	r27, r27
    26b4:	66 1f       	adc	r22, r22
    26b6:	77 1f       	adc	r23, r23
    26b8:	88 1f       	adc	r24, r24
    26ba:	c2 f7       	brpl	.-16     	; 0x26ac <__addsf3x+0x6a>
    26bc:	0e c0       	rjmp	.+28     	; 0x26da <__addsf3x+0x98>
    26be:	ba 0f       	add	r27, r26
    26c0:	62 1f       	adc	r22, r18
    26c2:	73 1f       	adc	r23, r19
    26c4:	84 1f       	adc	r24, r20
    26c6:	48 f4       	brcc	.+18     	; 0x26da <__addsf3x+0x98>
    26c8:	87 95       	ror	r24
    26ca:	77 95       	ror	r23
    26cc:	67 95       	ror	r22
    26ce:	b7 95       	ror	r27
    26d0:	f7 95       	ror	r31
    26d2:	9e 3f       	cpi	r25, 0xFE	; 254
    26d4:	08 f0       	brcs	.+2      	; 0x26d8 <__addsf3x+0x96>
    26d6:	b3 cf       	rjmp	.-154    	; 0x263e <__addsf3+0x1e>
    26d8:	93 95       	inc	r25
    26da:	88 0f       	add	r24, r24
    26dc:	08 f0       	brcs	.+2      	; 0x26e0 <__addsf3x+0x9e>
    26de:	99 27       	eor	r25, r25
    26e0:	ee 0f       	add	r30, r30
    26e2:	97 95       	ror	r25
    26e4:	87 95       	ror	r24
    26e6:	08 95       	ret

000026e8 <__fixsfsi>:
    26e8:	04 d0       	rcall	.+8      	; 0x26f2 <__fixunssfsi>
    26ea:	68 94       	set
    26ec:	b1 11       	cpse	r27, r1
    26ee:	b5 c0       	rjmp	.+362    	; 0x285a <__fp_szero>
    26f0:	08 95       	ret

000026f2 <__fixunssfsi>:
    26f2:	98 d0       	rcall	.+304    	; 0x2824 <__fp_splitA>
    26f4:	88 f0       	brcs	.+34     	; 0x2718 <__fixunssfsi+0x26>
    26f6:	9f 57       	subi	r25, 0x7F	; 127
    26f8:	90 f0       	brcs	.+36     	; 0x271e <__fixunssfsi+0x2c>
    26fa:	b9 2f       	mov	r27, r25
    26fc:	99 27       	eor	r25, r25
    26fe:	b7 51       	subi	r27, 0x17	; 23
    2700:	a0 f0       	brcs	.+40     	; 0x272a <__fixunssfsi+0x38>
    2702:	d1 f0       	breq	.+52     	; 0x2738 <__fixunssfsi+0x46>
    2704:	66 0f       	add	r22, r22
    2706:	77 1f       	adc	r23, r23
    2708:	88 1f       	adc	r24, r24
    270a:	99 1f       	adc	r25, r25
    270c:	1a f0       	brmi	.+6      	; 0x2714 <__fixunssfsi+0x22>
    270e:	ba 95       	dec	r27
    2710:	c9 f7       	brne	.-14     	; 0x2704 <__fixunssfsi+0x12>
    2712:	12 c0       	rjmp	.+36     	; 0x2738 <__fixunssfsi+0x46>
    2714:	b1 30       	cpi	r27, 0x01	; 1
    2716:	81 f0       	breq	.+32     	; 0x2738 <__fixunssfsi+0x46>
    2718:	9f d0       	rcall	.+318    	; 0x2858 <__fp_zero>
    271a:	b1 e0       	ldi	r27, 0x01	; 1
    271c:	08 95       	ret
    271e:	9c c0       	rjmp	.+312    	; 0x2858 <__fp_zero>
    2720:	67 2f       	mov	r22, r23
    2722:	78 2f       	mov	r23, r24
    2724:	88 27       	eor	r24, r24
    2726:	b8 5f       	subi	r27, 0xF8	; 248
    2728:	39 f0       	breq	.+14     	; 0x2738 <__fixunssfsi+0x46>
    272a:	b9 3f       	cpi	r27, 0xF9	; 249
    272c:	cc f3       	brlt	.-14     	; 0x2720 <__fixunssfsi+0x2e>
    272e:	86 95       	lsr	r24
    2730:	77 95       	ror	r23
    2732:	67 95       	ror	r22
    2734:	b3 95       	inc	r27
    2736:	d9 f7       	brne	.-10     	; 0x272e <__fixunssfsi+0x3c>
    2738:	3e f4       	brtc	.+14     	; 0x2748 <__fixunssfsi+0x56>
    273a:	90 95       	com	r25
    273c:	80 95       	com	r24
    273e:	70 95       	com	r23
    2740:	61 95       	neg	r22
    2742:	7f 4f       	sbci	r23, 0xFF	; 255
    2744:	8f 4f       	sbci	r24, 0xFF	; 255
    2746:	9f 4f       	sbci	r25, 0xFF	; 255
    2748:	08 95       	ret

0000274a <__floatunsisf>:
    274a:	e8 94       	clt
    274c:	09 c0       	rjmp	.+18     	; 0x2760 <__floatsisf+0x12>

0000274e <__floatsisf>:
    274e:	97 fb       	bst	r25, 7
    2750:	3e f4       	brtc	.+14     	; 0x2760 <__floatsisf+0x12>
    2752:	90 95       	com	r25
    2754:	80 95       	com	r24
    2756:	70 95       	com	r23
    2758:	61 95       	neg	r22
    275a:	7f 4f       	sbci	r23, 0xFF	; 255
    275c:	8f 4f       	sbci	r24, 0xFF	; 255
    275e:	9f 4f       	sbci	r25, 0xFF	; 255
    2760:	99 23       	and	r25, r25
    2762:	a9 f0       	breq	.+42     	; 0x278e <__floatsisf+0x40>
    2764:	f9 2f       	mov	r31, r25
    2766:	96 e9       	ldi	r25, 0x96	; 150
    2768:	bb 27       	eor	r27, r27
    276a:	93 95       	inc	r25
    276c:	f6 95       	lsr	r31
    276e:	87 95       	ror	r24
    2770:	77 95       	ror	r23
    2772:	67 95       	ror	r22
    2774:	b7 95       	ror	r27
    2776:	f1 11       	cpse	r31, r1
    2778:	f8 cf       	rjmp	.-16     	; 0x276a <__floatsisf+0x1c>
    277a:	fa f4       	brpl	.+62     	; 0x27ba <__floatsisf+0x6c>
    277c:	bb 0f       	add	r27, r27
    277e:	11 f4       	brne	.+4      	; 0x2784 <__floatsisf+0x36>
    2780:	60 ff       	sbrs	r22, 0
    2782:	1b c0       	rjmp	.+54     	; 0x27ba <__floatsisf+0x6c>
    2784:	6f 5f       	subi	r22, 0xFF	; 255
    2786:	7f 4f       	sbci	r23, 0xFF	; 255
    2788:	8f 4f       	sbci	r24, 0xFF	; 255
    278a:	9f 4f       	sbci	r25, 0xFF	; 255
    278c:	16 c0       	rjmp	.+44     	; 0x27ba <__floatsisf+0x6c>
    278e:	88 23       	and	r24, r24
    2790:	11 f0       	breq	.+4      	; 0x2796 <__floatsisf+0x48>
    2792:	96 e9       	ldi	r25, 0x96	; 150
    2794:	11 c0       	rjmp	.+34     	; 0x27b8 <__floatsisf+0x6a>
    2796:	77 23       	and	r23, r23
    2798:	21 f0       	breq	.+8      	; 0x27a2 <__floatsisf+0x54>
    279a:	9e e8       	ldi	r25, 0x8E	; 142
    279c:	87 2f       	mov	r24, r23
    279e:	76 2f       	mov	r23, r22
    27a0:	05 c0       	rjmp	.+10     	; 0x27ac <__floatsisf+0x5e>
    27a2:	66 23       	and	r22, r22
    27a4:	71 f0       	breq	.+28     	; 0x27c2 <__floatsisf+0x74>
    27a6:	96 e8       	ldi	r25, 0x86	; 134
    27a8:	86 2f       	mov	r24, r22
    27aa:	70 e0       	ldi	r23, 0x00	; 0
    27ac:	60 e0       	ldi	r22, 0x00	; 0
    27ae:	2a f0       	brmi	.+10     	; 0x27ba <__floatsisf+0x6c>
    27b0:	9a 95       	dec	r25
    27b2:	66 0f       	add	r22, r22
    27b4:	77 1f       	adc	r23, r23
    27b6:	88 1f       	adc	r24, r24
    27b8:	da f7       	brpl	.-10     	; 0x27b0 <__floatsisf+0x62>
    27ba:	88 0f       	add	r24, r24
    27bc:	96 95       	lsr	r25
    27be:	87 95       	ror	r24
    27c0:	97 f9       	bld	r25, 7
    27c2:	08 95       	ret

000027c4 <__fp_inf>:
    27c4:	97 f9       	bld	r25, 7
    27c6:	9f 67       	ori	r25, 0x7F	; 127
    27c8:	80 e8       	ldi	r24, 0x80	; 128
    27ca:	70 e0       	ldi	r23, 0x00	; 0
    27cc:	60 e0       	ldi	r22, 0x00	; 0
    27ce:	08 95       	ret

000027d0 <__fp_nan>:
    27d0:	9f ef       	ldi	r25, 0xFF	; 255
    27d2:	80 ec       	ldi	r24, 0xC0	; 192
    27d4:	08 95       	ret

000027d6 <__fp_pscA>:
    27d6:	00 24       	eor	r0, r0
    27d8:	0a 94       	dec	r0
    27da:	16 16       	cp	r1, r22
    27dc:	17 06       	cpc	r1, r23
    27de:	18 06       	cpc	r1, r24
    27e0:	09 06       	cpc	r0, r25
    27e2:	08 95       	ret

000027e4 <__fp_pscB>:
    27e4:	00 24       	eor	r0, r0
    27e6:	0a 94       	dec	r0
    27e8:	12 16       	cp	r1, r18
    27ea:	13 06       	cpc	r1, r19
    27ec:	14 06       	cpc	r1, r20
    27ee:	05 06       	cpc	r0, r21
    27f0:	08 95       	ret

000027f2 <__fp_round>:
    27f2:	09 2e       	mov	r0, r25
    27f4:	03 94       	inc	r0
    27f6:	00 0c       	add	r0, r0
    27f8:	11 f4       	brne	.+4      	; 0x27fe <__fp_round+0xc>
    27fa:	88 23       	and	r24, r24
    27fc:	52 f0       	brmi	.+20     	; 0x2812 <__fp_round+0x20>
    27fe:	bb 0f       	add	r27, r27
    2800:	40 f4       	brcc	.+16     	; 0x2812 <__fp_round+0x20>
    2802:	bf 2b       	or	r27, r31
    2804:	11 f4       	brne	.+4      	; 0x280a <__fp_round+0x18>
    2806:	60 ff       	sbrs	r22, 0
    2808:	04 c0       	rjmp	.+8      	; 0x2812 <__fp_round+0x20>
    280a:	6f 5f       	subi	r22, 0xFF	; 255
    280c:	7f 4f       	sbci	r23, 0xFF	; 255
    280e:	8f 4f       	sbci	r24, 0xFF	; 255
    2810:	9f 4f       	sbci	r25, 0xFF	; 255
    2812:	08 95       	ret

00002814 <__fp_split3>:
    2814:	57 fd       	sbrc	r21, 7
    2816:	90 58       	subi	r25, 0x80	; 128
    2818:	44 0f       	add	r20, r20
    281a:	55 1f       	adc	r21, r21
    281c:	59 f0       	breq	.+22     	; 0x2834 <__fp_splitA+0x10>
    281e:	5f 3f       	cpi	r21, 0xFF	; 255
    2820:	71 f0       	breq	.+28     	; 0x283e <__fp_splitA+0x1a>
    2822:	47 95       	ror	r20

00002824 <__fp_splitA>:
    2824:	88 0f       	add	r24, r24
    2826:	97 fb       	bst	r25, 7
    2828:	99 1f       	adc	r25, r25
    282a:	61 f0       	breq	.+24     	; 0x2844 <__fp_splitA+0x20>
    282c:	9f 3f       	cpi	r25, 0xFF	; 255
    282e:	79 f0       	breq	.+30     	; 0x284e <__fp_splitA+0x2a>
    2830:	87 95       	ror	r24
    2832:	08 95       	ret
    2834:	12 16       	cp	r1, r18
    2836:	13 06       	cpc	r1, r19
    2838:	14 06       	cpc	r1, r20
    283a:	55 1f       	adc	r21, r21
    283c:	f2 cf       	rjmp	.-28     	; 0x2822 <__fp_split3+0xe>
    283e:	46 95       	lsr	r20
    2840:	f1 df       	rcall	.-30     	; 0x2824 <__fp_splitA>
    2842:	08 c0       	rjmp	.+16     	; 0x2854 <__fp_splitA+0x30>
    2844:	16 16       	cp	r1, r22
    2846:	17 06       	cpc	r1, r23
    2848:	18 06       	cpc	r1, r24
    284a:	99 1f       	adc	r25, r25
    284c:	f1 cf       	rjmp	.-30     	; 0x2830 <__fp_splitA+0xc>
    284e:	86 95       	lsr	r24
    2850:	71 05       	cpc	r23, r1
    2852:	61 05       	cpc	r22, r1
    2854:	08 94       	sec
    2856:	08 95       	ret

00002858 <__fp_zero>:
    2858:	e8 94       	clt

0000285a <__fp_szero>:
    285a:	bb 27       	eor	r27, r27
    285c:	66 27       	eor	r22, r22
    285e:	77 27       	eor	r23, r23
    2860:	cb 01       	movw	r24, r22
    2862:	97 f9       	bld	r25, 7
    2864:	08 95       	ret

00002866 <__mulsf3>:
    2866:	0b d0       	rcall	.+22     	; 0x287e <__mulsf3x>
    2868:	c4 cf       	rjmp	.-120    	; 0x27f2 <__fp_round>
    286a:	b5 df       	rcall	.-150    	; 0x27d6 <__fp_pscA>
    286c:	28 f0       	brcs	.+10     	; 0x2878 <__mulsf3+0x12>
    286e:	ba df       	rcall	.-140    	; 0x27e4 <__fp_pscB>
    2870:	18 f0       	brcs	.+6      	; 0x2878 <__mulsf3+0x12>
    2872:	95 23       	and	r25, r21
    2874:	09 f0       	breq	.+2      	; 0x2878 <__mulsf3+0x12>
    2876:	a6 cf       	rjmp	.-180    	; 0x27c4 <__fp_inf>
    2878:	ab cf       	rjmp	.-170    	; 0x27d0 <__fp_nan>
    287a:	11 24       	eor	r1, r1
    287c:	ee cf       	rjmp	.-36     	; 0x285a <__fp_szero>

0000287e <__mulsf3x>:
    287e:	ca df       	rcall	.-108    	; 0x2814 <__fp_split3>
    2880:	a0 f3       	brcs	.-24     	; 0x286a <__mulsf3+0x4>

00002882 <__mulsf3_pse>:
    2882:	95 9f       	mul	r25, r21
    2884:	d1 f3       	breq	.-12     	; 0x287a <__mulsf3+0x14>
    2886:	95 0f       	add	r25, r21
    2888:	50 e0       	ldi	r21, 0x00	; 0
    288a:	55 1f       	adc	r21, r21
    288c:	62 9f       	mul	r22, r18
    288e:	f0 01       	movw	r30, r0
    2890:	72 9f       	mul	r23, r18
    2892:	bb 27       	eor	r27, r27
    2894:	f0 0d       	add	r31, r0
    2896:	b1 1d       	adc	r27, r1
    2898:	63 9f       	mul	r22, r19
    289a:	aa 27       	eor	r26, r26
    289c:	f0 0d       	add	r31, r0
    289e:	b1 1d       	adc	r27, r1
    28a0:	aa 1f       	adc	r26, r26
    28a2:	64 9f       	mul	r22, r20
    28a4:	66 27       	eor	r22, r22
    28a6:	b0 0d       	add	r27, r0
    28a8:	a1 1d       	adc	r26, r1
    28aa:	66 1f       	adc	r22, r22
    28ac:	82 9f       	mul	r24, r18
    28ae:	22 27       	eor	r18, r18
    28b0:	b0 0d       	add	r27, r0
    28b2:	a1 1d       	adc	r26, r1
    28b4:	62 1f       	adc	r22, r18
    28b6:	73 9f       	mul	r23, r19
    28b8:	b0 0d       	add	r27, r0
    28ba:	a1 1d       	adc	r26, r1
    28bc:	62 1f       	adc	r22, r18
    28be:	83 9f       	mul	r24, r19
    28c0:	a0 0d       	add	r26, r0
    28c2:	61 1d       	adc	r22, r1
    28c4:	22 1f       	adc	r18, r18
    28c6:	74 9f       	mul	r23, r20
    28c8:	33 27       	eor	r19, r19
    28ca:	a0 0d       	add	r26, r0
    28cc:	61 1d       	adc	r22, r1
    28ce:	23 1f       	adc	r18, r19
    28d0:	84 9f       	mul	r24, r20
    28d2:	60 0d       	add	r22, r0
    28d4:	21 1d       	adc	r18, r1
    28d6:	82 2f       	mov	r24, r18
    28d8:	76 2f       	mov	r23, r22
    28da:	6a 2f       	mov	r22, r26
    28dc:	11 24       	eor	r1, r1
    28de:	9f 57       	subi	r25, 0x7F	; 127
    28e0:	50 40       	sbci	r21, 0x00	; 0
    28e2:	8a f0       	brmi	.+34     	; 0x2906 <__mulsf3_pse+0x84>
    28e4:	e1 f0       	breq	.+56     	; 0x291e <__mulsf3_pse+0x9c>
    28e6:	88 23       	and	r24, r24
    28e8:	4a f0       	brmi	.+18     	; 0x28fc <__mulsf3_pse+0x7a>
    28ea:	ee 0f       	add	r30, r30
    28ec:	ff 1f       	adc	r31, r31
    28ee:	bb 1f       	adc	r27, r27
    28f0:	66 1f       	adc	r22, r22
    28f2:	77 1f       	adc	r23, r23
    28f4:	88 1f       	adc	r24, r24
    28f6:	91 50       	subi	r25, 0x01	; 1
    28f8:	50 40       	sbci	r21, 0x00	; 0
    28fa:	a9 f7       	brne	.-22     	; 0x28e6 <__mulsf3_pse+0x64>
    28fc:	9e 3f       	cpi	r25, 0xFE	; 254
    28fe:	51 05       	cpc	r21, r1
    2900:	70 f0       	brcs	.+28     	; 0x291e <__mulsf3_pse+0x9c>
    2902:	60 cf       	rjmp	.-320    	; 0x27c4 <__fp_inf>
    2904:	aa cf       	rjmp	.-172    	; 0x285a <__fp_szero>
    2906:	5f 3f       	cpi	r21, 0xFF	; 255
    2908:	ec f3       	brlt	.-6      	; 0x2904 <__mulsf3_pse+0x82>
    290a:	98 3e       	cpi	r25, 0xE8	; 232
    290c:	dc f3       	brlt	.-10     	; 0x2904 <__mulsf3_pse+0x82>
    290e:	86 95       	lsr	r24
    2910:	77 95       	ror	r23
    2912:	67 95       	ror	r22
    2914:	b7 95       	ror	r27
    2916:	f7 95       	ror	r31
    2918:	e7 95       	ror	r30
    291a:	9f 5f       	subi	r25, 0xFF	; 255
    291c:	c1 f7       	brne	.-16     	; 0x290e <__mulsf3_pse+0x8c>
    291e:	fe 2b       	or	r31, r30
    2920:	88 0f       	add	r24, r24
    2922:	91 1d       	adc	r25, r1
    2924:	96 95       	lsr	r25
    2926:	87 95       	ror	r24
    2928:	97 f9       	bld	r25, 7
    292a:	08 95       	ret

0000292c <pow>:
    292c:	fa 01       	movw	r30, r20
    292e:	ee 0f       	add	r30, r30
    2930:	ff 1f       	adc	r31, r31
    2932:	30 96       	adiw	r30, 0x00	; 0
    2934:	21 05       	cpc	r18, r1
    2936:	31 05       	cpc	r19, r1
    2938:	99 f1       	breq	.+102    	; 0x29a0 <pow+0x74>
    293a:	61 15       	cp	r22, r1
    293c:	71 05       	cpc	r23, r1
    293e:	61 f4       	brne	.+24     	; 0x2958 <pow+0x2c>
    2940:	80 38       	cpi	r24, 0x80	; 128
    2942:	bf e3       	ldi	r27, 0x3F	; 63
    2944:	9b 07       	cpc	r25, r27
    2946:	49 f1       	breq	.+82     	; 0x299a <pow+0x6e>
    2948:	68 94       	set
    294a:	90 38       	cpi	r25, 0x80	; 128
    294c:	81 05       	cpc	r24, r1
    294e:	61 f0       	breq	.+24     	; 0x2968 <pow+0x3c>
    2950:	80 38       	cpi	r24, 0x80	; 128
    2952:	bf ef       	ldi	r27, 0xFF	; 255
    2954:	9b 07       	cpc	r25, r27
    2956:	41 f0       	breq	.+16     	; 0x2968 <pow+0x3c>
    2958:	99 23       	and	r25, r25
    295a:	42 f5       	brpl	.+80     	; 0x29ac <pow+0x80>
    295c:	ff 3f       	cpi	r31, 0xFF	; 255
    295e:	e1 05       	cpc	r30, r1
    2960:	31 05       	cpc	r19, r1
    2962:	21 05       	cpc	r18, r1
    2964:	11 f1       	breq	.+68     	; 0x29aa <pow+0x7e>
    2966:	e8 94       	clt
    2968:	08 94       	sec
    296a:	e7 95       	ror	r30
    296c:	d9 01       	movw	r26, r18
    296e:	aa 23       	and	r26, r26
    2970:	29 f4       	brne	.+10     	; 0x297c <pow+0x50>
    2972:	ab 2f       	mov	r26, r27
    2974:	be 2f       	mov	r27, r30
    2976:	f8 5f       	subi	r31, 0xF8	; 248
    2978:	d0 f3       	brcs	.-12     	; 0x296e <pow+0x42>
    297a:	10 c0       	rjmp	.+32     	; 0x299c <pow+0x70>
    297c:	ff 5f       	subi	r31, 0xFF	; 255
    297e:	70 f4       	brcc	.+28     	; 0x299c <pow+0x70>
    2980:	a6 95       	lsr	r26
    2982:	e0 f7       	brcc	.-8      	; 0x297c <pow+0x50>
    2984:	f7 39       	cpi	r31, 0x97	; 151
    2986:	50 f0       	brcs	.+20     	; 0x299c <pow+0x70>
    2988:	19 f0       	breq	.+6      	; 0x2990 <pow+0x64>
    298a:	ff 3a       	cpi	r31, 0xAF	; 175
    298c:	38 f4       	brcc	.+14     	; 0x299c <pow+0x70>
    298e:	9f 77       	andi	r25, 0x7F	; 127
    2990:	9f 93       	push	r25
    2992:	0c d0       	rcall	.+24     	; 0x29ac <pow+0x80>
    2994:	0f 90       	pop	r0
    2996:	07 fc       	sbrc	r0, 7
    2998:	90 58       	subi	r25, 0x80	; 128
    299a:	08 95       	ret
    299c:	3e f0       	brts	.+14     	; 0x29ac <pow+0x80>
    299e:	18 cf       	rjmp	.-464    	; 0x27d0 <__fp_nan>
    29a0:	60 e0       	ldi	r22, 0x00	; 0
    29a2:	70 e0       	ldi	r23, 0x00	; 0
    29a4:	80 e8       	ldi	r24, 0x80	; 128
    29a6:	9f e3       	ldi	r25, 0x3F	; 63
    29a8:	08 95       	ret
    29aa:	4f e7       	ldi	r20, 0x7F	; 127
    29ac:	9f 77       	andi	r25, 0x7F	; 127
    29ae:	5f 93       	push	r21
    29b0:	4f 93       	push	r20
    29b2:	3f 93       	push	r19
    29b4:	2f 93       	push	r18
    29b6:	9e d0       	rcall	.+316    	; 0x2af4 <log>
    29b8:	2f 91       	pop	r18
    29ba:	3f 91       	pop	r19
    29bc:	4f 91       	pop	r20
    29be:	5f 91       	pop	r21
    29c0:	52 df       	rcall	.-348    	; 0x2866 <__mulsf3>
    29c2:	05 c0       	rjmp	.+10     	; 0x29ce <exp>
    29c4:	19 f4       	brne	.+6      	; 0x29cc <pow+0xa0>
    29c6:	0e f0       	brts	.+2      	; 0x29ca <pow+0x9e>
    29c8:	fd ce       	rjmp	.-518    	; 0x27c4 <__fp_inf>
    29ca:	46 cf       	rjmp	.-372    	; 0x2858 <__fp_zero>
    29cc:	01 cf       	rjmp	.-510    	; 0x27d0 <__fp_nan>

000029ce <exp>:
    29ce:	2a df       	rcall	.-428    	; 0x2824 <__fp_splitA>
    29d0:	c8 f3       	brcs	.-14     	; 0x29c4 <pow+0x98>
    29d2:	96 38       	cpi	r25, 0x86	; 134
    29d4:	c0 f7       	brcc	.-16     	; 0x29c6 <pow+0x9a>
    29d6:	07 f8       	bld	r0, 7
    29d8:	0f 92       	push	r0
    29da:	e8 94       	clt
    29dc:	2b e3       	ldi	r18, 0x3B	; 59
    29de:	3a ea       	ldi	r19, 0xAA	; 170
    29e0:	48 eb       	ldi	r20, 0xB8	; 184
    29e2:	5f e7       	ldi	r21, 0x7F	; 127
    29e4:	4e df       	rcall	.-356    	; 0x2882 <__mulsf3_pse>
    29e6:	0f 92       	push	r0
    29e8:	0f 92       	push	r0
    29ea:	0f 92       	push	r0
    29ec:	4d b7       	in	r20, 0x3d	; 61
    29ee:	5e b7       	in	r21, 0x3e	; 62
    29f0:	0f 92       	push	r0
    29f2:	c0 d0       	rcall	.+384    	; 0x2b74 <modf>
    29f4:	e4 ee       	ldi	r30, 0xE4	; 228
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	16 d0       	rcall	.+44     	; 0x2a26 <__fp_powser>
    29fa:	4f 91       	pop	r20
    29fc:	5f 91       	pop	r21
    29fe:	ef 91       	pop	r30
    2a00:	ff 91       	pop	r31
    2a02:	e5 95       	asr	r30
    2a04:	ee 1f       	adc	r30, r30
    2a06:	ff 1f       	adc	r31, r31
    2a08:	49 f0       	breq	.+18     	; 0x2a1c <exp+0x4e>
    2a0a:	fe 57       	subi	r31, 0x7E	; 126
    2a0c:	e0 68       	ori	r30, 0x80	; 128
    2a0e:	44 27       	eor	r20, r20
    2a10:	ee 0f       	add	r30, r30
    2a12:	44 1f       	adc	r20, r20
    2a14:	fa 95       	dec	r31
    2a16:	e1 f7       	brne	.-8      	; 0x2a10 <exp+0x42>
    2a18:	41 95       	neg	r20
    2a1a:	55 0b       	sbc	r21, r21
    2a1c:	32 d0       	rcall	.+100    	; 0x2a82 <ldexp>
    2a1e:	0f 90       	pop	r0
    2a20:	07 fe       	sbrs	r0, 7
    2a22:	26 c0       	rjmp	.+76     	; 0x2a70 <inverse>
    2a24:	08 95       	ret

00002a26 <__fp_powser>:
    2a26:	df 93       	push	r29
    2a28:	cf 93       	push	r28
    2a2a:	1f 93       	push	r17
    2a2c:	0f 93       	push	r16
    2a2e:	ff 92       	push	r15
    2a30:	ef 92       	push	r14
    2a32:	df 92       	push	r13
    2a34:	7b 01       	movw	r14, r22
    2a36:	8c 01       	movw	r16, r24
    2a38:	68 94       	set
    2a3a:	05 c0       	rjmp	.+10     	; 0x2a46 <__fp_powser+0x20>
    2a3c:	da 2e       	mov	r13, r26
    2a3e:	ef 01       	movw	r28, r30
    2a40:	1e df       	rcall	.-452    	; 0x287e <__mulsf3x>
    2a42:	fe 01       	movw	r30, r28
    2a44:	e8 94       	clt
    2a46:	a5 91       	lpm	r26, Z+
    2a48:	25 91       	lpm	r18, Z+
    2a4a:	35 91       	lpm	r19, Z+
    2a4c:	45 91       	lpm	r20, Z+
    2a4e:	55 91       	lpm	r21, Z+
    2a50:	ae f3       	brts	.-22     	; 0x2a3c <__fp_powser+0x16>
    2a52:	ef 01       	movw	r28, r30
    2a54:	f6 dd       	rcall	.-1044   	; 0x2642 <__addsf3x>
    2a56:	fe 01       	movw	r30, r28
    2a58:	97 01       	movw	r18, r14
    2a5a:	a8 01       	movw	r20, r16
    2a5c:	da 94       	dec	r13
    2a5e:	79 f7       	brne	.-34     	; 0x2a3e <__fp_powser+0x18>
    2a60:	df 90       	pop	r13
    2a62:	ef 90       	pop	r14
    2a64:	ff 90       	pop	r15
    2a66:	0f 91       	pop	r16
    2a68:	1f 91       	pop	r17
    2a6a:	cf 91       	pop	r28
    2a6c:	df 91       	pop	r29
    2a6e:	08 95       	ret

00002a70 <inverse>:
    2a70:	9b 01       	movw	r18, r22
    2a72:	ac 01       	movw	r20, r24
    2a74:	60 e0       	ldi	r22, 0x00	; 0
    2a76:	70 e0       	ldi	r23, 0x00	; 0
    2a78:	80 e8       	ldi	r24, 0x80	; 128
    2a7a:	9f e3       	ldi	r25, 0x3F	; 63
    2a7c:	ae c0       	rjmp	.+348    	; 0x2bda <__divsf3>
    2a7e:	a2 ce       	rjmp	.-700    	; 0x27c4 <__fp_inf>
    2a80:	14 c1       	rjmp	.+552    	; 0x2caa <__fp_mpack>

00002a82 <ldexp>:
    2a82:	d0 de       	rcall	.-608    	; 0x2824 <__fp_splitA>
    2a84:	e8 f3       	brcs	.-6      	; 0x2a80 <inverse+0x10>
    2a86:	99 23       	and	r25, r25
    2a88:	d9 f3       	breq	.-10     	; 0x2a80 <inverse+0x10>
    2a8a:	94 0f       	add	r25, r20
    2a8c:	51 1d       	adc	r21, r1
    2a8e:	bb f3       	brvs	.-18     	; 0x2a7e <inverse+0xe>
    2a90:	91 50       	subi	r25, 0x01	; 1
    2a92:	50 40       	sbci	r21, 0x00	; 0
    2a94:	94 f0       	brlt	.+36     	; 0x2aba <ldexp+0x38>
    2a96:	59 f0       	breq	.+22     	; 0x2aae <ldexp+0x2c>
    2a98:	88 23       	and	r24, r24
    2a9a:	32 f0       	brmi	.+12     	; 0x2aa8 <ldexp+0x26>
    2a9c:	66 0f       	add	r22, r22
    2a9e:	77 1f       	adc	r23, r23
    2aa0:	88 1f       	adc	r24, r24
    2aa2:	91 50       	subi	r25, 0x01	; 1
    2aa4:	50 40       	sbci	r21, 0x00	; 0
    2aa6:	c1 f7       	brne	.-16     	; 0x2a98 <ldexp+0x16>
    2aa8:	9e 3f       	cpi	r25, 0xFE	; 254
    2aaa:	51 05       	cpc	r21, r1
    2aac:	44 f7       	brge	.-48     	; 0x2a7e <inverse+0xe>
    2aae:	88 0f       	add	r24, r24
    2ab0:	91 1d       	adc	r25, r1
    2ab2:	96 95       	lsr	r25
    2ab4:	87 95       	ror	r24
    2ab6:	97 f9       	bld	r25, 7
    2ab8:	08 95       	ret
    2aba:	5f 3f       	cpi	r21, 0xFF	; 255
    2abc:	ac f0       	brlt	.+42     	; 0x2ae8 <ldexp+0x66>
    2abe:	98 3e       	cpi	r25, 0xE8	; 232
    2ac0:	9c f0       	brlt	.+38     	; 0x2ae8 <ldexp+0x66>
    2ac2:	bb 27       	eor	r27, r27
    2ac4:	86 95       	lsr	r24
    2ac6:	77 95       	ror	r23
    2ac8:	67 95       	ror	r22
    2aca:	b7 95       	ror	r27
    2acc:	08 f4       	brcc	.+2      	; 0x2ad0 <ldexp+0x4e>
    2ace:	b1 60       	ori	r27, 0x01	; 1
    2ad0:	93 95       	inc	r25
    2ad2:	c1 f7       	brne	.-16     	; 0x2ac4 <ldexp+0x42>
    2ad4:	bb 0f       	add	r27, r27
    2ad6:	58 f7       	brcc	.-42     	; 0x2aae <ldexp+0x2c>
    2ad8:	11 f4       	brne	.+4      	; 0x2ade <ldexp+0x5c>
    2ada:	60 ff       	sbrs	r22, 0
    2adc:	e8 cf       	rjmp	.-48     	; 0x2aae <ldexp+0x2c>
    2ade:	6f 5f       	subi	r22, 0xFF	; 255
    2ae0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae2:	8f 4f       	sbci	r24, 0xFF	; 255
    2ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae6:	e3 cf       	rjmp	.-58     	; 0x2aae <ldexp+0x2c>
    2ae8:	b8 ce       	rjmp	.-656    	; 0x285a <__fp_szero>
    2aea:	0e f0       	brts	.+2      	; 0x2aee <ldexp+0x6c>
    2aec:	de c0       	rjmp	.+444    	; 0x2caa <__fp_mpack>
    2aee:	70 ce       	rjmp	.-800    	; 0x27d0 <__fp_nan>
    2af0:	68 94       	set
    2af2:	68 ce       	rjmp	.-816    	; 0x27c4 <__fp_inf>

00002af4 <log>:
    2af4:	97 de       	rcall	.-722    	; 0x2824 <__fp_splitA>
    2af6:	c8 f3       	brcs	.-14     	; 0x2aea <ldexp+0x68>
    2af8:	99 23       	and	r25, r25
    2afa:	d1 f3       	breq	.-12     	; 0x2af0 <ldexp+0x6e>
    2afc:	c6 f3       	brts	.-16     	; 0x2aee <ldexp+0x6c>
    2afe:	df 93       	push	r29
    2b00:	cf 93       	push	r28
    2b02:	1f 93       	push	r17
    2b04:	0f 93       	push	r16
    2b06:	ff 92       	push	r15
    2b08:	c9 2f       	mov	r28, r25
    2b0a:	dd 27       	eor	r29, r29
    2b0c:	88 23       	and	r24, r24
    2b0e:	2a f0       	brmi	.+10     	; 0x2b1a <log+0x26>
    2b10:	21 97       	sbiw	r28, 0x01	; 1
    2b12:	66 0f       	add	r22, r22
    2b14:	77 1f       	adc	r23, r23
    2b16:	88 1f       	adc	r24, r24
    2b18:	da f7       	brpl	.-10     	; 0x2b10 <log+0x1c>
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	40 e8       	ldi	r20, 0x80	; 128
    2b20:	5f eb       	ldi	r21, 0xBF	; 191
    2b22:	9f e3       	ldi	r25, 0x3F	; 63
    2b24:	88 39       	cpi	r24, 0x98	; 152
    2b26:	20 f0       	brcs	.+8      	; 0x2b30 <log+0x3c>
    2b28:	80 3e       	cpi	r24, 0xE0	; 224
    2b2a:	30 f0       	brcs	.+12     	; 0x2b38 <log+0x44>
    2b2c:	21 96       	adiw	r28, 0x01	; 1
    2b2e:	8f 77       	andi	r24, 0x7F	; 127
    2b30:	77 dd       	rcall	.-1298   	; 0x2620 <__addsf3>
    2b32:	ec e0       	ldi	r30, 0x0C	; 12
    2b34:	f1 e0       	ldi	r31, 0x01	; 1
    2b36:	03 c0       	rjmp	.+6      	; 0x2b3e <log+0x4a>
    2b38:	73 dd       	rcall	.-1306   	; 0x2620 <__addsf3>
    2b3a:	e9 e3       	ldi	r30, 0x39	; 57
    2b3c:	f1 e0       	ldi	r31, 0x01	; 1
    2b3e:	73 df       	rcall	.-282    	; 0x2a26 <__fp_powser>
    2b40:	8b 01       	movw	r16, r22
    2b42:	be 01       	movw	r22, r28
    2b44:	ec 01       	movw	r28, r24
    2b46:	fb 2e       	mov	r15, r27
    2b48:	6f 57       	subi	r22, 0x7F	; 127
    2b4a:	71 09       	sbc	r23, r1
    2b4c:	75 95       	asr	r23
    2b4e:	77 1f       	adc	r23, r23
    2b50:	88 0b       	sbc	r24, r24
    2b52:	99 0b       	sbc	r25, r25
    2b54:	fc dd       	rcall	.-1032   	; 0x274e <__floatsisf>
    2b56:	28 e1       	ldi	r18, 0x18	; 24
    2b58:	32 e7       	ldi	r19, 0x72	; 114
    2b5a:	41 e3       	ldi	r20, 0x31	; 49
    2b5c:	5f e3       	ldi	r21, 0x3F	; 63
    2b5e:	8f de       	rcall	.-738    	; 0x287e <__mulsf3x>
    2b60:	af 2d       	mov	r26, r15
    2b62:	98 01       	movw	r18, r16
    2b64:	ae 01       	movw	r20, r28
    2b66:	ff 90       	pop	r15
    2b68:	0f 91       	pop	r16
    2b6a:	1f 91       	pop	r17
    2b6c:	cf 91       	pop	r28
    2b6e:	df 91       	pop	r29
    2b70:	68 dd       	rcall	.-1328   	; 0x2642 <__addsf3x>
    2b72:	3f ce       	rjmp	.-898    	; 0x27f2 <__fp_round>

00002b74 <modf>:
    2b74:	fa 01       	movw	r30, r20
    2b76:	dc 01       	movw	r26, r24
    2b78:	aa 0f       	add	r26, r26
    2b7a:	bb 1f       	adc	r27, r27
    2b7c:	9b 01       	movw	r18, r22
    2b7e:	ac 01       	movw	r20, r24
    2b80:	bf 57       	subi	r27, 0x7F	; 127
    2b82:	28 f4       	brcc	.+10     	; 0x2b8e <modf+0x1a>
    2b84:	22 27       	eor	r18, r18
    2b86:	33 27       	eor	r19, r19
    2b88:	44 27       	eor	r20, r20
    2b8a:	50 78       	andi	r21, 0x80	; 128
    2b8c:	1f c0       	rjmp	.+62     	; 0x2bcc <modf+0x58>
    2b8e:	b7 51       	subi	r27, 0x17	; 23
    2b90:	88 f4       	brcc	.+34     	; 0x2bb4 <modf+0x40>
    2b92:	ab 2f       	mov	r26, r27
    2b94:	00 24       	eor	r0, r0
    2b96:	46 95       	lsr	r20
    2b98:	37 95       	ror	r19
    2b9a:	27 95       	ror	r18
    2b9c:	01 1c       	adc	r0, r1
    2b9e:	a3 95       	inc	r26
    2ba0:	d2 f3       	brmi	.-12     	; 0x2b96 <modf+0x22>
    2ba2:	00 20       	and	r0, r0
    2ba4:	69 f0       	breq	.+26     	; 0x2bc0 <modf+0x4c>
    2ba6:	22 0f       	add	r18, r18
    2ba8:	33 1f       	adc	r19, r19
    2baa:	44 1f       	adc	r20, r20
    2bac:	b3 95       	inc	r27
    2bae:	da f3       	brmi	.-10     	; 0x2ba6 <modf+0x32>
    2bb0:	0d d0       	rcall	.+26     	; 0x2bcc <modf+0x58>
    2bb2:	35 cd       	rjmp	.-1430   	; 0x261e <__subsf3>
    2bb4:	61 30       	cpi	r22, 0x01	; 1
    2bb6:	71 05       	cpc	r23, r1
    2bb8:	a0 e8       	ldi	r26, 0x80	; 128
    2bba:	8a 07       	cpc	r24, r26
    2bbc:	b9 46       	sbci	r27, 0x69	; 105
    2bbe:	30 f4       	brcc	.+12     	; 0x2bcc <modf+0x58>
    2bc0:	9b 01       	movw	r18, r22
    2bc2:	ac 01       	movw	r20, r24
    2bc4:	66 27       	eor	r22, r22
    2bc6:	77 27       	eor	r23, r23
    2bc8:	88 27       	eor	r24, r24
    2bca:	90 78       	andi	r25, 0x80	; 128
    2bcc:	30 96       	adiw	r30, 0x00	; 0
    2bce:	21 f0       	breq	.+8      	; 0x2bd8 <modf+0x64>
    2bd0:	20 83       	st	Z, r18
    2bd2:	31 83       	std	Z+1, r19	; 0x01
    2bd4:	42 83       	std	Z+2, r20	; 0x02
    2bd6:	53 83       	std	Z+3, r21	; 0x03
    2bd8:	08 95       	ret

00002bda <__divsf3>:
    2bda:	0c d0       	rcall	.+24     	; 0x2bf4 <__divsf3x>
    2bdc:	0a ce       	rjmp	.-1004   	; 0x27f2 <__fp_round>
    2bde:	02 de       	rcall	.-1020   	; 0x27e4 <__fp_pscB>
    2be0:	40 f0       	brcs	.+16     	; 0x2bf2 <__divsf3+0x18>
    2be2:	f9 dd       	rcall	.-1038   	; 0x27d6 <__fp_pscA>
    2be4:	30 f0       	brcs	.+12     	; 0x2bf2 <__divsf3+0x18>
    2be6:	21 f4       	brne	.+8      	; 0x2bf0 <__divsf3+0x16>
    2be8:	5f 3f       	cpi	r21, 0xFF	; 255
    2bea:	19 f0       	breq	.+6      	; 0x2bf2 <__divsf3+0x18>
    2bec:	eb cd       	rjmp	.-1066   	; 0x27c4 <__fp_inf>
    2bee:	51 11       	cpse	r21, r1
    2bf0:	34 ce       	rjmp	.-920    	; 0x285a <__fp_szero>
    2bf2:	ee cd       	rjmp	.-1060   	; 0x27d0 <__fp_nan>

00002bf4 <__divsf3x>:
    2bf4:	0f de       	rcall	.-994    	; 0x2814 <__fp_split3>
    2bf6:	98 f3       	brcs	.-26     	; 0x2bde <__divsf3+0x4>

00002bf8 <__divsf3_pse>:
    2bf8:	99 23       	and	r25, r25
    2bfa:	c9 f3       	breq	.-14     	; 0x2bee <__divsf3+0x14>
    2bfc:	55 23       	and	r21, r21
    2bfe:	b1 f3       	breq	.-20     	; 0x2bec <__divsf3+0x12>
    2c00:	95 1b       	sub	r25, r21
    2c02:	55 0b       	sbc	r21, r21
    2c04:	bb 27       	eor	r27, r27
    2c06:	aa 27       	eor	r26, r26
    2c08:	62 17       	cp	r22, r18
    2c0a:	73 07       	cpc	r23, r19
    2c0c:	84 07       	cpc	r24, r20
    2c0e:	38 f0       	brcs	.+14     	; 0x2c1e <__divsf3_pse+0x26>
    2c10:	9f 5f       	subi	r25, 0xFF	; 255
    2c12:	5f 4f       	sbci	r21, 0xFF	; 255
    2c14:	22 0f       	add	r18, r18
    2c16:	33 1f       	adc	r19, r19
    2c18:	44 1f       	adc	r20, r20
    2c1a:	aa 1f       	adc	r26, r26
    2c1c:	a9 f3       	breq	.-22     	; 0x2c08 <__divsf3_pse+0x10>
    2c1e:	33 d0       	rcall	.+102    	; 0x2c86 <__divsf3_pse+0x8e>
    2c20:	0e 2e       	mov	r0, r30
    2c22:	3a f0       	brmi	.+14     	; 0x2c32 <__divsf3_pse+0x3a>
    2c24:	e0 e8       	ldi	r30, 0x80	; 128
    2c26:	30 d0       	rcall	.+96     	; 0x2c88 <__divsf3_pse+0x90>
    2c28:	91 50       	subi	r25, 0x01	; 1
    2c2a:	50 40       	sbci	r21, 0x00	; 0
    2c2c:	e6 95       	lsr	r30
    2c2e:	00 1c       	adc	r0, r0
    2c30:	ca f7       	brpl	.-14     	; 0x2c24 <__divsf3_pse+0x2c>
    2c32:	29 d0       	rcall	.+82     	; 0x2c86 <__divsf3_pse+0x8e>
    2c34:	fe 2f       	mov	r31, r30
    2c36:	27 d0       	rcall	.+78     	; 0x2c86 <__divsf3_pse+0x8e>
    2c38:	66 0f       	add	r22, r22
    2c3a:	77 1f       	adc	r23, r23
    2c3c:	88 1f       	adc	r24, r24
    2c3e:	bb 1f       	adc	r27, r27
    2c40:	26 17       	cp	r18, r22
    2c42:	37 07       	cpc	r19, r23
    2c44:	48 07       	cpc	r20, r24
    2c46:	ab 07       	cpc	r26, r27
    2c48:	b0 e8       	ldi	r27, 0x80	; 128
    2c4a:	09 f0       	breq	.+2      	; 0x2c4e <__divsf3_pse+0x56>
    2c4c:	bb 0b       	sbc	r27, r27
    2c4e:	80 2d       	mov	r24, r0
    2c50:	bf 01       	movw	r22, r30
    2c52:	ff 27       	eor	r31, r31
    2c54:	93 58       	subi	r25, 0x83	; 131
    2c56:	5f 4f       	sbci	r21, 0xFF	; 255
    2c58:	2a f0       	brmi	.+10     	; 0x2c64 <__divsf3_pse+0x6c>
    2c5a:	9e 3f       	cpi	r25, 0xFE	; 254
    2c5c:	51 05       	cpc	r21, r1
    2c5e:	68 f0       	brcs	.+26     	; 0x2c7a <__divsf3_pse+0x82>
    2c60:	b1 cd       	rjmp	.-1182   	; 0x27c4 <__fp_inf>
    2c62:	fb cd       	rjmp	.-1034   	; 0x285a <__fp_szero>
    2c64:	5f 3f       	cpi	r21, 0xFF	; 255
    2c66:	ec f3       	brlt	.-6      	; 0x2c62 <__divsf3_pse+0x6a>
    2c68:	98 3e       	cpi	r25, 0xE8	; 232
    2c6a:	dc f3       	brlt	.-10     	; 0x2c62 <__divsf3_pse+0x6a>
    2c6c:	86 95       	lsr	r24
    2c6e:	77 95       	ror	r23
    2c70:	67 95       	ror	r22
    2c72:	b7 95       	ror	r27
    2c74:	f7 95       	ror	r31
    2c76:	9f 5f       	subi	r25, 0xFF	; 255
    2c78:	c9 f7       	brne	.-14     	; 0x2c6c <__divsf3_pse+0x74>
    2c7a:	88 0f       	add	r24, r24
    2c7c:	91 1d       	adc	r25, r1
    2c7e:	96 95       	lsr	r25
    2c80:	87 95       	ror	r24
    2c82:	97 f9       	bld	r25, 7
    2c84:	08 95       	ret
    2c86:	e1 e0       	ldi	r30, 0x01	; 1
    2c88:	66 0f       	add	r22, r22
    2c8a:	77 1f       	adc	r23, r23
    2c8c:	88 1f       	adc	r24, r24
    2c8e:	bb 1f       	adc	r27, r27
    2c90:	62 17       	cp	r22, r18
    2c92:	73 07       	cpc	r23, r19
    2c94:	84 07       	cpc	r24, r20
    2c96:	ba 07       	cpc	r27, r26
    2c98:	20 f0       	brcs	.+8      	; 0x2ca2 <__divsf3_pse+0xaa>
    2c9a:	62 1b       	sub	r22, r18
    2c9c:	73 0b       	sbc	r23, r19
    2c9e:	84 0b       	sbc	r24, r20
    2ca0:	ba 0b       	sbc	r27, r26
    2ca2:	ee 1f       	adc	r30, r30
    2ca4:	88 f7       	brcc	.-30     	; 0x2c88 <__divsf3_pse+0x90>
    2ca6:	e0 95       	com	r30
    2ca8:	08 95       	ret

00002caa <__fp_mpack>:
    2caa:	9f 3f       	cpi	r25, 0xFF	; 255
    2cac:	31 f0       	breq	.+12     	; 0x2cba <__fp_mpack_finite+0xc>

00002cae <__fp_mpack_finite>:
    2cae:	91 50       	subi	r25, 0x01	; 1
    2cb0:	20 f4       	brcc	.+8      	; 0x2cba <__fp_mpack_finite+0xc>
    2cb2:	87 95       	ror	r24
    2cb4:	77 95       	ror	r23
    2cb6:	67 95       	ror	r22
    2cb8:	b7 95       	ror	r27
    2cba:	88 0f       	add	r24, r24
    2cbc:	91 1d       	adc	r25, r1
    2cbe:	96 95       	lsr	r25
    2cc0:	87 95       	ror	r24
    2cc2:	97 f9       	bld	r25, 7
    2cc4:	08 95       	ret

00002cc6 <__divmodhi4>:
    2cc6:	97 fb       	bst	r25, 7
    2cc8:	07 2e       	mov	r0, r23
    2cca:	16 f4       	brtc	.+4      	; 0x2cd0 <__divmodhi4+0xa>
    2ccc:	00 94       	com	r0
    2cce:	06 d0       	rcall	.+12     	; 0x2cdc <__divmodhi4_neg1>
    2cd0:	77 fd       	sbrc	r23, 7
    2cd2:	08 d0       	rcall	.+16     	; 0x2ce4 <__divmodhi4_neg2>
    2cd4:	0b d0       	rcall	.+22     	; 0x2cec <__udivmodhi4>
    2cd6:	07 fc       	sbrc	r0, 7
    2cd8:	05 d0       	rcall	.+10     	; 0x2ce4 <__divmodhi4_neg2>
    2cda:	3e f4       	brtc	.+14     	; 0x2cea <__divmodhi4_exit>

00002cdc <__divmodhi4_neg1>:
    2cdc:	90 95       	com	r25
    2cde:	81 95       	neg	r24
    2ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ce2:	08 95       	ret

00002ce4 <__divmodhi4_neg2>:
    2ce4:	70 95       	com	r23
    2ce6:	61 95       	neg	r22
    2ce8:	7f 4f       	sbci	r23, 0xFF	; 255

00002cea <__divmodhi4_exit>:
    2cea:	08 95       	ret

00002cec <__udivmodhi4>:
    2cec:	aa 1b       	sub	r26, r26
    2cee:	bb 1b       	sub	r27, r27
    2cf0:	51 e1       	ldi	r21, 0x11	; 17
    2cf2:	07 c0       	rjmp	.+14     	; 0x2d02 <__udivmodhi4_ep>

00002cf4 <__udivmodhi4_loop>:
    2cf4:	aa 1f       	adc	r26, r26
    2cf6:	bb 1f       	adc	r27, r27
    2cf8:	a6 17       	cp	r26, r22
    2cfa:	b7 07       	cpc	r27, r23
    2cfc:	10 f0       	brcs	.+4      	; 0x2d02 <__udivmodhi4_ep>
    2cfe:	a6 1b       	sub	r26, r22
    2d00:	b7 0b       	sbc	r27, r23

00002d02 <__udivmodhi4_ep>:
    2d02:	88 1f       	adc	r24, r24
    2d04:	99 1f       	adc	r25, r25
    2d06:	5a 95       	dec	r21
    2d08:	a9 f7       	brne	.-22     	; 0x2cf4 <__udivmodhi4_loop>
    2d0a:	80 95       	com	r24
    2d0c:	90 95       	com	r25
    2d0e:	bc 01       	movw	r22, r24
    2d10:	cd 01       	movw	r24, r26
    2d12:	08 95       	ret

00002d14 <memcpy>:
    2d14:	fb 01       	movw	r30, r22
    2d16:	dc 01       	movw	r26, r24
    2d18:	02 c0       	rjmp	.+4      	; 0x2d1e <memcpy+0xa>
    2d1a:	01 90       	ld	r0, Z+
    2d1c:	0d 92       	st	X+, r0
    2d1e:	41 50       	subi	r20, 0x01	; 1
    2d20:	50 40       	sbci	r21, 0x00	; 0
    2d22:	d8 f7       	brcc	.-10     	; 0x2d1a <memcpy+0x6>
    2d24:	08 95       	ret

00002d26 <__itoa_ncheck>:
    2d26:	bb 27       	eor	r27, r27
    2d28:	4a 30       	cpi	r20, 0x0A	; 10
    2d2a:	31 f4       	brne	.+12     	; 0x2d38 <__itoa_ncheck+0x12>
    2d2c:	99 23       	and	r25, r25
    2d2e:	22 f4       	brpl	.+8      	; 0x2d38 <__itoa_ncheck+0x12>
    2d30:	bd e2       	ldi	r27, 0x2D	; 45
    2d32:	90 95       	com	r25
    2d34:	81 95       	neg	r24
    2d36:	9f 4f       	sbci	r25, 0xFF	; 255
    2d38:	01 c0       	rjmp	.+2      	; 0x2d3c <__utoa_common>

00002d3a <__utoa_ncheck>:
    2d3a:	bb 27       	eor	r27, r27

00002d3c <__utoa_common>:
    2d3c:	fb 01       	movw	r30, r22
    2d3e:	55 27       	eor	r21, r21
    2d40:	aa 27       	eor	r26, r26
    2d42:	88 0f       	add	r24, r24
    2d44:	99 1f       	adc	r25, r25
    2d46:	aa 1f       	adc	r26, r26
    2d48:	a4 17       	cp	r26, r20
    2d4a:	10 f0       	brcs	.+4      	; 0x2d50 <__utoa_common+0x14>
    2d4c:	a4 1b       	sub	r26, r20
    2d4e:	83 95       	inc	r24
    2d50:	50 51       	subi	r21, 0x10	; 16
    2d52:	b9 f7       	brne	.-18     	; 0x2d42 <__utoa_common+0x6>
    2d54:	a0 5d       	subi	r26, 0xD0	; 208
    2d56:	aa 33       	cpi	r26, 0x3A	; 58
    2d58:	08 f0       	brcs	.+2      	; 0x2d5c <__utoa_common+0x20>
    2d5a:	a9 5d       	subi	r26, 0xD9	; 217
    2d5c:	a1 93       	st	Z+, r26
    2d5e:	00 97       	sbiw	r24, 0x00	; 0
    2d60:	79 f7       	brne	.-34     	; 0x2d40 <__utoa_common+0x4>
    2d62:	b1 11       	cpse	r27, r1
    2d64:	b1 93       	st	Z+, r27
    2d66:	11 92       	st	Z+, r1
    2d68:	cb 01       	movw	r24, r22
    2d6a:	00 c0       	rjmp	.+0      	; 0x2d6c <strrev>

00002d6c <strrev>:
    2d6c:	dc 01       	movw	r26, r24
    2d6e:	fc 01       	movw	r30, r24
    2d70:	67 2f       	mov	r22, r23
    2d72:	71 91       	ld	r23, Z+
    2d74:	77 23       	and	r23, r23
    2d76:	e1 f7       	brne	.-8      	; 0x2d70 <strrev+0x4>
    2d78:	32 97       	sbiw	r30, 0x02	; 2
    2d7a:	04 c0       	rjmp	.+8      	; 0x2d84 <strrev+0x18>
    2d7c:	7c 91       	ld	r23, X
    2d7e:	6d 93       	st	X+, r22
    2d80:	70 83       	st	Z, r23
    2d82:	62 91       	ld	r22, -Z
    2d84:	ae 17       	cp	r26, r30
    2d86:	bf 07       	cpc	r27, r31
    2d88:	c8 f3       	brcs	.-14     	; 0x2d7c <strrev+0x10>
    2d8a:	08 95       	ret

00002d8c <_exit>:
    2d8c:	f8 94       	cli

00002d8e <__stop_program>:
    2d8e:	ff cf       	rjmp	.-2      	; 0x2d8e <__stop_program>
