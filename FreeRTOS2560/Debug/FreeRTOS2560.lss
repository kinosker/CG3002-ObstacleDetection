
FreeRTOS2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800200  00002e70  00002f04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000709  00800238  00800238  00002f3c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002f3c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000568  00000000  00000000  00002f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005e55  00000000  00000000  000034d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000161f  00000000  00000000  00009329  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000038a6  00000000  00000000  0000a948  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000f60  00000000  00000000  0000e1f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000176f  00000000  00000000  0000f150  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004280  00000000  00000000  000108bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004f8  00000000  00000000  00014b3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b2 c0       	rjmp	.+356    	; 0x166 <__ctors_end>
       2:	00 00       	nop
       4:	d0 c0       	rjmp	.+416    	; 0x1a6 <__bad_interrupt>
       6:	00 00       	nop
       8:	ce c0       	rjmp	.+412    	; 0x1a6 <__bad_interrupt>
       a:	00 00       	nop
       c:	cc c0       	rjmp	.+408    	; 0x1a6 <__bad_interrupt>
       e:	00 00       	nop
      10:	ca c0       	rjmp	.+404    	; 0x1a6 <__bad_interrupt>
      12:	00 00       	nop
      14:	c8 c0       	rjmp	.+400    	; 0x1a6 <__bad_interrupt>
      16:	00 00       	nop
      18:	c6 c0       	rjmp	.+396    	; 0x1a6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c4 c0       	rjmp	.+392    	; 0x1a6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c2 c0       	rjmp	.+388    	; 0x1a6 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c3       	rjmp	.+1914   	; 0x7a0 <__vector_9>
      26:	00 00       	nop
      28:	be c0       	rjmp	.+380    	; 0x1a6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bc c0       	rjmp	.+376    	; 0x1a6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ba c0       	rjmp	.+372    	; 0x1a6 <__bad_interrupt>
      32:	00 00       	nop
      34:	b8 c0       	rjmp	.+368    	; 0x1a6 <__bad_interrupt>
      36:	00 00       	nop
      38:	b6 c0       	rjmp	.+364    	; 0x1a6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b4 c0       	rjmp	.+360    	; 0x1a6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b2 c0       	rjmp	.+356    	; 0x1a6 <__bad_interrupt>
      42:	00 00       	nop
      44:	b0 c0       	rjmp	.+352    	; 0x1a6 <__bad_interrupt>
      46:	00 00       	nop
      48:	ae c0       	rjmp	.+348    	; 0x1a6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ac c0       	rjmp	.+344    	; 0x1a6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	aa c0       	rjmp	.+340    	; 0x1a6 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <__vector_21>
      58:	a6 c0       	rjmp	.+332    	; 0x1a6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a4 c0       	rjmp	.+328    	; 0x1a6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a2 c0       	rjmp	.+324    	; 0x1a6 <__bad_interrupt>
      62:	00 00       	nop
      64:	81 c7       	rjmp	.+3842   	; 0xf68 <__vector_25>
      66:	00 00       	nop
      68:	ed c7       	rjmp	.+4058   	; 0x1044 <__vector_26>
      6a:	00 00       	nop
      6c:	9c c0       	rjmp	.+312    	; 0x1a6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	9a c0       	rjmp	.+308    	; 0x1a6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a5 c4       	rjmp	.+2378   	; 0x9c0 <__vector_29>
      76:	00 00       	nop
      78:	96 c0       	rjmp	.+300    	; 0x1a6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	94 c0       	rjmp	.+296    	; 0x1a6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	92 c0       	rjmp	.+292    	; 0x1a6 <__bad_interrupt>
      82:	00 00       	nop
      84:	90 c0       	rjmp	.+288    	; 0x1a6 <__bad_interrupt>
      86:	00 00       	nop
      88:	8e c0       	rjmp	.+284    	; 0x1a6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8c c0       	rjmp	.+280    	; 0x1a6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	33 c7       	rjmp	.+3686   	; 0xef8 <__vector_36>
      92:	00 00       	nop
      94:	a1 c7       	rjmp	.+3906   	; 0xfd8 <__vector_37>
      96:	00 00       	nop
      98:	86 c0       	rjmp	.+268    	; 0x1a6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	84 c0       	rjmp	.+264    	; 0x1a6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	82 c0       	rjmp	.+260    	; 0x1a6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	80 c0       	rjmp	.+256    	; 0x1a6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7e c0       	rjmp	.+252    	; 0x1a6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	7c c0       	rjmp	.+248    	; 0x1a6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	7a c0       	rjmp	.+244    	; 0x1a6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	78 c0       	rjmp	.+240    	; 0x1a6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	76 c0       	rjmp	.+236    	; 0x1a6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	74 c0       	rjmp	.+232    	; 0x1a6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	72 c0       	rjmp	.+228    	; 0x1a6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	70 c0       	rjmp	.+224    	; 0x1a6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	6e c0       	rjmp	.+220    	; 0x1a6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	6c c0       	rjmp	.+216    	; 0x1a6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	6a c0       	rjmp	.+212    	; 0x1a6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	68 c0       	rjmp	.+208    	; 0x1a6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	66 c0       	rjmp	.+204    	; 0x1a6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	64 c0       	rjmp	.+200    	; 0x1a6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	62 c0       	rjmp	.+196    	; 0x1a6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <myMaxSonar_AddSample+0xe>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e0 e7       	ldi	r30, 0x70	; 112
     17e:	fe e2       	ldi	r31, 0x2E	; 46
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a8 33       	cpi	r26, 0x38	; 56
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	29 e0       	ldi	r18, 0x09	; 9
     192:	a8 e3       	ldi	r26, 0x38	; 56
     194:	b2 e0       	ldi	r27, 0x02	; 2
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a1 34       	cpi	r26, 0x41	; 65
     19c:	b2 07       	cpc	r27, r18
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	db d0       	rcall	.+438    	; 0x358 <main>
     1a2:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <_exit>

000001a6 <__bad_interrupt>:
     1a6:	2c cf       	rjmp	.-424    	; 0x0 <__vectors>

000001a8 <RPI_receiveTask>:
	}
}


void vApplicationIdleHook()
{
     1a8:	12 e0       	ldi	r17, 0x02	; 2
     1aa:	d1 e0       	ldi	r29, 0x01	; 1
     1ac:	0e 94 42 09 	call	0x1284	; 0x1284 <myUSART_peekReceiveUSART1>
     1b0:	c8 2f       	mov	r28, r24
     1b2:	0e 94 2a 09 	call	0x1254	; 0x1254 <myUSART_receiveHandShakeAck>
     1b6:	88 23       	and	r24, r24
     1b8:	29 f0       	breq	.+10     	; 0x1c4 <RPI_receiveTask+0x1c>
     1ba:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <myUSART_receiveUSART1>
     1be:	0e 94 1f 09 	call	0x123e	; 0x123e <myUSART_completeHandShake>
     1c2:	f4 cf       	rjmp	.-24     	; 0x1ac <RPI_receiveTask+0x4>
     1c4:	8c 2f       	mov	r24, r28
     1c6:	0e 94 3c 09 	call	0x1278	; 0x1278 <myUSART_receiveMessageACK>
     1ca:	88 23       	and	r24, r24
     1cc:	19 f0       	breq	.+6      	; 0x1d4 <RPI_receiveTask+0x2c>
     1ce:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <myUSART_receiveUSART1>
     1d2:	ec cf       	rjmp	.-40     	; 0x1ac <RPI_receiveTask+0x4>
     1d4:	80 91 38 02 	lds	r24, 0x0238
     1d8:	81 11       	cpse	r24, r1
     1da:	0b c0       	rjmp	.+22     	; 0x1f2 <RPI_receiveTask+0x4a>
     1dc:	8c 2f       	mov	r24, r28
     1de:	0e 94 30 09 	call	0x1260	; 0x1260 <myUSART_receiveHandShakeStart>
     1e2:	88 23       	and	r24, r24
     1e4:	19 f3       	breq	.-58     	; 0x1ac <RPI_receiveTask+0x4>
     1e6:	f6 d7       	rcall	.+4076   	; 0x11d4 <myUSART_receiveUSART1>
     1e8:	85 e0       	ldi	r24, 0x05	; 5
     1ea:	c1 d7       	rcall	.+3970   	; 0x116e <myUSART_transmitUSART1_c>
     1ec:	d0 93 38 02 	sts	0x0238, r29
     1f0:	dd cf       	rjmp	.-70     	; 0x1ac <RPI_receiveTask+0x4>
     1f2:	81 30       	cpi	r24, 0x01	; 1
     1f4:	59 f4       	brne	.+22     	; 0x20c <RPI_receiveTask+0x64>
     1f6:	8c 2f       	mov	r24, r28
     1f8:	0e 94 36 09 	call	0x126c	; 0x126c <myUSART_receiveHandShakeFin>
     1fc:	88 23       	and	r24, r24
     1fe:	19 f0       	breq	.+6      	; 0x206 <RPI_receiveTask+0x5e>
     200:	10 93 38 02 	sts	0x0238, r17
     204:	d3 cf       	rjmp	.-90     	; 0x1ac <RPI_receiveTask+0x4>
     206:	10 92 38 02 	sts	0x0238, r1
     20a:	d0 cf       	rjmp	.-96     	; 0x1ac <RPI_receiveTask+0x4>
     20c:	82 30       	cpi	r24, 0x02	; 2
     20e:	71 f6       	brne	.-100    	; 0x1ac <RPI_receiveTask+0x4>
     210:	e1 d7       	rcall	.+4034   	; 0x11d4 <myUSART_receiveUSART1>
     212:	cc cf       	rjmp	.-104    	; 0x1ac <RPI_receiveTask+0x4>

00000214 <RPI_sendTask>:
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	00 d0       	rcall	.+0      	; 0x21a <RPI_sendTask+0x6>
     21a:	00 d0       	rcall	.+0      	; 0x21c <RPI_sendTask+0x8>
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
     220:	fa d7       	rcall	.+4084   	; 0x1216 <myUSART_startHandShake>
     222:	18 2f       	mov	r17, r24
     224:	20 e0       	ldi	r18, 0x00	; 0
     226:	4f ef       	ldi	r20, 0xFF	; 255
     228:	5f ef       	ldi	r21, 0xFF	; 255
     22a:	be 01       	movw	r22, r28
     22c:	6a 5f       	subi	r22, 0xFA	; 250
     22e:	7f 4f       	sbci	r23, 0xFF	; 255
     230:	80 91 89 08 	lds	r24, 0x0889
     234:	90 91 8a 08 	lds	r25, 0x088A
     238:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <xQueueGenericReceive>
     23c:	11 23       	and	r17, r17
     23e:	31 f1       	breq	.+76     	; 0x28c <RPI_sendTask+0x78>
     240:	8e 81       	ldd	r24, Y+6	; 0x06
     242:	80 5d       	subi	r24, 0xD0	; 208
     244:	94 d7       	rcall	.+3880   	; 0x116e <myUSART_transmitUSART1_c>
     246:	8a e0       	ldi	r24, 0x0A	; 10
     248:	92 d7       	rcall	.+3876   	; 0x116e <myUSART_transmitUSART1_c>
     24a:	20 c0       	rjmp	.+64     	; 0x28c <RPI_sendTask+0x78>
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	4f ef       	ldi	r20, 0xFF	; 255
     250:	5f ef       	ldi	r21, 0xFF	; 255
     252:	be 01       	movw	r22, r28
     254:	6f 5f       	subi	r22, 0xFF	; 255
     256:	7f 4f       	sbci	r23, 0xFF	; 255
     258:	80 91 8b 08 	lds	r24, 0x088B
     25c:	90 91 8c 08 	lds	r25, 0x088C
     260:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <xQueueGenericReceive>
     264:	89 81       	ldd	r24, Y+1	; 0x01
     266:	6c d7       	rcall	.+3800   	; 0x1140 <myUSART_transmitUSART0_c>
     268:	87 e0       	ldi	r24, 0x07	; 7
     26a:	92 e0       	ldi	r25, 0x02	; 2
     26c:	a5 d7       	rcall	.+3914   	; 0x11b8 <myUSART_transmitUSART0>
     26e:	ce 01       	movw	r24, r28
     270:	02 96       	adiw	r24, 0x02	; 2
     272:	a2 d7       	rcall	.+3908   	; 0x11b8 <myUSART_transmitUSART0>
     274:	8a e0       	ldi	r24, 0x0A	; 10
     276:	92 e0       	ldi	r25, 0x02	; 2
     278:	9f d7       	rcall	.+3902   	; 0x11b8 <myUSART_transmitUSART0>
     27a:	11 23       	and	r17, r17
     27c:	39 f0       	breq	.+14     	; 0x28c <RPI_sendTask+0x78>
     27e:	89 81       	ldd	r24, Y+1	; 0x01
     280:	76 d7       	rcall	.+3820   	; 0x116e <myUSART_transmitUSART1_c>
     282:	ce 01       	movw	r24, r28
     284:	02 96       	adiw	r24, 0x02	; 2
     286:	8a d7       	rcall	.+3860   	; 0x119c <myUSART_transmitUSART1>
     288:	8a e0       	ldi	r24, 0x0A	; 10
     28a:	71 d7       	rcall	.+3810   	; 0x116e <myUSART_transmitUSART1_c>
     28c:	9e 81       	ldd	r25, Y+6	; 0x06
     28e:	2f ef       	ldi	r18, 0xFF	; 255
     290:	29 0f       	add	r18, r25
     292:	2e 83       	std	Y+6, r18	; 0x06
     294:	91 11       	cpse	r25, r1
     296:	da cf       	rjmp	.-76     	; 0x24c <RPI_sendTask+0x38>
     298:	8a e0       	ldi	r24, 0x0A	; 10
     29a:	52 d7       	rcall	.+3748   	; 0x1140 <myUSART_transmitUSART0_c>
     29c:	c1 cf       	rjmp	.-126    	; 0x220 <RPI_sendTask+0xc>

0000029e <myTimerTask>:
     29e:	7d d5       	rcall	.+2810   	; 0xd9a <myTimer_Init>
     2a0:	bc d5       	rcall	.+2936   	; 0xe1a <myTimer_DelayChecker>
     2a2:	fe cf       	rjmp	.-4      	; 0x2a0 <myTimerTask+0x2>

000002a4 <setDigitalInputPowerReduction>:


void setDigitalInputPowerReduction()
{
	// Set when confirm which ADC pin not used for digital..
	DIDR0 = 0b11111111; // all adc pin not used for digital
     2a4:	8f ef       	ldi	r24, 0xFF	; 255
     2a6:	80 93 7e 00 	sts	0x007E, r24
	DIDR1 |= (1<<AIN1D) | (1<<AIN0D);
     2aa:	ef e7       	ldi	r30, 0x7F	; 127
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	90 81       	ld	r25, Z
     2b0:	93 60       	ori	r25, 0x03	; 3
     2b2:	90 83       	st	Z, r25
	DIDR2 = 0b11111111; // add adc pin not used for digital
     2b4:	80 93 7d 00 	sts	0x007D, r24
     2b8:	08 95       	ret

000002ba <setPowerReduction>:
}

// Shut down unused...
void setPowerReduction()
{
	PRR0 = (1<<PRTWI) | (1<<PRTIM2) | (1<<PRTIM1) | (1<<PRSPI); // Shut down I2C, timer2, timer 1, SPI
     2ba:	8c ec       	ldi	r24, 0xCC	; 204
     2bc:	80 93 64 00 	sts	0x0064, r24
	// Include USART0 after finish debugging using usb.... (1<<PRUSART0)
	
	PRR1 = (1<<PRTIM5) | (1<<PRTIM4) | (1<<PRTIM3) | (1<<PRUSART3) | (1<<PRUSART2); // Shut down timer5, timer4, timer3, USART3, USART2
     2c0:	8e e3       	ldi	r24, 0x3E	; 62
     2c2:	80 93 65 00 	sts	0x0065, r24
	
	setDigitalInputPowerReduction();
     2c6:	ee cf       	rjmp	.-36     	; 0x2a4 <setDigitalInputPowerReduction>
     2c8:	08 95       	ret

000002ca <clearTimer>:
}

void clearTimer()
{
	// Clear Timer1
	TCCR1A = 0;     // Clear all settings
     2ca:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;     // Clear all settings
     2ce:	10 92 81 00 	sts	0x0081, r1
	TIMSK1 = 0;     // Disable all interrupts
     2d2:	10 92 6f 00 	sts	0x006F, r1

	// Clear Timer2
	TCCR2A = 0;     // Clear all settings
     2d6:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0;     // Clear all settings
     2da:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;     // Disable all interrupts
     2de:	10 92 70 00 	sts	0x0070, r1
	
	// Clear Timer3
	TCCR3A = 0;     // Clear all settings
     2e2:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;     // Clear all settings
     2e6:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0;     // Disable all interrupts
     2ea:	10 92 71 00 	sts	0x0071, r1

	// Clear Timer4
	TCCR4A = 0;     // Clear all settings
     2ee:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0;     // Clear all settings
     2f2:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0;     // Disable all interrupts
     2f6:	10 92 72 00 	sts	0x0072, r1

	// Clear Timer5
	TCCR5A = 0;     // Clear all settings
     2fa:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;     // Clear all settings
     2fe:	10 92 21 01 	sts	0x0121, r1
	TIMSK5 = 0;     // Disable all interrupts
     302:	10 92 73 00 	sts	0x0073, r1
     306:	08 95       	ret

00000308 <init>:
}

void init()
{
     308:	cf 93       	push	r28
	// Ensure atomic...
	ATOMIC_BLOCK( ATOMIC_RESTORESTATE )
     30a:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     30c:	f8 94       	cli
	{
		clearTimer();
     30e:	dd df       	rcall	.-70     	; 0x2ca <clearTimer>
		setPowerReduction();
     310:	d4 df       	rcall	.-88     	; 0x2ba <setPowerReduction>
		myUSART_USART0_Init();
     312:	ce d6       	rcall	.+3484   	; 0x10b0 <myUSART_USART0_Init>
		myUSART_USART1_Init();
     314:	ed d6       	rcall	.+3546   	; 0x10f0 <myUSART_USART1_Init>
		myADC_Init();
     316:	8c d3       	rcall	.+1816   	; 0xa30 <myADC_Init>
		
		MaxSonar_Init();
     318:	83 b3       	in	r24, 0x13	; 19
     31a:	83 60       	ori	r24, 0x03	; 3
     31c:	83 bb       	out	0x13, r24	; 19
		
		myHcSonar_Init();
     31e:	cb d2       	rcall	.+1430   	; 0x8b6 <myHcSonar_Init>
		
		
		queueObstacleNumber = xQueueCreate(QUEUE_SIZE, sizeof (char)); // create queue
     320:	40 e0       	ldi	r20, 0x00	; 0
     322:	61 e0       	ldi	r22, 0x01	; 1
     324:	85 e0       	ldi	r24, 0x05	; 5
     326:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <xQueueGenericCreate>
     32a:	90 93 8a 08 	sts	0x088A, r25
     32e:	80 93 89 08 	sts	0x0889, r24
		queueObstacleData = xQueueCreate( (QUEUE_SIZE*SONAR_NUM), sizeof (obstacleStruct)); // create queue
     332:	40 e0       	ldi	r20, 0x00	; 0
     334:	65 e0       	ldi	r22, 0x05	; 5
     336:	84 e1       	ldi	r24, 0x14	; 20
     338:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <xQueueGenericCreate>
     33c:	90 93 8c 08 	sts	0x088C, r25
     340:	80 93 8b 08 	sts	0x088B, r24
		
		MOTOR_LEFT_INIT();
     344:	6c 9a       	sbi	0x0d, 4	; 13
		MOTOR_RIGHT_INIT();
     346:	e1 e0       	ldi	r30, 0x01	; 1
     348:	f1 e0       	ldi	r31, 0x01	; 1
     34a:	80 81       	ld	r24, Z
     34c:	80 61       	ori	r24, 0x10	; 16
     34e:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     350:	cf bf       	out	0x3f, r28	; 63
		
		
	}
	
	sei(); // enable interrupts..
     352:	78 94       	sei
}
     354:	cf 91       	pop	r28
     356:	08 95       	ret

00000358 <main>:
	
	// do nth
}

int main(void)
{
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	cd b7       	in	r28, 0x3d	; 61
     35e:	de b7       	in	r29, 0x3e	; 62
     360:	28 97       	sbiw	r28, 0x08	; 8
     362:	0f b6       	in	r0, 0x3f	; 63
     364:	f8 94       	cli
     366:	de bf       	out	0x3e, r29	; 62
     368:	0f be       	out	0x3f, r0	; 63
     36a:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
		TaskHandle_t t_maxSonar, t_rx, t_tx, t_delay;
	
		init();
     36c:	cd df       	rcall	.-102    	; 0x308 <init>

		//xTaskCreate(task1, "Task 1", BLINK_1_STACK, NULL, BLINK_1_PRIORITY, &t1);
		//xTaskCreate(task2, "Task 2", BLINK_2_STACK, NULL, BLINK_2_PRIORITY, &t2);
		
		xTaskCreate(myTimerTask, "myTimer", MY_TIMER_STACK, (&t_delay) , MY_TIMER_PRIORITY, &t_delay); // danger?!?		
     36e:	a1 2c       	mov	r10, r1
     370:	b1 2c       	mov	r11, r1
     372:	c1 2c       	mov	r12, r1
     374:	d1 2c       	mov	r13, r1
     376:	ce 01       	movw	r24, r28
     378:	01 96       	adiw	r24, 0x01	; 1
     37a:	7c 01       	movw	r14, r24
     37c:	04 e0       	ldi	r16, 0x04	; 4
     37e:	9c 01       	movw	r18, r24
     380:	49 e6       	ldi	r20, 0x69	; 105
     382:	50 e0       	ldi	r21, 0x00	; 0
     384:	6d e0       	ldi	r22, 0x0D	; 13
     386:	72 e0       	ldi	r23, 0x02	; 2
     388:	8f e4       	ldi	r24, 0x4F	; 79
     38a:	91 e0       	ldi	r25, 0x01	; 1
     38c:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <xTaskGenericCreate>
		xTaskCreate(Sonar_Task, "maxSonar", MAXSONAR_STACK, NULL, MAXSONAR_PRIORITY, &t_maxSonar);
     390:	ce 01       	movw	r24, r28
     392:	07 96       	adiw	r24, 0x07	; 7
     394:	7c 01       	movw	r14, r24
     396:	02 e0       	ldi	r16, 0x02	; 2
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	4d e6       	ldi	r20, 0x6D	; 109
     39e:	51 e0       	ldi	r21, 0x01	; 1
     3a0:	65 e1       	ldi	r22, 0x15	; 21
     3a2:	72 e0       	ldi	r23, 0x02	; 2
     3a4:	85 e8       	ldi	r24, 0x85	; 133
     3a6:	92 e0       	ldi	r25, 0x02	; 2
     3a8:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <xTaskGenericCreate>

		
		// Need fix receive concurrency issues.
		xTaskCreate(RPI_receiveTask, "RPI_Receive", RPI_RECEIVE_STACK, NULL, RPI_RECEIVE_PRIORITY, &t_rx);
     3ac:	ce 01       	movw	r24, r28
     3ae:	05 96       	adiw	r24, 0x05	; 5
     3b0:	7c 01       	movw	r14, r24
     3b2:	03 e0       	ldi	r16, 0x03	; 3
     3b4:	20 e0       	ldi	r18, 0x00	; 0
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	47 e8       	ldi	r20, 0x87	; 135
     3ba:	50 e0       	ldi	r21, 0x00	; 0
     3bc:	6e e1       	ldi	r22, 0x1E	; 30
     3be:	72 e0       	ldi	r23, 0x02	; 2
     3c0:	84 ed       	ldi	r24, 0xD4	; 212
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <xTaskGenericCreate>
		xTaskCreate(RPI_sendTask, "RPI_Send", RPI_SEND_STACK, NULL, RPI_SEND_PRIORITY, &t_tx);
     3c8:	ce 01       	movw	r24, r28
     3ca:	03 96       	adiw	r24, 0x03	; 3
     3cc:	7c 01       	movw	r14, r24
     3ce:	01 e0       	ldi	r16, 0x01	; 1
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	47 e8       	ldi	r20, 0x87	; 135
     3d6:	50 e0       	ldi	r21, 0x00	; 0
     3d8:	6a e2       	ldi	r22, 0x2A	; 42
     3da:	72 e0       	ldi	r23, 0x02	; 2
     3dc:	8a e0       	ldi	r24, 0x0A	; 10
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <xTaskGenericCreate>
	

		
		vTaskStartScheduler();
     3e4:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <vTaskStartScheduler>
     3e8:	c1 cf       	rjmp	.-126    	; 0x36c <main+0x14>

000003ea <myItoa>:
}


// either 2 or 3 digit +ve int
void myItoa(int input, char * buffer)
{
     3ea:	9c 01       	movw	r18, r24
     3ec:	fb 01       	movw	r30, r22
	int temp = input;
	input /= 100; // get 100s digit
     3ee:	64 e6       	ldi	r22, 0x64	; 100
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <__divmodhi4>
	
	if(input)
     3f6:	61 15       	cp	r22, r1
     3f8:	71 05       	cpc	r23, r1
     3fa:	21 f0       	breq	.+8      	; 0x404 <myItoa+0x1a>
		*buffer++ = input + '0';
     3fc:	80 e3       	ldi	r24, 0x30	; 48
     3fe:	86 0f       	add	r24, r22
     400:	80 83       	st	Z, r24
     402:	31 96       	adiw	r30, 0x01	; 1
		
	temp = temp - input * 100; // get remainder
     404:	4c e9       	ldi	r20, 0x9C	; 156
     406:	46 03       	mulsu	r20, r22
     408:	c0 01       	movw	r24, r0
     40a:	47 9f       	mul	r20, r23
     40c:	90 0d       	add	r25, r0
     40e:	11 24       	eor	r1, r1
     410:	28 0f       	add	r18, r24
     412:	39 1f       	adc	r19, r25
	
	
	input = temp / 10; // get 10s digit
     414:	c9 01       	movw	r24, r18
     416:	6a e0       	ldi	r22, 0x0A	; 10
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <__divmodhi4>
	*buffer++ = input + '0';
     41e:	80 e3       	ldi	r24, 0x30	; 48
     420:	86 0f       	add	r24, r22
     422:	80 83       	st	Z, r24
	 
	 input = temp - input * 10; // get 1s digit
     424:	8a e0       	ldi	r24, 0x0A	; 10
     426:	68 9f       	mul	r22, r24
     428:	20 19       	sub	r18, r0
     42a:	11 24       	eor	r1, r1
	 *buffer++ = input + '0';
     42c:	20 5d       	subi	r18, 0xD0	; 208
     42e:	21 83       	std	Z+1, r18	; 0x01
	 
	 *buffer = '\0';
     430:	12 82       	std	Z+2, r1	; 0x02
     432:	08 95       	ret

00000434 <obstacleSend>:
	sei(); // enable interrupts..
}


void obstacleSend(char deviceBlocked, int reading)
{
     434:	1f 93       	push	r17
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	00 d0       	rcall	.+0      	; 0x43c <obstacleSend+0x8>
     43c:	1f 92       	push	r1
     43e:	1f 92       	push	r1
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
     444:	18 2f       	mov	r17, r24
     446:	cb 01       	movw	r24, r22
	obstacleStruct obstacleInfo;
	
	
	
	if(deviceBlocked)
     448:	11 23       	and	r17, r17
     44a:	89 f0       	breq	.+34     	; 0x46e <obstacleSend+0x3a>
	{
		myItoa(reading, obstacleInfo.data); // convert to ascii
     44c:	be 01       	movw	r22, r28
     44e:	6e 5f       	subi	r22, 0xFE	; 254
     450:	7f 4f       	sbci	r23, 0xFF	; 255
     452:	cb df       	rcall	.-106    	; 0x3ea <myItoa>
		
		obstacleInfo.deviceID = deviceBlocked;
     454:	19 83       	std	Y+1, r17	; 0x01
		
		xQueueSendToBack(queueObstacleData, &obstacleInfo, portMAX_DELAY); // send data to queueData
     456:	20 e0       	ldi	r18, 0x00	; 0
     458:	4f ef       	ldi	r20, 0xFF	; 255
     45a:	5f ef       	ldi	r21, 0xFF	; 255
     45c:	be 01       	movw	r22, r28
     45e:	6f 5f       	subi	r22, 0xFF	; 255
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	80 91 8b 08 	lds	r24, 0x088B
     466:	90 91 8c 08 	lds	r25, 0x088C
     46a:	0e 94 00 0c 	call	0x1800	; 0x1800 <xQueueGenericSend>
	}
}
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	0f 90       	pop	r0
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	1f 91       	pop	r17
     47e:	08 95       	ret

00000480 <sendObstacleDetected>:



// Queue the obstacle to send..
void sendObstacleDetected(char obstacleDetected, char * deviceBlocked, int frontSonar, int leftSonar, int rightSonar, int btmIR, int topSonar)
{
     480:	6f 92       	push	r6
     482:	7f 92       	push	r7
     484:	8f 92       	push	r8
     486:	9f 92       	push	r9
     488:	af 92       	push	r10
     48a:	bf 92       	push	r11
     48c:	cf 92       	push	r12
     48e:	df 92       	push	r13
     490:	ef 92       	push	r14
     492:	ff 92       	push	r15
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	1f 92       	push	r1
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	89 83       	std	Y+1, r24	; 0x01
     4a4:	5b 01       	movw	r10, r22
     4a6:	3a 01       	movw	r6, r20
     4a8:	49 01       	movw	r8, r18
	//if(obstacleDetected > 0)
	{
		
		xQueueSendToBack(queueObstacleNumber,  &obstacleDetected, portMAX_DELAY); // send obstacle...
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	4f ef       	ldi	r20, 0xFF	; 255
     4ae:	5f ef       	ldi	r21, 0xFF	; 255
     4b0:	be 01       	movw	r22, r28
     4b2:	6f 5f       	subi	r22, 0xFF	; 255
     4b4:	7f 4f       	sbci	r23, 0xFF	; 255
     4b6:	80 91 89 08 	lds	r24, 0x0889
     4ba:	90 91 8a 08 	lds	r25, 0x088A
     4be:	0e 94 00 0c 	call	0x1800	; 0x1800 <xQueueGenericSend>
		
		obstacleSend(deviceBlocked[FRONT_DEVICE], frontSonar);
     4c2:	b3 01       	movw	r22, r6
     4c4:	f5 01       	movw	r30, r10
     4c6:	80 81       	ld	r24, Z
     4c8:	b5 df       	rcall	.-150    	; 0x434 <obstacleSend>

		obstacleSend(deviceBlocked[LEFT_DEVICE], leftSonar);
     4ca:	b4 01       	movw	r22, r8
     4cc:	f5 01       	movw	r30, r10
     4ce:	81 81       	ldd	r24, Z+1	; 0x01
     4d0:	b1 df       	rcall	.-158    	; 0x434 <obstacleSend>

		obstacleSend(deviceBlocked[RIGHT_DEVICE], rightSonar);
     4d2:	b8 01       	movw	r22, r16
     4d4:	f5 01       	movw	r30, r10
     4d6:	82 81       	ldd	r24, Z+2	; 0x02
     4d8:	ad df       	rcall	.-166    	; 0x434 <obstacleSend>

		obstacleSend(deviceBlocked[BTM_DEVICE], btmIR);
     4da:	b7 01       	movw	r22, r14
     4dc:	f5 01       	movw	r30, r10
     4de:	83 81       	ldd	r24, Z+3	; 0x03
     4e0:	a9 df       	rcall	.-174    	; 0x434 <obstacleSend>
		
		obstacleSend(deviceBlocked[TOP_DEVICE], topSonar);
     4e2:	b6 01       	movw	r22, r12
     4e4:	f5 01       	movw	r30, r10
     4e6:	84 81       	ldd	r24, Z+4	; 0x04
     4e8:	a5 df       	rcall	.-182    	; 0x434 <obstacleSend>
		
	}
}
     4ea:	0f 90       	pop	r0
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	ff 90       	pop	r15
     4f6:	ef 90       	pop	r14
     4f8:	df 90       	pop	r13
     4fa:	cf 90       	pop	r12
     4fc:	bf 90       	pop	r11
     4fe:	af 90       	pop	r10
     500:	9f 90       	pop	r9
     502:	8f 90       	pop	r8
     504:	7f 90       	pop	r7
     506:	6f 90       	pop	r6
     508:	08 95       	ret

0000050a <Sonar_Task>:
	}
}


void Sonar_Task(void *p)
{
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	cd b7       	in	r28, 0x3d	; 61
     510:	de b7       	in	r29, 0x3e	; 62
     512:	a4 97       	sbiw	r28, 0x24	; 36
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	f8 94       	cli
     518:	de bf       	out	0x3e, r29	; 62
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	cd bf       	out	0x3d, r28	; 61
	TickType_t xLastWakeTime;
	char obstacleDetected = 0;
     51e:	1b 82       	std	Y+3, r1	; 0x03
	int topSonar, frontSonar, leftSonar, rightSonar, btmIR;
	int topSonarSample[SONAR_SAMPLE_SIZE] = {0}, frontSonarSample[SONAR_SAMPLE_SIZE] = {0}, leftSonarSample[SONAR_SAMPLE_SIZE] = {0}, rightSonarSample[SONAR_SAMPLE_SIZE] = {0};
     520:	86 e0       	ldi	r24, 0x06	; 6
     522:	fe 01       	movw	r30, r28
     524:	34 96       	adiw	r30, 0x04	; 4
     526:	df 01       	movw	r26, r30
     528:	98 2f       	mov	r25, r24
     52a:	1d 92       	st	X+, r1
     52c:	9a 95       	dec	r25
     52e:	e9 f7       	brne	.-6      	; 0x52a <Sonar_Task+0x20>
     530:	36 96       	adiw	r30, 0x06	; 6
     532:	df 01       	movw	r26, r30
     534:	98 2f       	mov	r25, r24
     536:	1d 92       	st	X+, r1
     538:	9a 95       	dec	r25
     53a:	e9 f7       	brne	.-6      	; 0x536 <Sonar_Task+0x2c>
     53c:	36 96       	adiw	r30, 0x06	; 6
     53e:	df 01       	movw	r26, r30
     540:	98 2f       	mov	r25, r24
     542:	1d 92       	st	X+, r1
     544:	9a 95       	dec	r25
     546:	e9 f7       	brne	.-6      	; 0x542 <Sonar_Task+0x38>
     548:	36 96       	adiw	r30, 0x06	; 6
     54a:	df 01       	movw	r26, r30
     54c:	1d 92       	st	X+, r1
     54e:	8a 95       	dec	r24
     550:	e9 f7       	brne	.-6      	; 0x54c <Sonar_Task+0x42>
	char deviceBlocked[5] = {0}; // flag to indicate if we should send the reading to RPI
     552:	36 96       	adiw	r30, 0x06	; 6
     554:	85 e0       	ldi	r24, 0x05	; 5
     556:	df 01       	movw	r26, r30
     558:	1d 92       	st	X+, r1
     55a:	8a 95       	dec	r24
     55c:	e9 f7       	brne	.-6      	; 0x558 <Sonar_Task+0x4e>
	
	int calibratedBtmIR = mySharpIR_Read(AN12); // get first value...
     55e:	84 e2       	ldi	r24, 0x24	; 36
     560:	8e d3       	rcall	.+1820   	; 0xc7e <mySharpIR_Read>
     562:	9a a3       	std	Y+34, r25	; 0x22
     564:	89 a3       	std	Y+33, r24	; 0x21
	
	xLastWakeTime = xTaskGetTickCount(); // get tick count
     566:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <xTaskGetTickCount>
     56a:	9a 83       	std	Y+2, r25	; 0x02
     56c:	89 83       	std	Y+1, r24	; 0x01
		
	while(1)
	{
		myMaxSonar_TopStart();
     56e:	be d1       	rcall	.+892    	; 0x8ec <myMaxSonar_TopStart>
		topSonar = myMaxSonar_getFilteredReading(myMaxSonar_Read(AN11), topSonarSample);
     570:	83 e2       	ldi	r24, 0x23	; 35
     572:	1c d2       	rcall	.+1080   	; 0x9ac <myMaxSonar_Read>
     574:	be 01       	movw	r22, r28
     576:	6c 5f       	subi	r22, 0xFC	; 252
     578:	7f 4f       	sbci	r23, 0xFF	; 255
     57a:	0f d2       	rcall	.+1054   	; 0x99a <myMaxSonar_getFilteredReading>
     57c:	9c a3       	std	Y+36, r25	; 0x24
     57e:	8b a3       	std	Y+35, r24	; 0x23
		
		myMaxSonar_BtmStart();
     580:	af d1       	rcall	.+862    	; 0x8e0 <myMaxSonar_BtmStart>
		frontSonar	= myMaxSonar_getFilteredReading(myMaxSonar_Read(AN15), frontSonarSample);
     582:	87 e2       	ldi	r24, 0x27	; 39
     584:	13 d2       	rcall	.+1062   	; 0x9ac <myMaxSonar_Read>
     586:	be 01       	movw	r22, r28
     588:	66 5f       	subi	r22, 0xF6	; 246
     58a:	7f 4f       	sbci	r23, 0xFF	; 255
     58c:	06 d2       	rcall	.+1036   	; 0x99a <myMaxSonar_getFilteredReading>
     58e:	3c 01       	movw	r6, r24
		leftSonar	= myMaxSonar_getFilteredReading(myMaxSonar_Read(AN14), leftSonarSample);
     590:	86 e2       	ldi	r24, 0x26	; 38
     592:	0c d2       	rcall	.+1048   	; 0x9ac <myMaxSonar_Read>
     594:	be 01       	movw	r22, r28
     596:	60 5f       	subi	r22, 0xF0	; 240
     598:	7f 4f       	sbci	r23, 0xFF	; 255
     59a:	ff d1       	rcall	.+1022   	; 0x99a <myMaxSonar_getFilteredReading>
     59c:	1c 01       	movw	r2, r24
		rightSonar	= myMaxSonar_getFilteredReading(myMaxSonar_Read(AN13), rightSonarSample); 
     59e:	85 e2       	ldi	r24, 0x25	; 37
     5a0:	05 d2       	rcall	.+1034   	; 0x9ac <myMaxSonar_Read>
     5a2:	be 01       	movw	r22, r28
     5a4:	6a 5e       	subi	r22, 0xEA	; 234
     5a6:	7f 4f       	sbci	r23, 0xFF	; 255
     5a8:	f8 d1       	rcall	.+1008   	; 0x99a <myMaxSonar_getFilteredReading>
     5aa:	2c 01       	movw	r4, r24
		
		btmIR		= mySharpIR_Read(AN12);	
     5ac:	84 e2       	ldi	r24, 0x24	; 36
     5ae:	67 d3       	rcall	.+1742   	; 0xc7e <mySharpIR_Read>
     5b0:	4c 01       	movw	r8, r24
		//frontSonar = myMaxSonar_Stabilizer(frontSonar, &prevFrontSonar);
		//leftSonar = myMaxSonar_Stabilizer(leftSonar, &prevLeftSonar);
		//rightSonar = myMaxSonar_Stabilizer(rightSonar, &prevRightSonar);
		
		
		mySharpIR_ReCalibrate(&calibratedBtmIR, btmIR); // attempt to re-calibrate btm ir sensor if stable enough..
     5b2:	bc 01       	movw	r22, r24
     5b4:	ce 01       	movw	r24, r28
     5b6:	81 96       	adiw	r24, 0x21	; 33
     5b8:	9b d3       	rcall	.+1846   	; 0xcf0 <mySharpIR_ReCalibrate>
	
		obstacleDetected = obstacleDetection(frontSonar, obstacleDetected, deviceBlocked, leftSonar, rightSonar, topSonar, calibratedBtmIR, btmIR);
     5ba:	c9 a0       	ldd	r12, Y+33	; 0x21
     5bc:	da a0       	ldd	r13, Y+34	; 0x22
     5be:	54 01       	movw	r10, r8
     5c0:	eb a0       	ldd	r14, Y+35	; 0x23
     5c2:	fc a0       	ldd	r15, Y+36	; 0x24
     5c4:	82 01       	movw	r16, r4
     5c6:	91 01       	movw	r18, r2
     5c8:	ae 01       	movw	r20, r28
     5ca:	44 5e       	subi	r20, 0xE4	; 228
     5cc:	5f 4f       	sbci	r21, 0xFF	; 255
     5ce:	6b 81       	ldd	r22, Y+3	; 0x03
     5d0:	c3 01       	movw	r24, r6
     5d2:	25 d3       	rcall	.+1610   	; 0xc1e <obstacleDetection>
     5d4:	8b 83       	std	Y+3, r24	; 0x03
		obstacleAvoidance(frontSonar, leftSonar, rightSonar, btmIR, deviceBlocked);
     5d6:	8e 01       	movw	r16, r28
     5d8:	04 5e       	subi	r16, 0xE4	; 228
     5da:	1f 4f       	sbci	r17, 0xFF	; 255
     5dc:	94 01       	movw	r18, r8
     5de:	a2 01       	movw	r20, r4
     5e0:	b1 01       	movw	r22, r2
     5e2:	c3 01       	movw	r24, r6
     5e4:	a6 d2       	rcall	.+1356   	; 0xb32 <obstacleAvoidance>
		
		// for debuggin to print all...
		cheatPrintAll(deviceBlocked, &obstacleDetected); 
     5e6:	be 01       	movw	r22, r28
     5e8:	6d 5f       	subi	r22, 0xFD	; 253
     5ea:	7f 4f       	sbci	r23, 0xFF	; 255
     5ec:	c8 01       	movw	r24, r16
     5ee:	08 d3       	rcall	.+1552   	; 0xc00 <cheatPrintAll>
		// remove top statement... when not debuggin..
		
		sendObstacleDetected(obstacleDetected, deviceBlocked, frontSonar, leftSonar, rightSonar, btmIR, topSonar);
     5f0:	cb a0       	ldd	r12, Y+35	; 0x23
     5f2:	dc a0       	ldd	r13, Y+36	; 0x24
     5f4:	74 01       	movw	r14, r8
     5f6:	82 01       	movw	r16, r4
     5f8:	91 01       	movw	r18, r2
     5fa:	a3 01       	movw	r20, r6
     5fc:	be 01       	movw	r22, r28
     5fe:	64 5e       	subi	r22, 0xE4	; 228
     600:	7f 4f       	sbci	r23, 0xFF	; 255
     602:	8b 81       	ldd	r24, Y+3	; 0x03
     604:	3d df       	rcall	.-390    	; 0x480 <sendObstacleDetected>
	
		// reset the variables back to 0
		obstacleDetected = 0; 
     606:	1b 82       	std	Y+3, r1	; 0x03
		deviceBlocked[0] = deviceBlocked[1] = deviceBlocked[2] = deviceBlocked[3] = deviceBlocked[4] = 0;
     608:	18 a2       	std	Y+32, r1	; 0x20
     60a:	1f 8e       	std	Y+31, r1	; 0x1f
     60c:	1e 8e       	std	Y+30, r1	; 0x1e
     60e:	1d 8e       	std	Y+29, r1	; 0x1d
     610:	1c 8e       	std	Y+28, r1	; 0x1c
		
		vTaskDelayUntil( &xLastWakeTime, 150);  // delay 150 ms for 3 sonar chain...
     612:	66 e9       	ldi	r22, 0x96	; 150
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	ce 01       	movw	r24, r28
     618:	01 96       	adiw	r24, 0x01	; 1
     61a:	0e 94 27 11 	call	0x224e	; 0x224e <vTaskDelayUntil>
     61e:	a7 cf       	rjmp	.-178    	; 0x56e <Sonar_Task+0x64>

00000620 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     626:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     62a:	80 91 39 02 	lds	r24, 0x0239
     62e:	90 91 3a 02 	lds	r25, 0x023A
     632:	89 2b       	or	r24, r25
     634:	31 f4       	brne	.+12     	; 0x642 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     636:	8e e3       	ldi	r24, 0x3E	; 62
     638:	92 e0       	ldi	r25, 0x02	; 2
     63a:	90 93 3a 02 	sts	0x023A, r25
     63e:	80 93 39 02 	sts	0x0239, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     642:	40 91 3b 02 	lds	r20, 0x023B
     646:	50 91 3c 02 	lds	r21, 0x023C
     64a:	9e 01       	movw	r18, r28
     64c:	24 0f       	add	r18, r20
     64e:	35 1f       	adc	r19, r21
     650:	2b 3d       	cpi	r18, 0xDB	; 219
     652:	85 e0       	ldi	r24, 0x05	; 5
     654:	38 07       	cpc	r19, r24
     656:	70 f4       	brcc	.+28     	; 0x674 <pvPortMalloc+0x54>
     658:	42 17       	cp	r20, r18
     65a:	53 07       	cpc	r21, r19
     65c:	70 f4       	brcc	.+28     	; 0x67a <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     65e:	c0 91 39 02 	lds	r28, 0x0239
     662:	d0 91 3a 02 	lds	r29, 0x023A
     666:	c4 0f       	add	r28, r20
     668:	d5 1f       	adc	r29, r21
			xNextFreeByte += xWantedSize;
     66a:	30 93 3c 02 	sts	0x023C, r19
     66e:	20 93 3b 02 	sts	0x023B, r18
     672:	05 c0       	rjmp	.+10     	; 0x67e <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     674:	c0 e0       	ldi	r28, 0x00	; 0
     676:	d0 e0       	ldi	r29, 0x00	; 0
     678:	02 c0       	rjmp	.+4      	; 0x67e <pvPortMalloc+0x5e>
     67a:	c0 e0       	ldi	r28, 0x00	; 0
     67c:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     67e:	0e 94 a6 10 	call	0x214c	; 0x214c <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     682:	ce 01       	movw	r24, r28
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	08 95       	ret

0000068a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     68a:	08 95       	ret

0000068c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     68c:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     68e:	03 96       	adiw	r24, 0x03	; 3
     690:	92 83       	std	Z+2, r25	; 0x02
     692:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     694:	2f ef       	ldi	r18, 0xFF	; 255
     696:	3f ef       	ldi	r19, 0xFF	; 255
     698:	34 83       	std	Z+4, r19	; 0x04
     69a:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     69c:	96 83       	std	Z+6, r25	; 0x06
     69e:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6a0:	90 87       	std	Z+8, r25	; 0x08
     6a2:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     6a4:	10 82       	st	Z, r1
     6a6:	08 95       	ret

000006a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     6a8:	fc 01       	movw	r30, r24
     6aa:	11 86       	std	Z+9, r1	; 0x09
     6ac:	10 86       	std	Z+8, r1	; 0x08
     6ae:	08 95       	ret

000006b0 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	9c 01       	movw	r18, r24
     6b6:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     6b8:	dc 01       	movw	r26, r24
     6ba:	11 96       	adiw	r26, 0x01	; 1
     6bc:	cd 91       	ld	r28, X+
     6be:	dc 91       	ld	r29, X
     6c0:	12 97       	sbiw	r26, 0x02	; 2

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     6c2:	d3 83       	std	Z+3, r29	; 0x03
     6c4:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     6c6:	8c 81       	ldd	r24, Y+4	; 0x04
     6c8:	9d 81       	ldd	r25, Y+5	; 0x05
     6ca:	95 83       	std	Z+5, r25	; 0x05
     6cc:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxPrevious->pxNext = pxNewListItem;
     6ce:	8c 81       	ldd	r24, Y+4	; 0x04
     6d0:	9d 81       	ldd	r25, Y+5	; 0x05
     6d2:	dc 01       	movw	r26, r24
     6d4:	13 96       	adiw	r26, 0x03	; 3
     6d6:	7c 93       	st	X, r23
     6d8:	6e 93       	st	-X, r22
     6da:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     6dc:	7d 83       	std	Y+5, r23	; 0x05
     6de:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     6e0:	31 87       	std	Z+9, r19	; 0x09
     6e2:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     6e4:	f9 01       	movw	r30, r18
     6e6:	80 81       	ld	r24, Z
     6e8:	8f 5f       	subi	r24, 0xFF	; 255
     6ea:	80 83       	st	Z, r24
}
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	08 95       	ret

000006f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     6f8:	48 81       	ld	r20, Y
     6fa:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     6fc:	4f 3f       	cpi	r20, 0xFF	; 255
     6fe:	2f ef       	ldi	r18, 0xFF	; 255
     700:	52 07       	cpc	r21, r18
     702:	21 f4       	brne	.+8      	; 0x70c <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     704:	fc 01       	movw	r30, r24
     706:	a7 81       	ldd	r26, Z+7	; 0x07
     708:	b0 85       	ldd	r27, Z+8	; 0x08
     70a:	0d c0       	rjmp	.+26     	; 0x726 <vListInsert+0x34>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     70c:	dc 01       	movw	r26, r24
     70e:	13 96       	adiw	r26, 0x03	; 3
     710:	12 96       	adiw	r26, 0x02	; 2
     712:	ed 91       	ld	r30, X+
     714:	fc 91       	ld	r31, X
     716:	13 97       	sbiw	r26, 0x03	; 3
     718:	20 81       	ld	r18, Z
     71a:	31 81       	ldd	r19, Z+1	; 0x01
     71c:	42 17       	cp	r20, r18
     71e:	53 07       	cpc	r21, r19
     720:	10 f0       	brcs	.+4      	; 0x726 <vListInsert+0x34>
     722:	df 01       	movw	r26, r30
     724:	f5 cf       	rjmp	.-22     	; 0x710 <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     726:	12 96       	adiw	r26, 0x02	; 2
     728:	ed 91       	ld	r30, X+
     72a:	fc 91       	ld	r31, X
     72c:	13 97       	sbiw	r26, 0x03	; 3
     72e:	fb 83       	std	Y+3, r31	; 0x03
     730:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     732:	d5 83       	std	Z+5, r29	; 0x05
     734:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     736:	bd 83       	std	Y+5, r27	; 0x05
     738:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     73a:	13 96       	adiw	r26, 0x03	; 3
     73c:	dc 93       	st	X, r29
     73e:	ce 93       	st	-X, r28
     740:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     742:	99 87       	std	Y+9, r25	; 0x09
     744:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     746:	fc 01       	movw	r30, r24
     748:	20 81       	ld	r18, Z
     74a:	2f 5f       	subi	r18, 0xFF	; 255
     74c:	20 83       	st	Z, r18
}
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	08 95       	ret

00000754 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     75a:	a0 85       	ldd	r26, Z+8	; 0x08
     75c:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     75e:	c2 81       	ldd	r28, Z+2	; 0x02
     760:	d3 81       	ldd	r29, Z+3	; 0x03
     762:	84 81       	ldd	r24, Z+4	; 0x04
     764:	95 81       	ldd	r25, Z+5	; 0x05
     766:	9d 83       	std	Y+5, r25	; 0x05
     768:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     76a:	c4 81       	ldd	r28, Z+4	; 0x04
     76c:	d5 81       	ldd	r29, Z+5	; 0x05
     76e:	82 81       	ldd	r24, Z+2	; 0x02
     770:	93 81       	ldd	r25, Z+3	; 0x03
     772:	9b 83       	std	Y+3, r25	; 0x03
     774:	8a 83       	std	Y+2, r24	; 0x02

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     776:	11 96       	adiw	r26, 0x01	; 1
     778:	cd 91       	ld	r28, X+
     77a:	dc 91       	ld	r29, X
     77c:	12 97       	sbiw	r26, 0x02	; 2
     77e:	ce 17       	cp	r28, r30
     780:	df 07       	cpc	r29, r31
     782:	31 f4       	brne	.+12     	; 0x790 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     784:	8c 81       	ldd	r24, Y+4	; 0x04
     786:	9d 81       	ldd	r25, Y+5	; 0x05
     788:	12 96       	adiw	r26, 0x02	; 2
     78a:	9c 93       	st	X, r25
     78c:	8e 93       	st	-X, r24
     78e:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     790:	11 86       	std	Z+9, r1	; 0x09
     792:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     794:	8c 91       	ld	r24, X
     796:	81 50       	subi	r24, 0x01	; 1
     798:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	08 95       	ret

000007a0 <__vector_9>:
volatile int us_tickLapsed;
SemaphoreHandle_t semaReadReady;


ISR(PCINT0_vect) //Digital pin 50
{
     7a0:	1f 92       	push	r1
     7a2:	0f 92       	push	r0
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	0f 92       	push	r0
     7a8:	11 24       	eor	r1, r1
     7aa:	0b b6       	in	r0, 0x3b	; 59
     7ac:	0f 92       	push	r0
     7ae:	2f 93       	push	r18
     7b0:	3f 93       	push	r19
     7b2:	4f 93       	push	r20
     7b4:	5f 93       	push	r21
     7b6:	6f 93       	push	r22
     7b8:	7f 93       	push	r23
     7ba:	8f 93       	push	r24
     7bc:	9f 93       	push	r25
     7be:	af 93       	push	r26
     7c0:	bf 93       	push	r27
     7c2:	ef 93       	push	r30
     7c4:	ff 93       	push	r31
		
	if(HC_Echo_Read)
     7c6:	1b 9b       	sbis	0x03, 3	; 3
     7c8:	0d c0       	rjmp	.+26     	; 0x7e4 <__vector_9+0x44>
	{
		us_tickStart = myTimer_Read();
     7ca:	01 d3       	rcall	.+1538   	; 0xdce <myTimer_Read>
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	90 93 92 08 	sts	0x0892, r25
     7d2:	80 93 91 08 	sts	0x0891, r24
		ms_tickStart = xTaskGetTickCountFromISR();
     7d6:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <xTaskGetTickCountFromISR>
     7da:	90 93 8e 08 	sts	0x088E, r25
     7de:	80 93 8d 08 	sts	0x088D, r24
     7e2:	56 c0       	rjmp	.+172    	; 0x890 <__vector_9+0xf0>
	}	
	else if (!(HC_Echo_Read))
     7e4:	1b 99       	sbic	0x03, 3	; 3
     7e6:	54 c0       	rjmp	.+168    	; 0x890 <__vector_9+0xf0>
	{

		if ((ms_tickEnd = xTaskGetTickCountFromISR()) < ms_tickStart)
     7e8:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <xTaskGetTickCountFromISR>
     7ec:	90 93 98 08 	sts	0x0898, r25
     7f0:	80 93 97 08 	sts	0x0897, r24
     7f4:	20 91 8d 08 	lds	r18, 0x088D
     7f8:	30 91 8e 08 	lds	r19, 0x088E
     7fc:	82 17       	cp	r24, r18
     7fe:	93 07       	cpc	r25, r19
     800:	4c f4       	brge	.+18     	; 0x814 <__vector_9+0x74>
			ms_tickEnd += 65535;
     802:	80 91 97 08 	lds	r24, 0x0897
     806:	90 91 98 08 	lds	r25, 0x0898
     80a:	01 97       	sbiw	r24, 0x01	; 1
     80c:	90 93 98 08 	sts	0x0898, r25
     810:	80 93 97 08 	sts	0x0897, r24
		
		if ((us_tickEnd = myTimer_Read()) < us_tickStart) // if smaller then add...
     814:	dc d2       	rcall	.+1464   	; 0xdce <myTimer_Read>
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	90 93 9a 08 	sts	0x089A, r25
     81c:	80 93 99 08 	sts	0x0899, r24
     820:	20 91 91 08 	lds	r18, 0x0891
     824:	30 91 92 08 	lds	r19, 0x0892
     828:	82 17       	cp	r24, r18
     82a:	93 07       	cpc	r25, r19
     82c:	54 f4       	brge	.+20     	; 0x842 <__vector_9+0xa2>
			us_tickEnd += MAX_TICKS;
     82e:	80 91 99 08 	lds	r24, 0x0899
     832:	90 91 9a 08 	lds	r25, 0x089A
     836:	86 50       	subi	r24, 0x06	; 6
     838:	9f 4f       	sbci	r25, 0xFF	; 255
     83a:	90 93 9a 08 	sts	0x089A, r25
     83e:	80 93 99 08 	sts	0x0899, r24
		
			
			
		us_tickLapsed = us_tickEnd - us_tickStart;
     842:	80 91 99 08 	lds	r24, 0x0899
     846:	90 91 9a 08 	lds	r25, 0x089A
     84a:	20 91 91 08 	lds	r18, 0x0891
     84e:	30 91 92 08 	lds	r19, 0x0892
     852:	82 1b       	sub	r24, r18
     854:	93 0b       	sbc	r25, r19
     856:	90 93 94 08 	sts	0x0894, r25
     85a:	80 93 93 08 	sts	0x0893, r24
		ms_tickLapsed = ms_tickEnd - ms_tickStart;
     85e:	80 91 97 08 	lds	r24, 0x0897
     862:	90 91 98 08 	lds	r25, 0x0898
     866:	20 91 8d 08 	lds	r18, 0x088D
     86a:	30 91 8e 08 	lds	r19, 0x088E
     86e:	82 1b       	sub	r24, r18
     870:	93 0b       	sbc	r25, r19
     872:	90 93 90 08 	sts	0x0890, r25
     876:	80 93 8f 08 	sts	0x088F, r24
		
		xSemaphoreGiveFromISR(semaReadReady, pdFALSE);
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	40 e0       	ldi	r20, 0x00	; 0
     87e:	50 e0       	ldi	r21, 0x00	; 0
     880:	60 e0       	ldi	r22, 0x00	; 0
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	80 91 95 08 	lds	r24, 0x0895
     888:	90 91 96 08 	lds	r25, 0x0896
     88c:	0e 94 be 0c 	call	0x197c	; 0x197c <xQueueGenericSendFromISR>
	}	
}
     890:	ff 91       	pop	r31
     892:	ef 91       	pop	r30
     894:	bf 91       	pop	r27
     896:	af 91       	pop	r26
     898:	9f 91       	pop	r25
     89a:	8f 91       	pop	r24
     89c:	7f 91       	pop	r23
     89e:	6f 91       	pop	r22
     8a0:	5f 91       	pop	r21
     8a2:	4f 91       	pop	r20
     8a4:	3f 91       	pop	r19
     8a6:	2f 91       	pop	r18
     8a8:	0f 90       	pop	r0
     8aa:	0b be       	out	0x3b, r0	; 59
     8ac:	0f 90       	pop	r0
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	0f 90       	pop	r0
     8b2:	1f 90       	pop	r1
     8b4:	18 95       	reti

000008b6 <myHcSonar_Init>:

void myHcSonar_Init()
{
	HC_Trigger_Init(); // set trigger as output
     8b6:	22 9a       	sbi	0x04, 2	; 4
	HC_Echo_Init(); // set echo as input
     8b8:	23 98       	cbi	0x04, 3	; 4
		
	PCICR |= (1<<PCIE0); // enable control for PCINT 7:0
     8ba:	e8 e6       	ldi	r30, 0x68	; 104
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	80 81       	ld	r24, Z
     8c0:	81 60       	ori	r24, 0x01	; 1
     8c2:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT3); // set interrupt for PCINT3
     8c4:	eb e6       	ldi	r30, 0x6B	; 107
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	80 81       	ld	r24, Z
     8ca:	88 60       	ori	r24, 0x08	; 8
     8cc:	80 83       	st	Z, r24
	
	semaReadReady = xSemaphoreCreateBinary();
     8ce:	43 e0       	ldi	r20, 0x03	; 3
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	68 d7       	rcall	.+3792   	; 0x17a6 <xQueueGenericCreate>
     8d6:	90 93 96 08 	sts	0x0896, r25
     8da:	80 93 95 08 	sts	0x0895, r24
     8de:	08 95       	ret

000008e0 <myMaxSonar_BtmStart>:
#include <myADC.h>
#include <myTimer.h>

void myMaxSonar_BtmStart()
{
	MaxSonar_BtmTriggerStart();
     8e0:	a1 9a       	sbi	0x14, 1	; 20
	
	myTimer_DelayMicro(25); // delay 25 micro seconds...
     8e2:	89 e1       	ldi	r24, 0x19	; 25
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	75 d2       	rcall	.+1258   	; 0xdd2 <myTimer_DelayMicro>
	//vTaskDelay(5000);	// delay 1ms using vTaskDelay
	
	MaxSonar_BtmTriggerStop();
     8e8:	a1 98       	cbi	0x14, 1	; 20
     8ea:	08 95       	ret

000008ec <myMaxSonar_TopStart>:
}

void myMaxSonar_TopStart()
{
	MaxSonar_TopTriggerStart();
     8ec:	a0 9a       	sbi	0x14, 0	; 20
	
	myTimer_DelayMicro(25); // delay 25 micro seconds...
     8ee:	89 e1       	ldi	r24, 0x19	; 25
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	6f d2       	rcall	.+1246   	; 0xdd2 <myTimer_DelayMicro>
	//vTaskDelay(5000);	// delay 1ms using vTaskDelay
	
	MaxSonar_TopTriggerStop();
     8f4:	a0 98       	cbi	0x14, 0	; 20
     8f6:	08 95       	ret

000008f8 <myMaxSonar_extractMedian>:
}

// extract the median of 3 values in the sample array
int myMaxSonar_extractMedian(int * sample)
{
     8f8:	fc 01       	movw	r30, r24
	if (sample[0] > sample[1])
     8fa:	80 81       	ld	r24, Z
     8fc:	91 81       	ldd	r25, Z+1	; 0x01
     8fe:	22 81       	ldd	r18, Z+2	; 0x02
     900:	33 81       	ldd	r19, Z+3	; 0x03
     902:	28 17       	cp	r18, r24
     904:	39 07       	cpc	r19, r25
     906:	54 f4       	brge	.+20     	; 0x91c <myMaxSonar_extractMedian+0x24>
	{
		if (sample[1] > sample[2])
     908:	44 81       	ldd	r20, Z+4	; 0x04
     90a:	55 81       	ldd	r21, Z+5	; 0x05
     90c:	42 17       	cp	r20, r18
     90e:	53 07       	cpc	r21, r19
     910:	84 f0       	brlt	.+32     	; 0x932 <myMaxSonar_extractMedian+0x3a>
     912:	48 17       	cp	r20, r24
     914:	59 07       	cpc	r21, r25
     916:	74 f4       	brge	.+28     	; 0x934 <myMaxSonar_extractMedian+0x3c>
     918:	ca 01       	movw	r24, r20
     91a:	08 95       	ret
			return sample[0];
		}
	}
	else 
	{
		if (sample[0] > sample[2])
     91c:	44 81       	ldd	r20, Z+4	; 0x04
     91e:	55 81       	ldd	r21, Z+5	; 0x05
     920:	48 17       	cp	r20, r24
     922:	59 07       	cpc	r21, r25
     924:	3c f0       	brlt	.+14     	; 0x934 <myMaxSonar_extractMedian+0x3c>
     926:	ca 01       	movw	r24, r20
     928:	24 17       	cp	r18, r20
     92a:	35 07       	cpc	r19, r21
     92c:	1c f4       	brge	.+6      	; 0x934 <myMaxSonar_extractMedian+0x3c>
     92e:	c9 01       	movw	r24, r18
     930:	08 95       	ret
{
	if (sample[0] > sample[1])
	{
		if (sample[1] > sample[2])
		{
			return sample[1];
     932:	c9 01       	movw	r24, r18
		else 
		{
			return sample[1];
		}
	}
}
     934:	08 95       	ret

00000936 <myMaxSonar_Stabilizer>:
}

// return currentReading if it is more than the noise threshold..
int myMaxSonar_Stabilizer(const int currentReading, int prevReading)
{
	if(currentReading > (prevReading + NOISE_RANGE) || currentReading < (prevReading - NOISE_RANGE))
     936:	9b 01       	movw	r18, r22
     938:	28 5f       	subi	r18, 0xF8	; 248
     93a:	3f 4f       	sbci	r19, 0xFF	; 255
     93c:	28 17       	cp	r18, r24
     93e:	39 07       	cpc	r19, r25
     940:	3c f0       	brlt	.+14     	; 0x950 <myMaxSonar_Stabilizer+0x1a>
     942:	20 51       	subi	r18, 0x10	; 16
     944:	31 09       	sbc	r19, r1
     946:	82 17       	cp	r24, r18
     948:	93 07       	cpc	r25, r19
     94a:	14 f0       	brlt	.+4      	; 0x950 <myMaxSonar_Stabilizer+0x1a>
	{
		return currentReading; // when current reading exceed noise range.... return current reading
	}
	else
		return prevReading; // return prevReading if in noise range..
     94c:	86 2f       	mov	r24, r22
     94e:	97 2f       	mov	r25, r23
}
     950:	08 95       	ret

00000952 <myMaxSonar_AddSample>:

}

// Add sample circular buffer way...
void myMaxSonar_AddSample(int currentReading ,int *sample)
{
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	eb 01       	movw	r28, r22
	static uint8_t i = SONAR_SAMPLE_SIZE; // start with prev reading index first.. 
	 
	currentReading = myMaxSonar_Stabilizer(currentReading, sample[i]);
     95c:	00 91 00 02 	lds	r16, 0x0200
     960:	10 e0       	ldi	r17, 0x00	; 0
     962:	f8 01       	movw	r30, r16
     964:	ee 0f       	add	r30, r30
     966:	ff 1f       	adc	r31, r31
     968:	e6 0f       	add	r30, r22
     96a:	f7 1f       	adc	r31, r23
     96c:	60 81       	ld	r22, Z
     96e:	71 81       	ldd	r23, Z+1	; 0x01
     970:	e2 df       	rcall	.-60     	; 0x936 <myMaxSonar_Stabilizer>
     972:	9c 01       	movw	r18, r24
	
	i = (i+1) % SONAR_SAMPLE_SIZE; // at correct index already..
     974:	c8 01       	movw	r24, r16
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	63 e0       	ldi	r22, 0x03	; 3
     97a:	70 e0       	ldi	r23, 0x00	; 0
     97c:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <__divmodhi4>
     980:	80 93 00 02 	sts	0x0200, r24
	
	sample[i] = currentReading; //store..
     984:	88 0f       	add	r24, r24
     986:	99 1f       	adc	r25, r25
     988:	c8 0f       	add	r28, r24
     98a:	d9 1f       	adc	r29, r25
     98c:	39 83       	std	Y+1, r19	; 0x01
     98e:	28 83       	st	Y, r18
}
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	0f 91       	pop	r16
     998:	08 95       	ret

0000099a <myMaxSonar_getFilteredReading>:
}


// Return filtered reading of maxSonar (Median of 3 values, with noise eliminated)
int myMaxSonar_getFilteredReading(int currentReading, int *sample)
{
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	eb 01       	movw	r28, r22
	//currentReading = myMaxSonar_Stabilizer(currentReading, prevReading);
	myMaxSonar_AddSample(currentReading, sample);
     9a0:	d8 df       	rcall	.-80     	; 0x952 <myMaxSonar_AddSample>
	return myMaxSonar_extractMedian(sample);
     9a2:	ce 01       	movw	r24, r28
     9a4:	a9 df       	rcall	.-174    	; 0x8f8 <myMaxSonar_extractMedian>

}
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <myMaxSonar_Read>:
// Return distance in cm
int myMaxSonar_Read(char analogChannel)
{
	int reading = 0;
	
	int adcReading = myADC_analogRead(analogChannel);
     9ac:	ab d0       	rcall	.+342    	; 0xb04 <myADC_analogRead>
     9ae:	9c 01       	movw	r18, r24
	reading = adcReading /FLOAT_TO_CM; // get the decimal point of ADC
     9b0:	63 e0       	ldi	r22, 0x03	; 3
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <__divmodhi4>
	reading += adcReading; // add the exact adcReading
	
	return reading;
}
     9b8:	cb 01       	movw	r24, r22
     9ba:	82 0f       	add	r24, r18
     9bc:	93 1f       	adc	r25, r19
     9be:	08 95       	ret

000009c0 <__vector_29>:
volatile unsigned char adcReading_L;


/*ADC Conversion Complete Interrupt Service Routine (ISR)*/
ISR(ADC_vect)
{	
     9c0:	1f 92       	push	r1
     9c2:	0f 92       	push	r0
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	0f 92       	push	r0
     9c8:	11 24       	eor	r1, r1
     9ca:	0b b6       	in	r0, 0x3b	; 59
     9cc:	0f 92       	push	r0
     9ce:	2f 93       	push	r18
     9d0:	3f 93       	push	r19
     9d2:	4f 93       	push	r20
     9d4:	5f 93       	push	r21
     9d6:	6f 93       	push	r22
     9d8:	7f 93       	push	r23
     9da:	8f 93       	push	r24
     9dc:	9f 93       	push	r25
     9de:	af 93       	push	r26
     9e0:	bf 93       	push	r27
     9e2:	ef 93       	push	r30
     9e4:	ff 93       	push	r31
	adcReading_L = ADCL; // dont change the ORDER L first then H!!! Reading L will hold H value.
     9e6:	80 91 78 00 	lds	r24, 0x0078
     9ea:	80 93 9b 08 	sts	0x089B, r24
	adcReading_H = ADCH; // read value of H (not used, 640cm and 1280cm for the resolution)
     9ee:	80 91 79 00 	lds	r24, 0x0079
     9f2:	80 93 9c 08 	sts	0x089C, r24
	// give semaphore, dont run block task immediately..
	xSemaphoreGiveFromISR(semaReadADC, pdFALSE);
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	40 e0       	ldi	r20, 0x00	; 0
     9fa:	50 e0       	ldi	r21, 0x00	; 0
     9fc:	60 e0       	ldi	r22, 0x00	; 0
     9fe:	70 e0       	ldi	r23, 0x00	; 0
     a00:	80 91 9f 08 	lds	r24, 0x089F
     a04:	90 91 a0 08 	lds	r25, 0x08A0
     a08:	b9 d7       	rcall	.+3954   	; 0x197c <xQueueGenericSendFromISR>
}
     a0a:	ff 91       	pop	r31
     a0c:	ef 91       	pop	r30
     a0e:	bf 91       	pop	r27
     a10:	af 91       	pop	r26
     a12:	9f 91       	pop	r25
     a14:	8f 91       	pop	r24
     a16:	7f 91       	pop	r23
     a18:	6f 91       	pop	r22
     a1a:	5f 91       	pop	r21
     a1c:	4f 91       	pop	r20
     a1e:	3f 91       	pop	r19
     a20:	2f 91       	pop	r18
     a22:	0f 90       	pop	r0
     a24:	0b be       	out	0x3b, r0	; 59
     a26:	0f 90       	pop	r0
     a28:	0f be       	out	0x3f, r0	; 63
     a2a:	0f 90       	pop	r0
     a2c:	1f 90       	pop	r1
     a2e:	18 95       	reti

00000a30 <myADC_Init>:

void myADC_Init()
{
	
	ADCSRA = ( 1<<ADEN ) | ( 1<<ADIE ) | ADC_PRESCALER; // enable ADC, enable interrupt, set prescaler
     a30:	8f e8       	ldi	r24, 0x8F	; 143
     a32:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = 0; // No auto trigger (0 for ADATE), No analog compare... 
     a36:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = ( 1 << REFS0 ) ; // use AVCC as reference, right adjust (take LSB but not 2 MSB)
     a3a:	80 e4       	ldi	r24, 0x40	; 64
     a3c:	80 93 7c 00 	sts	0x007C, r24
	
	// initialize semaphore..
	semaReadADC = xSemaphoreCreateBinary();
     a40:	43 e0       	ldi	r20, 0x03	; 3
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	af d6       	rcall	.+3422   	; 0x17a6 <xQueueGenericCreate>
     a48:	90 93 a0 08 	sts	0x08A0, r25
     a4c:	80 93 9f 08 	sts	0x089F, r24
	semaGuardStartADC = xSemaphoreCreateMutex();
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	69 d7       	rcall	.+3794   	; 0x1926 <xQueueCreateMutex>
     a54:	90 93 9e 08 	sts	0x089E, r25
     a58:	80 93 9d 08 	sts	0x089D, r24
	xSemaphoreGive(semaGuardStartADC); // free to read at start.
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e0       	ldi	r21, 0x00	; 0
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	cc c6       	rjmp	.+3480   	; 0x1800 <xQueueGenericSend>
     a68:	08 95       	ret

00000a6a <myADC_startADC>:
	return myADC_readADC(channel);
}

// channel = AN0 to AN15, use the macro...
void myADC_startADC(char channel)
{
     a6a:	cf 93       	push	r28
     a6c:	c8 2f       	mov	r28, r24
	
	 //char buffer [10];	
	xSemaphoreTake(semaGuardStartADC, portMAX_DELAY); // guard against concurrent task starting adc at same time
     a6e:	20 e0       	ldi	r18, 0x00	; 0
     a70:	4f ef       	ldi	r20, 0xFF	; 255
     a72:	5f ef       	ldi	r21, 0xFF	; 255
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	80 91 9d 08 	lds	r24, 0x089D
     a7c:	90 91 9e 08 	lds	r25, 0x089E
     a80:	b7 d7       	rcall	.+3950   	; 0x19f0 <xQueueGenericReceive>
    ADMUX = ( ADMUX & 11100000 ) | ( channel & 0b00011111 ); // keep bit 5:7, set bit 0:4 as Mux
     a82:	ec e7       	ldi	r30, 0x7C	; 124
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	80 81       	ld	r24, Z
     a88:	9c 2f       	mov	r25, r28
     a8a:	9f 71       	andi	r25, 0x1F	; 31
     a8c:	80 76       	andi	r24, 0x60	; 96
     a8e:	89 2b       	or	r24, r25
     a90:	80 83       	st	Z, r24
	
	//transmitUSART0("ADMUX = ");
	//transmitUSART0(itoa(ADMUX, buffer, 2)); // debugging...
	//transmitUSART0(" \n");
	
	ADCSRB = ( ADCSRB & 11100000 ) | (( channel & 0b00100000 ) >> 2); // keep all bits except bit 3, set Mux @ bit 3
     a92:	eb e7       	ldi	r30, 0x7B	; 123
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	20 81       	ld	r18, Z
     a98:	c0 72       	andi	r28, 0x20	; 32
     a9a:	8c 2f       	mov	r24, r28
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	95 95       	asr	r25
     aa0:	87 95       	ror	r24
     aa2:	95 95       	asr	r25
     aa4:	87 95       	ror	r24
     aa6:	92 2f       	mov	r25, r18
     aa8:	90 76       	andi	r25, 0x60	; 96
     aaa:	89 2b       	or	r24, r25
     aac:	80 83       	st	Z, r24
	//transmitUSART0(itoa(ADCSRB, buffer, 2)); // debugging...
	//transmitUSART0(" \n");
	//
	
	//vTaskDelay(1);
	ADCSRA |= ( 1 << ADSC );	// READY TO SEND!!
     aae:	ea e7       	ldi	r30, 0x7A	; 122
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	80 81       	ld	r24, Z
     ab4:	80 64       	ori	r24, 0x40	; 64
     ab6:	80 83       	st	Z, r24
}
     ab8:	cf 91       	pop	r28
     aba:	08 95       	ret

00000abc <myADC_readADC>:

int myADC_readADC(char channel)
{
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
	int adcReading=0;
	xSemaphoreTake(semaReadADC, portMAX_DELAY); // wait for reading...
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	4f ef       	ldi	r20, 0xFF	; 255
     ac4:	5f ef       	ldi	r21, 0xFF	; 255
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	80 91 9f 08 	lds	r24, 0x089F
     ace:	90 91 a0 08 	lds	r25, 0x08A0
     ad2:	8e d7       	rcall	.+3868   	; 0x19f0 <xQueueGenericReceive>

	adcReading = ((adcReading_H & 0b11) << 8);
     ad4:	c0 91 9c 08 	lds	r28, 0x089C
     ad8:	c3 70       	andi	r28, 0x03	; 3
     ada:	d0 e0       	ldi	r29, 0x00	; 0
     adc:	dc 2f       	mov	r29, r28
     ade:	cc 27       	eor	r28, r28
	adcReading += adcReading_L;
     ae0:	80 91 9b 08 	lds	r24, 0x089B
     ae4:	c8 0f       	add	r28, r24
     ae6:	d1 1d       	adc	r29, r1

	xSemaphoreGive(semaGuardStartADC); // reading done, nxt task can start ADC
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	40 e0       	ldi	r20, 0x00	; 0
     aec:	50 e0       	ldi	r21, 0x00	; 0
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	70 e0       	ldi	r23, 0x00	; 0
     af2:	80 91 9d 08 	lds	r24, 0x089D
     af6:	90 91 9e 08 	lds	r25, 0x089E
     afa:	82 d6       	rcall	.+3332   	; 0x1800 <xQueueGenericSend>
	
	return adcReading;
     afc:	ce 01       	movw	r24, r28
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	08 95       	ret

00000b04 <myADC_analogRead>:
	xSemaphoreGive(semaGuardStartADC); // free to read at start.
}


int myADC_analogRead(char channel)
{
     b04:	cf 93       	push	r28
     b06:	c8 2f       	mov	r28, r24
	myADC_startADC(channel);
     b08:	b0 df       	rcall	.-160    	; 0xa6a <myADC_startADC>
	return myADC_readADC(channel);
     b0a:	8c 2f       	mov	r24, r28
     b0c:	d7 df       	rcall	.-82     	; 0xabc <myADC_readADC>
}
     b0e:	cf 91       	pop	r28
     b10:	08 95       	ret

00000b12 <detectStairs>:



char detectStairs(int calibratedBtmIR, int btmIR)
{
	if(btmIR > calibratedBtmIR + STAIRS_OFFSET || btmIR < calibratedBtmIR - STAIRS_OFFSET)
     b12:	9c 01       	movw	r18, r24
     b14:	24 5f       	subi	r18, 0xF4	; 244
     b16:	3f 4f       	sbci	r19, 0xFF	; 255
     b18:	26 17       	cp	r18, r22
     b1a:	37 07       	cpc	r19, r23
     b1c:	44 f0       	brlt	.+16     	; 0xb2e <detectStairs+0x1c>
     b1e:	28 51       	subi	r18, 0x18	; 24
     b20:	31 09       	sbc	r19, r1
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	62 17       	cp	r22, r18
     b26:	73 07       	cpc	r23, r19
     b28:	1c f0       	brlt	.+6      	; 0xb30 <detectStairs+0x1e>
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	08 95       	ret
	{
		return 1; // stairs found
     b2e:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		return 0; // no stairs
		
	}
}
     b30:	08 95       	ret

00000b32 <obstacleAvoidance>:


// Priority => BTM, Front, Side
void obstacleAvoidance(int frontSonar, int leftSonar, int rightSonar, int btmIR, char * deviceBlocked)
{
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
     b36:	f8 01       	movw	r30, r16
	
	if(deviceBlocked[BTM_DEVICE])
     b38:	83 81       	ldd	r24, Z+3	; 0x03
     b3a:	88 23       	and	r24, r24
     b3c:	39 f0       	breq	.+14     	; 0xb4c <obstacleAvoidance+0x1a>
	{
		// stairs detected
			MOTOR_LEFT_START();
     b3e:	74 9a       	sbi	0x0e, 4	; 14
			MOTOR_RIGHT_START();
     b40:	e2 e0       	ldi	r30, 0x02	; 2
     b42:	f1 e0       	ldi	r31, 0x01	; 1
     b44:	80 81       	ld	r24, Z
     b46:	80 61       	ori	r24, 0x10	; 16
     b48:	80 83       	st	Z, r24
     b4a:	57 c0       	rjmp	.+174    	; 0xbfa <obstacleAvoidance+0xc8>
	}
	else if(deviceBlocked[FRONT_DEVICE])
     b4c:	80 81       	ld	r24, Z
     b4e:	88 23       	and	r24, r24
     b50:	b1 f1       	breq	.+108    	; 0xbbe <obstacleAvoidance+0x8c>
	{
		// front sensor detected
		if(!deviceBlocked[LEFT_DEVICE] && !deviceBlocked[RIGHT_DEVICE])
     b52:	81 81       	ldd	r24, Z+1	; 0x01
     b54:	81 11       	cpse	r24, r1
     b56:	18 c0       	rjmp	.+48     	; 0xb88 <obstacleAvoidance+0x56>
     b58:	82 81       	ldd	r24, Z+2	; 0x02
     b5a:	81 11       	cpse	r24, r1
     b5c:	24 c0       	rjmp	.+72     	; 0xba6 <obstacleAvoidance+0x74>
		{
			// both not blocked... so select any side... (left safer to turn - see product)
				if(rightSonar > leftSonar + 14) // if right sonar greater than....
     b5e:	cb 01       	movw	r24, r22
     b60:	0e 96       	adiw	r24, 0x0e	; 14
     b62:	84 17       	cp	r24, r20
     b64:	95 07       	cpc	r25, r21
     b66:	3c f4       	brge	.+14     	; 0xb76 <obstacleAvoidance+0x44>
				{
					MOTOR_LEFT_STOP();
     b68:	74 98       	cbi	0x0e, 4	; 14
					MOTOR_RIGHT_START();
     b6a:	a2 e0       	ldi	r26, 0x02	; 2
     b6c:	b1 e0       	ldi	r27, 0x01	; 1
     b6e:	8c 91       	ld	r24, X
     b70:	80 61       	ori	r24, 0x10	; 16
     b72:	8c 93       	st	X, r24
     b74:	06 c0       	rjmp	.+12     	; 0xb82 <obstacleAvoidance+0x50>
				}
				else 
				{
					MOTOR_LEFT_START();
     b76:	74 9a       	sbi	0x0e, 4	; 14
					MOTOR_RIGHT_STOP();
     b78:	a2 e0       	ldi	r26, 0x02	; 2
     b7a:	b1 e0       	ldi	r27, 0x01	; 1
     b7c:	8c 91       	ld	r24, X
     b7e:	8f 7e       	andi	r24, 0xEF	; 239
     b80:	8c 93       	st	X, r24
					
				}
		}
		if(deviceBlocked[LEFT_DEVICE] && !(deviceBlocked[RIGHT_DEVICE]))
     b82:	81 81       	ldd	r24, Z+1	; 0x01
     b84:	88 23       	and	r24, r24
     b86:	b1 f1       	breq	.+108    	; 0xbf4 <obstacleAvoidance+0xc2>
     b88:	82 81       	ldd	r24, Z+2	; 0x02
     b8a:	81 11       	cpse	r24, r1
     b8c:	36 c0       	rjmp	.+108    	; 0xbfa <obstacleAvoidance+0xc8>
		{
			// left is blocked but not right
			if((rightSonar - leftSonar) > INDISTINGUISHABLE_RANGE) // if there's enough difference, prompt the user to move..
     b8e:	46 1b       	sub	r20, r22
     b90:	57 0b       	sbc	r21, r23
     b92:	49 30       	cpi	r20, 0x09	; 9
     b94:	51 05       	cpc	r21, r1
     b96:	8c f1       	brlt	.+98     	; 0xbfa <obstacleAvoidance+0xc8>
			{
				MOTOR_LEFT_STOP();
     b98:	74 98       	cbi	0x0e, 4	; 14
				MOTOR_RIGHT_START();	
     b9a:	e2 e0       	ldi	r30, 0x02	; 2
     b9c:	f1 e0       	ldi	r31, 0x01	; 1
     b9e:	80 81       	ld	r24, Z
     ba0:	80 61       	ori	r24, 0x10	; 16
     ba2:	80 83       	st	Z, r24
     ba4:	2a c0       	rjmp	.+84     	; 0xbfa <obstacleAvoidance+0xc8>
			}
		}
		else if (deviceBlocked[RIGHT_DEVICE] && !(deviceBlocked[LEFT_DEVICE]))
		{
			// right is blocked but not left..
			if((leftSonar - rightSonar) > INDISTINGUISHABLE_RANGE) // if there's enough different, prompt the user to move...
     ba6:	64 1b       	sub	r22, r20
     ba8:	75 0b       	sbc	r23, r21
     baa:	69 30       	cpi	r22, 0x09	; 9
     bac:	71 05       	cpc	r23, r1
     bae:	2c f1       	brlt	.+74     	; 0xbfa <obstacleAvoidance+0xc8>
			{
				MOTOR_LEFT_START();
     bb0:	74 9a       	sbi	0x0e, 4	; 14
				MOTOR_RIGHT_STOP();
     bb2:	e2 e0       	ldi	r30, 0x02	; 2
     bb4:	f1 e0       	ldi	r31, 0x01	; 1
     bb6:	80 81       	ld	r24, Z
     bb8:	8f 7e       	andi	r24, 0xEF	; 239
     bba:	80 83       	st	Z, r24
     bbc:	1e c0       	rjmp	.+60     	; 0xbfa <obstacleAvoidance+0xc8>
			//MOTOR_LEFT_STOP(); 
			//MOTOR_RIGHT_STOP();	
		}
		
	}
	else if (leftSonar < LEFT_TOO_NEAR)
     bbe:	66 32       	cpi	r22, 0x26	; 38
     bc0:	71 05       	cpc	r23, r1
     bc2:	3c f4       	brge	.+14     	; 0xbd2 <obstacleAvoidance+0xa0>
	{
		// front able to walk, too near to wall or obstacle...
			MOTOR_LEFT_STOP();
     bc4:	74 98       	cbi	0x0e, 4	; 14
			MOTOR_RIGHT_START();		
     bc6:	e2 e0       	ldi	r30, 0x02	; 2
     bc8:	f1 e0       	ldi	r31, 0x01	; 1
     bca:	80 81       	ld	r24, Z
     bcc:	80 61       	ori	r24, 0x10	; 16
     bce:	80 83       	st	Z, r24
     bd0:	14 c0       	rjmp	.+40     	; 0xbfa <obstacleAvoidance+0xc8>
	}
	else if (rightSonar < RIGHT_TOO_NEAR)
     bd2:	44 31       	cpi	r20, 0x14	; 20
     bd4:	51 05       	cpc	r21, r1
     bd6:	3c f4       	brge	.+14     	; 0xbe6 <obstacleAvoidance+0xb4>
	{
		// front able to walk, too near to wall or obstacle...
			MOTOR_LEFT_START();
     bd8:	74 9a       	sbi	0x0e, 4	; 14
			MOTOR_RIGHT_STOP();
     bda:	e2 e0       	ldi	r30, 0x02	; 2
     bdc:	f1 e0       	ldi	r31, 0x01	; 1
     bde:	80 81       	ld	r24, Z
     be0:	8f 7e       	andi	r24, 0xEF	; 239
     be2:	80 83       	st	Z, r24
     be4:	0a c0       	rjmp	.+20     	; 0xbfa <obstacleAvoidance+0xc8>
	}
	else
	{
			MOTOR_LEFT_STOP();
     be6:	74 98       	cbi	0x0e, 4	; 14
			MOTOR_RIGHT_STOP();
     be8:	e2 e0       	ldi	r30, 0x02	; 2
     bea:	f1 e0       	ldi	r31, 0x01	; 1
     bec:	80 81       	ld	r24, Z
     bee:	8f 7e       	andi	r24, 0xEF	; 239
     bf0:	80 83       	st	Z, r24
     bf2:	03 c0       	rjmp	.+6      	; 0xbfa <obstacleAvoidance+0xc8>
			{
				MOTOR_LEFT_STOP();
				MOTOR_RIGHT_START();	
			}
		}
		else if (deviceBlocked[RIGHT_DEVICE] && !(deviceBlocked[LEFT_DEVICE]))
     bf4:	82 81       	ldd	r24, Z+2	; 0x02
     bf6:	81 11       	cpse	r24, r1
     bf8:	d6 cf       	rjmp	.-84     	; 0xba6 <obstacleAvoidance+0x74>
	else
	{
			MOTOR_LEFT_STOP();
			MOTOR_RIGHT_STOP();
	}
}
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	08 95       	ret

00000c00 <cheatPrintAll>:


void cheatPrintAll(char* deviceBlocked, char *obstacleDetected)
{
     c00:	fc 01       	movw	r30, r24
	*obstacleDetected = 5;
     c02:	85 e0       	ldi	r24, 0x05	; 5
     c04:	db 01       	movw	r26, r22
     c06:	8c 93       	st	X, r24
	deviceBlocked[FRONT_DEVICE] = FRONT_SONAR_ID;
     c08:	86 e4       	ldi	r24, 0x46	; 70
     c0a:	80 83       	st	Z, r24
	deviceBlocked[LEFT_DEVICE] = LEFT_SONAR_ID;
     c0c:	8c e4       	ldi	r24, 0x4C	; 76
     c0e:	81 83       	std	Z+1, r24	; 0x01
	deviceBlocked[RIGHT_DEVICE] = RIGHT_SONAR_ID;
     c10:	82 e5       	ldi	r24, 0x52	; 82
     c12:	82 83       	std	Z+2, r24	; 0x02
	deviceBlocked[BTM_DEVICE] = BTM_SONAR_ID;
     c14:	82 e4       	ldi	r24, 0x42	; 66
     c16:	83 83       	std	Z+3, r24	; 0x03
	deviceBlocked[TOP_DEVICE] = TOP_SONAR_ID;
     c18:	84 e5       	ldi	r24, 0x54	; 84
     c1a:	84 83       	std	Z+4, r24	; 0x04
     c1c:	08 95       	ret

00000c1e <obstacleDetection>:


// return number of obstacle detected...
// implicitly return the device to send.
char obstacleDetection(int frontSonar, char obstacleDetected, char * deviceBlocked, int leftSonar, int rightSonar, int topSonar, int calibratedBtmIR, int btmIR)
{
     c1e:	af 92       	push	r10
     c20:	bf 92       	push	r11
     c22:	cf 92       	push	r12
     c24:	df 92       	push	r13
     c26:	ff 92       	push	r15
     c28:	0f 93       	push	r16
     c2a:	1f 93       	push	r17
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	f6 2e       	mov	r15, r22
     c32:	ea 01       	movw	r28, r20
	// Commented out when debuggin..

	if(frontSonar < FRONT_OBSTACLE_DISTANCE)
     c34:	86 34       	cpi	r24, 0x46	; 70
     c36:	91 05       	cpc	r25, r1
     c38:	1c f4       	brge	.+6      	; 0xc40 <obstacleDetection+0x22>
	{
		obstacleDetected ++;
     c3a:	f3 94       	inc	r15
		deviceBlocked[FRONT_DEVICE] = FRONT_SONAR_ID;
     c3c:	86 e4       	ldi	r24, 0x46	; 70
     c3e:	88 83       	st	Y, r24
	}
	if (leftSonar < LEFT_OBSTACLE_DISTANCE)
     c40:	2e 31       	cpi	r18, 0x1E	; 30
     c42:	31 05       	cpc	r19, r1
     c44:	1c f4       	brge	.+6      	; 0xc4c <obstacleDetection+0x2e>
	{
		obstacleDetected ++;
     c46:	f3 94       	inc	r15
		deviceBlocked[LEFT_DEVICE] = LEFT_SONAR_ID;
     c48:	8c e4       	ldi	r24, 0x4C	; 76
     c4a:	89 83       	std	Y+1, r24	; 0x01
	}
	if (rightSonar < RIGHT_OBSTACLE_DISTANCE)
     c4c:	0e 31       	cpi	r16, 0x1E	; 30
     c4e:	11 05       	cpc	r17, r1
     c50:	1c f4       	brge	.+6      	; 0xc58 <obstacleDetection+0x3a>
	{
		obstacleDetected++;
     c52:	f3 94       	inc	r15
		deviceBlocked[RIGHT_DEVICE] = RIGHT_SONAR_ID;
     c54:	82 e5       	ldi	r24, 0x52	; 82
     c56:	8a 83       	std	Y+2, r24	; 0x02
	}
	if (detectStairs(calibratedBtmIR, btmIR))
     c58:	b5 01       	movw	r22, r10
     c5a:	c6 01       	movw	r24, r12
     c5c:	5a df       	rcall	.-332    	; 0xb12 <detectStairs>
     c5e:	88 23       	and	r24, r24
     c60:	19 f0       	breq	.+6      	; 0xc68 <obstacleDetection+0x4a>
	{
		obstacleDetected++;
     c62:	f3 94       	inc	r15
		deviceBlocked[BTM_DEVICE] = BTM_SONAR_ID;
     c64:	82 e4       	ldi	r24, 0x42	; 66
     c66:	8b 83       	std	Y+3, r24	; 0x03
	//	obstacleDetected++;
	//	deviceBlocked[TOP_DEVICE] = TOP_SONAR_ID;
	//}
	
	return obstacleDetected;
}
     c68:	8f 2d       	mov	r24, r15
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	1f 91       	pop	r17
     c70:	0f 91       	pop	r16
     c72:	ff 90       	pop	r15
     c74:	df 90       	pop	r13
     c76:	cf 90       	pop	r12
     c78:	bf 90       	pop	r11
     c7a:	af 90       	pop	r10
     c7c:	08 95       	ret

00000c7e <mySharpIR_Read>:
#include <math.h>

// Return distance in cm
int mySharpIR_Read(char analogChannel)
{
	int adcReading = myADC_analogRead(analogChannel);
     c7e:	42 df       	rcall	.-380    	; 0xb04 <myADC_analogRead>
	adcReading = 10650.08 * pow(adcReading,-0.935) - 10;
     c80:	bc 01       	movw	r22, r24
     c82:	88 27       	eor	r24, r24
     c84:	77 fd       	sbrc	r23, 7
     c86:	80 95       	com	r24
     c88:	98 2f       	mov	r25, r24
     c8a:	0e 94 4a 14 	call	0x2894	; 0x2894 <__floatsisf>
     c8e:	29 e2       	ldi	r18, 0x29	; 41
     c90:	3c e5       	ldi	r19, 0x5C	; 92
     c92:	4f e6       	ldi	r20, 0x6F	; 111
     c94:	5f eb       	ldi	r21, 0xBF	; 191
     c96:	0e 94 39 15 	call	0x2a72	; 0x2a72 <pow>
     c9a:	22 e5       	ldi	r18, 0x52	; 82
     c9c:	38 e6       	ldi	r19, 0x68	; 104
     c9e:	46 e2       	ldi	r20, 0x26	; 38
     ca0:	56 e4       	ldi	r21, 0x46	; 70
     ca2:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__mulsf3>
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	40 e2       	ldi	r20, 0x20	; 32
     cac:	51 e4       	ldi	r21, 0x41	; 65
     cae:	0e 94 b2 13 	call	0x2764	; 0x2764 <__subsf3>
     cb2:	0e 94 17 14 	call	0x282e	; 0x282e <__fixsfsi>
     cb6:	cb 01       	movw	r24, r22
     cb8:	68 3e       	cpi	r22, 0xE8	; 232
     cba:	23 e0       	ldi	r18, 0x03	; 3
     cbc:	72 07       	cpc	r23, r18
     cbe:	14 f0       	brlt	.+4      	; 0xcc4 <mySharpIR_Read+0x46>
     cc0:	87 ee       	ldi	r24, 0xE7	; 231
     cc2:	93 e0       	ldi	r25, 0x03	; 3
	if(adcReading > IR_MAX_VALUE)
		adcReading = IR_MAX_VALUE;
	
	return adcReading;
}
     cc4:	08 95       	ret

00000cc6 <checkWithinRange>:

char checkWithinRange(int reading, int * checkReading, const char range)
{
	return reading > (*checkReading + range) || reading < (*checkReading - range);
     cc6:	fb 01       	movw	r30, r22
     cc8:	20 81       	ld	r18, Z
     cca:	31 81       	ldd	r19, Z+1	; 0x01
     ccc:	50 e0       	ldi	r21, 0x00	; 0
     cce:	b9 01       	movw	r22, r18
     cd0:	64 0f       	add	r22, r20
     cd2:	75 1f       	adc	r23, r21
     cd4:	68 17       	cp	r22, r24
     cd6:	79 07       	cpc	r23, r25
     cd8:	4c f0       	brlt	.+18     	; 0xcec <checkWithinRange+0x26>
     cda:	24 1b       	sub	r18, r20
     cdc:	35 0b       	sbc	r19, r21
     cde:	41 e0       	ldi	r20, 0x01	; 1
     ce0:	82 17       	cp	r24, r18
     ce2:	93 07       	cpc	r25, r19
     ce4:	0c f0       	brlt	.+2      	; 0xce8 <checkWithinRange+0x22>
     ce6:	40 e0       	ldi	r20, 0x00	; 0
     ce8:	84 2f       	mov	r24, r20
     cea:	08 95       	ret
     cec:	81 e0       	ldi	r24, 0x01	; 1
}
     cee:	08 95       	ret

00000cf0 <mySharpIR_ReCalibrate>:
// final reading = btmIR reading (i = CALIBRATE_COUNT)
// firstCheck reading = btmIR reading ( i = CALIBRATE_COUNT/2)
// initial reading  = btmIR reading (i = 0)
// Write new calibrate value if all matches..
void mySharpIR_ReCalibrate(int* calibratedReading, int reading)
{
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	8c 01       	movw	r16, r24
     cfa:	eb 01       	movw	r28, r22
	static uint8_t i = 0;
	static int checkReading[2] = {0};
	
	if(checkWithinRange(reading, calibratedReading, CALIBRATE_RANGE) && i == 0)
     cfc:	45 e0       	ldi	r20, 0x05	; 5
     cfe:	bc 01       	movw	r22, r24
     d00:	ce 01       	movw	r24, r28
     d02:	e1 df       	rcall	.-62     	; 0xcc6 <checkWithinRange>
     d04:	88 23       	and	r24, r24
     d06:	29 f0       	breq	.+10     	; 0xd12 <mySharpIR_ReCalibrate+0x22>
     d08:	80 91 1d 08 	lds	r24, 0x081D
     d0c:	81 11       	cpse	r24, r1
     d0e:	0a c0       	rjmp	.+20     	; 0xd24 <mySharpIR_ReCalibrate+0x34>
     d10:	3f c0       	rjmp	.+126    	; 0xd90 <mySharpIR_ReCalibrate+0xa0>
		// skip the calibration process... not needed
		return;
	}
	
	
	if (i == 0)
     d12:	80 91 1d 08 	lds	r24, 0x081D
     d16:	81 11       	cpse	r24, r1
     d18:	05 c0       	rjmp	.+10     	; 0xd24 <mySharpIR_ReCalibrate+0x34>
	{
		checkReading[0] = reading;
     d1a:	d0 93 1a 08 	sts	0x081A, r29
     d1e:	c0 93 19 08 	sts	0x0819, r28
     d22:	2c c0       	rjmp	.+88     	; 0xd7c <mySharpIR_ReCalibrate+0x8c>
	}
	else if (i == CALIBRATE_COUNT/2)
     d24:	8a 30       	cpi	r24, 0x0A	; 10
     d26:	99 f4       	brne	.+38     	; 0xd4e <mySharpIR_ReCalibrate+0x5e>
	{
		if(checkWithinRange(reading, checkReading, CALIBRATE_RANGE))
     d28:	45 e0       	ldi	r20, 0x05	; 5
     d2a:	69 e1       	ldi	r22, 0x19	; 25
     d2c:	78 e0       	ldi	r23, 0x08	; 8
     d2e:	ce 01       	movw	r24, r28
     d30:	ca df       	rcall	.-108    	; 0xcc6 <checkWithinRange>
     d32:	88 23       	and	r24, r24
     d34:	39 f0       	breq	.+14     	; 0xd44 <mySharpIR_ReCalibrate+0x54>
		{
			// Out of range.. restart to find new calibration point..
			checkReading[0] = reading;
     d36:	d0 93 1a 08 	sts	0x081A, r29
     d3a:	c0 93 19 08 	sts	0x0819, r28
			i = 0; // reset to count...
     d3e:	10 92 1d 08 	sts	0x081D, r1
     d42:	1c c0       	rjmp	.+56     	; 0xd7c <mySharpIR_ReCalibrate+0x8c>
		}
		else
		{	// within range.. need more confirmation
			checkReading[1] = reading;
     d44:	d0 93 1c 08 	sts	0x081C, r29
     d48:	c0 93 1b 08 	sts	0x081B, r28
     d4c:	17 c0       	rjmp	.+46     	; 0xd7c <mySharpIR_ReCalibrate+0x8c>
		}
	}
	else if (i == CALIBRATE_COUNT)
     d4e:	84 31       	cpi	r24, 0x14	; 20
     d50:	a9 f4       	brne	.+42     	; 0xd7c <mySharpIR_ReCalibrate+0x8c>
	{
		i = 0; // reset to count..
     d52:	10 92 1d 08 	sts	0x081D, r1

		if(checkWithinRange(reading, checkReading, CALIBRATE_RANGE))
     d56:	45 e0       	ldi	r20, 0x05	; 5
     d58:	69 e1       	ldi	r22, 0x19	; 25
     d5a:	78 e0       	ldi	r23, 0x08	; 8
     d5c:	ce 01       	movw	r24, r28
     d5e:	b3 df       	rcall	.-154    	; 0xcc6 <checkWithinRange>
     d60:	88 23       	and	r24, r24
     d62:	29 f0       	breq	.+10     	; 0xd6e <mySharpIR_ReCalibrate+0x7e>
		{
			// Out of range.. restart to find new calibration point..
			checkReading[0] = reading;
     d64:	d0 93 1a 08 	sts	0x081A, r29
     d68:	c0 93 19 08 	sts	0x0819, r28
     d6c:	07 c0       	rjmp	.+14     	; 0xd7c <mySharpIR_ReCalibrate+0x8c>
		}
		else
		{
			// all 3 readings within range... can calibrate as new stable.
			*calibratedReading = checkReading[0]; // btmIR is calibrated..
     d6e:	80 91 19 08 	lds	r24, 0x0819
     d72:	90 91 1a 08 	lds	r25, 0x081A
     d76:	f8 01       	movw	r30, r16
     d78:	91 83       	std	Z+1, r25	; 0x01
     d7a:	80 83       	st	Z, r24
		}
	}
	
	i = (i+1) % CALIBRATE_COUNT;
     d7c:	80 91 1d 08 	lds	r24, 0x081D
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	01 96       	adiw	r24, 0x01	; 1
     d84:	64 e1       	ldi	r22, 0x14	; 20
     d86:	70 e0       	ldi	r23, 0x00	; 0
     d88:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <__divmodhi4>
     d8c:	80 93 1d 08 	sts	0x081D, r24
}
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	08 95       	ret

00000d9a <myTimer_Init>:
	unsigned char currentTick = myTimer_Read();

	delay /= MICROSECONDS_PER_TICK; // convert delay into ticks..
	expectedTick2 = currentTick + delay; 
	vTaskResume( *timerTask ); // resume delayMicroCheck..
	xSemaphoreTake(semaDelayMicro2, MAX_SEMA_WAIT);	// delay for the micro here... safety mech: max wait for 2 ms... cannot be more than tht..
     d9a:	90 93 a6 08 	sts	0x08A6, r25
     d9e:	80 93 a5 08 	sts	0x08A5, r24
     da2:	fc 01       	movw	r30, r24
     da4:	80 81       	ld	r24, Z
     da6:	91 81       	ldd	r25, Z+1	; 0x01
     da8:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <vTaskSuspend>
     dac:	43 e0       	ldi	r20, 0x03	; 3
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	f9 d4       	rcall	.+2546   	; 0x17a6 <xQueueGenericCreate>
     db4:	90 93 a2 08 	sts	0x08A2, r25
     db8:	80 93 a1 08 	sts	0x08A1, r24
     dbc:	43 e0       	ldi	r20, 0x03	; 3
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	f1 d4       	rcall	.+2530   	; 0x17a6 <xQueueGenericCreate>
     dc4:	90 93 a4 08 	sts	0x08A4, r25
     dc8:	80 93 a3 08 	sts	0x08A3, r24
     dcc:	08 95       	ret

00000dce <myTimer_Read>:
     dce:	86 b5       	in	r24, 0x26	; 38
     dd0:	08 95       	ret

00000dd2 <myTimer_DelayMicro>:
     dd2:	46 b5       	in	r20, 0x26	; 38
     dd4:	50 e0       	ldi	r21, 0x00	; 0
     dd6:	9c 01       	movw	r18, r24
     dd8:	99 23       	and	r25, r25
     dda:	14 f4       	brge	.+4      	; 0xde0 <myTimer_DelayMicro+0xe>
     ddc:	2d 5f       	subi	r18, 0xFD	; 253
     dde:	3f 4f       	sbci	r19, 0xFF	; 255
     de0:	35 95       	asr	r19
     de2:	27 95       	ror	r18
     de4:	35 95       	asr	r19
     de6:	27 95       	ror	r18
     de8:	24 0f       	add	r18, r20
     dea:	35 1f       	adc	r19, r21
     dec:	30 93 04 02 	sts	0x0204, r19
     df0:	20 93 03 02 	sts	0x0203, r18
     df4:	e0 91 a5 08 	lds	r30, 0x08A5
     df8:	f0 91 a6 08 	lds	r31, 0x08A6
     dfc:	80 81       	ld	r24, Z
     dfe:	91 81       	ldd	r25, Z+1	; 0x01
     e00:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <vTaskResume>
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	42 e0       	ldi	r20, 0x02	; 2
     e08:	50 e0       	ldi	r21, 0x00	; 0
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	80 91 a1 08 	lds	r24, 0x08A1
     e12:	90 91 a2 08 	lds	r25, 0x08A2
     e16:	ec c5       	rjmp	.+3032   	; 0x19f0 <xQueueGenericReceive>
     e18:	08 95       	ret

00000e1a <myTimer_DelayChecker>:
}

// Semaphore on sale if u match lucky number ...
void myTimer_DelayChecker()
{
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
}

// Return timer 0 value
unsigned char myTimer_Read()
{
	return TCNT0;
     e1e:	c6 b5       	in	r28, 0x26	; 38
// Semaphore on sale if u match lucky number ...
void myTimer_DelayChecker()
{
	unsigned char currentTick = myTimer_Read();
	
	if(currentTick == 0) // overflow happened
     e20:	c1 11       	cpse	r28, r1
     e22:	22 c0       	rjmp	.+68     	; 0xe68 <myTimer_DelayChecker+0x4e>
	{
		if(expectedTick != IMPOSSIBLE_RANGE)
     e24:	80 91 03 02 	lds	r24, 0x0203
     e28:	90 91 04 02 	lds	r25, 0x0204
     e2c:	88 38       	cpi	r24, 0x88	; 136
     e2e:	93 41       	sbci	r25, 0x13	; 19
     e30:	51 f0       	breq	.+20     	; 0xe46 <myTimer_DelayChecker+0x2c>
			expectedTick -= MAX_TICKS;
     e32:	80 91 03 02 	lds	r24, 0x0203
     e36:	90 91 04 02 	lds	r25, 0x0204
     e3a:	8a 5f       	subi	r24, 0xFA	; 250
     e3c:	91 09       	sbc	r25, r1
     e3e:	90 93 04 02 	sts	0x0204, r25
     e42:	80 93 03 02 	sts	0x0203, r24

		if(expectedTick2 != IMPOSSIBLE_RANGE)
     e46:	80 91 01 02 	lds	r24, 0x0201
     e4a:	90 91 02 02 	lds	r25, 0x0202
     e4e:	88 38       	cpi	r24, 0x88	; 136
     e50:	93 41       	sbci	r25, 0x13	; 19
     e52:	51 f0       	breq	.+20     	; 0xe68 <myTimer_DelayChecker+0x4e>
			expectedTick2 -= MAX_TICKS;
     e54:	80 91 01 02 	lds	r24, 0x0201
     e58:	90 91 02 02 	lds	r25, 0x0202
     e5c:	8a 5f       	subi	r24, 0xFA	; 250
     e5e:	91 09       	sbc	r25, r1
     e60:	90 93 02 02 	sts	0x0202, r25
     e64:	80 93 01 02 	sts	0x0201, r24
	}
	
	if( currentTick > expectedTick) // more than => 1 more tick => positive error..
     e68:	d0 e0       	ldi	r29, 0x00	; 0
     e6a:	80 91 03 02 	lds	r24, 0x0203
     e6e:	90 91 04 02 	lds	r25, 0x0204
     e72:	8c 17       	cp	r24, r28
     e74:	9d 07       	cpc	r25, r29
     e76:	84 f4       	brge	.+32     	; 0xe98 <myTimer_DelayChecker+0x7e>
	{
		expectedTick = IMPOSSIBLE_RANGE; // set back to impossible range.
     e78:	88 e8       	ldi	r24, 0x88	; 136
     e7a:	93 e1       	ldi	r25, 0x13	; 19
     e7c:	90 93 04 02 	sts	0x0204, r25
     e80:	80 93 03 02 	sts	0x0203, r24
		xSemaphoreGive(semaDelayMicro); // give the semaphore to resume...	
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	40 e0       	ldi	r20, 0x00	; 0
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	80 91 a1 08 	lds	r24, 0x08A1
     e92:	90 91 a2 08 	lds	r25, 0x08A2
     e96:	b4 d4       	rcall	.+2408   	; 0x1800 <xQueueGenericSend>
	}
	
	
	if( currentTick > expectedTick2) // more than => 1 more tick => positive error..
     e98:	80 91 01 02 	lds	r24, 0x0201
     e9c:	90 91 02 02 	lds	r25, 0x0202
     ea0:	8c 17       	cp	r24, r28
     ea2:	9d 07       	cpc	r25, r29
     ea4:	84 f4       	brge	.+32     	; 0xec6 <myTimer_DelayChecker+0xac>
	{
		expectedTick2 = IMPOSSIBLE_RANGE; // set back to impossible range.
     ea6:	88 e8       	ldi	r24, 0x88	; 136
     ea8:	93 e1       	ldi	r25, 0x13	; 19
     eaa:	90 93 02 02 	sts	0x0202, r25
     eae:	80 93 01 02 	sts	0x0201, r24
		xSemaphoreGive(semaDelayMicro2); // give the semaphore to resume...
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	40 e0       	ldi	r20, 0x00	; 0
     eb6:	50 e0       	ldi	r21, 0x00	; 0
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	80 91 a3 08 	lds	r24, 0x08A3
     ec0:	90 91 a4 08 	lds	r25, 0x08A4
     ec4:	9d d4       	rcall	.+2362   	; 0x1800 <xQueueGenericSend>
	}
	
	if(expectedTick == IMPOSSIBLE_RANGE && expectedTick2 == IMPOSSIBLE_RANGE)
     ec6:	80 91 03 02 	lds	r24, 0x0203
     eca:	90 91 04 02 	lds	r25, 0x0204
     ece:	88 38       	cpi	r24, 0x88	; 136
     ed0:	93 41       	sbci	r25, 0x13	; 19
     ed2:	79 f4       	brne	.+30     	; 0xef2 <myTimer_DelayChecker+0xd8>
     ed4:	80 91 01 02 	lds	r24, 0x0201
     ed8:	90 91 02 02 	lds	r25, 0x0202
     edc:	88 38       	cpi	r24, 0x88	; 136
     ede:	93 41       	sbci	r25, 0x13	; 19
     ee0:	41 f4       	brne	.+16     	; 0xef2 <myTimer_DelayChecker+0xd8>
	{
		vTaskSuspend(*timerTask); // suspend when both is done..
     ee2:	e0 91 a5 08 	lds	r30, 0x08A5
     ee6:	f0 91 a6 08 	lds	r31, 0x08A6
     eea:	80 81       	ld	r24, Z
     eec:	91 81       	ldd	r25, Z+1	; 0x01
     eee:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <vTaskSuspend>
	}
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	08 95       	ret

00000ef8 <__vector_36>:
	{
		xSemaphoreGive(semaUsart0Receive);
	}
	
	return data;
}
     ef8:	1f 92       	push	r1
     efa:	0f 92       	push	r0
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	0f 92       	push	r0
     f00:	11 24       	eor	r1, r1
     f02:	0b b6       	in	r0, 0x3b	; 59
     f04:	0f 92       	push	r0
     f06:	2f 93       	push	r18
     f08:	3f 93       	push	r19
     f0a:	4f 93       	push	r20
     f0c:	5f 93       	push	r21
     f0e:	6f 93       	push	r22
     f10:	7f 93       	push	r23
     f12:	8f 93       	push	r24
     f14:	9f 93       	push	r25
     f16:	af 93       	push	r26
     f18:	bf 93       	push	r27
     f1a:	ef 93       	push	r30
     f1c:	ff 93       	push	r31
     f1e:	60 91 ce 00 	lds	r22, 0x00CE
     f22:	8c e3       	ldi	r24, 0x3C	; 60
     f24:	99 e0       	ldi	r25, 0x09	; 9
     f26:	3a d6       	rcall	.+3188   	; 0x1b9c <ringBufferPush>
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	40 e0       	ldi	r20, 0x00	; 0
     f2c:	50 e0       	ldi	r21, 0x00	; 0
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	80 91 30 09 	lds	r24, 0x0930
     f36:	90 91 31 09 	lds	r25, 0x0931
     f3a:	20 d5       	rcall	.+2624   	; 0x197c <xQueueGenericSendFromISR>
     f3c:	8c e3       	ldi	r24, 0x3C	; 60
     f3e:	99 e0       	ldi	r25, 0x09	; 9
     f40:	44 d6       	rcall	.+3208   	; 0x1bca <ringBufferFull>
     f42:	ff 91       	pop	r31
     f44:	ef 91       	pop	r30
     f46:	bf 91       	pop	r27
     f48:	af 91       	pop	r26
     f4a:	9f 91       	pop	r25
     f4c:	8f 91       	pop	r24
     f4e:	7f 91       	pop	r23
     f50:	6f 91       	pop	r22
     f52:	5f 91       	pop	r21
     f54:	4f 91       	pop	r20
     f56:	3f 91       	pop	r19
     f58:	2f 91       	pop	r18
     f5a:	0f 90       	pop	r0
     f5c:	0b be       	out	0x3b, r0	; 59
     f5e:	0f 90       	pop	r0
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	0f 90       	pop	r0
     f64:	1f 90       	pop	r1
     f66:	18 95       	reti

00000f68 <__vector_25>:
     f68:	1f 92       	push	r1
     f6a:	0f 92       	push	r0
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	0f 92       	push	r0
     f70:	11 24       	eor	r1, r1
     f72:	0b b6       	in	r0, 0x3b	; 59
     f74:	0f 92       	push	r0
     f76:	2f 93       	push	r18
     f78:	3f 93       	push	r19
     f7a:	4f 93       	push	r20
     f7c:	5f 93       	push	r21
     f7e:	6f 93       	push	r22
     f80:	7f 93       	push	r23
     f82:	8f 93       	push	r24
     f84:	9f 93       	push	r25
     f86:	af 93       	push	r26
     f88:	bf 93       	push	r27
     f8a:	ef 93       	push	r30
     f8c:	ff 93       	push	r31
     f8e:	60 91 c6 00 	lds	r22, 0x00C6
     f92:	87 ec       	ldi	r24, 0xC7	; 199
     f94:	98 e0       	ldi	r25, 0x08	; 8
     f96:	02 d6       	rcall	.+3076   	; 0x1b9c <ringBufferPush>
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	40 e0       	ldi	r20, 0x00	; 0
     f9c:	50 e0       	ldi	r21, 0x00	; 0
     f9e:	60 e0       	ldi	r22, 0x00	; 0
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	80 91 30 09 	lds	r24, 0x0930
     fa6:	90 91 31 09 	lds	r25, 0x0931
     faa:	e8 d4       	rcall	.+2512   	; 0x197c <xQueueGenericSendFromISR>
     fac:	87 ec       	ldi	r24, 0xC7	; 199
     fae:	98 e0       	ldi	r25, 0x08	; 8
     fb0:	0c d6       	rcall	.+3096   	; 0x1bca <ringBufferFull>
     fb2:	ff 91       	pop	r31
     fb4:	ef 91       	pop	r30
     fb6:	bf 91       	pop	r27
     fb8:	af 91       	pop	r26
     fba:	9f 91       	pop	r25
     fbc:	8f 91       	pop	r24
     fbe:	7f 91       	pop	r23
     fc0:	6f 91       	pop	r22
     fc2:	5f 91       	pop	r21
     fc4:	4f 91       	pop	r20
     fc6:	3f 91       	pop	r19
     fc8:	2f 91       	pop	r18
     fca:	0f 90       	pop	r0
     fcc:	0b be       	out	0x3b, r0	; 59
     fce:	0f 90       	pop	r0
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	0f 90       	pop	r0
     fd4:	1f 90       	pop	r1
     fd6:	18 95       	reti

00000fd8 <__vector_37>:
     fd8:	1f 92       	push	r1
     fda:	0f 92       	push	r0
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	0f 92       	push	r0
     fe0:	11 24       	eor	r1, r1
     fe2:	0b b6       	in	r0, 0x3b	; 59
     fe4:	0f 92       	push	r0
     fe6:	2f 93       	push	r18
     fe8:	3f 93       	push	r19
     fea:	4f 93       	push	r20
     fec:	5f 93       	push	r21
     fee:	6f 93       	push	r22
     ff0:	7f 93       	push	r23
     ff2:	8f 93       	push	r24
     ff4:	9f 93       	push	r25
     ff6:	af 93       	push	r26
     ff8:	bf 93       	push	r27
     ffa:	ef 93       	push	r30
     ffc:	ff 93       	push	r31
     ffe:	82 e3       	ldi	r24, 0x32	; 50
    1000:	99 e0       	ldi	r25, 0x09	; 9
    1002:	ea d5       	rcall	.+3028   	; 0x1bd8 <ringBufferNotEmpty>
    1004:	88 23       	and	r24, r24
    1006:	31 f0       	breq	.+12     	; 0x1014 <__vector_37+0x3c>
    1008:	82 e3       	ldi	r24, 0x32	; 50
    100a:	99 e0       	ldi	r25, 0x09	; 9
    100c:	b5 d5       	rcall	.+2922   	; 0x1b78 <ringBufferPop>
    100e:	80 93 ce 00 	sts	0x00CE, r24
    1012:	05 c0       	rjmp	.+10     	; 0x101e <__vector_37+0x46>
    1014:	e9 ec       	ldi	r30, 0xC9	; 201
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	8f 7d       	andi	r24, 0xDF	; 223
    101c:	80 83       	st	Z, r24
    101e:	ff 91       	pop	r31
    1020:	ef 91       	pop	r30
    1022:	bf 91       	pop	r27
    1024:	af 91       	pop	r26
    1026:	9f 91       	pop	r25
    1028:	8f 91       	pop	r24
    102a:	7f 91       	pop	r23
    102c:	6f 91       	pop	r22
    102e:	5f 91       	pop	r21
    1030:	4f 91       	pop	r20
    1032:	3f 91       	pop	r19
    1034:	2f 91       	pop	r18
    1036:	0f 90       	pop	r0
    1038:	0b be       	out	0x3b, r0	; 59
    103a:	0f 90       	pop	r0
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	0f 90       	pop	r0
    1040:	1f 90       	pop	r1
    1042:	18 95       	reti

00001044 <__vector_26>:
    1044:	1f 92       	push	r1
    1046:	0f 92       	push	r0
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	0f 92       	push	r0
    104c:	11 24       	eor	r1, r1
    104e:	0b b6       	in	r0, 0x3b	; 59
    1050:	0f 92       	push	r0
    1052:	2f 93       	push	r18
    1054:	3f 93       	push	r19
    1056:	4f 93       	push	r20
    1058:	5f 93       	push	r21
    105a:	6f 93       	push	r22
    105c:	7f 93       	push	r23
    105e:	8f 93       	push	r24
    1060:	9f 93       	push	r25
    1062:	af 93       	push	r26
    1064:	bf 93       	push	r27
    1066:	ef 93       	push	r30
    1068:	ff 93       	push	r31
    106a:	87 e3       	ldi	r24, 0x37	; 55
    106c:	99 e0       	ldi	r25, 0x09	; 9
    106e:	b4 d5       	rcall	.+2920   	; 0x1bd8 <ringBufferNotEmpty>
    1070:	88 23       	and	r24, r24
    1072:	31 f0       	breq	.+12     	; 0x1080 <__vector_26+0x3c>
    1074:	87 e3       	ldi	r24, 0x37	; 55
    1076:	99 e0       	ldi	r25, 0x09	; 9
    1078:	7f d5       	rcall	.+2814   	; 0x1b78 <ringBufferPop>
    107a:	80 93 c6 00 	sts	0x00C6, r24
    107e:	05 c0       	rjmp	.+10     	; 0x108a <__vector_26+0x46>
    1080:	e1 ec       	ldi	r30, 0xC1	; 193
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	8f 7d       	andi	r24, 0xDF	; 223
    1088:	80 83       	st	Z, r24
    108a:	ff 91       	pop	r31
    108c:	ef 91       	pop	r30
    108e:	bf 91       	pop	r27
    1090:	af 91       	pop	r26
    1092:	9f 91       	pop	r25
    1094:	8f 91       	pop	r24
    1096:	7f 91       	pop	r23
    1098:	6f 91       	pop	r22
    109a:	5f 91       	pop	r21
    109c:	4f 91       	pop	r20
    109e:	3f 91       	pop	r19
    10a0:	2f 91       	pop	r18
    10a2:	0f 90       	pop	r0
    10a4:	0b be       	out	0x3b, r0	; 59
    10a6:	0f 90       	pop	r0
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	0f 90       	pop	r0
    10ac:	1f 90       	pop	r1
    10ae:	18 95       	reti

000010b0 <myUSART_USART0_Init>:
    10b0:	10 92 c5 00 	sts	0x00C5, r1
    10b4:	87 e6       	ldi	r24, 0x67	; 103
    10b6:	80 93 c4 00 	sts	0x00C4, r24
    10ba:	88 eb       	ldi	r24, 0xB8	; 184
    10bc:	80 93 c1 00 	sts	0x00C1, r24
    10c0:	86 e0       	ldi	r24, 0x06	; 6
    10c2:	80 93 c2 00 	sts	0x00C2, r24
    10c6:	40 e2       	ldi	r20, 0x20	; 32
    10c8:	6e ee       	ldi	r22, 0xEE	; 238
    10ca:	78 e0       	ldi	r23, 0x08	; 8
    10cc:	87 ec       	ldi	r24, 0xC7	; 199
    10ce:	98 e0       	ldi	r25, 0x08	; 8
    10d0:	42 d5       	rcall	.+2692   	; 0x1b56 <ringBufferInit>
    10d2:	40 e2       	ldi	r20, 0x20	; 32
    10d4:	6c ec       	ldi	r22, 0xCC	; 204
    10d6:	78 e0       	ldi	r23, 0x08	; 8
    10d8:	87 e3       	ldi	r24, 0x37	; 55
    10da:	99 e0       	ldi	r25, 0x09	; 9
    10dc:	3c d5       	rcall	.+2680   	; 0x1b56 <ringBufferInit>
    10de:	43 e0       	ldi	r20, 0x03	; 3
    10e0:	60 e0       	ldi	r22, 0x00	; 0
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	60 d3       	rcall	.+1728   	; 0x17a6 <xQueueGenericCreate>
    10e6:	90 93 2f 09 	sts	0x092F, r25
    10ea:	80 93 2e 09 	sts	0x092E, r24
    10ee:	08 95       	ret

000010f0 <myUSART_USART1_Init>:
    10f0:	10 92 cd 00 	sts	0x00CD, r1
    10f4:	87 e6       	ldi	r24, 0x67	; 103
    10f6:	80 93 cc 00 	sts	0x00CC, r24
    10fa:	88 eb       	ldi	r24, 0xB8	; 184
    10fc:	80 93 c9 00 	sts	0x00C9, r24
    1100:	86 e0       	ldi	r24, 0x06	; 6
    1102:	80 93 ca 00 	sts	0x00CA, r24
    1106:	40 e2       	ldi	r20, 0x20	; 32
    1108:	67 ea       	ldi	r22, 0xA7	; 167
    110a:	78 e0       	ldi	r23, 0x08	; 8
    110c:	8c e3       	ldi	r24, 0x3C	; 60
    110e:	99 e0       	ldi	r25, 0x09	; 9
    1110:	22 d5       	rcall	.+2628   	; 0x1b56 <ringBufferInit>
    1112:	40 e2       	ldi	r20, 0x20	; 32
    1114:	6e e0       	ldi	r22, 0x0E	; 14
    1116:	79 e0       	ldi	r23, 0x09	; 9
    1118:	82 e3       	ldi	r24, 0x32	; 50
    111a:	99 e0       	ldi	r25, 0x09	; 9
    111c:	1c d5       	rcall	.+2616   	; 0x1b56 <ringBufferInit>
    111e:	43 e0       	ldi	r20, 0x03	; 3
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	40 d3       	rcall	.+1664   	; 0x17a6 <xQueueGenericCreate>
    1126:	90 93 31 09 	sts	0x0931, r25
    112a:	80 93 30 09 	sts	0x0930, r24
    112e:	43 e0       	ldi	r20, 0x03	; 3
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	38 d3       	rcall	.+1648   	; 0x17a6 <xQueueGenericCreate>
    1136:	90 93 ed 08 	sts	0x08ED, r25
    113a:	80 93 ec 08 	sts	0x08EC, r24
    113e:	08 95       	ret

00001140 <myUSART_transmitUSART0_c>:
    1140:	cf 93       	push	r28
    1142:	c8 2f       	mov	r28, r24
    1144:	87 e3       	ldi	r24, 0x37	; 55
    1146:	99 e0       	ldi	r25, 0x09	; 9
    1148:	40 d5       	rcall	.+2688   	; 0x1bca <ringBufferFull>
    114a:	81 11       	cpse	r24, r1
    114c:	fb cf       	rjmp	.-10     	; 0x1144 <myUSART_transmitUSART0_c+0x4>
    114e:	6c 2f       	mov	r22, r28
    1150:	87 e3       	ldi	r24, 0x37	; 55
    1152:	99 e0       	ldi	r25, 0x09	; 9
    1154:	23 d5       	rcall	.+2630   	; 0x1b9c <ringBufferPush>
    1156:	e1 ec       	ldi	r30, 0xC1	; 193
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	80 62       	ori	r24, 0x20	; 32
    115e:	80 83       	st	Z, r24
    1160:	e0 ec       	ldi	r30, 0xC0	; 192
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	80 64       	ori	r24, 0x40	; 64
    1168:	80 83       	st	Z, r24
    116a:	cf 91       	pop	r28
    116c:	08 95       	ret

0000116e <myUSART_transmitUSART1_c>:
    116e:	cf 93       	push	r28
    1170:	c8 2f       	mov	r28, r24
    1172:	82 e3       	ldi	r24, 0x32	; 50
    1174:	99 e0       	ldi	r25, 0x09	; 9
    1176:	29 d5       	rcall	.+2642   	; 0x1bca <ringBufferFull>
    1178:	81 11       	cpse	r24, r1
    117a:	fb cf       	rjmp	.-10     	; 0x1172 <myUSART_transmitUSART1_c+0x4>
    117c:	6c 2f       	mov	r22, r28
    117e:	82 e3       	ldi	r24, 0x32	; 50
    1180:	99 e0       	ldi	r25, 0x09	; 9
    1182:	0c d5       	rcall	.+2584   	; 0x1b9c <ringBufferPush>
    1184:	e9 ec       	ldi	r30, 0xC9	; 201
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	80 62       	ori	r24, 0x20	; 32
    118c:	80 83       	st	Z, r24
    118e:	e8 ec       	ldi	r30, 0xC8	; 200
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	80 64       	ori	r24, 0x40	; 64
    1196:	80 83       	st	Z, r24
    1198:	cf 91       	pop	r28
    119a:	08 95       	ret

0000119c <myUSART_transmitUSART1>:
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	ec 01       	movw	r28, r24
    11a2:	88 81       	ld	r24, Y
    11a4:	88 23       	and	r24, r24
    11a6:	29 f0       	breq	.+10     	; 0x11b2 <myUSART_transmitUSART1+0x16>
    11a8:	21 96       	adiw	r28, 0x01	; 1
    11aa:	e1 df       	rcall	.-62     	; 0x116e <myUSART_transmitUSART1_c>
    11ac:	89 91       	ld	r24, Y+
    11ae:	81 11       	cpse	r24, r1
    11b0:	fc cf       	rjmp	.-8      	; 0x11aa <myUSART_transmitUSART1+0xe>
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	08 95       	ret

000011b8 <myUSART_transmitUSART0>:
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	ec 01       	movw	r28, r24
    11be:	88 81       	ld	r24, Y
    11c0:	88 23       	and	r24, r24
    11c2:	29 f0       	breq	.+10     	; 0x11ce <myUSART_transmitUSART0+0x16>
    11c4:	21 96       	adiw	r28, 0x01	; 1
    11c6:	bc df       	rcall	.-136    	; 0x1140 <myUSART_transmitUSART0_c>
    11c8:	89 91       	ld	r24, Y+
    11ca:	81 11       	cpse	r24, r1
    11cc:	fc cf       	rjmp	.-8      	; 0x11c6 <myUSART_transmitUSART0+0xe>
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	08 95       	ret

000011d4 <myUSART_receiveUSART1>:
    11d4:	cf 93       	push	r28
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	4f ef       	ldi	r20, 0xFF	; 255
    11da:	5f ef       	ldi	r21, 0xFF	; 255
    11dc:	60 e0       	ldi	r22, 0x00	; 0
    11de:	70 e0       	ldi	r23, 0x00	; 0
    11e0:	80 91 30 09 	lds	r24, 0x0930
    11e4:	90 91 31 09 	lds	r25, 0x0931
    11e8:	03 d4       	rcall	.+2054   	; 0x19f0 <xQueueGenericReceive>
    11ea:	8c e3       	ldi	r24, 0x3C	; 60
    11ec:	99 e0       	ldi	r25, 0x09	; 9
    11ee:	c4 d4       	rcall	.+2440   	; 0x1b78 <ringBufferPop>
    11f0:	c8 2f       	mov	r28, r24
    11f2:	8c e3       	ldi	r24, 0x3C	; 60
    11f4:	99 e0       	ldi	r25, 0x09	; 9
    11f6:	f0 d4       	rcall	.+2528   	; 0x1bd8 <ringBufferNotEmpty>
    11f8:	88 23       	and	r24, r24
    11fa:	51 f0       	breq	.+20     	; 0x1210 <myUSART_receiveUSART1+0x3c>
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	40 e0       	ldi	r20, 0x00	; 0
    1200:	50 e0       	ldi	r21, 0x00	; 0
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	80 91 30 09 	lds	r24, 0x0930
    120a:	90 91 31 09 	lds	r25, 0x0931
    120e:	f8 d2       	rcall	.+1520   	; 0x1800 <xQueueGenericSend>
    1210:	8c 2f       	mov	r24, r28
    1212:	cf 91       	pop	r28
    1214:	08 95       	ret

00001216 <myUSART_startHandShake>:

// 0 if fail, 1 success
char myUSART_startHandShake()
{
	
	myUSART_transmitUSART1_c(HANDSHAKE_START);
    1216:	86 e1       	ldi	r24, 0x16	; 22
    1218:	aa df       	rcall	.-172    	; 0x116e <myUSART_transmitUSART1_c>

	if( xSemaphoreTake( semaUsart1HandShake, ( TickType_t ) HANDSHAKE_TIMEOUT ) == pdTRUE )
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	4a ef       	ldi	r20, 0xFA	; 250
    121e:	50 e0       	ldi	r21, 0x00	; 0
    1220:	60 e0       	ldi	r22, 0x00	; 0
    1222:	70 e0       	ldi	r23, 0x00	; 0
    1224:	80 91 ec 08 	lds	r24, 0x08EC
    1228:	90 91 ed 08 	lds	r25, 0x08ED
    122c:	e1 d3       	rcall	.+1986   	; 0x19f0 <xQueueGenericReceive>
    122e:	81 30       	cpi	r24, 0x01	; 1
    1230:	21 f4       	brne	.+8      	; 0x123a <myUSART_startHandShake+0x24>
	{	
		// got the semaphore
		myUSART_transmitUSART1_c(HANDSHAKE_FIN);
    1232:	82 e0       	ldi	r24, 0x02	; 2
    1234:	9c df       	rcall	.-200    	; 0x116e <myUSART_transmitUSART1_c>
		return 1;
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	08 95       	ret
	}
	else
	{
		return 0;
    123a:	80 e0       	ldi	r24, 0x00	; 0
	}


	//xSemaphoreTake(semaUsart1HandShake, portMAX_DELAY); // wait for handshake to be ack...
	//( TickType_t ) 10 ) == pdTRUE ... if fail return 0 => at main put state to determine when to send to UART1...
}
    123c:	08 95       	ret

0000123e <myUSART_completeHandShake>:


void myUSART_completeHandShake()
{
	xSemaphoreGive(semaUsart1HandShake);	
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	40 e0       	ldi	r20, 0x00	; 0
    1242:	50 e0       	ldi	r21, 0x00	; 0
    1244:	60 e0       	ldi	r22, 0x00	; 0
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	80 91 ec 08 	lds	r24, 0x08EC
    124c:	90 91 ed 08 	lds	r25, 0x08ED
    1250:	d7 c2       	rjmp	.+1454   	; 0x1800 <xQueueGenericSend>
    1252:	08 95       	ret

00001254 <myUSART_receiveHandShakeAck>:
}

char myUSART_receiveHandShakeAck(unsigned char message)
{
	return (message == HANDSHAKE_ACK);
    1254:	91 e0       	ldi	r25, 0x01	; 1
    1256:	85 30       	cpi	r24, 0x05	; 5
    1258:	09 f0       	breq	.+2      	; 0x125c <myUSART_receiveHandShakeAck+0x8>
    125a:	90 e0       	ldi	r25, 0x00	; 0
}
    125c:	89 2f       	mov	r24, r25
    125e:	08 95       	ret

00001260 <myUSART_receiveHandShakeStart>:

char myUSART_receiveHandShakeStart(unsigned char message)
{
	return (message == HANDSHAKE_START);
    1260:	91 e0       	ldi	r25, 0x01	; 1
    1262:	86 31       	cpi	r24, 0x16	; 22
    1264:	09 f0       	breq	.+2      	; 0x1268 <myUSART_receiveHandShakeStart+0x8>
    1266:	90 e0       	ldi	r25, 0x00	; 0
}
    1268:	89 2f       	mov	r24, r25
    126a:	08 95       	ret

0000126c <myUSART_receiveHandShakeFin>:


char myUSART_receiveHandShakeFin(unsigned char message)
{
	return (message == HANDSHAKE_FIN);
    126c:	91 e0       	ldi	r25, 0x01	; 1
    126e:	82 30       	cpi	r24, 0x02	; 2
    1270:	09 f0       	breq	.+2      	; 0x1274 <myUSART_receiveHandShakeFin+0x8>
    1272:	90 e0       	ldi	r25, 0x00	; 0
}
    1274:	89 2f       	mov	r24, r25
    1276:	08 95       	ret

00001278 <myUSART_receiveMessageACK>:


char myUSART_receiveMessageACK(unsigned char message)
{
	return (message == MESSAGE_ACK);
    1278:	91 e0       	ldi	r25, 0x01	; 1
    127a:	86 30       	cpi	r24, 0x06	; 6
    127c:	09 f0       	breq	.+2      	; 0x1280 <myUSART_receiveMessageACK+0x8>
    127e:	90 e0       	ldi	r25, 0x00	; 0
}
    1280:	89 2f       	mov	r24, r25
    1282:	08 95       	ret

00001284 <myUSART_peekReceiveUSART1>:


unsigned char myUSART_peekReceiveUSART1()
{
    1284:	cf 93       	push	r28
	unsigned char data;
	
	xSemaphoreTake(semaUsart1Receive, portMAX_DELAY);
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	4f ef       	ldi	r20, 0xFF	; 255
    128a:	5f ef       	ldi	r21, 0xFF	; 255
    128c:	60 e0       	ldi	r22, 0x00	; 0
    128e:	70 e0       	ldi	r23, 0x00	; 0
    1290:	80 91 30 09 	lds	r24, 0x0930
    1294:	90 91 31 09 	lds	r25, 0x0931
    1298:	ab d3       	rcall	.+1878   	; 0x19f0 <xQueueGenericReceive>
	data = ringBufferPeek(&uart1_rxRingBuffer);
    129a:	8c e3       	ldi	r24, 0x3C	; 60
    129c:	99 e0       	ldi	r25, 0x09	; 9
    129e:	62 d4       	rcall	.+2244   	; 0x1b64 <ringBufferPeek>
    12a0:	c8 2f       	mov	r28, r24
	
	//need?
	if(ringBufferNotEmpty(&uart1_rxRingBuffer))
    12a2:	8c e3       	ldi	r24, 0x3C	; 60
    12a4:	99 e0       	ldi	r25, 0x09	; 9
    12a6:	98 d4       	rcall	.+2352   	; 0x1bd8 <ringBufferNotEmpty>
    12a8:	88 23       	and	r24, r24
    12aa:	51 f0       	breq	.+20     	; 0x12c0 <myUSART_peekReceiveUSART1+0x3c>
	{
		xSemaphoreGive(semaUsart1Receive);
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	40 e0       	ldi	r20, 0x00	; 0
    12b0:	50 e0       	ldi	r21, 0x00	; 0
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	80 91 30 09 	lds	r24, 0x0930
    12ba:	90 91 31 09 	lds	r25, 0x0931
    12be:	a0 d2       	rcall	.+1344   	; 0x1800 <xQueueGenericSend>
	}
	
	return data;
    12c0:	8c 2f       	mov	r24, r28
    12c2:	cf 91       	pop	r28
    12c4:	08 95       	ret

000012c6 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    12c6:	31 e1       	ldi	r19, 0x11	; 17
    12c8:	fc 01       	movw	r30, r24
    12ca:	30 83       	st	Z, r19
    12cc:	31 97       	sbiw	r30, 0x01	; 1
    12ce:	22 e2       	ldi	r18, 0x22	; 34
    12d0:	20 83       	st	Z, r18
    12d2:	31 97       	sbiw	r30, 0x01	; 1
    12d4:	a3 e3       	ldi	r26, 0x33	; 51
    12d6:	a0 83       	st	Z, r26
    12d8:	31 97       	sbiw	r30, 0x01	; 1
    12da:	60 83       	st	Z, r22
    12dc:	31 97       	sbiw	r30, 0x01	; 1
    12de:	70 83       	st	Z, r23
    12e0:	31 97       	sbiw	r30, 0x01	; 1
    12e2:	10 82       	st	Z, r1
    12e4:	31 97       	sbiw	r30, 0x01	; 1
    12e6:	10 82       	st	Z, r1
    12e8:	31 97       	sbiw	r30, 0x01	; 1
    12ea:	60 e8       	ldi	r22, 0x80	; 128
    12ec:	60 83       	st	Z, r22
    12ee:	31 97       	sbiw	r30, 0x01	; 1
    12f0:	10 82       	st	Z, r1
    12f2:	31 97       	sbiw	r30, 0x01	; 1
    12f4:	10 82       	st	Z, r1
    12f6:	31 97       	sbiw	r30, 0x01	; 1
    12f8:	10 82       	st	Z, r1
    12fa:	31 97       	sbiw	r30, 0x01	; 1
    12fc:	62 e0       	ldi	r22, 0x02	; 2
    12fe:	60 83       	st	Z, r22
    1300:	31 97       	sbiw	r30, 0x01	; 1
    1302:	63 e0       	ldi	r22, 0x03	; 3
    1304:	60 83       	st	Z, r22
    1306:	31 97       	sbiw	r30, 0x01	; 1
    1308:	64 e0       	ldi	r22, 0x04	; 4
    130a:	60 83       	st	Z, r22
    130c:	31 97       	sbiw	r30, 0x01	; 1
    130e:	65 e0       	ldi	r22, 0x05	; 5
    1310:	60 83       	st	Z, r22
    1312:	31 97       	sbiw	r30, 0x01	; 1
    1314:	66 e0       	ldi	r22, 0x06	; 6
    1316:	60 83       	st	Z, r22
    1318:	31 97       	sbiw	r30, 0x01	; 1
    131a:	67 e0       	ldi	r22, 0x07	; 7
    131c:	60 83       	st	Z, r22
    131e:	31 97       	sbiw	r30, 0x01	; 1
    1320:	68 e0       	ldi	r22, 0x08	; 8
    1322:	60 83       	st	Z, r22
    1324:	31 97       	sbiw	r30, 0x01	; 1
    1326:	69 e0       	ldi	r22, 0x09	; 9
    1328:	60 83       	st	Z, r22
    132a:	31 97       	sbiw	r30, 0x01	; 1
    132c:	60 e1       	ldi	r22, 0x10	; 16
    132e:	60 83       	st	Z, r22
    1330:	31 97       	sbiw	r30, 0x01	; 1
    1332:	30 83       	st	Z, r19
    1334:	31 97       	sbiw	r30, 0x01	; 1
    1336:	32 e1       	ldi	r19, 0x12	; 18
    1338:	30 83       	st	Z, r19
    133a:	31 97       	sbiw	r30, 0x01	; 1
    133c:	33 e1       	ldi	r19, 0x13	; 19
    133e:	30 83       	st	Z, r19
    1340:	31 97       	sbiw	r30, 0x01	; 1
    1342:	34 e1       	ldi	r19, 0x14	; 20
    1344:	30 83       	st	Z, r19
    1346:	31 97       	sbiw	r30, 0x01	; 1
    1348:	35 e1       	ldi	r19, 0x15	; 21
    134a:	30 83       	st	Z, r19
    134c:	31 97       	sbiw	r30, 0x01	; 1
    134e:	36 e1       	ldi	r19, 0x16	; 22
    1350:	30 83       	st	Z, r19
    1352:	31 97       	sbiw	r30, 0x01	; 1
    1354:	37 e1       	ldi	r19, 0x17	; 23
    1356:	30 83       	st	Z, r19
    1358:	31 97       	sbiw	r30, 0x01	; 1
    135a:	38 e1       	ldi	r19, 0x18	; 24
    135c:	30 83       	st	Z, r19
    135e:	31 97       	sbiw	r30, 0x01	; 1
    1360:	39 e1       	ldi	r19, 0x19	; 25
    1362:	30 83       	st	Z, r19
    1364:	31 97       	sbiw	r30, 0x01	; 1
    1366:	30 e2       	ldi	r19, 0x20	; 32
    1368:	30 83       	st	Z, r19
    136a:	31 97       	sbiw	r30, 0x01	; 1
    136c:	31 e2       	ldi	r19, 0x21	; 33
    136e:	30 83       	st	Z, r19
    1370:	31 97       	sbiw	r30, 0x01	; 1
    1372:	20 83       	st	Z, r18
    1374:	31 97       	sbiw	r30, 0x01	; 1
    1376:	23 e2       	ldi	r18, 0x23	; 35
    1378:	20 83       	st	Z, r18
    137a:	31 97       	sbiw	r30, 0x01	; 1
    137c:	40 83       	st	Z, r20
    137e:	31 97       	sbiw	r30, 0x01	; 1
    1380:	50 83       	st	Z, r21
    1382:	31 97       	sbiw	r30, 0x01	; 1
    1384:	26 e2       	ldi	r18, 0x26	; 38
    1386:	20 83       	st	Z, r18
    1388:	31 97       	sbiw	r30, 0x01	; 1
    138a:	27 e2       	ldi	r18, 0x27	; 39
    138c:	20 83       	st	Z, r18
    138e:	31 97       	sbiw	r30, 0x01	; 1
    1390:	28 e2       	ldi	r18, 0x28	; 40
    1392:	20 83       	st	Z, r18
    1394:	31 97       	sbiw	r30, 0x01	; 1
    1396:	29 e2       	ldi	r18, 0x29	; 41
    1398:	20 83       	st	Z, r18
    139a:	31 97       	sbiw	r30, 0x01	; 1
    139c:	20 e3       	ldi	r18, 0x30	; 48
    139e:	20 83       	st	Z, r18
    13a0:	31 97       	sbiw	r30, 0x01	; 1
    13a2:	21 e3       	ldi	r18, 0x31	; 49
    13a4:	20 83       	st	Z, r18
    13a6:	89 97       	sbiw	r24, 0x29	; 41
    13a8:	08 95       	ret

000013aa <xPortStartScheduler>:
    13aa:	82 e0       	ldi	r24, 0x02	; 2
    13ac:	84 bd       	out	0x24, r24	; 36
    13ae:	16 bc       	out	0x26, r1	; 38
    13b0:	80 e3       	ldi	r24, 0x30	; 48
    13b2:	87 bd       	out	0x27, r24	; 39
    13b4:	ee e6       	ldi	r30, 0x6E	; 110
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	82 60       	ori	r24, 0x02	; 2
    13bc:	80 83       	st	Z, r24
    13be:	83 e0       	ldi	r24, 0x03	; 3
    13c0:	85 bd       	out	0x25, r24	; 37
    13c2:	a0 91 87 08 	lds	r26, 0x0887
    13c6:	b0 91 88 08 	lds	r27, 0x0888
    13ca:	cd 91       	ld	r28, X+
    13cc:	cd bf       	out	0x3d, r28	; 61
    13ce:	dd 91       	ld	r29, X+
    13d0:	de bf       	out	0x3e, r29	; 62
    13d2:	ff 91       	pop	r31
    13d4:	ef 91       	pop	r30
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	bf 91       	pop	r27
    13dc:	af 91       	pop	r26
    13de:	9f 91       	pop	r25
    13e0:	8f 91       	pop	r24
    13e2:	7f 91       	pop	r23
    13e4:	6f 91       	pop	r22
    13e6:	5f 91       	pop	r21
    13e8:	4f 91       	pop	r20
    13ea:	3f 91       	pop	r19
    13ec:	2f 91       	pop	r18
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	ff 90       	pop	r15
    13f4:	ef 90       	pop	r14
    13f6:	df 90       	pop	r13
    13f8:	cf 90       	pop	r12
    13fa:	bf 90       	pop	r11
    13fc:	af 90       	pop	r10
    13fe:	9f 90       	pop	r9
    1400:	8f 90       	pop	r8
    1402:	7f 90       	pop	r7
    1404:	6f 90       	pop	r6
    1406:	5f 90       	pop	r5
    1408:	4f 90       	pop	r4
    140a:	3f 90       	pop	r3
    140c:	2f 90       	pop	r2
    140e:	1f 90       	pop	r1
    1410:	0f 90       	pop	r0
    1412:	0c be       	out	0x3c, r0	; 60
    1414:	0f 90       	pop	r0
    1416:	0b be       	out	0x3b, r0	; 59
    1418:	0f 90       	pop	r0
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	0f 90       	pop	r0
    141e:	08 95       	ret
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	08 95       	ret

00001424 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1424:	0f 92       	push	r0
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	0f 92       	push	r0
    142c:	0b b6       	in	r0, 0x3b	; 59
    142e:	0f 92       	push	r0
    1430:	0c b6       	in	r0, 0x3c	; 60
    1432:	0f 92       	push	r0
    1434:	1f 92       	push	r1
    1436:	11 24       	eor	r1, r1
    1438:	2f 92       	push	r2
    143a:	3f 92       	push	r3
    143c:	4f 92       	push	r4
    143e:	5f 92       	push	r5
    1440:	6f 92       	push	r6
    1442:	7f 92       	push	r7
    1444:	8f 92       	push	r8
    1446:	9f 92       	push	r9
    1448:	af 92       	push	r10
    144a:	bf 92       	push	r11
    144c:	cf 92       	push	r12
    144e:	df 92       	push	r13
    1450:	ef 92       	push	r14
    1452:	ff 92       	push	r15
    1454:	0f 93       	push	r16
    1456:	1f 93       	push	r17
    1458:	2f 93       	push	r18
    145a:	3f 93       	push	r19
    145c:	4f 93       	push	r20
    145e:	5f 93       	push	r21
    1460:	6f 93       	push	r22
    1462:	7f 93       	push	r23
    1464:	8f 93       	push	r24
    1466:	9f 93       	push	r25
    1468:	af 93       	push	r26
    146a:	bf 93       	push	r27
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	ef 93       	push	r30
    1472:	ff 93       	push	r31
    1474:	a0 91 87 08 	lds	r26, 0x0887
    1478:	b0 91 88 08 	lds	r27, 0x0888
    147c:	0d b6       	in	r0, 0x3d	; 61
    147e:	0d 92       	st	X+, r0
    1480:	0e b6       	in	r0, 0x3e	; 62
    1482:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1484:	5b d7       	rcall	.+3766   	; 0x233c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1486:	a0 91 87 08 	lds	r26, 0x0887
    148a:	b0 91 88 08 	lds	r27, 0x0888
    148e:	cd 91       	ld	r28, X+
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	dd 91       	ld	r29, X+
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	ff 91       	pop	r31
    1498:	ef 91       	pop	r30
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	bf 91       	pop	r27
    14a0:	af 91       	pop	r26
    14a2:	9f 91       	pop	r25
    14a4:	8f 91       	pop	r24
    14a6:	7f 91       	pop	r23
    14a8:	6f 91       	pop	r22
    14aa:	5f 91       	pop	r21
    14ac:	4f 91       	pop	r20
    14ae:	3f 91       	pop	r19
    14b0:	2f 91       	pop	r18
    14b2:	1f 91       	pop	r17
    14b4:	0f 91       	pop	r16
    14b6:	ff 90       	pop	r15
    14b8:	ef 90       	pop	r14
    14ba:	df 90       	pop	r13
    14bc:	cf 90       	pop	r12
    14be:	bf 90       	pop	r11
    14c0:	af 90       	pop	r10
    14c2:	9f 90       	pop	r9
    14c4:	8f 90       	pop	r8
    14c6:	7f 90       	pop	r7
    14c8:	6f 90       	pop	r6
    14ca:	5f 90       	pop	r5
    14cc:	4f 90       	pop	r4
    14ce:	3f 90       	pop	r3
    14d0:	2f 90       	pop	r2
    14d2:	1f 90       	pop	r1
    14d4:	0f 90       	pop	r0
    14d6:	0c be       	out	0x3c, r0	; 60
    14d8:	0f 90       	pop	r0
    14da:	0b be       	out	0x3b, r0	; 59
    14dc:	0f 90       	pop	r0
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	0f 90       	pop	r0

	asm volatile ( "ret" );
    14e2:	08 95       	ret

000014e4 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    14e4:	0f 92       	push	r0
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	0f 92       	push	r0
    14ec:	0b b6       	in	r0, 0x3b	; 59
    14ee:	0f 92       	push	r0
    14f0:	0c b6       	in	r0, 0x3c	; 60
    14f2:	0f 92       	push	r0
    14f4:	1f 92       	push	r1
    14f6:	11 24       	eor	r1, r1
    14f8:	2f 92       	push	r2
    14fa:	3f 92       	push	r3
    14fc:	4f 92       	push	r4
    14fe:	5f 92       	push	r5
    1500:	6f 92       	push	r6
    1502:	7f 92       	push	r7
    1504:	8f 92       	push	r8
    1506:	9f 92       	push	r9
    1508:	af 92       	push	r10
    150a:	bf 92       	push	r11
    150c:	cf 92       	push	r12
    150e:	df 92       	push	r13
    1510:	ef 92       	push	r14
    1512:	ff 92       	push	r15
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	2f 93       	push	r18
    151a:	3f 93       	push	r19
    151c:	4f 93       	push	r20
    151e:	5f 93       	push	r21
    1520:	6f 93       	push	r22
    1522:	7f 93       	push	r23
    1524:	8f 93       	push	r24
    1526:	9f 93       	push	r25
    1528:	af 93       	push	r26
    152a:	bf 93       	push	r27
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	ef 93       	push	r30
    1532:	ff 93       	push	r31
    1534:	a0 91 87 08 	lds	r26, 0x0887
    1538:	b0 91 88 08 	lds	r27, 0x0888
    153c:	0d b6       	in	r0, 0x3d	; 61
    153e:	0d 92       	st	X+, r0
    1540:	0e b6       	in	r0, 0x3e	; 62
    1542:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    1544:	45 d5       	rcall	.+2698   	; 0x1fd0 <xTaskIncrementTick>
    1546:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    1548:	f9 d6       	rcall	.+3570   	; 0x233c <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    154a:	a0 91 87 08 	lds	r26, 0x0887
    154e:	b0 91 88 08 	lds	r27, 0x0888
    1552:	cd 91       	ld	r28, X+
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	dd 91       	ld	r29, X+
    1558:	de bf       	out	0x3e, r29	; 62
    155a:	ff 91       	pop	r31
    155c:	ef 91       	pop	r30
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	bf 91       	pop	r27
    1564:	af 91       	pop	r26
    1566:	9f 91       	pop	r25
    1568:	8f 91       	pop	r24
    156a:	7f 91       	pop	r23
    156c:	6f 91       	pop	r22
    156e:	5f 91       	pop	r21
    1570:	4f 91       	pop	r20
    1572:	3f 91       	pop	r19
    1574:	2f 91       	pop	r18
    1576:	1f 91       	pop	r17
    1578:	0f 91       	pop	r16
    157a:	ff 90       	pop	r15
    157c:	ef 90       	pop	r14
    157e:	df 90       	pop	r13
    1580:	cf 90       	pop	r12
    1582:	bf 90       	pop	r11
    1584:	af 90       	pop	r10
    1586:	9f 90       	pop	r9
    1588:	8f 90       	pop	r8
    158a:	7f 90       	pop	r7
    158c:	6f 90       	pop	r6
    158e:	5f 90       	pop	r5
    1590:	4f 90       	pop	r4
    1592:	3f 90       	pop	r3
    1594:	2f 90       	pop	r2
    1596:	1f 90       	pop	r1
    1598:	0f 90       	pop	r0
    159a:	0c be       	out	0x3c, r0	; 60
    159c:	0f 90       	pop	r0
    159e:	0b be       	out	0x3b, r0	; 59
    15a0:	0f 90       	pop	r0
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	0f 90       	pop	r0

	asm volatile ( "ret" );
    15a6:	08 95       	ret

000015a8 <__vector_21>:
	 * the context is saved at the start of vPortYieldFromTick().  The tick
	 * count is incremented after the context is saved.
	 */
	 ISR(TIMER0_COMPA_vect, ISR_NAKED)
	 {
		 vPortYieldFromTick();
    15a8:	9d df       	rcall	.-198    	; 0x14e4 <vPortYieldFromTick>
		 asm volatile ("reti");
    15aa:	18 95       	reti

000015ac <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    15ac:	1f 93       	push	r17
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29
    15b2:	ec 01       	movw	r28, r24
    15b4:	14 2f       	mov	r17, r20
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    15b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15b8:	81 11       	cpse	r24, r1
    15ba:	0c c0       	rjmp	.+24     	; 0x15d4 <prvCopyDataToQueue+0x28>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    15bc:	88 81       	ld	r24, Y
    15be:	99 81       	ldd	r25, Y+1	; 0x01
    15c0:	89 2b       	or	r24, r25
    15c2:	09 f0       	breq	.+2      	; 0x15c6 <prvCopyDataToQueue+0x1a>
    15c4:	47 c0       	rjmp	.+142    	; 0x1654 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	9b 81       	ldd	r25, Y+3	; 0x03
    15ca:	0e 94 61 13 	call	0x26c2	; 0x26c2 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    15ce:	1b 82       	std	Y+3, r1	; 0x03
    15d0:	1a 82       	std	Y+2, r1	; 0x02
    15d2:	47 c0       	rjmp	.+142    	; 0x1662 <prvCopyDataToQueue+0xb6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    15d4:	41 11       	cpse	r20, r1
    15d6:	18 c0       	rjmp	.+48     	; 0x1608 <prvCopyDataToQueue+0x5c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    15d8:	48 2f       	mov	r20, r24
    15da:	50 e0       	ldi	r21, 0x00	; 0
    15dc:	8c 81       	ldd	r24, Y+4	; 0x04
    15de:	9d 81       	ldd	r25, Y+5	; 0x05
    15e0:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    15e4:	2c 8d       	ldd	r18, Y+28	; 0x1c
    15e6:	8c 81       	ldd	r24, Y+4	; 0x04
    15e8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ea:	82 0f       	add	r24, r18
    15ec:	91 1d       	adc	r25, r1
    15ee:	9d 83       	std	Y+5, r25	; 0x05
    15f0:	8c 83       	std	Y+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    15f2:	2a 81       	ldd	r18, Y+2	; 0x02
    15f4:	3b 81       	ldd	r19, Y+3	; 0x03
    15f6:	82 17       	cp	r24, r18
    15f8:	93 07       	cpc	r25, r19
    15fa:	70 f1       	brcs	.+92     	; 0x1658 <prvCopyDataToQueue+0xac>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    15fc:	88 81       	ld	r24, Y
    15fe:	99 81       	ldd	r25, Y+1	; 0x01
    1600:	9d 83       	std	Y+5, r25	; 0x05
    1602:	8c 83       	std	Y+4, r24	; 0x04
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	2d c0       	rjmp	.+90     	; 0x1662 <prvCopyDataToQueue+0xb6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1608:	48 2f       	mov	r20, r24
    160a:	50 e0       	ldi	r21, 0x00	; 0
    160c:	8e 81       	ldd	r24, Y+6	; 0x06
    160e:	9f 81       	ldd	r25, Y+7	; 0x07
    1610:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    1614:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	31 95       	neg	r19
    161a:	21 95       	neg	r18
    161c:	31 09       	sbc	r19, r1
    161e:	8e 81       	ldd	r24, Y+6	; 0x06
    1620:	9f 81       	ldd	r25, Y+7	; 0x07
    1622:	82 0f       	add	r24, r18
    1624:	93 1f       	adc	r25, r19
    1626:	9f 83       	std	Y+7, r25	; 0x07
    1628:	8e 83       	std	Y+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    162a:	68 81       	ld	r22, Y
    162c:	79 81       	ldd	r23, Y+1	; 0x01
    162e:	86 17       	cp	r24, r22
    1630:	97 07       	cpc	r25, r23
    1632:	30 f4       	brcc	.+12     	; 0x1640 <prvCopyDataToQueue+0x94>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	9b 81       	ldd	r25, Y+3	; 0x03
    1638:	28 0f       	add	r18, r24
    163a:	39 1f       	adc	r19, r25
    163c:	3f 83       	std	Y+7, r19	; 0x07
    163e:	2e 83       	std	Y+6, r18	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    1640:	12 30       	cpi	r17, 0x02	; 2
    1642:	61 f4       	brne	.+24     	; 0x165c <prvCopyDataToQueue+0xb0>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    1644:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1646:	88 23       	and	r24, r24
    1648:	59 f0       	breq	.+22     	; 0x1660 <prvCopyDataToQueue+0xb4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
    164a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    164c:	81 50       	subi	r24, 0x01	; 1
    164e:	8a 8f       	std	Y+26, r24	; 0x1a
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	07 c0       	rjmp	.+14     	; 0x1662 <prvCopyDataToQueue+0xb6>
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	05 c0       	rjmp	.+10     	; 0x1662 <prvCopyDataToQueue+0xb6>
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	03 c0       	rjmp	.+6      	; 0x1662 <prvCopyDataToQueue+0xb6>
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	01 c0       	rjmp	.+2      	; 0x1662 <prvCopyDataToQueue+0xb6>
    1660:	80 e0       	ldi	r24, 0x00	; 0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    1662:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1664:	9f 5f       	subi	r25, 0xFF	; 255
    1666:	9a 8f       	std	Y+26, r25	; 0x1a

	return xReturn;
}
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	1f 91       	pop	r17
    166e:	08 95       	ret

00001670 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    1670:	fc 01       	movw	r30, r24
    1672:	cb 01       	movw	r24, r22
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    1674:	44 8d       	ldd	r20, Z+28	; 0x1c
    1676:	44 23       	and	r20, r20
    1678:	a1 f0       	breq	.+40     	; 0x16a2 <prvCopyDataFromQueue+0x32>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    167a:	50 e0       	ldi	r21, 0x00	; 0
    167c:	26 81       	ldd	r18, Z+6	; 0x06
    167e:	37 81       	ldd	r19, Z+7	; 0x07
    1680:	24 0f       	add	r18, r20
    1682:	35 1f       	adc	r19, r21
    1684:	37 83       	std	Z+7, r19	; 0x07
    1686:	26 83       	std	Z+6, r18	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    1688:	62 81       	ldd	r22, Z+2	; 0x02
    168a:	73 81       	ldd	r23, Z+3	; 0x03
    168c:	26 17       	cp	r18, r22
    168e:	37 07       	cpc	r19, r23
    1690:	20 f0       	brcs	.+8      	; 0x169a <prvCopyDataFromQueue+0x2a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    1692:	20 81       	ld	r18, Z
    1694:	31 81       	ldd	r19, Z+1	; 0x01
    1696:	37 83       	std	Z+7, r19	; 0x07
    1698:	26 83       	std	Z+6, r18	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    169a:	66 81       	ldd	r22, Z+6	; 0x06
    169c:	77 81       	ldd	r23, Z+7	; 0x07
    169e:	0c 94 2d 17 	jmp	0x2e5a	; 0x2e5a <memcpy>
    16a2:	08 95       	ret

000016a4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    16a4:	0f 93       	push	r16
    16a6:	1f 93       	push	r17
    16a8:	cf 93       	push	r28
    16aa:	df 93       	push	r29
    16ac:	ec 01       	movw	r28, r24

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    16b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16b6:	18 16       	cp	r1, r24
    16b8:	a4 f4       	brge	.+40     	; 0x16e2 <prvUnlockQueue+0x3e>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    16ba:	89 89       	ldd	r24, Y+17	; 0x11
    16bc:	88 23       	and	r24, r24
    16be:	89 f0       	breq	.+34     	; 0x16e2 <prvUnlockQueue+0x3e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    16c0:	8e 01       	movw	r16, r28
    16c2:	0f 5e       	subi	r16, 0xEF	; 239
    16c4:	1f 4f       	sbci	r17, 0xFF	; 255
    16c6:	03 c0       	rjmp	.+6      	; 0x16ce <prvUnlockQueue+0x2a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    16c8:	89 89       	ldd	r24, Y+17	; 0x11
    16ca:	88 23       	and	r24, r24
    16cc:	51 f0       	breq	.+20     	; 0x16e2 <prvUnlockQueue+0x3e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    16ce:	c8 01       	movw	r24, r16
    16d0:	0b d7       	rcall	.+3606   	; 0x24e8 <xTaskRemoveFromEventList>
    16d2:	81 11       	cpse	r24, r1
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    16d4:	94 d7       	rcall	.+3880   	; 0x25fe <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    16d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16d8:	81 50       	subi	r24, 0x01	; 1
    16da:	8e 8f       	std	Y+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    16dc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16de:	18 16       	cp	r1, r24
    16e0:	9c f3       	brlt	.-26     	; 0x16c8 <prvUnlockQueue+0x24>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    16e2:	8f ef       	ldi	r24, 0xFF	; 255
    16e4:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    16e6:	0f 90       	pop	r0
    16e8:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    16ea:	0f b6       	in	r0, 0x3f	; 63
    16ec:	f8 94       	cli
    16ee:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    16f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16f2:	18 16       	cp	r1, r24
    16f4:	a4 f4       	brge	.+40     	; 0x171e <prvUnlockQueue+0x7a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    16f6:	88 85       	ldd	r24, Y+8	; 0x08
    16f8:	88 23       	and	r24, r24
    16fa:	89 f0       	breq	.+34     	; 0x171e <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    16fc:	8e 01       	movw	r16, r28
    16fe:	08 5f       	subi	r16, 0xF8	; 248
    1700:	1f 4f       	sbci	r17, 0xFF	; 255
    1702:	03 c0       	rjmp	.+6      	; 0x170a <prvUnlockQueue+0x66>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1704:	88 85       	ldd	r24, Y+8	; 0x08
    1706:	88 23       	and	r24, r24
    1708:	51 f0       	breq	.+20     	; 0x171e <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    170a:	c8 01       	movw	r24, r16
    170c:	ed d6       	rcall	.+3546   	; 0x24e8 <xTaskRemoveFromEventList>
    170e:	81 11       	cpse	r24, r1
				{
					vTaskMissedYield();
    1710:	76 d7       	rcall	.+3820   	; 0x25fe <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    1712:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1714:	81 50       	subi	r24, 0x01	; 1
    1716:	8d 8f       	std	Y+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    1718:	8d 8d       	ldd	r24, Y+29	; 0x1d
    171a:	18 16       	cp	r1, r24
    171c:	9c f3       	brlt	.-26     	; 0x1704 <prvUnlockQueue+0x60>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    171e:	8f ef       	ldi	r24, 0xFF	; 255
    1720:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    1722:	0f 90       	pop	r0
    1724:	0f be       	out	0x3f, r0	; 63
}
    1726:	df 91       	pop	r29
    1728:	cf 91       	pop	r28
    172a:	1f 91       	pop	r17
    172c:	0f 91       	pop	r16
    172e:	08 95       	ret

00001730 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	ec 01       	movw	r28, r24
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    173c:	88 81       	ld	r24, Y
    173e:	99 81       	ldd	r25, Y+1	; 0x01
    1740:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1746:	72 9f       	mul	r23, r18
    1748:	a0 01       	movw	r20, r0
    174a:	73 9f       	mul	r23, r19
    174c:	50 0d       	add	r21, r0
    174e:	11 24       	eor	r1, r1
    1750:	fc 01       	movw	r30, r24
    1752:	e4 0f       	add	r30, r20
    1754:	f5 1f       	adc	r31, r21
    1756:	fb 83       	std	Y+3, r31	; 0x03
    1758:	ea 83       	std	Y+2, r30	; 0x02
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    175a:	1a 8e       	std	Y+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    175c:	9d 83       	std	Y+5, r25	; 0x05
    175e:	8c 83       	std	Y+4, r24	; 0x04
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1760:	42 1b       	sub	r20, r18
    1762:	53 0b       	sbc	r21, r19
    1764:	84 0f       	add	r24, r20
    1766:	95 1f       	adc	r25, r21
    1768:	9f 83       	std	Y+7, r25	; 0x07
    176a:	8e 83       	std	Y+6, r24	; 0x06
		pxQueue->xRxLock = queueUNLOCKED;
    176c:	8f ef       	ldi	r24, 0xFF	; 255
    176e:	8d 8f       	std	Y+29, r24	; 0x1d
		pxQueue->xTxLock = queueUNLOCKED;
    1770:	8e 8f       	std	Y+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    1772:	61 11       	cpse	r22, r1
    1774:	0a c0       	rjmp	.+20     	; 0x178a <xQueueGenericReset+0x5a>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1776:	88 85       	ldd	r24, Y+8	; 0x08
    1778:	88 23       	and	r24, r24
    177a:	79 f0       	breq	.+30     	; 0x179a <xQueueGenericReset+0x6a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    177c:	ce 01       	movw	r24, r28
    177e:	08 96       	adiw	r24, 0x08	; 8
    1780:	b3 d6       	rcall	.+3430   	; 0x24e8 <xTaskRemoveFromEventList>
    1782:	81 30       	cpi	r24, 0x01	; 1
    1784:	51 f4       	brne	.+20     	; 0x179a <xQueueGenericReset+0x6a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    1786:	4e de       	rcall	.-868    	; 0x1424 <vPortYield>
    1788:	08 c0       	rjmp	.+16     	; 0x179a <xQueueGenericReset+0x6a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    178a:	ce 01       	movw	r24, r28
    178c:	08 96       	adiw	r24, 0x08	; 8
    178e:	0e 94 46 03 	call	0x68c	; 0x68c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1792:	ce 01       	movw	r24, r28
    1794:	41 96       	adiw	r24, 0x11	; 17
    1796:	0e 94 46 03 	call	0x68c	; 0x68c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    179a:	0f 90       	pop	r0
    179c:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	df 91       	pop	r29
    17a2:	cf 91       	pop	r28
    17a4:	08 95       	ret

000017a6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    17a6:	0f 93       	push	r16
    17a8:	1f 93       	push	r17
    17aa:	cf 93       	push	r28
    17ac:	df 93       	push	r29
    17ae:	18 2f       	mov	r17, r24
    17b0:	06 2f       	mov	r16, r22
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
    17b2:	88 23       	and	r24, r24
    17b4:	e9 f0       	breq	.+58     	; 0x17f0 <xQueueGenericCreate+0x4a>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    17b6:	8f e1       	ldi	r24, 0x1F	; 31
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	0e 94 10 03 	call	0x620	; 0x620 <pvPortMalloc>
    17be:	ec 01       	movw	r28, r24
		if( pxNewQueue != NULL )
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	c1 f0       	breq	.+48     	; 0x17f4 <xQueueGenericCreate+0x4e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    17c4:	10 9f       	mul	r17, r16
    17c6:	c0 01       	movw	r24, r0
    17c8:	11 24       	eor	r1, r1

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
    17ca:	01 96       	adiw	r24, 0x01	; 1
    17cc:	0e 94 10 03 	call	0x620	; 0x620 <pvPortMalloc>
    17d0:	99 83       	std	Y+1, r25	; 0x01
    17d2:	88 83       	st	Y, r24
			if( pxNewQueue->pcHead != NULL )
    17d4:	89 2b       	or	r24, r25
    17d6:	31 f0       	breq	.+12     	; 0x17e4 <xQueueGenericCreate+0x3e>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    17d8:	1b 8f       	std	Y+27, r17	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    17da:	0c 8f       	std	Y+28, r16	; 0x1c
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    17dc:	61 e0       	ldi	r22, 0x01	; 1
    17de:	ce 01       	movw	r24, r28
    17e0:	a7 df       	rcall	.-178    	; 0x1730 <xQueueGenericReset>
    17e2:	08 c0       	rjmp	.+16     	; 0x17f4 <xQueueGenericCreate+0x4e>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    17e4:	ce 01       	movw	r24, r28
    17e6:	0e 94 45 03 	call	0x68a	; 0x68a <vPortFree>

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
    17ea:	c0 e0       	ldi	r28, 0x00	; 0
    17ec:	d0 e0       	ldi	r29, 0x00	; 0
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <xQueueGenericCreate+0x4e>
    17f0:	c0 e0       	ldi	r28, 0x00	; 0
    17f2:	d0 e0       	ldi	r29, 0x00	; 0
	}

	configASSERT( xReturn );

	return xReturn;
}
    17f4:	ce 01       	movw	r24, r28
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	1f 91       	pop	r17
    17fc:	0f 91       	pop	r16
    17fe:	08 95       	ret

00001800 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    1800:	9f 92       	push	r9
    1802:	af 92       	push	r10
    1804:	bf 92       	push	r11
    1806:	cf 92       	push	r12
    1808:	df 92       	push	r13
    180a:	ef 92       	push	r14
    180c:	ff 92       	push	r15
    180e:	0f 93       	push	r16
    1810:	1f 93       	push	r17
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	00 d0       	rcall	.+0      	; 0x1818 <xQueueGenericSend+0x18>
    1818:	1f 92       	push	r1
    181a:	1f 92       	push	r1
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	8c 01       	movw	r16, r24
    1822:	6b 01       	movw	r12, r22
    1824:	5d 83       	std	Y+5, r21	; 0x05
    1826:	4c 83       	std	Y+4, r20	; 0x04
    1828:	a2 2e       	mov	r10, r18
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    182a:	b1 2c       	mov	r11, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    182c:	99 24       	eor	r9, r9
    182e:	93 94       	inc	r9
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1830:	7c 01       	movw	r14, r24
    1832:	88 e0       	ldi	r24, 0x08	; 8
    1834:	e8 0e       	add	r14, r24
    1836:	f1 1c       	adc	r15, r1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    183e:	f8 01       	movw	r30, r16
    1840:	92 8d       	ldd	r25, Z+26	; 0x1a
    1842:	83 8d       	ldd	r24, Z+27	; 0x1b
    1844:	98 17       	cp	r25, r24
    1846:	18 f0       	brcs	.+6      	; 0x184e <xQueueGenericSend+0x4e>
    1848:	f2 e0       	ldi	r31, 0x02	; 2
    184a:	af 12       	cpse	r10, r31
    184c:	15 c0       	rjmp	.+42     	; 0x1878 <xQueueGenericSend+0x78>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    184e:	4a 2d       	mov	r20, r10
    1850:	b6 01       	movw	r22, r12
    1852:	c8 01       	movw	r24, r16
    1854:	ab de       	rcall	.-682    	; 0x15ac <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1856:	f8 01       	movw	r30, r16
    1858:	91 89       	ldd	r25, Z+17	; 0x11
    185a:	99 23       	and	r25, r25
    185c:	39 f0       	breq	.+14     	; 0x186c <xQueueGenericSend+0x6c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    185e:	c8 01       	movw	r24, r16
    1860:	41 96       	adiw	r24, 0x11	; 17
    1862:	42 d6       	rcall	.+3204   	; 0x24e8 <xTaskRemoveFromEventList>
    1864:	81 30       	cpi	r24, 0x01	; 1
    1866:	21 f4       	brne	.+8      	; 0x1870 <xQueueGenericSend+0x70>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    1868:	dd dd       	rcall	.-1094   	; 0x1424 <vPortYield>
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <xQueueGenericSend+0x70>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    186c:	81 11       	cpse	r24, r1
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    186e:	da dd       	rcall	.-1100   	; 0x1424 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    1870:	0f 90       	pop	r0
    1872:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	46 c0       	rjmp	.+140    	; 0x1904 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1878:	ec 81       	ldd	r30, Y+4	; 0x04
    187a:	fd 81       	ldd	r31, Y+5	; 0x05
    187c:	ef 2b       	or	r30, r31
    187e:	21 f4       	brne	.+8      	; 0x1888 <xQueueGenericSend+0x88>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1880:	0f 90       	pop	r0
    1882:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	3e c0       	rjmp	.+124    	; 0x1904 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    1888:	b1 10       	cpse	r11, r1
    188a:	04 c0       	rjmp	.+8      	; 0x1894 <xQueueGenericSend+0x94>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    188c:	ce 01       	movw	r24, r28
    188e:	01 96       	adiw	r24, 0x01	; 1
    1890:	73 d6       	rcall	.+3302   	; 0x2578 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1892:	b9 2c       	mov	r11, r9
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1894:	0f 90       	pop	r0
    1896:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1898:	86 d3       	rcall	.+1804   	; 0x1fa6 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	0f 92       	push	r0
    18a0:	f8 01       	movw	r30, r16
    18a2:	85 8d       	ldd	r24, Z+29	; 0x1d
    18a4:	8f 3f       	cpi	r24, 0xFF	; 255
    18a6:	09 f4       	brne	.+2      	; 0x18aa <xQueueGenericSend+0xaa>
    18a8:	15 8e       	std	Z+29, r1	; 0x1d
    18aa:	f8 01       	movw	r30, r16
    18ac:	86 8d       	ldd	r24, Z+30	; 0x1e
    18ae:	8f 3f       	cpi	r24, 0xFF	; 255
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <xQueueGenericSend+0xb4>
    18b2:	16 8e       	std	Z+30, r1	; 0x1e
    18b4:	0f 90       	pop	r0
    18b6:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    18b8:	be 01       	movw	r22, r28
    18ba:	6c 5f       	subi	r22, 0xFC	; 252
    18bc:	7f 4f       	sbci	r23, 0xFF	; 255
    18be:	ce 01       	movw	r24, r28
    18c0:	01 96       	adiw	r24, 0x01	; 1
    18c2:	65 d6       	rcall	.+3274   	; 0x258e <xTaskCheckForTimeOut>
    18c4:	81 11       	cpse	r24, r1
    18c6:	1a c0       	rjmp	.+52     	; 0x18fc <xQueueGenericSend+0xfc>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    18ce:	f8 01       	movw	r30, r16
    18d0:	92 8d       	ldd	r25, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    18d2:	0f 90       	pop	r0
    18d4:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    18d6:	f8 01       	movw	r30, r16
    18d8:	83 8d       	ldd	r24, Z+27	; 0x1b
    18da:	98 13       	cpse	r25, r24
    18dc:	0b c0       	rjmp	.+22     	; 0x18f4 <xQueueGenericSend+0xf4>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    18de:	6c 81       	ldd	r22, Y+4	; 0x04
    18e0:	7d 81       	ldd	r23, Y+5	; 0x05
    18e2:	c7 01       	movw	r24, r14
    18e4:	d6 d5       	rcall	.+2988   	; 0x2492 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    18e6:	c8 01       	movw	r24, r16
    18e8:	dd de       	rcall	.-582    	; 0x16a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    18ea:	30 d4       	rcall	.+2144   	; 0x214c <xTaskResumeAll>
    18ec:	81 11       	cpse	r24, r1
    18ee:	a4 cf       	rjmp	.-184    	; 0x1838 <xQueueGenericSend+0x38>
				{
					portYIELD_WITHIN_API();
    18f0:	99 dd       	rcall	.-1230   	; 0x1424 <vPortYield>
    18f2:	a2 cf       	rjmp	.-188    	; 0x1838 <xQueueGenericSend+0x38>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    18f4:	c8 01       	movw	r24, r16
    18f6:	d6 de       	rcall	.-596    	; 0x16a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    18f8:	29 d4       	rcall	.+2130   	; 0x214c <xTaskResumeAll>
    18fa:	9e cf       	rjmp	.-196    	; 0x1838 <xQueueGenericSend+0x38>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    18fc:	c8 01       	movw	r24, r16
    18fe:	d2 de       	rcall	.-604    	; 0x16a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1900:	25 d4       	rcall	.+2122   	; 0x214c <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    1902:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	df 91       	pop	r29
    1910:	cf 91       	pop	r28
    1912:	1f 91       	pop	r17
    1914:	0f 91       	pop	r16
    1916:	ff 90       	pop	r15
    1918:	ef 90       	pop	r14
    191a:	df 90       	pop	r13
    191c:	cf 90       	pop	r12
    191e:	bf 90       	pop	r11
    1920:	af 90       	pop	r10
    1922:	9f 90       	pop	r9
    1924:	08 95       	ret

00001926 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    1926:	cf 93       	push	r28
    1928:	df 93       	push	r29
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    192a:	8f e1       	ldi	r24, 0x1F	; 31
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	0e 94 10 03 	call	0x620	; 0x620 <pvPortMalloc>
    1932:	ec 01       	movw	r28, r24
		if( pxNewQueue != NULL )
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	f1 f0       	breq	.+60     	; 0x1974 <xQueueCreateMutex+0x4e>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    1938:	1b 82       	std	Y+3, r1	; 0x03
    193a:	1a 82       	std	Y+2, r1	; 0x02
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    193c:	19 82       	std	Y+1, r1	; 0x01
    193e:	18 82       	st	Y, r1

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    1940:	1d 82       	std	Y+5, r1	; 0x05
    1942:	1c 82       	std	Y+4, r1	; 0x04
			pxNewQueue->u.pcReadFrom = NULL;
    1944:	1f 82       	std	Y+7, r1	; 0x07
    1946:	1e 82       	std	Y+6, r1	; 0x06

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1948:	1a 8e       	std	Y+26, r1	; 0x1a
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	8b 8f       	std	Y+27, r24	; 0x1b
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
    194e:	1c 8e       	std	Y+28, r1	; 0x1c
			pxNewQueue->xRxLock = queueUNLOCKED;
    1950:	8f ef       	ldi	r24, 0xFF	; 255
    1952:	8d 8f       	std	Y+29, r24	; 0x1d
			pxNewQueue->xTxLock = queueUNLOCKED;
    1954:	8e 8f       	std	Y+30, r24	; 0x1e
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    1956:	ce 01       	movw	r24, r28
    1958:	08 96       	adiw	r24, 0x08	; 8
    195a:	0e 94 46 03 	call	0x68c	; 0x68c <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    195e:	ce 01       	movw	r24, r28
    1960:	41 96       	adiw	r24, 0x11	; 17
    1962:	0e 94 46 03 	call	0x68c	; 0x68c <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	40 e0       	ldi	r20, 0x00	; 0
    196a:	50 e0       	ldi	r21, 0x00	; 0
    196c:	60 e0       	ldi	r22, 0x00	; 0
    196e:	70 e0       	ldi	r23, 0x00	; 0
    1970:	ce 01       	movw	r24, r28
    1972:	46 df       	rcall	.-372    	; 0x1800 <xQueueGenericSend>
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
    1974:	ce 01       	movw	r24, r28
    1976:	df 91       	pop	r29
    1978:	cf 91       	pop	r28
    197a:	08 95       	ret

0000197c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    197c:	0f 93       	push	r16
    197e:	1f 93       	push	r17
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	ec 01       	movw	r28, r24
    1986:	8a 01       	movw	r16, r20
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1988:	9a 8d       	ldd	r25, Y+26	; 0x1a
    198a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    198c:	98 17       	cp	r25, r24
    198e:	10 f0       	brcs	.+4      	; 0x1994 <xQueueGenericSendFromISR+0x18>
    1990:	22 30       	cpi	r18, 0x02	; 2
    1992:	11 f5       	brne	.+68     	; 0x19d8 <xQueueGenericSendFromISR+0x5c>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			if( prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition ) != pdFALSE )
    1994:	42 2f       	mov	r20, r18
    1996:	ce 01       	movw	r24, r28
    1998:	09 de       	rcall	.-1006   	; 0x15ac <prvCopyDataToQueue>
    199a:	88 23       	and	r24, r24
    199c:	31 f0       	breq	.+12     	; 0x19aa <xQueueGenericSendFromISR+0x2e>
			{
				/* This is a special case that can only be executed if a task
				holds multiple mutexes and then gives the mutexes back in an
				order that is different to that in which they were taken. */
				if( pxHigherPriorityTaskWoken != NULL )
    199e:	01 15       	cp	r16, r1
    19a0:	11 05       	cpc	r17, r1
    19a2:	19 f0       	breq	.+6      	; 0x19aa <xQueueGenericSendFromISR+0x2e>
				{
					*pxHigherPriorityTaskWoken = pdTRUE;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	f8 01       	movw	r30, r16
    19a8:	80 83       	st	Z, r24
				}
			}

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    19aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19ac:	8f 3f       	cpi	r24, 0xFF	; 255
    19ae:	79 f4       	brne	.+30     	; 0x19ce <xQueueGenericSendFromISR+0x52>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    19b0:	89 89       	ldd	r24, Y+17	; 0x11
    19b2:	88 23       	and	r24, r24
    19b4:	99 f0       	breq	.+38     	; 0x19dc <xQueueGenericSendFromISR+0x60>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    19b6:	ce 01       	movw	r24, r28
    19b8:	41 96       	adiw	r24, 0x11	; 17
    19ba:	96 d5       	rcall	.+2860   	; 0x24e8 <xTaskRemoveFromEventList>
    19bc:	88 23       	and	r24, r24
    19be:	81 f0       	breq	.+32     	; 0x19e0 <xQueueGenericSendFromISR+0x64>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    19c0:	01 15       	cp	r16, r1
    19c2:	11 05       	cpc	r17, r1
    19c4:	79 f0       	breq	.+30     	; 0x19e4 <xQueueGenericSendFromISR+0x68>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	f8 01       	movw	r30, r16
    19ca:	80 83       	st	Z, r24
    19cc:	0c c0       	rjmp	.+24     	; 0x19e6 <xQueueGenericSendFromISR+0x6a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    19ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19d0:	8f 5f       	subi	r24, 0xFF	; 255
    19d2:	8e 8f       	std	Y+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	07 c0       	rjmp	.+14     	; 0x19e6 <xQueueGenericSendFromISR+0x6a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	05 c0       	rjmp	.+10     	; 0x19e6 <xQueueGenericSendFromISR+0x6a>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	03 c0       	rjmp	.+6      	; 0x19e6 <xQueueGenericSendFromISR+0x6a>
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	01 c0       	rjmp	.+2      	; 0x19e6 <xQueueGenericSendFromISR+0x6a>
    19e4:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    19e6:	df 91       	pop	r29
    19e8:	cf 91       	pop	r28
    19ea:	1f 91       	pop	r17
    19ec:	0f 91       	pop	r16
    19ee:	08 95       	ret

000019f0 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    19f0:	9f 92       	push	r9
    19f2:	af 92       	push	r10
    19f4:	bf 92       	push	r11
    19f6:	cf 92       	push	r12
    19f8:	df 92       	push	r13
    19fa:	ef 92       	push	r14
    19fc:	ff 92       	push	r15
    19fe:	0f 93       	push	r16
    1a00:	1f 93       	push	r17
    1a02:	cf 93       	push	r28
    1a04:	df 93       	push	r29
    1a06:	00 d0       	rcall	.+0      	; 0x1a08 <xQueueGenericReceive+0x18>
    1a08:	1f 92       	push	r1
    1a0a:	1f 92       	push	r1
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	8c 01       	movw	r16, r24
    1a12:	6b 01       	movw	r12, r22
    1a14:	5d 83       	std	Y+5, r21	; 0x05
    1a16:	4c 83       	std	Y+4, r20	; 0x04
    1a18:	b2 2e       	mov	r11, r18
BaseType_t xEntryTimeSet = pdFALSE;
    1a1a:	a1 2c       	mov	r10, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    1a1c:	99 24       	eor	r9, r9
    1a1e:	93 94       	inc	r9
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1a20:	7c 01       	movw	r14, r24
    1a22:	81 e1       	ldi	r24, 0x11	; 17
    1a24:	e8 0e       	add	r14, r24
    1a26:	f1 1c       	adc	r15, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	f8 94       	cli
    1a2c:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    1a2e:	f8 01       	movw	r30, r16
    1a30:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a32:	88 23       	and	r24, r24
    1a34:	69 f1       	breq	.+90     	; 0x1a90 <xQueueGenericReceive+0xa0>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    1a36:	e6 80       	ldd	r14, Z+6	; 0x06
    1a38:	f7 80       	ldd	r15, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1a3a:	b6 01       	movw	r22, r12
    1a3c:	c8 01       	movw	r24, r16
    1a3e:	18 de       	rcall	.-976    	; 0x1670 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1a40:	b1 10       	cpse	r11, r1
    1a42:	17 c0       	rjmp	.+46     	; 0x1a72 <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    1a44:	f8 01       	movw	r30, r16
    1a46:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a48:	81 50       	subi	r24, 0x01	; 1
    1a4a:	82 8f       	std	Z+26, r24	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1a4c:	80 81       	ld	r24, Z
    1a4e:	91 81       	ldd	r25, Z+1	; 0x01
    1a50:	89 2b       	or	r24, r25
    1a52:	21 f4       	brne	.+8      	; 0x1a5c <xQueueGenericReceive+0x6c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    1a54:	75 d6       	rcall	.+3306   	; 0x2740 <pvTaskIncrementMutexHeldCount>
    1a56:	f8 01       	movw	r30, r16
    1a58:	93 83       	std	Z+3, r25	; 0x03
    1a5a:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1a5c:	f8 01       	movw	r30, r16
    1a5e:	80 85       	ldd	r24, Z+8	; 0x08
    1a60:	88 23       	and	r24, r24
    1a62:	91 f0       	breq	.+36     	; 0x1a88 <xQueueGenericReceive+0x98>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1a64:	c8 01       	movw	r24, r16
    1a66:	08 96       	adiw	r24, 0x08	; 8
    1a68:	3f d5       	rcall	.+2686   	; 0x24e8 <xTaskRemoveFromEventList>
    1a6a:	81 30       	cpi	r24, 0x01	; 1
    1a6c:	69 f4       	brne	.+26     	; 0x1a88 <xQueueGenericReceive+0x98>
						{
							queueYIELD_IF_USING_PREEMPTION();
    1a6e:	da dc       	rcall	.-1612   	; 0x1424 <vPortYield>
    1a70:	0b c0       	rjmp	.+22     	; 0x1a88 <xQueueGenericReceive+0x98>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    1a72:	f8 01       	movw	r30, r16
    1a74:	f7 82       	std	Z+7, r15	; 0x07
    1a76:	e6 82       	std	Z+6, r14	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1a78:	81 89       	ldd	r24, Z+17	; 0x11
    1a7a:	88 23       	and	r24, r24
    1a7c:	29 f0       	breq	.+10     	; 0x1a88 <xQueueGenericReceive+0x98>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1a7e:	c8 01       	movw	r24, r16
    1a80:	41 96       	adiw	r24, 0x11	; 17
    1a82:	32 d5       	rcall	.+2660   	; 0x24e8 <xTaskRemoveFromEventList>
    1a84:	81 11       	cpse	r24, r1
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    1a86:	ce dc       	rcall	.-1636   	; 0x1424 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    1a88:	0f 90       	pop	r0
    1a8a:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	52 c0       	rjmp	.+164    	; 0x1b34 <xQueueGenericReceive+0x144>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1a90:	4c 81       	ldd	r20, Y+4	; 0x04
    1a92:	5d 81       	ldd	r21, Y+5	; 0x05
    1a94:	45 2b       	or	r20, r21
    1a96:	21 f4       	brne	.+8      	; 0x1aa0 <xQueueGenericReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1a98:	0f 90       	pop	r0
    1a9a:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	4a c0       	rjmp	.+148    	; 0x1b34 <xQueueGenericReceive+0x144>
				}
				else if( xEntryTimeSet == pdFALSE )
    1aa0:	a1 10       	cpse	r10, r1
    1aa2:	04 c0       	rjmp	.+8      	; 0x1aac <xQueueGenericReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	01 96       	adiw	r24, 0x01	; 1
    1aa8:	67 d5       	rcall	.+2766   	; 0x2578 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1aaa:	a9 2c       	mov	r10, r9
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1aac:	0f 90       	pop	r0
    1aae:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1ab0:	7a d2       	rcall	.+1268   	; 0x1fa6 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	f8 94       	cli
    1ab6:	0f 92       	push	r0
    1ab8:	f8 01       	movw	r30, r16
    1aba:	85 8d       	ldd	r24, Z+29	; 0x1d
    1abc:	8f 3f       	cpi	r24, 0xFF	; 255
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <xQueueGenericReceive+0xd2>
    1ac0:	15 8e       	std	Z+29, r1	; 0x1d
    1ac2:	f8 01       	movw	r30, r16
    1ac4:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ac6:	8f 3f       	cpi	r24, 0xFF	; 255
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <xQueueGenericReceive+0xdc>
    1aca:	16 8e       	std	Z+30, r1	; 0x1e
    1acc:	0f 90       	pop	r0
    1ace:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1ad0:	be 01       	movw	r22, r28
    1ad2:	6c 5f       	subi	r22, 0xFC	; 252
    1ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad6:	ce 01       	movw	r24, r28
    1ad8:	01 96       	adiw	r24, 0x01	; 1
    1ada:	59 d5       	rcall	.+2738   	; 0x258e <xTaskCheckForTimeOut>
    1adc:	81 11       	cpse	r24, r1
    1ade:	26 c0       	rjmp	.+76     	; 0x1b2c <xQueueGenericReceive+0x13c>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1ae6:	f8 01       	movw	r30, r16
    1ae8:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1aea:	0f 90       	pop	r0
    1aec:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1aee:	81 11       	cpse	r24, r1
    1af0:	19 c0       	rjmp	.+50     	; 0x1b24 <xQueueGenericReceive+0x134>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1af2:	f8 01       	movw	r30, r16
    1af4:	80 81       	ld	r24, Z
    1af6:	91 81       	ldd	r25, Z+1	; 0x01
    1af8:	89 2b       	or	r24, r25
    1afa:	49 f4       	brne	.+18     	; 0x1b0e <xQueueGenericReceive+0x11e>
					{
						taskENTER_CRITICAL();
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	f8 94       	cli
    1b00:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1b02:	f8 01       	movw	r30, r16
    1b04:	82 81       	ldd	r24, Z+2	; 0x02
    1b06:	93 81       	ldd	r25, Z+3	; 0x03
    1b08:	7e d5       	rcall	.+2812   	; 0x2606 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    1b0a:	0f 90       	pop	r0
    1b0c:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1b0e:	6c 81       	ldd	r22, Y+4	; 0x04
    1b10:	7d 81       	ldd	r23, Y+5	; 0x05
    1b12:	c7 01       	movw	r24, r14
    1b14:	be d4       	rcall	.+2428   	; 0x2492 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1b16:	c8 01       	movw	r24, r16
    1b18:	c5 dd       	rcall	.-1142   	; 0x16a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1b1a:	18 d3       	rcall	.+1584   	; 0x214c <xTaskResumeAll>
    1b1c:	81 11       	cpse	r24, r1
    1b1e:	84 cf       	rjmp	.-248    	; 0x1a28 <xQueueGenericReceive+0x38>
				{
					portYIELD_WITHIN_API();
    1b20:	81 dc       	rcall	.-1790   	; 0x1424 <vPortYield>
    1b22:	82 cf       	rjmp	.-252    	; 0x1a28 <xQueueGenericReceive+0x38>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1b24:	c8 01       	movw	r24, r16
    1b26:	be dd       	rcall	.-1156   	; 0x16a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1b28:	11 d3       	rcall	.+1570   	; 0x214c <xTaskResumeAll>
    1b2a:	7e cf       	rjmp	.-260    	; 0x1a28 <xQueueGenericReceive+0x38>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1b2c:	c8 01       	movw	r24, r16
    1b2e:	ba dd       	rcall	.-1164   	; 0x16a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1b30:	0d d3       	rcall	.+1562   	; 0x214c <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    1b32:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	1f 91       	pop	r17
    1b44:	0f 91       	pop	r16
    1b46:	ff 90       	pop	r15
    1b48:	ef 90       	pop	r14
    1b4a:	df 90       	pop	r13
    1b4c:	cf 90       	pop	r12
    1b4e:	bf 90       	pop	r11
    1b50:	af 90       	pop	r10
    1b52:	9f 90       	pop	r9
    1b54:	08 95       	ret

00001b56 <ringBufferInit>:

#include <ringBuffer.h>


void ringBufferInit(ringBuffer *ring, unsigned char* buffer, unsigned char size)
{
    1b56:	fc 01       	movw	r30, r24
	ring->rBuffer = buffer;
    1b58:	71 83       	std	Z+1, r23	; 0x01
    1b5a:	60 83       	st	Z, r22
	ring->rSize = size;
    1b5c:	42 83       	std	Z+2, r20	; 0x02
	ring->rIndex = 0;
    1b5e:	14 82       	std	Z+4, r1	; 0x04
	ring->rLength = 0;	 
    1b60:	13 82       	std	Z+3, r1	; 0x03
    1b62:	08 95       	ret

00001b64 <ringBufferPeek>:
}

unsigned char ringBufferPeek(ringBuffer *ring)
{
	   return ring->rBuffer[ ring->rIndex ];	
    1b64:	dc 01       	movw	r26, r24
    1b66:	14 96       	adiw	r26, 0x04	; 4
    1b68:	2c 91       	ld	r18, X
    1b6a:	14 97       	sbiw	r26, 0x04	; 4
    1b6c:	ed 91       	ld	r30, X+
    1b6e:	fc 91       	ld	r31, X
    1b70:	e2 0f       	add	r30, r18
    1b72:	f1 1d       	adc	r31, r1
}
    1b74:	80 81       	ld	r24, Z
    1b76:	08 95       	ret

00001b78 <ringBufferPop>:

// int?
unsigned char ringBufferPop(ringBuffer *ring)
{
    1b78:	fc 01       	movw	r30, r24
    unsigned char element;
	
            element = ring->rBuffer[ ring->rIndex ];
    1b7a:	94 81       	ldd	r25, Z+4	; 0x04
    1b7c:	a0 81       	ld	r26, Z
    1b7e:	b1 81       	ldd	r27, Z+1	; 0x01
    1b80:	a9 0f       	add	r26, r25
    1b82:	b1 1d       	adc	r27, r1
    1b84:	8c 91       	ld	r24, X
            ring->rIndex ++;
    1b86:	9f 5f       	subi	r25, 0xFF	; 255
    1b88:	94 83       	std	Z+4, r25	; 0x04
            if ( ring->rIndex >= ring->rSize )
    1b8a:	22 81       	ldd	r18, Z+2	; 0x02
    1b8c:	92 17       	cp	r25, r18
    1b8e:	10 f0       	brcs	.+4      	; 0x1b94 <ringBufferPop+0x1c>
            {
                ring->rIndex -= ring->rSize;
    1b90:	92 1b       	sub	r25, r18
    1b92:	94 83       	std	Z+4, r25	; 0x04
            }
            ring->rLength --;
    1b94:	93 81       	ldd	r25, Z+3	; 0x03
    1b96:	91 50       	subi	r25, 0x01	; 1
    1b98:	93 83       	std	Z+3, r25	; 0x03
    
    return element;
}
    1b9a:	08 95       	ret

00001b9c <ringBufferPush>:



void ringBufferPush( ringBuffer *ring, unsigned char element )
{
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	46 2f       	mov	r20, r22
    
        if ( ring->rLength < ring->rSize )
    1ba0:	83 81       	ldd	r24, Z+3	; 0x03
    1ba2:	22 81       	ldd	r18, Z+2	; 0x02
    1ba4:	82 17       	cp	r24, r18
    1ba6:	80 f4       	brcc	.+32     	; 0x1bc8 <ringBufferPush+0x2c>
        {
            ring->rBuffer[ ( ring->rIndex + ring->rLength ) % ring->rSize ] = element;
    1ba8:	34 81       	ldd	r19, Z+4	; 0x04
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	83 0f       	add	r24, r19
    1bae:	91 1d       	adc	r25, r1
    1bb0:	62 2f       	mov	r22, r18
    1bb2:	70 e0       	ldi	r23, 0x00	; 0
    1bb4:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <__divmodhi4>
    1bb8:	a0 81       	ld	r26, Z
    1bba:	b1 81       	ldd	r27, Z+1	; 0x01
    1bbc:	a8 0f       	add	r26, r24
    1bbe:	b9 1f       	adc	r27, r25
    1bc0:	4c 93       	st	X, r20
            ring->rLength++;
    1bc2:	83 81       	ldd	r24, Z+3	; 0x03
    1bc4:	8f 5f       	subi	r24, 0xFF	; 255
    1bc6:	83 83       	std	Z+3, r24	; 0x03
    1bc8:	08 95       	ret

00001bca <ringBufferFull>:


// return 1 if full
// return 0 if not full
char ringBufferFull(ringBuffer *ring)
{
    1bca:	fc 01       	movw	r30, r24
   return (ring->rSize == ring->rLength);
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	22 81       	ldd	r18, Z+2	; 0x02
    1bd0:	93 81       	ldd	r25, Z+3	; 0x03
    1bd2:	29 13       	cpse	r18, r25
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
}
    1bd6:	08 95       	ret

00001bd8 <ringBufferNotEmpty>:

// return 1 if not empty
// return 0 if empty
char ringBufferNotEmpty(ringBuffer *ring)
{
	return (ring->rLength > 0);
    1bd8:	21 e0       	ldi	r18, 0x01	; 1
    1bda:	fc 01       	movw	r30, r24
    1bdc:	83 81       	ldd	r24, Z+3	; 0x03
    1bde:	81 11       	cpse	r24, r1
    1be0:	01 c0       	rjmp	.+2      	; 0x1be4 <ringBufferNotEmpty+0xc>
    1be2:	20 e0       	ldi	r18, 0x00	; 0
}
    1be4:	82 2f       	mov	r24, r18
    1be6:	08 95       	ret

00001be8 <prvResetNextTaskUnblockTime>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
    1be8:	e0 91 46 08 	lds	r30, 0x0846
    1bec:	f0 91 47 08 	lds	r31, 0x0847
    1bf0:	80 81       	ld	r24, Z
    1bf2:	81 11       	cpse	r24, r1
    1bf4:	07 c0       	rjmp	.+14     	; 0x1c04 <prvResetNextTaskUnblockTime+0x1c>
    1bf6:	8f ef       	ldi	r24, 0xFF	; 255
    1bf8:	9f ef       	ldi	r25, 0xFF	; 255
    1bfa:	90 93 06 02 	sts	0x0206, r25
    1bfe:	80 93 05 02 	sts	0x0205, r24
    1c02:	08 95       	ret
    1c04:	e0 91 46 08 	lds	r30, 0x0846
    1c08:	f0 91 47 08 	lds	r31, 0x0847
    1c0c:	05 80       	ldd	r0, Z+5	; 0x05
    1c0e:	f6 81       	ldd	r31, Z+6	; 0x06
    1c10:	e0 2d       	mov	r30, r0
    1c12:	06 80       	ldd	r0, Z+6	; 0x06
    1c14:	f7 81       	ldd	r31, Z+7	; 0x07
    1c16:	e0 2d       	mov	r30, r0
    1c18:	82 81       	ldd	r24, Z+2	; 0x02
    1c1a:	93 81       	ldd	r25, Z+3	; 0x03
    1c1c:	90 93 06 02 	sts	0x0206, r25
    1c20:	80 93 05 02 	sts	0x0205, r24
    1c24:	08 95       	ret

00001c26 <prvAddCurrentTaskToDelayedList>:
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
    1c2a:	ec 01       	movw	r28, r24
    1c2c:	e0 91 87 08 	lds	r30, 0x0887
    1c30:	f0 91 88 08 	lds	r31, 0x0888
    1c34:	93 83       	std	Z+3, r25	; 0x03
    1c36:	82 83       	std	Z+2, r24	; 0x02
    1c38:	80 91 25 08 	lds	r24, 0x0825
    1c3c:	90 91 26 08 	lds	r25, 0x0826
    1c40:	c8 17       	cp	r28, r24
    1c42:	d9 07       	cpc	r29, r25
    1c44:	68 f4       	brcc	.+26     	; 0x1c60 <prvAddCurrentTaskToDelayedList+0x3a>
    1c46:	60 91 87 08 	lds	r22, 0x0887
    1c4a:	70 91 88 08 	lds	r23, 0x0888
    1c4e:	80 91 44 08 	lds	r24, 0x0844
    1c52:	90 91 45 08 	lds	r25, 0x0845
    1c56:	6e 5f       	subi	r22, 0xFE	; 254
    1c58:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <vListInsert>
    1c5e:	17 c0       	rjmp	.+46     	; 0x1c8e <prvAddCurrentTaskToDelayedList+0x68>
    1c60:	60 91 87 08 	lds	r22, 0x0887
    1c64:	70 91 88 08 	lds	r23, 0x0888
    1c68:	80 91 46 08 	lds	r24, 0x0846
    1c6c:	90 91 47 08 	lds	r25, 0x0847
    1c70:	6e 5f       	subi	r22, 0xFE	; 254
    1c72:	7f 4f       	sbci	r23, 0xFF	; 255
    1c74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <vListInsert>
    1c78:	80 91 05 02 	lds	r24, 0x0205
    1c7c:	90 91 06 02 	lds	r25, 0x0206
    1c80:	c8 17       	cp	r28, r24
    1c82:	d9 07       	cpc	r29, r25
    1c84:	20 f4       	brcc	.+8      	; 0x1c8e <prvAddCurrentTaskToDelayedList+0x68>
    1c86:	d0 93 06 02 	sts	0x0206, r29
    1c8a:	c0 93 05 02 	sts	0x0205, r28
    1c8e:	df 91       	pop	r29
    1c90:	cf 91       	pop	r28
    1c92:	08 95       	ret

00001c94 <xTaskGenericCreate>:
    1c94:	4f 92       	push	r4
    1c96:	5f 92       	push	r5
    1c98:	6f 92       	push	r6
    1c9a:	7f 92       	push	r7
    1c9c:	8f 92       	push	r8
    1c9e:	9f 92       	push	r9
    1ca0:	af 92       	push	r10
    1ca2:	bf 92       	push	r11
    1ca4:	cf 92       	push	r12
    1ca6:	df 92       	push	r13
    1ca8:	ef 92       	push	r14
    1caa:	ff 92       	push	r15
    1cac:	0f 93       	push	r16
    1cae:	1f 93       	push	r17
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	4c 01       	movw	r8, r24
    1cb6:	5b 01       	movw	r10, r22
    1cb8:	2a 01       	movw	r4, r20
    1cba:	39 01       	movw	r6, r18
    1cbc:	83 e2       	ldi	r24, 0x23	; 35
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	0e 94 10 03 	call	0x620	; 0x620 <pvPortMalloc>
    1cc4:	ec 01       	movw	r28, r24
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <xTaskGenericCreate+0x38>
    1cca:	e7 c0       	rjmp	.+462    	; 0x1e9a <xTaskGenericCreate+0x206>
    1ccc:	c1 14       	cp	r12, r1
    1cce:	d1 04       	cpc	r13, r1
    1cd0:	09 f0       	breq	.+2      	; 0x1cd4 <xTaskGenericCreate+0x40>
    1cd2:	cc c0       	rjmp	.+408    	; 0x1e6c <xTaskGenericCreate+0x1d8>
    1cd4:	c2 01       	movw	r24, r4
    1cd6:	0e 94 10 03 	call	0x620	; 0x620 <pvPortMalloc>
    1cda:	98 8f       	std	Y+24, r25	; 0x18
    1cdc:	8f 8b       	std	Y+23, r24	; 0x17
    1cde:	89 2b       	or	r24, r25
    1ce0:	09 f0       	breq	.+2      	; 0x1ce4 <xTaskGenericCreate+0x50>
    1ce2:	c6 c0       	rjmp	.+396    	; 0x1e70 <xTaskGenericCreate+0x1dc>
    1ce4:	ce 01       	movw	r24, r28
    1ce6:	0e 94 45 03 	call	0x68a	; 0x68a <vPortFree>
    1cea:	d7 c0       	rjmp	.+430    	; 0x1e9a <xTaskGenericCreate+0x206>
    1cec:	cf 01       	movw	r24, r30
    1cee:	31 91       	ld	r19, Z+
    1cf0:	da 01       	movw	r26, r20
    1cf2:	3d 93       	st	X+, r19
    1cf4:	ad 01       	movw	r20, r26
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	8c 91       	ld	r24, X
    1cfa:	88 23       	and	r24, r24
    1cfc:	11 f0       	breq	.+4      	; 0x1d02 <xTaskGenericCreate+0x6e>
    1cfe:	21 50       	subi	r18, 0x01	; 1
    1d00:	a9 f7       	brne	.-22     	; 0x1cec <xTaskGenericCreate+0x58>
    1d02:	18 a2       	std	Y+32, r1	; 0x20
    1d04:	10 2f       	mov	r17, r16
    1d06:	05 30       	cpi	r16, 0x05	; 5
    1d08:	08 f0       	brcs	.+2      	; 0x1d0c <xTaskGenericCreate+0x78>
    1d0a:	14 e0       	ldi	r17, 0x04	; 4
    1d0c:	1e 8b       	std	Y+22, r17	; 0x16
    1d0e:	19 a3       	std	Y+33, r17	; 0x21
    1d10:	1a a2       	std	Y+34, r1	; 0x22
    1d12:	5e 01       	movw	r10, r28
    1d14:	b2 e0       	ldi	r27, 0x02	; 2
    1d16:	ab 0e       	add	r10, r27
    1d18:	b1 1c       	adc	r11, r1
    1d1a:	c5 01       	movw	r24, r10
    1d1c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <vListInitialiseItem>
    1d20:	ce 01       	movw	r24, r28
    1d22:	0c 96       	adiw	r24, 0x0c	; 12
    1d24:	0e 94 54 03 	call	0x6a8	; 0x6a8 <vListInitialiseItem>
    1d28:	d9 87       	std	Y+9, r29	; 0x09
    1d2a:	c8 87       	std	Y+8, r28	; 0x08
    1d2c:	85 e0       	ldi	r24, 0x05	; 5
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	81 1b       	sub	r24, r17
    1d32:	91 09       	sbc	r25, r1
    1d34:	9d 87       	std	Y+13, r25	; 0x0d
    1d36:	8c 87       	std	Y+12, r24	; 0x0c
    1d38:	db 8b       	std	Y+19, r29	; 0x13
    1d3a:	ca 8b       	std	Y+18, r28	; 0x12
    1d3c:	a3 01       	movw	r20, r6
    1d3e:	b4 01       	movw	r22, r8
    1d40:	c6 01       	movw	r24, r12
    1d42:	c1 da       	rcall	.-2686   	; 0x12c6 <pxPortInitialiseStack>
    1d44:	99 83       	std	Y+1, r25	; 0x01
    1d46:	88 83       	st	Y, r24
    1d48:	e1 14       	cp	r14, r1
    1d4a:	f1 04       	cpc	r15, r1
    1d4c:	19 f0       	breq	.+6      	; 0x1d54 <xTaskGenericCreate+0xc0>
    1d4e:	f7 01       	movw	r30, r14
    1d50:	d1 83       	std	Z+1, r29	; 0x01
    1d52:	c0 83       	st	Z, r28
    1d54:	0f b6       	in	r0, 0x3f	; 63
    1d56:	f8 94       	cli
    1d58:	0f 92       	push	r0
    1d5a:	80 91 27 08 	lds	r24, 0x0827
    1d5e:	8f 5f       	subi	r24, 0xFF	; 255
    1d60:	80 93 27 08 	sts	0x0827, r24
    1d64:	80 91 87 08 	lds	r24, 0x0887
    1d68:	90 91 88 08 	lds	r25, 0x0888
    1d6c:	89 2b       	or	r24, r25
    1d6e:	09 f0       	breq	.+2      	; 0x1d72 <xTaskGenericCreate+0xde>
    1d70:	3f c0       	rjmp	.+126    	; 0x1df0 <xTaskGenericCreate+0x15c>
    1d72:	d0 93 88 08 	sts	0x0888, r29
    1d76:	c0 93 87 08 	sts	0x0887, r28
    1d7a:	80 91 27 08 	lds	r24, 0x0827
    1d7e:	81 30       	cpi	r24, 0x01	; 1
    1d80:	09 f0       	breq	.+2      	; 0x1d84 <xTaskGenericCreate+0xf0>
    1d82:	45 c0       	rjmp	.+138    	; 0x1e0e <xTaskGenericCreate+0x17a>
    1d84:	0f 2e       	mov	r0, r31
    1d86:	fa e5       	ldi	r31, 0x5A	; 90
    1d88:	ef 2e       	mov	r14, r31
    1d8a:	f8 e0       	ldi	r31, 0x08	; 8
    1d8c:	ff 2e       	mov	r15, r31
    1d8e:	f0 2d       	mov	r31, r0
    1d90:	0f 2e       	mov	r0, r31
    1d92:	f7 e8       	ldi	r31, 0x87	; 135
    1d94:	cf 2e       	mov	r12, r31
    1d96:	f8 e0       	ldi	r31, 0x08	; 8
    1d98:	df 2e       	mov	r13, r31
    1d9a:	f0 2d       	mov	r31, r0
    1d9c:	c7 01       	movw	r24, r14
    1d9e:	0e 94 46 03 	call	0x68c	; 0x68c <vListInitialise>
    1da2:	f9 e0       	ldi	r31, 0x09	; 9
    1da4:	ef 0e       	add	r14, r31
    1da6:	f1 1c       	adc	r15, r1
    1da8:	ec 14       	cp	r14, r12
    1daa:	fd 04       	cpc	r15, r13
    1dac:	b9 f7       	brne	.-18     	; 0x1d9c <xTaskGenericCreate+0x108>
    1dae:	81 e5       	ldi	r24, 0x51	; 81
    1db0:	98 e0       	ldi	r25, 0x08	; 8
    1db2:	0e 94 46 03 	call	0x68c	; 0x68c <vListInitialise>
    1db6:	88 e4       	ldi	r24, 0x48	; 72
    1db8:	98 e0       	ldi	r25, 0x08	; 8
    1dba:	0e 94 46 03 	call	0x68c	; 0x68c <vListInitialise>
    1dbe:	8b e3       	ldi	r24, 0x3B	; 59
    1dc0:	98 e0       	ldi	r25, 0x08	; 8
    1dc2:	0e 94 46 03 	call	0x68c	; 0x68c <vListInitialise>
    1dc6:	82 e3       	ldi	r24, 0x32	; 50
    1dc8:	98 e0       	ldi	r25, 0x08	; 8
    1dca:	0e 94 46 03 	call	0x68c	; 0x68c <vListInitialise>
    1dce:	88 e2       	ldi	r24, 0x28	; 40
    1dd0:	98 e0       	ldi	r25, 0x08	; 8
    1dd2:	0e 94 46 03 	call	0x68c	; 0x68c <vListInitialise>
    1dd6:	81 e5       	ldi	r24, 0x51	; 81
    1dd8:	98 e0       	ldi	r25, 0x08	; 8
    1dda:	90 93 47 08 	sts	0x0847, r25
    1dde:	80 93 46 08 	sts	0x0846, r24
    1de2:	88 e4       	ldi	r24, 0x48	; 72
    1de4:	98 e0       	ldi	r25, 0x08	; 8
    1de6:	90 93 45 08 	sts	0x0845, r25
    1dea:	80 93 44 08 	sts	0x0844, r24
    1dee:	0f c0       	rjmp	.+30     	; 0x1e0e <xTaskGenericCreate+0x17a>
    1df0:	80 91 23 08 	lds	r24, 0x0823
    1df4:	81 11       	cpse	r24, r1
    1df6:	0b c0       	rjmp	.+22     	; 0x1e0e <xTaskGenericCreate+0x17a>
    1df8:	e0 91 87 08 	lds	r30, 0x0887
    1dfc:	f0 91 88 08 	lds	r31, 0x0888
    1e00:	86 89       	ldd	r24, Z+22	; 0x16
    1e02:	08 17       	cp	r16, r24
    1e04:	20 f0       	brcs	.+8      	; 0x1e0e <xTaskGenericCreate+0x17a>
    1e06:	d0 93 88 08 	sts	0x0888, r29
    1e0a:	c0 93 87 08 	sts	0x0887, r28
    1e0e:	80 91 1f 08 	lds	r24, 0x081F
    1e12:	8f 5f       	subi	r24, 0xFF	; 255
    1e14:	80 93 1f 08 	sts	0x081F, r24
    1e18:	8e 89       	ldd	r24, Y+22	; 0x16
    1e1a:	90 91 24 08 	lds	r25, 0x0824
    1e1e:	98 17       	cp	r25, r24
    1e20:	10 f4       	brcc	.+4      	; 0x1e26 <xTaskGenericCreate+0x192>
    1e22:	80 93 24 08 	sts	0x0824, r24
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	9c 01       	movw	r18, r24
    1e2a:	22 0f       	add	r18, r18
    1e2c:	33 1f       	adc	r19, r19
    1e2e:	22 0f       	add	r18, r18
    1e30:	33 1f       	adc	r19, r19
    1e32:	22 0f       	add	r18, r18
    1e34:	33 1f       	adc	r19, r19
    1e36:	82 0f       	add	r24, r18
    1e38:	93 1f       	adc	r25, r19
    1e3a:	b5 01       	movw	r22, r10
    1e3c:	86 5a       	subi	r24, 0xA6	; 166
    1e3e:	97 4f       	sbci	r25, 0xF7	; 247
    1e40:	0e 94 58 03 	call	0x6b0	; 0x6b0 <vListInsertEnd>
    1e44:	0f 90       	pop	r0
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	80 91 23 08 	lds	r24, 0x0823
    1e4c:	88 23       	and	r24, r24
    1e4e:	51 f0       	breq	.+20     	; 0x1e64 <xTaskGenericCreate+0x1d0>
    1e50:	e0 91 87 08 	lds	r30, 0x0887
    1e54:	f0 91 88 08 	lds	r31, 0x0888
    1e58:	86 89       	ldd	r24, Z+22	; 0x16
    1e5a:	80 17       	cp	r24, r16
    1e5c:	28 f4       	brcc	.+10     	; 0x1e68 <xTaskGenericCreate+0x1d4>
    1e5e:	e2 da       	rcall	.-2620   	; 0x1424 <vPortYield>
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	1c c0       	rjmp	.+56     	; 0x1e9c <xTaskGenericCreate+0x208>
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	1a c0       	rjmp	.+52     	; 0x1e9c <xTaskGenericCreate+0x208>
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	18 c0       	rjmp	.+48     	; 0x1e9c <xTaskGenericCreate+0x208>
    1e6c:	d8 8e       	std	Y+24, r13	; 0x18
    1e6e:	cf 8a       	std	Y+23, r12	; 0x17
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	48 1a       	sub	r4, r24
    1e74:	51 08       	sbc	r5, r1
    1e76:	cf 88       	ldd	r12, Y+23	; 0x17
    1e78:	d8 8c       	ldd	r13, Y+24	; 0x18
    1e7a:	c4 0c       	add	r12, r4
    1e7c:	d5 1c       	adc	r13, r5
    1e7e:	d5 01       	movw	r26, r10
    1e80:	8c 91       	ld	r24, X
    1e82:	89 8f       	std	Y+25, r24	; 0x19
    1e84:	8c 91       	ld	r24, X
    1e86:	88 23       	and	r24, r24
    1e88:	09 f4       	brne	.+2      	; 0x1e8c <xTaskGenericCreate+0x1f8>
    1e8a:	3b cf       	rjmp	.-394    	; 0x1d02 <xTaskGenericCreate+0x6e>
    1e8c:	ae 01       	movw	r20, r28
    1e8e:	46 5e       	subi	r20, 0xE6	; 230
    1e90:	5f 4f       	sbci	r21, 0xFF	; 255
    1e92:	f5 01       	movw	r30, r10
    1e94:	31 96       	adiw	r30, 0x01	; 1
    1e96:	27 e0       	ldi	r18, 0x07	; 7
    1e98:	29 cf       	rjmp	.-430    	; 0x1cec <xTaskGenericCreate+0x58>
    1e9a:	8f ef       	ldi	r24, 0xFF	; 255
    1e9c:	df 91       	pop	r29
    1e9e:	cf 91       	pop	r28
    1ea0:	1f 91       	pop	r17
    1ea2:	0f 91       	pop	r16
    1ea4:	ff 90       	pop	r15
    1ea6:	ef 90       	pop	r14
    1ea8:	df 90       	pop	r13
    1eaa:	cf 90       	pop	r12
    1eac:	bf 90       	pop	r11
    1eae:	af 90       	pop	r10
    1eb0:	9f 90       	pop	r9
    1eb2:	8f 90       	pop	r8
    1eb4:	7f 90       	pop	r7
    1eb6:	6f 90       	pop	r6
    1eb8:	5f 90       	pop	r5
    1eba:	4f 90       	pop	r4
    1ebc:	08 95       	ret

00001ebe <vTaskResume>:
    1ebe:	0f 93       	push	r16
    1ec0:	1f 93       	push	r17
    1ec2:	cf 93       	push	r28
    1ec4:	df 93       	push	r29
    1ec6:	ec 01       	movw	r28, r24
    1ec8:	00 97       	sbiw	r24, 0x00	; 0
    1eca:	09 f4       	brne	.+2      	; 0x1ece <vTaskResume+0x10>
    1ecc:	3e c0       	rjmp	.+124    	; 0x1f4a <vTaskResume+0x8c>
    1ece:	80 91 87 08 	lds	r24, 0x0887
    1ed2:	90 91 88 08 	lds	r25, 0x0888
    1ed6:	c8 17       	cp	r28, r24
    1ed8:	d9 07       	cpc	r29, r25
    1eda:	b9 f1       	breq	.+110    	; 0x1f4a <vTaskResume+0x8c>
    1edc:	0f b6       	in	r0, 0x3f	; 63
    1ede:	f8 94       	cli
    1ee0:	0f 92       	push	r0
    1ee2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ee4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ee6:	88 52       	subi	r24, 0x28	; 40
    1ee8:	98 40       	sbci	r25, 0x08	; 8
    1eea:	69 f5       	brne	.+90     	; 0x1f46 <vTaskResume+0x88>
    1eec:	8c 89       	ldd	r24, Y+20	; 0x14
    1eee:	9d 89       	ldd	r25, Y+21	; 0x15
    1ef0:	28 e0       	ldi	r18, 0x08	; 8
    1ef2:	8b 33       	cpi	r24, 0x3B	; 59
    1ef4:	92 07       	cpc	r25, r18
    1ef6:	39 f1       	breq	.+78     	; 0x1f46 <vTaskResume+0x88>
    1ef8:	89 2b       	or	r24, r25
    1efa:	29 f5       	brne	.+74     	; 0x1f46 <vTaskResume+0x88>
    1efc:	8e 01       	movw	r16, r28
    1efe:	0e 5f       	subi	r16, 0xFE	; 254
    1f00:	1f 4f       	sbci	r17, 0xFF	; 255
    1f02:	c8 01       	movw	r24, r16
    1f04:	0e 94 aa 03 	call	0x754	; 0x754 <uxListRemove>
    1f08:	8e 89       	ldd	r24, Y+22	; 0x16
    1f0a:	90 91 24 08 	lds	r25, 0x0824
    1f0e:	98 17       	cp	r25, r24
    1f10:	10 f4       	brcc	.+4      	; 0x1f16 <vTaskResume+0x58>
    1f12:	80 93 24 08 	sts	0x0824, r24
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	9c 01       	movw	r18, r24
    1f1a:	22 0f       	add	r18, r18
    1f1c:	33 1f       	adc	r19, r19
    1f1e:	22 0f       	add	r18, r18
    1f20:	33 1f       	adc	r19, r19
    1f22:	22 0f       	add	r18, r18
    1f24:	33 1f       	adc	r19, r19
    1f26:	82 0f       	add	r24, r18
    1f28:	93 1f       	adc	r25, r19
    1f2a:	b8 01       	movw	r22, r16
    1f2c:	86 5a       	subi	r24, 0xA6	; 166
    1f2e:	97 4f       	sbci	r25, 0xF7	; 247
    1f30:	0e 94 58 03 	call	0x6b0	; 0x6b0 <vListInsertEnd>
    1f34:	e0 91 87 08 	lds	r30, 0x0887
    1f38:	f0 91 88 08 	lds	r31, 0x0888
    1f3c:	9e 89       	ldd	r25, Y+22	; 0x16
    1f3e:	86 89       	ldd	r24, Z+22	; 0x16
    1f40:	98 17       	cp	r25, r24
    1f42:	08 f0       	brcs	.+2      	; 0x1f46 <vTaskResume+0x88>
    1f44:	6f da       	rcall	.-2850   	; 0x1424 <vPortYield>
    1f46:	0f 90       	pop	r0
    1f48:	0f be       	out	0x3f, r0	; 63
    1f4a:	df 91       	pop	r29
    1f4c:	cf 91       	pop	r28
    1f4e:	1f 91       	pop	r17
    1f50:	0f 91       	pop	r16
    1f52:	08 95       	ret

00001f54 <vTaskStartScheduler>:
    1f54:	af 92       	push	r10
    1f56:	bf 92       	push	r11
    1f58:	cf 92       	push	r12
    1f5a:	df 92       	push	r13
    1f5c:	ef 92       	push	r14
    1f5e:	ff 92       	push	r15
    1f60:	0f 93       	push	r16
    1f62:	a1 2c       	mov	r10, r1
    1f64:	b1 2c       	mov	r11, r1
    1f66:	c1 2c       	mov	r12, r1
    1f68:	d1 2c       	mov	r13, r1
    1f6a:	e1 2c       	mov	r14, r1
    1f6c:	f1 2c       	mov	r15, r1
    1f6e:	00 e0       	ldi	r16, 0x00	; 0
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	45 e5       	ldi	r20, 0x55	; 85
    1f76:	50 e0       	ldi	r21, 0x00	; 0
    1f78:	63 e3       	ldi	r22, 0x33	; 51
    1f7a:	72 e0       	ldi	r23, 0x02	; 2
    1f7c:	85 e6       	ldi	r24, 0x65	; 101
    1f7e:	91 e1       	ldi	r25, 0x11	; 17
    1f80:	89 de       	rcall	.-750    	; 0x1c94 <xTaskGenericCreate>
    1f82:	81 30       	cpi	r24, 0x01	; 1
    1f84:	41 f4       	brne	.+16     	; 0x1f96 <vTaskStartScheduler+0x42>
    1f86:	f8 94       	cli
    1f88:	80 93 23 08 	sts	0x0823, r24
    1f8c:	10 92 26 08 	sts	0x0826, r1
    1f90:	10 92 25 08 	sts	0x0825, r1
    1f94:	0a da       	rcall	.-3052   	; 0x13aa <xPortStartScheduler>
    1f96:	0f 91       	pop	r16
    1f98:	ff 90       	pop	r15
    1f9a:	ef 90       	pop	r14
    1f9c:	df 90       	pop	r13
    1f9e:	cf 90       	pop	r12
    1fa0:	bf 90       	pop	r11
    1fa2:	af 90       	pop	r10
    1fa4:	08 95       	ret

00001fa6 <vTaskSuspendAll>:
    1fa6:	80 91 1e 08 	lds	r24, 0x081E
    1faa:	8f 5f       	subi	r24, 0xFF	; 255
    1fac:	80 93 1e 08 	sts	0x081E, r24
    1fb0:	08 95       	ret

00001fb2 <xTaskGetTickCount>:
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	0f 92       	push	r0
    1fb8:	80 91 25 08 	lds	r24, 0x0825
    1fbc:	90 91 26 08 	lds	r25, 0x0826
    1fc0:	0f 90       	pop	r0
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	08 95       	ret

00001fc6 <xTaskGetTickCountFromISR>:
    1fc6:	80 91 25 08 	lds	r24, 0x0825
    1fca:	90 91 26 08 	lds	r25, 0x0826
    1fce:	08 95       	ret

00001fd0 <xTaskIncrementTick>:
    1fd0:	cf 92       	push	r12
    1fd2:	df 92       	push	r13
    1fd4:	ef 92       	push	r14
    1fd6:	ff 92       	push	r15
    1fd8:	0f 93       	push	r16
    1fda:	1f 93       	push	r17
    1fdc:	cf 93       	push	r28
    1fde:	df 93       	push	r29
    1fe0:	80 91 1e 08 	lds	r24, 0x081E
    1fe4:	81 11       	cpse	r24, r1
    1fe6:	99 c0       	rjmp	.+306    	; 0x211a <xTaskIncrementTick+0x14a>
    1fe8:	80 91 25 08 	lds	r24, 0x0825
    1fec:	90 91 26 08 	lds	r25, 0x0826
    1ff0:	01 96       	adiw	r24, 0x01	; 1
    1ff2:	90 93 26 08 	sts	0x0826, r25
    1ff6:	80 93 25 08 	sts	0x0825, r24
    1ffa:	e0 90 25 08 	lds	r14, 0x0825
    1ffe:	f0 90 26 08 	lds	r15, 0x0826
    2002:	e1 14       	cp	r14, r1
    2004:	f1 04       	cpc	r15, r1
    2006:	b1 f4       	brne	.+44     	; 0x2034 <xTaskIncrementTick+0x64>
    2008:	80 91 46 08 	lds	r24, 0x0846
    200c:	90 91 47 08 	lds	r25, 0x0847
    2010:	20 91 44 08 	lds	r18, 0x0844
    2014:	30 91 45 08 	lds	r19, 0x0845
    2018:	30 93 47 08 	sts	0x0847, r19
    201c:	20 93 46 08 	sts	0x0846, r18
    2020:	90 93 45 08 	sts	0x0845, r25
    2024:	80 93 44 08 	sts	0x0844, r24
    2028:	80 91 20 08 	lds	r24, 0x0820
    202c:	8f 5f       	subi	r24, 0xFF	; 255
    202e:	80 93 20 08 	sts	0x0820, r24
    2032:	da dd       	rcall	.-1100   	; 0x1be8 <prvResetNextTaskUnblockTime>
    2034:	80 91 05 02 	lds	r24, 0x0205
    2038:	90 91 06 02 	lds	r25, 0x0206
    203c:	e8 16       	cp	r14, r24
    203e:	f9 06       	cpc	r15, r25
    2040:	08 f4       	brcc	.+2      	; 0x2044 <xTaskIncrementTick+0x74>
    2042:	54 c0       	rjmp	.+168    	; 0x20ec <xTaskIncrementTick+0x11c>
    2044:	d1 2c       	mov	r13, r1
    2046:	cc 24       	eor	r12, r12
    2048:	c3 94       	inc	r12
    204a:	01 c0       	rjmp	.+2      	; 0x204e <xTaskIncrementTick+0x7e>
    204c:	dc 2c       	mov	r13, r12
    204e:	e0 91 46 08 	lds	r30, 0x0846
    2052:	f0 91 47 08 	lds	r31, 0x0847
    2056:	80 81       	ld	r24, Z
    2058:	81 11       	cpse	r24, r1
    205a:	07 c0       	rjmp	.+14     	; 0x206a <xTaskIncrementTick+0x9a>
    205c:	8f ef       	ldi	r24, 0xFF	; 255
    205e:	9f ef       	ldi	r25, 0xFF	; 255
    2060:	90 93 06 02 	sts	0x0206, r25
    2064:	80 93 05 02 	sts	0x0205, r24
    2068:	42 c0       	rjmp	.+132    	; 0x20ee <xTaskIncrementTick+0x11e>
    206a:	e0 91 46 08 	lds	r30, 0x0846
    206e:	f0 91 47 08 	lds	r31, 0x0847
    2072:	05 80       	ldd	r0, Z+5	; 0x05
    2074:	f6 81       	ldd	r31, Z+6	; 0x06
    2076:	e0 2d       	mov	r30, r0
    2078:	c6 81       	ldd	r28, Z+6	; 0x06
    207a:	d7 81       	ldd	r29, Z+7	; 0x07
    207c:	2a 81       	ldd	r18, Y+2	; 0x02
    207e:	3b 81       	ldd	r19, Y+3	; 0x03
    2080:	e2 16       	cp	r14, r18
    2082:	f3 06       	cpc	r15, r19
    2084:	28 f4       	brcc	.+10     	; 0x2090 <xTaskIncrementTick+0xc0>
    2086:	30 93 06 02 	sts	0x0206, r19
    208a:	20 93 05 02 	sts	0x0205, r18
    208e:	2f c0       	rjmp	.+94     	; 0x20ee <xTaskIncrementTick+0x11e>
    2090:	8e 01       	movw	r16, r28
    2092:	0e 5f       	subi	r16, 0xFE	; 254
    2094:	1f 4f       	sbci	r17, 0xFF	; 255
    2096:	c8 01       	movw	r24, r16
    2098:	0e 94 aa 03 	call	0x754	; 0x754 <uxListRemove>
    209c:	8c 89       	ldd	r24, Y+20	; 0x14
    209e:	9d 89       	ldd	r25, Y+21	; 0x15
    20a0:	89 2b       	or	r24, r25
    20a2:	21 f0       	breq	.+8      	; 0x20ac <xTaskIncrementTick+0xdc>
    20a4:	ce 01       	movw	r24, r28
    20a6:	0c 96       	adiw	r24, 0x0c	; 12
    20a8:	0e 94 aa 03 	call	0x754	; 0x754 <uxListRemove>
    20ac:	2e 89       	ldd	r18, Y+22	; 0x16
    20ae:	80 91 24 08 	lds	r24, 0x0824
    20b2:	82 17       	cp	r24, r18
    20b4:	10 f4       	brcc	.+4      	; 0x20ba <xTaskIncrementTick+0xea>
    20b6:	20 93 24 08 	sts	0x0824, r18
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	c9 01       	movw	r24, r18
    20be:	88 0f       	add	r24, r24
    20c0:	99 1f       	adc	r25, r25
    20c2:	88 0f       	add	r24, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	88 0f       	add	r24, r24
    20c8:	99 1f       	adc	r25, r25
    20ca:	82 0f       	add	r24, r18
    20cc:	93 1f       	adc	r25, r19
    20ce:	b8 01       	movw	r22, r16
    20d0:	86 5a       	subi	r24, 0xA6	; 166
    20d2:	97 4f       	sbci	r25, 0xF7	; 247
    20d4:	0e 94 58 03 	call	0x6b0	; 0x6b0 <vListInsertEnd>
    20d8:	e0 91 87 08 	lds	r30, 0x0887
    20dc:	f0 91 88 08 	lds	r31, 0x0888
    20e0:	9e 89       	ldd	r25, Y+22	; 0x16
    20e2:	86 89       	ldd	r24, Z+22	; 0x16
    20e4:	98 17       	cp	r25, r24
    20e6:	08 f0       	brcs	.+2      	; 0x20ea <xTaskIncrementTick+0x11a>
    20e8:	b1 cf       	rjmp	.-158    	; 0x204c <xTaskIncrementTick+0x7c>
    20ea:	b1 cf       	rjmp	.-158    	; 0x204e <xTaskIncrementTick+0x7e>
    20ec:	d1 2c       	mov	r13, r1
    20ee:	e0 91 87 08 	lds	r30, 0x0887
    20f2:	f0 91 88 08 	lds	r31, 0x0888
    20f6:	86 89       	ldd	r24, Z+22	; 0x16
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	fc 01       	movw	r30, r24
    20fc:	ee 0f       	add	r30, r30
    20fe:	ff 1f       	adc	r31, r31
    2100:	ee 0f       	add	r30, r30
    2102:	ff 1f       	adc	r31, r31
    2104:	ee 0f       	add	r30, r30
    2106:	ff 1f       	adc	r31, r31
    2108:	8e 0f       	add	r24, r30
    210a:	9f 1f       	adc	r25, r31
    210c:	fc 01       	movw	r30, r24
    210e:	e6 5a       	subi	r30, 0xA6	; 166
    2110:	f7 4f       	sbci	r31, 0xF7	; 247
    2112:	80 81       	ld	r24, Z
    2114:	82 30       	cpi	r24, 0x02	; 2
    2116:	40 f4       	brcc	.+16     	; 0x2128 <xTaskIncrementTick+0x158>
    2118:	09 c0       	rjmp	.+18     	; 0x212c <xTaskIncrementTick+0x15c>
    211a:	80 91 22 08 	lds	r24, 0x0822
    211e:	8f 5f       	subi	r24, 0xFF	; 255
    2120:	80 93 22 08 	sts	0x0822, r24
    2124:	d1 2c       	mov	r13, r1
    2126:	02 c0       	rjmp	.+4      	; 0x212c <xTaskIncrementTick+0x15c>
    2128:	dd 24       	eor	r13, r13
    212a:	d3 94       	inc	r13
    212c:	80 91 21 08 	lds	r24, 0x0821
    2130:	88 23       	and	r24, r24
    2132:	11 f0       	breq	.+4      	; 0x2138 <xTaskIncrementTick+0x168>
    2134:	dd 24       	eor	r13, r13
    2136:	d3 94       	inc	r13
    2138:	8d 2d       	mov	r24, r13
    213a:	df 91       	pop	r29
    213c:	cf 91       	pop	r28
    213e:	1f 91       	pop	r17
    2140:	0f 91       	pop	r16
    2142:	ff 90       	pop	r15
    2144:	ef 90       	pop	r14
    2146:	df 90       	pop	r13
    2148:	cf 90       	pop	r12
    214a:	08 95       	ret

0000214c <xTaskResumeAll>:
    214c:	df 92       	push	r13
    214e:	ef 92       	push	r14
    2150:	ff 92       	push	r15
    2152:	0f 93       	push	r16
    2154:	1f 93       	push	r17
    2156:	cf 93       	push	r28
    2158:	df 93       	push	r29
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	0f 92       	push	r0
    2160:	80 91 1e 08 	lds	r24, 0x081E
    2164:	81 50       	subi	r24, 0x01	; 1
    2166:	80 93 1e 08 	sts	0x081E, r24
    216a:	80 91 1e 08 	lds	r24, 0x081E
    216e:	81 11       	cpse	r24, r1
    2170:	5f c0       	rjmp	.+190    	; 0x2230 <__stack+0x31>
    2172:	80 91 27 08 	lds	r24, 0x0827
    2176:	88 23       	and	r24, r24
    2178:	09 f4       	brne	.+2      	; 0x217c <xTaskResumeAll+0x30>
    217a:	5c c0       	rjmp	.+184    	; 0x2234 <__stack+0x35>
    217c:	0f 2e       	mov	r0, r31
    217e:	fb e3       	ldi	r31, 0x3B	; 59
    2180:	ef 2e       	mov	r14, r31
    2182:	f8 e0       	ldi	r31, 0x08	; 8
    2184:	ff 2e       	mov	r15, r31
    2186:	f0 2d       	mov	r31, r0
    2188:	dd 24       	eor	r13, r13
    218a:	d3 94       	inc	r13
    218c:	30 c0       	rjmp	.+96     	; 0x21ee <xTaskResumeAll+0xa2>
    218e:	e0 91 40 08 	lds	r30, 0x0840
    2192:	f0 91 41 08 	lds	r31, 0x0841
    2196:	c6 81       	ldd	r28, Z+6	; 0x06
    2198:	d7 81       	ldd	r29, Z+7	; 0x07
    219a:	ce 01       	movw	r24, r28
    219c:	0c 96       	adiw	r24, 0x0c	; 12
    219e:	0e 94 aa 03 	call	0x754	; 0x754 <uxListRemove>
    21a2:	8e 01       	movw	r16, r28
    21a4:	0e 5f       	subi	r16, 0xFE	; 254
    21a6:	1f 4f       	sbci	r17, 0xFF	; 255
    21a8:	c8 01       	movw	r24, r16
    21aa:	0e 94 aa 03 	call	0x754	; 0x754 <uxListRemove>
    21ae:	8e 89       	ldd	r24, Y+22	; 0x16
    21b0:	90 91 24 08 	lds	r25, 0x0824
    21b4:	98 17       	cp	r25, r24
    21b6:	10 f4       	brcc	.+4      	; 0x21bc <xTaskResumeAll+0x70>
    21b8:	80 93 24 08 	sts	0x0824, r24
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	9c 01       	movw	r18, r24
    21c0:	22 0f       	add	r18, r18
    21c2:	33 1f       	adc	r19, r19
    21c4:	22 0f       	add	r18, r18
    21c6:	33 1f       	adc	r19, r19
    21c8:	22 0f       	add	r18, r18
    21ca:	33 1f       	adc	r19, r19
    21cc:	82 0f       	add	r24, r18
    21ce:	93 1f       	adc	r25, r19
    21d0:	b8 01       	movw	r22, r16
    21d2:	86 5a       	subi	r24, 0xA6	; 166
    21d4:	97 4f       	sbci	r25, 0xF7	; 247
    21d6:	0e 94 58 03 	call	0x6b0	; 0x6b0 <vListInsertEnd>
    21da:	e0 91 87 08 	lds	r30, 0x0887
    21de:	f0 91 88 08 	lds	r31, 0x0888
    21e2:	9e 89       	ldd	r25, Y+22	; 0x16
    21e4:	86 89       	ldd	r24, Z+22	; 0x16
    21e6:	98 17       	cp	r25, r24
    21e8:	10 f0       	brcs	.+4      	; 0x21ee <xTaskResumeAll+0xa2>
    21ea:	d0 92 21 08 	sts	0x0821, r13
    21ee:	f7 01       	movw	r30, r14
    21f0:	80 81       	ld	r24, Z
    21f2:	81 11       	cpse	r24, r1
    21f4:	cc cf       	rjmp	.-104    	; 0x218e <xTaskResumeAll+0x42>
    21f6:	80 91 22 08 	lds	r24, 0x0822
    21fa:	88 23       	and	r24, r24
    21fc:	91 f0       	breq	.+36     	; 0x2222 <__stack+0x23>
    21fe:	80 91 22 08 	lds	r24, 0x0822
    2202:	88 23       	and	r24, r24
    2204:	71 f0       	breq	.+28     	; 0x2222 <__stack+0x23>
    2206:	c1 e0       	ldi	r28, 0x01	; 1
    2208:	e3 de       	rcall	.-570    	; 0x1fd0 <xTaskIncrementTick>
    220a:	81 11       	cpse	r24, r1
    220c:	c0 93 21 08 	sts	0x0821, r28
    2210:	80 91 22 08 	lds	r24, 0x0822
    2214:	81 50       	subi	r24, 0x01	; 1
    2216:	80 93 22 08 	sts	0x0822, r24
    221a:	80 91 22 08 	lds	r24, 0x0822
    221e:	81 11       	cpse	r24, r1
    2220:	f3 cf       	rjmp	.-26     	; 0x2208 <__stack+0x9>
    2222:	80 91 21 08 	lds	r24, 0x0821
    2226:	81 30       	cpi	r24, 0x01	; 1
    2228:	39 f4       	brne	.+14     	; 0x2238 <__stack+0x39>
    222a:	fc d8       	rcall	.-3592   	; 0x1424 <vPortYield>
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	05 c0       	rjmp	.+10     	; 0x223a <__stack+0x3b>
    2230:	80 e0       	ldi	r24, 0x00	; 0
    2232:	03 c0       	rjmp	.+6      	; 0x223a <__stack+0x3b>
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	01 c0       	rjmp	.+2      	; 0x223a <__stack+0x3b>
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	0f 90       	pop	r0
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	df 91       	pop	r29
    2240:	cf 91       	pop	r28
    2242:	1f 91       	pop	r17
    2244:	0f 91       	pop	r16
    2246:	ff 90       	pop	r15
    2248:	ef 90       	pop	r14
    224a:	df 90       	pop	r13
    224c:	08 95       	ret

0000224e <vTaskDelayUntil>:
    224e:	0f 93       	push	r16
    2250:	1f 93       	push	r17
    2252:	cf 93       	push	r28
    2254:	df 93       	push	r29
    2256:	8c 01       	movw	r16, r24
    2258:	eb 01       	movw	r28, r22
    225a:	a5 de       	rcall	.-694    	; 0x1fa6 <vTaskSuspendAll>
    225c:	80 91 25 08 	lds	r24, 0x0825
    2260:	90 91 26 08 	lds	r25, 0x0826
    2264:	f8 01       	movw	r30, r16
    2266:	20 81       	ld	r18, Z
    2268:	31 81       	ldd	r19, Z+1	; 0x01
    226a:	c2 0f       	add	r28, r18
    226c:	d3 1f       	adc	r29, r19
    226e:	82 17       	cp	r24, r18
    2270:	93 07       	cpc	r25, r19
    2272:	48 f4       	brcc	.+18     	; 0x2286 <vTaskDelayUntil+0x38>
    2274:	c2 17       	cp	r28, r18
    2276:	d3 07       	cpc	r29, r19
    2278:	f8 f4       	brcc	.+62     	; 0x22b8 <vTaskDelayUntil+0x6a>
    227a:	d1 83       	std	Z+1, r29	; 0x01
    227c:	c0 83       	st	Z, r28
    227e:	8c 17       	cp	r24, r28
    2280:	9d 07       	cpc	r25, r29
    2282:	88 f4       	brcc	.+34     	; 0x22a6 <vTaskDelayUntil+0x58>
    2284:	07 c0       	rjmp	.+14     	; 0x2294 <vTaskDelayUntil+0x46>
    2286:	c2 17       	cp	r28, r18
    2288:	d3 07       	cpc	r29, r19
    228a:	90 f0       	brcs	.+36     	; 0x22b0 <vTaskDelayUntil+0x62>
    228c:	8c 17       	cp	r24, r28
    228e:	9d 07       	cpc	r25, r29
    2290:	78 f0       	brcs	.+30     	; 0x22b0 <vTaskDelayUntil+0x62>
    2292:	12 c0       	rjmp	.+36     	; 0x22b8 <vTaskDelayUntil+0x6a>
    2294:	80 91 87 08 	lds	r24, 0x0887
    2298:	90 91 88 08 	lds	r25, 0x0888
    229c:	02 96       	adiw	r24, 0x02	; 2
    229e:	0e 94 aa 03 	call	0x754	; 0x754 <uxListRemove>
    22a2:	ce 01       	movw	r24, r28
    22a4:	c0 dc       	rcall	.-1664   	; 0x1c26 <prvAddCurrentTaskToDelayedList>
    22a6:	52 df       	rcall	.-348    	; 0x214c <xTaskResumeAll>
    22a8:	81 11       	cpse	r24, r1
    22aa:	0a c0       	rjmp	.+20     	; 0x22c0 <vTaskDelayUntil+0x72>
    22ac:	bb d8       	rcall	.-3722   	; 0x1424 <vPortYield>
    22ae:	08 c0       	rjmp	.+16     	; 0x22c0 <vTaskDelayUntil+0x72>
    22b0:	f8 01       	movw	r30, r16
    22b2:	d1 83       	std	Z+1, r29	; 0x01
    22b4:	c0 83       	st	Z, r28
    22b6:	ee cf       	rjmp	.-36     	; 0x2294 <vTaskDelayUntil+0x46>
    22b8:	f8 01       	movw	r30, r16
    22ba:	d1 83       	std	Z+1, r29	; 0x01
    22bc:	c0 83       	st	Z, r28
    22be:	f3 cf       	rjmp	.-26     	; 0x22a6 <vTaskDelayUntil+0x58>
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
    22c4:	1f 91       	pop	r17
    22c6:	0f 91       	pop	r16
    22c8:	08 95       	ret

000022ca <prvIdleTask>:
    22ca:	0f 2e       	mov	r0, r31
    22cc:	fa e5       	ldi	r31, 0x5A	; 90
    22ce:	ef 2e       	mov	r14, r31
    22d0:	f8 e0       	ldi	r31, 0x08	; 8
    22d2:	ff 2e       	mov	r15, r31
    22d4:	f0 2d       	mov	r31, r0
    22d6:	c2 e3       	ldi	r28, 0x32	; 50
    22d8:	d8 e0       	ldi	r29, 0x08	; 8
    22da:	26 c0       	rjmp	.+76     	; 0x2328 <prvIdleTask+0x5e>
    22dc:	64 de       	rcall	.-824    	; 0x1fa6 <vTaskSuspendAll>
    22de:	18 81       	ld	r17, Y
    22e0:	35 df       	rcall	.-406    	; 0x214c <xTaskResumeAll>
    22e2:	11 23       	and	r17, r17
    22e4:	09 f1       	breq	.+66     	; 0x2328 <prvIdleTask+0x5e>
    22e6:	0f b6       	in	r0, 0x3f	; 63
    22e8:	f8 94       	cli
    22ea:	0f 92       	push	r0
    22ec:	e0 91 37 08 	lds	r30, 0x0837
    22f0:	f0 91 38 08 	lds	r31, 0x0838
    22f4:	06 81       	ldd	r16, Z+6	; 0x06
    22f6:	17 81       	ldd	r17, Z+7	; 0x07
    22f8:	c8 01       	movw	r24, r16
    22fa:	02 96       	adiw	r24, 0x02	; 2
    22fc:	0e 94 aa 03 	call	0x754	; 0x754 <uxListRemove>
    2300:	80 91 27 08 	lds	r24, 0x0827
    2304:	81 50       	subi	r24, 0x01	; 1
    2306:	80 93 27 08 	sts	0x0827, r24
    230a:	80 91 31 08 	lds	r24, 0x0831
    230e:	81 50       	subi	r24, 0x01	; 1
    2310:	80 93 31 08 	sts	0x0831, r24
    2314:	0f 90       	pop	r0
    2316:	0f be       	out	0x3f, r0	; 63
    2318:	f8 01       	movw	r30, r16
    231a:	87 89       	ldd	r24, Z+23	; 0x17
    231c:	90 8d       	ldd	r25, Z+24	; 0x18
    231e:	0e 94 45 03 	call	0x68a	; 0x68a <vPortFree>
    2322:	c8 01       	movw	r24, r16
    2324:	0e 94 45 03 	call	0x68a	; 0x68a <vPortFree>
    2328:	80 91 31 08 	lds	r24, 0x0831
    232c:	81 11       	cpse	r24, r1
    232e:	d6 cf       	rjmp	.-84     	; 0x22dc <prvIdleTask+0x12>
    2330:	f7 01       	movw	r30, r14
    2332:	80 81       	ld	r24, Z
    2334:	82 30       	cpi	r24, 0x02	; 2
    2336:	c0 f3       	brcs	.-16     	; 0x2328 <prvIdleTask+0x5e>
    2338:	75 d8       	rcall	.-3862   	; 0x1424 <vPortYield>
    233a:	f6 cf       	rjmp	.-20     	; 0x2328 <prvIdleTask+0x5e>

0000233c <vTaskSwitchContext>:
    233c:	80 91 1e 08 	lds	r24, 0x081E
    2340:	88 23       	and	r24, r24
    2342:	21 f0       	breq	.+8      	; 0x234c <vTaskSwitchContext+0x10>
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	80 93 21 08 	sts	0x0821, r24
    234a:	08 95       	ret
    234c:	10 92 21 08 	sts	0x0821, r1
    2350:	80 91 24 08 	lds	r24, 0x0824
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	fc 01       	movw	r30, r24
    2358:	ee 0f       	add	r30, r30
    235a:	ff 1f       	adc	r31, r31
    235c:	ee 0f       	add	r30, r30
    235e:	ff 1f       	adc	r31, r31
    2360:	ee 0f       	add	r30, r30
    2362:	ff 1f       	adc	r31, r31
    2364:	8e 0f       	add	r24, r30
    2366:	9f 1f       	adc	r25, r31
    2368:	fc 01       	movw	r30, r24
    236a:	e6 5a       	subi	r30, 0xA6	; 166
    236c:	f7 4f       	sbci	r31, 0xF7	; 247
    236e:	80 81       	ld	r24, Z
    2370:	81 11       	cpse	r24, r1
    2372:	17 c0       	rjmp	.+46     	; 0x23a2 <vTaskSwitchContext+0x66>
    2374:	80 91 24 08 	lds	r24, 0x0824
    2378:	81 50       	subi	r24, 0x01	; 1
    237a:	80 93 24 08 	sts	0x0824, r24
    237e:	80 91 24 08 	lds	r24, 0x0824
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	fc 01       	movw	r30, r24
    2386:	ee 0f       	add	r30, r30
    2388:	ff 1f       	adc	r31, r31
    238a:	ee 0f       	add	r30, r30
    238c:	ff 1f       	adc	r31, r31
    238e:	ee 0f       	add	r30, r30
    2390:	ff 1f       	adc	r31, r31
    2392:	8e 0f       	add	r24, r30
    2394:	9f 1f       	adc	r25, r31
    2396:	fc 01       	movw	r30, r24
    2398:	e6 5a       	subi	r30, 0xA6	; 166
    239a:	f7 4f       	sbci	r31, 0xF7	; 247
    239c:	80 81       	ld	r24, Z
    239e:	88 23       	and	r24, r24
    23a0:	49 f3       	breq	.-46     	; 0x2374 <vTaskSwitchContext+0x38>
    23a2:	e0 91 24 08 	lds	r30, 0x0824
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	cf 01       	movw	r24, r30
    23aa:	88 0f       	add	r24, r24
    23ac:	99 1f       	adc	r25, r25
    23ae:	88 0f       	add	r24, r24
    23b0:	99 1f       	adc	r25, r25
    23b2:	88 0f       	add	r24, r24
    23b4:	99 1f       	adc	r25, r25
    23b6:	e8 0f       	add	r30, r24
    23b8:	f9 1f       	adc	r31, r25
    23ba:	e6 5a       	subi	r30, 0xA6	; 166
    23bc:	f7 4f       	sbci	r31, 0xF7	; 247
    23be:	a1 81       	ldd	r26, Z+1	; 0x01
    23c0:	b2 81       	ldd	r27, Z+2	; 0x02
    23c2:	12 96       	adiw	r26, 0x02	; 2
    23c4:	0d 90       	ld	r0, X+
    23c6:	bc 91       	ld	r27, X
    23c8:	a0 2d       	mov	r26, r0
    23ca:	b2 83       	std	Z+2, r27	; 0x02
    23cc:	a1 83       	std	Z+1, r26	; 0x01
    23ce:	cf 01       	movw	r24, r30
    23d0:	03 96       	adiw	r24, 0x03	; 3
    23d2:	a8 17       	cp	r26, r24
    23d4:	b9 07       	cpc	r27, r25
    23d6:	31 f4       	brne	.+12     	; 0x23e4 <vTaskSwitchContext+0xa8>
    23d8:	12 96       	adiw	r26, 0x02	; 2
    23da:	8d 91       	ld	r24, X+
    23dc:	9c 91       	ld	r25, X
    23de:	13 97       	sbiw	r26, 0x03	; 3
    23e0:	92 83       	std	Z+2, r25	; 0x02
    23e2:	81 83       	std	Z+1, r24	; 0x01
    23e4:	01 80       	ldd	r0, Z+1	; 0x01
    23e6:	f2 81       	ldd	r31, Z+2	; 0x02
    23e8:	e0 2d       	mov	r30, r0
    23ea:	86 81       	ldd	r24, Z+6	; 0x06
    23ec:	97 81       	ldd	r25, Z+7	; 0x07
    23ee:	90 93 88 08 	sts	0x0888, r25
    23f2:	80 93 87 08 	sts	0x0887, r24
    23f6:	08 95       	ret

000023f8 <vTaskSuspend>:
    23f8:	0f 93       	push	r16
    23fa:	1f 93       	push	r17
    23fc:	cf 93       	push	r28
    23fe:	df 93       	push	r29
    2400:	ec 01       	movw	r28, r24
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	f8 94       	cli
    2406:	0f 92       	push	r0
    2408:	00 97       	sbiw	r24, 0x00	; 0
    240a:	21 f4       	brne	.+8      	; 0x2414 <vTaskSuspend+0x1c>
    240c:	c0 91 87 08 	lds	r28, 0x0887
    2410:	d0 91 88 08 	lds	r29, 0x0888
    2414:	8e 01       	movw	r16, r28
    2416:	0e 5f       	subi	r16, 0xFE	; 254
    2418:	1f 4f       	sbci	r17, 0xFF	; 255
    241a:	c8 01       	movw	r24, r16
    241c:	0e 94 aa 03 	call	0x754	; 0x754 <uxListRemove>
    2420:	8c 89       	ldd	r24, Y+20	; 0x14
    2422:	9d 89       	ldd	r25, Y+21	; 0x15
    2424:	89 2b       	or	r24, r25
    2426:	21 f0       	breq	.+8      	; 0x2430 <vTaskSuspend+0x38>
    2428:	ce 01       	movw	r24, r28
    242a:	0c 96       	adiw	r24, 0x0c	; 12
    242c:	0e 94 aa 03 	call	0x754	; 0x754 <uxListRemove>
    2430:	b8 01       	movw	r22, r16
    2432:	88 e2       	ldi	r24, 0x28	; 40
    2434:	98 e0       	ldi	r25, 0x08	; 8
    2436:	0e 94 58 03 	call	0x6b0	; 0x6b0 <vListInsertEnd>
    243a:	0f 90       	pop	r0
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	80 91 87 08 	lds	r24, 0x0887
    2442:	90 91 88 08 	lds	r25, 0x0888
    2446:	c8 17       	cp	r28, r24
    2448:	d9 07       	cpc	r29, r25
    244a:	a1 f4       	brne	.+40     	; 0x2474 <vTaskSuspend+0x7c>
    244c:	80 91 23 08 	lds	r24, 0x0823
    2450:	88 23       	and	r24, r24
    2452:	19 f0       	breq	.+6      	; 0x245a <vTaskSuspend+0x62>
    2454:	0e 94 12 0a 	call	0x1424	; 0x1424 <vPortYield>
    2458:	17 c0       	rjmp	.+46     	; 0x2488 <vTaskSuspend+0x90>
    245a:	80 91 27 08 	lds	r24, 0x0827
    245e:	90 91 28 08 	lds	r25, 0x0828
    2462:	98 13       	cpse	r25, r24
    2464:	05 c0       	rjmp	.+10     	; 0x2470 <vTaskSuspend+0x78>
    2466:	10 92 88 08 	sts	0x0888, r1
    246a:	10 92 87 08 	sts	0x0887, r1
    246e:	0c c0       	rjmp	.+24     	; 0x2488 <vTaskSuspend+0x90>
    2470:	65 df       	rcall	.-310    	; 0x233c <vTaskSwitchContext>
    2472:	0a c0       	rjmp	.+20     	; 0x2488 <vTaskSuspend+0x90>
    2474:	80 91 23 08 	lds	r24, 0x0823
    2478:	88 23       	and	r24, r24
    247a:	31 f0       	breq	.+12     	; 0x2488 <vTaskSuspend+0x90>
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	f8 94       	cli
    2480:	0f 92       	push	r0
    2482:	b2 db       	rcall	.-2204   	; 0x1be8 <prvResetNextTaskUnblockTime>
    2484:	0f 90       	pop	r0
    2486:	0f be       	out	0x3f, r0	; 63
    2488:	df 91       	pop	r29
    248a:	cf 91       	pop	r28
    248c:	1f 91       	pop	r17
    248e:	0f 91       	pop	r16
    2490:	08 95       	ret

00002492 <vTaskPlaceOnEventList>:
    2492:	cf 93       	push	r28
    2494:	df 93       	push	r29
    2496:	eb 01       	movw	r28, r22
    2498:	60 91 87 08 	lds	r22, 0x0887
    249c:	70 91 88 08 	lds	r23, 0x0888
    24a0:	64 5f       	subi	r22, 0xF4	; 244
    24a2:	7f 4f       	sbci	r23, 0xFF	; 255
    24a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <vListInsert>
    24a8:	80 91 87 08 	lds	r24, 0x0887
    24ac:	90 91 88 08 	lds	r25, 0x0888
    24b0:	02 96       	adiw	r24, 0x02	; 2
    24b2:	0e 94 aa 03 	call	0x754	; 0x754 <uxListRemove>
    24b6:	cf 3f       	cpi	r28, 0xFF	; 255
    24b8:	8f ef       	ldi	r24, 0xFF	; 255
    24ba:	d8 07       	cpc	r29, r24
    24bc:	59 f4       	brne	.+22     	; 0x24d4 <vTaskPlaceOnEventList+0x42>
    24be:	60 91 87 08 	lds	r22, 0x0887
    24c2:	70 91 88 08 	lds	r23, 0x0888
    24c6:	6e 5f       	subi	r22, 0xFE	; 254
    24c8:	7f 4f       	sbci	r23, 0xFF	; 255
    24ca:	88 e2       	ldi	r24, 0x28	; 40
    24cc:	98 e0       	ldi	r25, 0x08	; 8
    24ce:	0e 94 58 03 	call	0x6b0	; 0x6b0 <vListInsertEnd>
    24d2:	07 c0       	rjmp	.+14     	; 0x24e2 <vTaskPlaceOnEventList+0x50>
    24d4:	80 91 25 08 	lds	r24, 0x0825
    24d8:	90 91 26 08 	lds	r25, 0x0826
    24dc:	8c 0f       	add	r24, r28
    24de:	9d 1f       	adc	r25, r29
    24e0:	a2 db       	rcall	.-2236   	; 0x1c26 <prvAddCurrentTaskToDelayedList>
    24e2:	df 91       	pop	r29
    24e4:	cf 91       	pop	r28
    24e6:	08 95       	ret

000024e8 <xTaskRemoveFromEventList>:
    24e8:	0f 93       	push	r16
    24ea:	1f 93       	push	r17
    24ec:	cf 93       	push	r28
    24ee:	df 93       	push	r29
    24f0:	dc 01       	movw	r26, r24
    24f2:	15 96       	adiw	r26, 0x05	; 5
    24f4:	ed 91       	ld	r30, X+
    24f6:	fc 91       	ld	r31, X
    24f8:	16 97       	sbiw	r26, 0x06	; 6
    24fa:	c6 81       	ldd	r28, Z+6	; 0x06
    24fc:	d7 81       	ldd	r29, Z+7	; 0x07
    24fe:	8e 01       	movw	r16, r28
    2500:	04 5f       	subi	r16, 0xF4	; 244
    2502:	1f 4f       	sbci	r17, 0xFF	; 255
    2504:	c8 01       	movw	r24, r16
    2506:	0e 94 aa 03 	call	0x754	; 0x754 <uxListRemove>
    250a:	80 91 1e 08 	lds	r24, 0x081E
    250e:	81 11       	cpse	r24, r1
    2510:	1c c0       	rjmp	.+56     	; 0x254a <xTaskRemoveFromEventList+0x62>
    2512:	0a 50       	subi	r16, 0x0A	; 10
    2514:	11 09       	sbc	r17, r1
    2516:	c8 01       	movw	r24, r16
    2518:	0e 94 aa 03 	call	0x754	; 0x754 <uxListRemove>
    251c:	8e 89       	ldd	r24, Y+22	; 0x16
    251e:	90 91 24 08 	lds	r25, 0x0824
    2522:	98 17       	cp	r25, r24
    2524:	10 f4       	brcc	.+4      	; 0x252a <xTaskRemoveFromEventList+0x42>
    2526:	80 93 24 08 	sts	0x0824, r24
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	9c 01       	movw	r18, r24
    252e:	22 0f       	add	r18, r18
    2530:	33 1f       	adc	r19, r19
    2532:	22 0f       	add	r18, r18
    2534:	33 1f       	adc	r19, r19
    2536:	22 0f       	add	r18, r18
    2538:	33 1f       	adc	r19, r19
    253a:	82 0f       	add	r24, r18
    253c:	93 1f       	adc	r25, r19
    253e:	b8 01       	movw	r22, r16
    2540:	86 5a       	subi	r24, 0xA6	; 166
    2542:	97 4f       	sbci	r25, 0xF7	; 247
    2544:	0e 94 58 03 	call	0x6b0	; 0x6b0 <vListInsertEnd>
    2548:	05 c0       	rjmp	.+10     	; 0x2554 <xTaskRemoveFromEventList+0x6c>
    254a:	b8 01       	movw	r22, r16
    254c:	8b e3       	ldi	r24, 0x3B	; 59
    254e:	98 e0       	ldi	r25, 0x08	; 8
    2550:	0e 94 58 03 	call	0x6b0	; 0x6b0 <vListInsertEnd>
    2554:	e0 91 87 08 	lds	r30, 0x0887
    2558:	f0 91 88 08 	lds	r31, 0x0888
    255c:	9e 89       	ldd	r25, Y+22	; 0x16
    255e:	86 89       	ldd	r24, Z+22	; 0x16
    2560:	89 17       	cp	r24, r25
    2562:	20 f4       	brcc	.+8      	; 0x256c <xTaskRemoveFromEventList+0x84>
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	80 93 21 08 	sts	0x0821, r24
    256a:	01 c0       	rjmp	.+2      	; 0x256e <xTaskRemoveFromEventList+0x86>
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	df 91       	pop	r29
    2570:	cf 91       	pop	r28
    2572:	1f 91       	pop	r17
    2574:	0f 91       	pop	r16
    2576:	08 95       	ret

00002578 <vTaskSetTimeOutState>:
    2578:	20 91 20 08 	lds	r18, 0x0820
    257c:	fc 01       	movw	r30, r24
    257e:	20 83       	st	Z, r18
    2580:	20 91 25 08 	lds	r18, 0x0825
    2584:	30 91 26 08 	lds	r19, 0x0826
    2588:	32 83       	std	Z+2, r19	; 0x02
    258a:	21 83       	std	Z+1, r18	; 0x01
    258c:	08 95       	ret

0000258e <xTaskCheckForTimeOut>:
    258e:	0f b6       	in	r0, 0x3f	; 63
    2590:	f8 94       	cli
    2592:	0f 92       	push	r0
    2594:	40 91 25 08 	lds	r20, 0x0825
    2598:	50 91 26 08 	lds	r21, 0x0826
    259c:	db 01       	movw	r26, r22
    259e:	2d 91       	ld	r18, X+
    25a0:	3c 91       	ld	r19, X
    25a2:	2f 3f       	cpi	r18, 0xFF	; 255
    25a4:	bf ef       	ldi	r27, 0xFF	; 255
    25a6:	3b 07       	cpc	r19, r27
    25a8:	11 f1       	breq	.+68     	; 0x25ee <xTaskCheckForTimeOut+0x60>
    25aa:	e0 91 20 08 	lds	r30, 0x0820
    25ae:	dc 01       	movw	r26, r24
    25b0:	fc 91       	ld	r31, X
    25b2:	fe 17       	cp	r31, r30
    25b4:	39 f0       	breq	.+14     	; 0x25c4 <xTaskCheckForTimeOut+0x36>
    25b6:	11 96       	adiw	r26, 0x01	; 1
    25b8:	ed 91       	ld	r30, X+
    25ba:	fc 91       	ld	r31, X
    25bc:	12 97       	sbiw	r26, 0x02	; 2
    25be:	4e 17       	cp	r20, r30
    25c0:	5f 07       	cpc	r21, r31
    25c2:	b8 f4       	brcc	.+46     	; 0x25f2 <xTaskCheckForTimeOut+0x64>
    25c4:	dc 01       	movw	r26, r24
    25c6:	11 96       	adiw	r26, 0x01	; 1
    25c8:	ed 91       	ld	r30, X+
    25ca:	fc 91       	ld	r31, X
    25cc:	12 97       	sbiw	r26, 0x02	; 2
    25ce:	da 01       	movw	r26, r20
    25d0:	ae 1b       	sub	r26, r30
    25d2:	bf 0b       	sbc	r27, r31
    25d4:	a2 17       	cp	r26, r18
    25d6:	b3 07       	cpc	r27, r19
    25d8:	70 f4       	brcc	.+28     	; 0x25f6 <xTaskCheckForTimeOut+0x68>
    25da:	e4 1b       	sub	r30, r20
    25dc:	f5 0b       	sbc	r31, r21
    25de:	2e 0f       	add	r18, r30
    25e0:	3f 1f       	adc	r19, r31
    25e2:	fb 01       	movw	r30, r22
    25e4:	31 83       	std	Z+1, r19	; 0x01
    25e6:	20 83       	st	Z, r18
    25e8:	c7 df       	rcall	.-114    	; 0x2578 <vTaskSetTimeOutState>
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	05 c0       	rjmp	.+10     	; 0x25f8 <xTaskCheckForTimeOut+0x6a>
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	03 c0       	rjmp	.+6      	; 0x25f8 <xTaskCheckForTimeOut+0x6a>
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	01 c0       	rjmp	.+2      	; 0x25f8 <xTaskCheckForTimeOut+0x6a>
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	0f 90       	pop	r0
    25fa:	0f be       	out	0x3f, r0	; 63
    25fc:	08 95       	ret

000025fe <vTaskMissedYield>:
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	80 93 21 08 	sts	0x0821, r24
    2604:	08 95       	ret

00002606 <vTaskPriorityInherit>:
    2606:	0f 93       	push	r16
    2608:	1f 93       	push	r17
    260a:	cf 93       	push	r28
    260c:	df 93       	push	r29
    260e:	ec 01       	movw	r28, r24
    2610:	00 97       	sbiw	r24, 0x00	; 0
    2612:	09 f4       	brne	.+2      	; 0x2616 <vTaskPriorityInherit+0x10>
    2614:	51 c0       	rjmp	.+162    	; 0x26b8 <vTaskPriorityInherit+0xb2>
    2616:	8e 89       	ldd	r24, Y+22	; 0x16
    2618:	e0 91 87 08 	lds	r30, 0x0887
    261c:	f0 91 88 08 	lds	r31, 0x0888
    2620:	96 89       	ldd	r25, Z+22	; 0x16
    2622:	89 17       	cp	r24, r25
    2624:	08 f0       	brcs	.+2      	; 0x2628 <vTaskPriorityInherit+0x22>
    2626:	48 c0       	rjmp	.+144    	; 0x26b8 <vTaskPriorityInherit+0xb2>
    2628:	2c 85       	ldd	r18, Y+12	; 0x0c
    262a:	3d 85       	ldd	r19, Y+13	; 0x0d
    262c:	33 23       	and	r19, r19
    262e:	5c f0       	brlt	.+22     	; 0x2646 <vTaskPriorityInherit+0x40>
    2630:	e0 91 87 08 	lds	r30, 0x0887
    2634:	f0 91 88 08 	lds	r31, 0x0888
    2638:	96 89       	ldd	r25, Z+22	; 0x16
    263a:	25 e0       	ldi	r18, 0x05	; 5
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	29 1b       	sub	r18, r25
    2640:	31 09       	sbc	r19, r1
    2642:	3d 87       	std	Y+13, r19	; 0x0d
    2644:	2c 87       	std	Y+12, r18	; 0x0c
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	9c 01       	movw	r18, r24
    264a:	22 0f       	add	r18, r18
    264c:	33 1f       	adc	r19, r19
    264e:	22 0f       	add	r18, r18
    2650:	33 1f       	adc	r19, r19
    2652:	22 0f       	add	r18, r18
    2654:	33 1f       	adc	r19, r19
    2656:	82 0f       	add	r24, r18
    2658:	93 1f       	adc	r25, r19
    265a:	86 5a       	subi	r24, 0xA6	; 166
    265c:	97 4f       	sbci	r25, 0xF7	; 247
    265e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2660:	3b 85       	ldd	r19, Y+11	; 0x0b
    2662:	28 17       	cp	r18, r24
    2664:	39 07       	cpc	r19, r25
    2666:	11 f5       	brne	.+68     	; 0x26ac <vTaskPriorityInherit+0xa6>
    2668:	8e 01       	movw	r16, r28
    266a:	0e 5f       	subi	r16, 0xFE	; 254
    266c:	1f 4f       	sbci	r17, 0xFF	; 255
    266e:	c8 01       	movw	r24, r16
    2670:	0e 94 aa 03 	call	0x754	; 0x754 <uxListRemove>
    2674:	e0 91 87 08 	lds	r30, 0x0887
    2678:	f0 91 88 08 	lds	r31, 0x0888
    267c:	86 89       	ldd	r24, Z+22	; 0x16
    267e:	8e 8b       	std	Y+22, r24	; 0x16
    2680:	90 91 24 08 	lds	r25, 0x0824
    2684:	98 17       	cp	r25, r24
    2686:	10 f4       	brcc	.+4      	; 0x268c <vTaskPriorityInherit+0x86>
    2688:	80 93 24 08 	sts	0x0824, r24
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	9c 01       	movw	r18, r24
    2690:	22 0f       	add	r18, r18
    2692:	33 1f       	adc	r19, r19
    2694:	22 0f       	add	r18, r18
    2696:	33 1f       	adc	r19, r19
    2698:	22 0f       	add	r18, r18
    269a:	33 1f       	adc	r19, r19
    269c:	82 0f       	add	r24, r18
    269e:	93 1f       	adc	r25, r19
    26a0:	b8 01       	movw	r22, r16
    26a2:	86 5a       	subi	r24, 0xA6	; 166
    26a4:	97 4f       	sbci	r25, 0xF7	; 247
    26a6:	0e 94 58 03 	call	0x6b0	; 0x6b0 <vListInsertEnd>
    26aa:	06 c0       	rjmp	.+12     	; 0x26b8 <vTaskPriorityInherit+0xb2>
    26ac:	e0 91 87 08 	lds	r30, 0x0887
    26b0:	f0 91 88 08 	lds	r31, 0x0888
    26b4:	86 89       	ldd	r24, Z+22	; 0x16
    26b6:	8e 8b       	std	Y+22, r24	; 0x16
    26b8:	df 91       	pop	r29
    26ba:	cf 91       	pop	r28
    26bc:	1f 91       	pop	r17
    26be:	0f 91       	pop	r16
    26c0:	08 95       	ret

000026c2 <xTaskPriorityDisinherit>:
    26c2:	0f 93       	push	r16
    26c4:	1f 93       	push	r17
    26c6:	cf 93       	push	r28
    26c8:	df 93       	push	r29
    26ca:	ec 01       	movw	r28, r24
    26cc:	00 97       	sbiw	r24, 0x00	; 0
    26ce:	71 f1       	breq	.+92     	; 0x272c <xTaskPriorityDisinherit+0x6a>
    26d0:	8a a1       	ldd	r24, Y+34	; 0x22
    26d2:	81 50       	subi	r24, 0x01	; 1
    26d4:	8a a3       	std	Y+34, r24	; 0x22
    26d6:	2e 89       	ldd	r18, Y+22	; 0x16
    26d8:	99 a1       	ldd	r25, Y+33	; 0x21
    26da:	29 17       	cp	r18, r25
    26dc:	49 f1       	breq	.+82     	; 0x2730 <xTaskPriorityDisinherit+0x6e>
    26de:	81 11       	cpse	r24, r1
    26e0:	29 c0       	rjmp	.+82     	; 0x2734 <xTaskPriorityDisinherit+0x72>
    26e2:	8e 01       	movw	r16, r28
    26e4:	0e 5f       	subi	r16, 0xFE	; 254
    26e6:	1f 4f       	sbci	r17, 0xFF	; 255
    26e8:	c8 01       	movw	r24, r16
    26ea:	0e 94 aa 03 	call	0x754	; 0x754 <uxListRemove>
    26ee:	89 a1       	ldd	r24, Y+33	; 0x21
    26f0:	8e 8b       	std	Y+22, r24	; 0x16
    26f2:	25 e0       	ldi	r18, 0x05	; 5
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	28 1b       	sub	r18, r24
    26f8:	31 09       	sbc	r19, r1
    26fa:	3d 87       	std	Y+13, r19	; 0x0d
    26fc:	2c 87       	std	Y+12, r18	; 0x0c
    26fe:	90 91 24 08 	lds	r25, 0x0824
    2702:	98 17       	cp	r25, r24
    2704:	10 f4       	brcc	.+4      	; 0x270a <xTaskPriorityDisinherit+0x48>
    2706:	80 93 24 08 	sts	0x0824, r24
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	9c 01       	movw	r18, r24
    270e:	22 0f       	add	r18, r18
    2710:	33 1f       	adc	r19, r19
    2712:	22 0f       	add	r18, r18
    2714:	33 1f       	adc	r19, r19
    2716:	22 0f       	add	r18, r18
    2718:	33 1f       	adc	r19, r19
    271a:	82 0f       	add	r24, r18
    271c:	93 1f       	adc	r25, r19
    271e:	b8 01       	movw	r22, r16
    2720:	86 5a       	subi	r24, 0xA6	; 166
    2722:	97 4f       	sbci	r25, 0xF7	; 247
    2724:	0e 94 58 03 	call	0x6b0	; 0x6b0 <vListInsertEnd>
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	05 c0       	rjmp	.+10     	; 0x2736 <xTaskPriorityDisinherit+0x74>
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	03 c0       	rjmp	.+6      	; 0x2736 <xTaskPriorityDisinherit+0x74>
    2730:	80 e0       	ldi	r24, 0x00	; 0
    2732:	01 c0       	rjmp	.+2      	; 0x2736 <xTaskPriorityDisinherit+0x74>
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	df 91       	pop	r29
    2738:	cf 91       	pop	r28
    273a:	1f 91       	pop	r17
    273c:	0f 91       	pop	r16
    273e:	08 95       	ret

00002740 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    2740:	80 91 87 08 	lds	r24, 0x0887
    2744:	90 91 88 08 	lds	r25, 0x0888
    2748:	89 2b       	or	r24, r25
    274a:	39 f0       	breq	.+14     	; 0x275a <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    274c:	e0 91 87 08 	lds	r30, 0x0887
    2750:	f0 91 88 08 	lds	r31, 0x0888
    2754:	82 a1       	ldd	r24, Z+34	; 0x22
    2756:	8f 5f       	subi	r24, 0xFF	; 255
    2758:	82 a3       	std	Z+34, r24	; 0x22
		}

		return pxCurrentTCB;
    275a:	80 91 87 08 	lds	r24, 0x0887
    275e:	90 91 88 08 	lds	r25, 0x0888
	}
    2762:	08 95       	ret

00002764 <__subsf3>:
    2764:	50 58       	subi	r21, 0x80	; 128

00002766 <__addsf3>:
    2766:	bb 27       	eor	r27, r27
    2768:	aa 27       	eor	r26, r26
    276a:	0e d0       	rcall	.+28     	; 0x2788 <__addsf3x>
    276c:	e5 c0       	rjmp	.+458    	; 0x2938 <__fp_round>
    276e:	d6 d0       	rcall	.+428    	; 0x291c <__fp_pscA>
    2770:	30 f0       	brcs	.+12     	; 0x277e <__addsf3+0x18>
    2772:	db d0       	rcall	.+438    	; 0x292a <__fp_pscB>
    2774:	20 f0       	brcs	.+8      	; 0x277e <__addsf3+0x18>
    2776:	31 f4       	brne	.+12     	; 0x2784 <__addsf3+0x1e>
    2778:	9f 3f       	cpi	r25, 0xFF	; 255
    277a:	11 f4       	brne	.+4      	; 0x2780 <__addsf3+0x1a>
    277c:	1e f4       	brtc	.+6      	; 0x2784 <__addsf3+0x1e>
    277e:	cb c0       	rjmp	.+406    	; 0x2916 <__fp_nan>
    2780:	0e f4       	brtc	.+2      	; 0x2784 <__addsf3+0x1e>
    2782:	e0 95       	com	r30
    2784:	e7 fb       	bst	r30, 7
    2786:	c1 c0       	rjmp	.+386    	; 0x290a <__fp_inf>

00002788 <__addsf3x>:
    2788:	e9 2f       	mov	r30, r25
    278a:	e7 d0       	rcall	.+462    	; 0x295a <__fp_split3>
    278c:	80 f3       	brcs	.-32     	; 0x276e <__addsf3+0x8>
    278e:	ba 17       	cp	r27, r26
    2790:	62 07       	cpc	r22, r18
    2792:	73 07       	cpc	r23, r19
    2794:	84 07       	cpc	r24, r20
    2796:	95 07       	cpc	r25, r21
    2798:	18 f0       	brcs	.+6      	; 0x27a0 <__addsf3x+0x18>
    279a:	71 f4       	brne	.+28     	; 0x27b8 <__addsf3x+0x30>
    279c:	9e f5       	brtc	.+102    	; 0x2804 <__addsf3x+0x7c>
    279e:	ff c0       	rjmp	.+510    	; 0x299e <__fp_zero>
    27a0:	0e f4       	brtc	.+2      	; 0x27a4 <__addsf3x+0x1c>
    27a2:	e0 95       	com	r30
    27a4:	0b 2e       	mov	r0, r27
    27a6:	ba 2f       	mov	r27, r26
    27a8:	a0 2d       	mov	r26, r0
    27aa:	0b 01       	movw	r0, r22
    27ac:	b9 01       	movw	r22, r18
    27ae:	90 01       	movw	r18, r0
    27b0:	0c 01       	movw	r0, r24
    27b2:	ca 01       	movw	r24, r20
    27b4:	a0 01       	movw	r20, r0
    27b6:	11 24       	eor	r1, r1
    27b8:	ff 27       	eor	r31, r31
    27ba:	59 1b       	sub	r21, r25
    27bc:	99 f0       	breq	.+38     	; 0x27e4 <__addsf3x+0x5c>
    27be:	59 3f       	cpi	r21, 0xF9	; 249
    27c0:	50 f4       	brcc	.+20     	; 0x27d6 <__addsf3x+0x4e>
    27c2:	50 3e       	cpi	r21, 0xE0	; 224
    27c4:	68 f1       	brcs	.+90     	; 0x2820 <__addsf3x+0x98>
    27c6:	1a 16       	cp	r1, r26
    27c8:	f0 40       	sbci	r31, 0x00	; 0
    27ca:	a2 2f       	mov	r26, r18
    27cc:	23 2f       	mov	r18, r19
    27ce:	34 2f       	mov	r19, r20
    27d0:	44 27       	eor	r20, r20
    27d2:	58 5f       	subi	r21, 0xF8	; 248
    27d4:	f3 cf       	rjmp	.-26     	; 0x27bc <__addsf3x+0x34>
    27d6:	46 95       	lsr	r20
    27d8:	37 95       	ror	r19
    27da:	27 95       	ror	r18
    27dc:	a7 95       	ror	r26
    27de:	f0 40       	sbci	r31, 0x00	; 0
    27e0:	53 95       	inc	r21
    27e2:	c9 f7       	brne	.-14     	; 0x27d6 <__addsf3x+0x4e>
    27e4:	7e f4       	brtc	.+30     	; 0x2804 <__addsf3x+0x7c>
    27e6:	1f 16       	cp	r1, r31
    27e8:	ba 0b       	sbc	r27, r26
    27ea:	62 0b       	sbc	r22, r18
    27ec:	73 0b       	sbc	r23, r19
    27ee:	84 0b       	sbc	r24, r20
    27f0:	ba f0       	brmi	.+46     	; 0x2820 <__addsf3x+0x98>
    27f2:	91 50       	subi	r25, 0x01	; 1
    27f4:	a1 f0       	breq	.+40     	; 0x281e <__addsf3x+0x96>
    27f6:	ff 0f       	add	r31, r31
    27f8:	bb 1f       	adc	r27, r27
    27fa:	66 1f       	adc	r22, r22
    27fc:	77 1f       	adc	r23, r23
    27fe:	88 1f       	adc	r24, r24
    2800:	c2 f7       	brpl	.-16     	; 0x27f2 <__addsf3x+0x6a>
    2802:	0e c0       	rjmp	.+28     	; 0x2820 <__addsf3x+0x98>
    2804:	ba 0f       	add	r27, r26
    2806:	62 1f       	adc	r22, r18
    2808:	73 1f       	adc	r23, r19
    280a:	84 1f       	adc	r24, r20
    280c:	48 f4       	brcc	.+18     	; 0x2820 <__addsf3x+0x98>
    280e:	87 95       	ror	r24
    2810:	77 95       	ror	r23
    2812:	67 95       	ror	r22
    2814:	b7 95       	ror	r27
    2816:	f7 95       	ror	r31
    2818:	9e 3f       	cpi	r25, 0xFE	; 254
    281a:	08 f0       	brcs	.+2      	; 0x281e <__addsf3x+0x96>
    281c:	b3 cf       	rjmp	.-154    	; 0x2784 <__addsf3+0x1e>
    281e:	93 95       	inc	r25
    2820:	88 0f       	add	r24, r24
    2822:	08 f0       	brcs	.+2      	; 0x2826 <__addsf3x+0x9e>
    2824:	99 27       	eor	r25, r25
    2826:	ee 0f       	add	r30, r30
    2828:	97 95       	ror	r25
    282a:	87 95       	ror	r24
    282c:	08 95       	ret

0000282e <__fixsfsi>:
    282e:	04 d0       	rcall	.+8      	; 0x2838 <__fixunssfsi>
    2830:	68 94       	set
    2832:	b1 11       	cpse	r27, r1
    2834:	b5 c0       	rjmp	.+362    	; 0x29a0 <__fp_szero>
    2836:	08 95       	ret

00002838 <__fixunssfsi>:
    2838:	98 d0       	rcall	.+304    	; 0x296a <__fp_splitA>
    283a:	88 f0       	brcs	.+34     	; 0x285e <__fixunssfsi+0x26>
    283c:	9f 57       	subi	r25, 0x7F	; 127
    283e:	90 f0       	brcs	.+36     	; 0x2864 <__fixunssfsi+0x2c>
    2840:	b9 2f       	mov	r27, r25
    2842:	99 27       	eor	r25, r25
    2844:	b7 51       	subi	r27, 0x17	; 23
    2846:	a0 f0       	brcs	.+40     	; 0x2870 <__fixunssfsi+0x38>
    2848:	d1 f0       	breq	.+52     	; 0x287e <__fixunssfsi+0x46>
    284a:	66 0f       	add	r22, r22
    284c:	77 1f       	adc	r23, r23
    284e:	88 1f       	adc	r24, r24
    2850:	99 1f       	adc	r25, r25
    2852:	1a f0       	brmi	.+6      	; 0x285a <__fixunssfsi+0x22>
    2854:	ba 95       	dec	r27
    2856:	c9 f7       	brne	.-14     	; 0x284a <__fixunssfsi+0x12>
    2858:	12 c0       	rjmp	.+36     	; 0x287e <__fixunssfsi+0x46>
    285a:	b1 30       	cpi	r27, 0x01	; 1
    285c:	81 f0       	breq	.+32     	; 0x287e <__fixunssfsi+0x46>
    285e:	9f d0       	rcall	.+318    	; 0x299e <__fp_zero>
    2860:	b1 e0       	ldi	r27, 0x01	; 1
    2862:	08 95       	ret
    2864:	9c c0       	rjmp	.+312    	; 0x299e <__fp_zero>
    2866:	67 2f       	mov	r22, r23
    2868:	78 2f       	mov	r23, r24
    286a:	88 27       	eor	r24, r24
    286c:	b8 5f       	subi	r27, 0xF8	; 248
    286e:	39 f0       	breq	.+14     	; 0x287e <__fixunssfsi+0x46>
    2870:	b9 3f       	cpi	r27, 0xF9	; 249
    2872:	cc f3       	brlt	.-14     	; 0x2866 <__fixunssfsi+0x2e>
    2874:	86 95       	lsr	r24
    2876:	77 95       	ror	r23
    2878:	67 95       	ror	r22
    287a:	b3 95       	inc	r27
    287c:	d9 f7       	brne	.-10     	; 0x2874 <__fixunssfsi+0x3c>
    287e:	3e f4       	brtc	.+14     	; 0x288e <__fixunssfsi+0x56>
    2880:	90 95       	com	r25
    2882:	80 95       	com	r24
    2884:	70 95       	com	r23
    2886:	61 95       	neg	r22
    2888:	7f 4f       	sbci	r23, 0xFF	; 255
    288a:	8f 4f       	sbci	r24, 0xFF	; 255
    288c:	9f 4f       	sbci	r25, 0xFF	; 255
    288e:	08 95       	ret

00002890 <__floatunsisf>:
    2890:	e8 94       	clt
    2892:	09 c0       	rjmp	.+18     	; 0x28a6 <__floatsisf+0x12>

00002894 <__floatsisf>:
    2894:	97 fb       	bst	r25, 7
    2896:	3e f4       	brtc	.+14     	; 0x28a6 <__floatsisf+0x12>
    2898:	90 95       	com	r25
    289a:	80 95       	com	r24
    289c:	70 95       	com	r23
    289e:	61 95       	neg	r22
    28a0:	7f 4f       	sbci	r23, 0xFF	; 255
    28a2:	8f 4f       	sbci	r24, 0xFF	; 255
    28a4:	9f 4f       	sbci	r25, 0xFF	; 255
    28a6:	99 23       	and	r25, r25
    28a8:	a9 f0       	breq	.+42     	; 0x28d4 <__floatsisf+0x40>
    28aa:	f9 2f       	mov	r31, r25
    28ac:	96 e9       	ldi	r25, 0x96	; 150
    28ae:	bb 27       	eor	r27, r27
    28b0:	93 95       	inc	r25
    28b2:	f6 95       	lsr	r31
    28b4:	87 95       	ror	r24
    28b6:	77 95       	ror	r23
    28b8:	67 95       	ror	r22
    28ba:	b7 95       	ror	r27
    28bc:	f1 11       	cpse	r31, r1
    28be:	f8 cf       	rjmp	.-16     	; 0x28b0 <__floatsisf+0x1c>
    28c0:	fa f4       	brpl	.+62     	; 0x2900 <__floatsisf+0x6c>
    28c2:	bb 0f       	add	r27, r27
    28c4:	11 f4       	brne	.+4      	; 0x28ca <__floatsisf+0x36>
    28c6:	60 ff       	sbrs	r22, 0
    28c8:	1b c0       	rjmp	.+54     	; 0x2900 <__floatsisf+0x6c>
    28ca:	6f 5f       	subi	r22, 0xFF	; 255
    28cc:	7f 4f       	sbci	r23, 0xFF	; 255
    28ce:	8f 4f       	sbci	r24, 0xFF	; 255
    28d0:	9f 4f       	sbci	r25, 0xFF	; 255
    28d2:	16 c0       	rjmp	.+44     	; 0x2900 <__floatsisf+0x6c>
    28d4:	88 23       	and	r24, r24
    28d6:	11 f0       	breq	.+4      	; 0x28dc <__floatsisf+0x48>
    28d8:	96 e9       	ldi	r25, 0x96	; 150
    28da:	11 c0       	rjmp	.+34     	; 0x28fe <__floatsisf+0x6a>
    28dc:	77 23       	and	r23, r23
    28de:	21 f0       	breq	.+8      	; 0x28e8 <__floatsisf+0x54>
    28e0:	9e e8       	ldi	r25, 0x8E	; 142
    28e2:	87 2f       	mov	r24, r23
    28e4:	76 2f       	mov	r23, r22
    28e6:	05 c0       	rjmp	.+10     	; 0x28f2 <__floatsisf+0x5e>
    28e8:	66 23       	and	r22, r22
    28ea:	71 f0       	breq	.+28     	; 0x2908 <__floatsisf+0x74>
    28ec:	96 e8       	ldi	r25, 0x86	; 134
    28ee:	86 2f       	mov	r24, r22
    28f0:	70 e0       	ldi	r23, 0x00	; 0
    28f2:	60 e0       	ldi	r22, 0x00	; 0
    28f4:	2a f0       	brmi	.+10     	; 0x2900 <__floatsisf+0x6c>
    28f6:	9a 95       	dec	r25
    28f8:	66 0f       	add	r22, r22
    28fa:	77 1f       	adc	r23, r23
    28fc:	88 1f       	adc	r24, r24
    28fe:	da f7       	brpl	.-10     	; 0x28f6 <__floatsisf+0x62>
    2900:	88 0f       	add	r24, r24
    2902:	96 95       	lsr	r25
    2904:	87 95       	ror	r24
    2906:	97 f9       	bld	r25, 7
    2908:	08 95       	ret

0000290a <__fp_inf>:
    290a:	97 f9       	bld	r25, 7
    290c:	9f 67       	ori	r25, 0x7F	; 127
    290e:	80 e8       	ldi	r24, 0x80	; 128
    2910:	70 e0       	ldi	r23, 0x00	; 0
    2912:	60 e0       	ldi	r22, 0x00	; 0
    2914:	08 95       	ret

00002916 <__fp_nan>:
    2916:	9f ef       	ldi	r25, 0xFF	; 255
    2918:	80 ec       	ldi	r24, 0xC0	; 192
    291a:	08 95       	ret

0000291c <__fp_pscA>:
    291c:	00 24       	eor	r0, r0
    291e:	0a 94       	dec	r0
    2920:	16 16       	cp	r1, r22
    2922:	17 06       	cpc	r1, r23
    2924:	18 06       	cpc	r1, r24
    2926:	09 06       	cpc	r0, r25
    2928:	08 95       	ret

0000292a <__fp_pscB>:
    292a:	00 24       	eor	r0, r0
    292c:	0a 94       	dec	r0
    292e:	12 16       	cp	r1, r18
    2930:	13 06       	cpc	r1, r19
    2932:	14 06       	cpc	r1, r20
    2934:	05 06       	cpc	r0, r21
    2936:	08 95       	ret

00002938 <__fp_round>:
    2938:	09 2e       	mov	r0, r25
    293a:	03 94       	inc	r0
    293c:	00 0c       	add	r0, r0
    293e:	11 f4       	brne	.+4      	; 0x2944 <__fp_round+0xc>
    2940:	88 23       	and	r24, r24
    2942:	52 f0       	brmi	.+20     	; 0x2958 <__fp_round+0x20>
    2944:	bb 0f       	add	r27, r27
    2946:	40 f4       	brcc	.+16     	; 0x2958 <__fp_round+0x20>
    2948:	bf 2b       	or	r27, r31
    294a:	11 f4       	brne	.+4      	; 0x2950 <__fp_round+0x18>
    294c:	60 ff       	sbrs	r22, 0
    294e:	04 c0       	rjmp	.+8      	; 0x2958 <__fp_round+0x20>
    2950:	6f 5f       	subi	r22, 0xFF	; 255
    2952:	7f 4f       	sbci	r23, 0xFF	; 255
    2954:	8f 4f       	sbci	r24, 0xFF	; 255
    2956:	9f 4f       	sbci	r25, 0xFF	; 255
    2958:	08 95       	ret

0000295a <__fp_split3>:
    295a:	57 fd       	sbrc	r21, 7
    295c:	90 58       	subi	r25, 0x80	; 128
    295e:	44 0f       	add	r20, r20
    2960:	55 1f       	adc	r21, r21
    2962:	59 f0       	breq	.+22     	; 0x297a <__fp_splitA+0x10>
    2964:	5f 3f       	cpi	r21, 0xFF	; 255
    2966:	71 f0       	breq	.+28     	; 0x2984 <__fp_splitA+0x1a>
    2968:	47 95       	ror	r20

0000296a <__fp_splitA>:
    296a:	88 0f       	add	r24, r24
    296c:	97 fb       	bst	r25, 7
    296e:	99 1f       	adc	r25, r25
    2970:	61 f0       	breq	.+24     	; 0x298a <__fp_splitA+0x20>
    2972:	9f 3f       	cpi	r25, 0xFF	; 255
    2974:	79 f0       	breq	.+30     	; 0x2994 <__fp_splitA+0x2a>
    2976:	87 95       	ror	r24
    2978:	08 95       	ret
    297a:	12 16       	cp	r1, r18
    297c:	13 06       	cpc	r1, r19
    297e:	14 06       	cpc	r1, r20
    2980:	55 1f       	adc	r21, r21
    2982:	f2 cf       	rjmp	.-28     	; 0x2968 <__fp_split3+0xe>
    2984:	46 95       	lsr	r20
    2986:	f1 df       	rcall	.-30     	; 0x296a <__fp_splitA>
    2988:	08 c0       	rjmp	.+16     	; 0x299a <__fp_splitA+0x30>
    298a:	16 16       	cp	r1, r22
    298c:	17 06       	cpc	r1, r23
    298e:	18 06       	cpc	r1, r24
    2990:	99 1f       	adc	r25, r25
    2992:	f1 cf       	rjmp	.-30     	; 0x2976 <__fp_splitA+0xc>
    2994:	86 95       	lsr	r24
    2996:	71 05       	cpc	r23, r1
    2998:	61 05       	cpc	r22, r1
    299a:	08 94       	sec
    299c:	08 95       	ret

0000299e <__fp_zero>:
    299e:	e8 94       	clt

000029a0 <__fp_szero>:
    29a0:	bb 27       	eor	r27, r27
    29a2:	66 27       	eor	r22, r22
    29a4:	77 27       	eor	r23, r23
    29a6:	cb 01       	movw	r24, r22
    29a8:	97 f9       	bld	r25, 7
    29aa:	08 95       	ret

000029ac <__mulsf3>:
    29ac:	0b d0       	rcall	.+22     	; 0x29c4 <__mulsf3x>
    29ae:	c4 cf       	rjmp	.-120    	; 0x2938 <__fp_round>
    29b0:	b5 df       	rcall	.-150    	; 0x291c <__fp_pscA>
    29b2:	28 f0       	brcs	.+10     	; 0x29be <__mulsf3+0x12>
    29b4:	ba df       	rcall	.-140    	; 0x292a <__fp_pscB>
    29b6:	18 f0       	brcs	.+6      	; 0x29be <__mulsf3+0x12>
    29b8:	95 23       	and	r25, r21
    29ba:	09 f0       	breq	.+2      	; 0x29be <__mulsf3+0x12>
    29bc:	a6 cf       	rjmp	.-180    	; 0x290a <__fp_inf>
    29be:	ab cf       	rjmp	.-170    	; 0x2916 <__fp_nan>
    29c0:	11 24       	eor	r1, r1
    29c2:	ee cf       	rjmp	.-36     	; 0x29a0 <__fp_szero>

000029c4 <__mulsf3x>:
    29c4:	ca df       	rcall	.-108    	; 0x295a <__fp_split3>
    29c6:	a0 f3       	brcs	.-24     	; 0x29b0 <__mulsf3+0x4>

000029c8 <__mulsf3_pse>:
    29c8:	95 9f       	mul	r25, r21
    29ca:	d1 f3       	breq	.-12     	; 0x29c0 <__mulsf3+0x14>
    29cc:	95 0f       	add	r25, r21
    29ce:	50 e0       	ldi	r21, 0x00	; 0
    29d0:	55 1f       	adc	r21, r21
    29d2:	62 9f       	mul	r22, r18
    29d4:	f0 01       	movw	r30, r0
    29d6:	72 9f       	mul	r23, r18
    29d8:	bb 27       	eor	r27, r27
    29da:	f0 0d       	add	r31, r0
    29dc:	b1 1d       	adc	r27, r1
    29de:	63 9f       	mul	r22, r19
    29e0:	aa 27       	eor	r26, r26
    29e2:	f0 0d       	add	r31, r0
    29e4:	b1 1d       	adc	r27, r1
    29e6:	aa 1f       	adc	r26, r26
    29e8:	64 9f       	mul	r22, r20
    29ea:	66 27       	eor	r22, r22
    29ec:	b0 0d       	add	r27, r0
    29ee:	a1 1d       	adc	r26, r1
    29f0:	66 1f       	adc	r22, r22
    29f2:	82 9f       	mul	r24, r18
    29f4:	22 27       	eor	r18, r18
    29f6:	b0 0d       	add	r27, r0
    29f8:	a1 1d       	adc	r26, r1
    29fa:	62 1f       	adc	r22, r18
    29fc:	73 9f       	mul	r23, r19
    29fe:	b0 0d       	add	r27, r0
    2a00:	a1 1d       	adc	r26, r1
    2a02:	62 1f       	adc	r22, r18
    2a04:	83 9f       	mul	r24, r19
    2a06:	a0 0d       	add	r26, r0
    2a08:	61 1d       	adc	r22, r1
    2a0a:	22 1f       	adc	r18, r18
    2a0c:	74 9f       	mul	r23, r20
    2a0e:	33 27       	eor	r19, r19
    2a10:	a0 0d       	add	r26, r0
    2a12:	61 1d       	adc	r22, r1
    2a14:	23 1f       	adc	r18, r19
    2a16:	84 9f       	mul	r24, r20
    2a18:	60 0d       	add	r22, r0
    2a1a:	21 1d       	adc	r18, r1
    2a1c:	82 2f       	mov	r24, r18
    2a1e:	76 2f       	mov	r23, r22
    2a20:	6a 2f       	mov	r22, r26
    2a22:	11 24       	eor	r1, r1
    2a24:	9f 57       	subi	r25, 0x7F	; 127
    2a26:	50 40       	sbci	r21, 0x00	; 0
    2a28:	8a f0       	brmi	.+34     	; 0x2a4c <__mulsf3_pse+0x84>
    2a2a:	e1 f0       	breq	.+56     	; 0x2a64 <__mulsf3_pse+0x9c>
    2a2c:	88 23       	and	r24, r24
    2a2e:	4a f0       	brmi	.+18     	; 0x2a42 <__mulsf3_pse+0x7a>
    2a30:	ee 0f       	add	r30, r30
    2a32:	ff 1f       	adc	r31, r31
    2a34:	bb 1f       	adc	r27, r27
    2a36:	66 1f       	adc	r22, r22
    2a38:	77 1f       	adc	r23, r23
    2a3a:	88 1f       	adc	r24, r24
    2a3c:	91 50       	subi	r25, 0x01	; 1
    2a3e:	50 40       	sbci	r21, 0x00	; 0
    2a40:	a9 f7       	brne	.-22     	; 0x2a2c <__mulsf3_pse+0x64>
    2a42:	9e 3f       	cpi	r25, 0xFE	; 254
    2a44:	51 05       	cpc	r21, r1
    2a46:	70 f0       	brcs	.+28     	; 0x2a64 <__mulsf3_pse+0x9c>
    2a48:	60 cf       	rjmp	.-320    	; 0x290a <__fp_inf>
    2a4a:	aa cf       	rjmp	.-172    	; 0x29a0 <__fp_szero>
    2a4c:	5f 3f       	cpi	r21, 0xFF	; 255
    2a4e:	ec f3       	brlt	.-6      	; 0x2a4a <__mulsf3_pse+0x82>
    2a50:	98 3e       	cpi	r25, 0xE8	; 232
    2a52:	dc f3       	brlt	.-10     	; 0x2a4a <__mulsf3_pse+0x82>
    2a54:	86 95       	lsr	r24
    2a56:	77 95       	ror	r23
    2a58:	67 95       	ror	r22
    2a5a:	b7 95       	ror	r27
    2a5c:	f7 95       	ror	r31
    2a5e:	e7 95       	ror	r30
    2a60:	9f 5f       	subi	r25, 0xFF	; 255
    2a62:	c1 f7       	brne	.-16     	; 0x2a54 <__mulsf3_pse+0x8c>
    2a64:	fe 2b       	or	r31, r30
    2a66:	88 0f       	add	r24, r24
    2a68:	91 1d       	adc	r25, r1
    2a6a:	96 95       	lsr	r25
    2a6c:	87 95       	ror	r24
    2a6e:	97 f9       	bld	r25, 7
    2a70:	08 95       	ret

00002a72 <pow>:
    2a72:	fa 01       	movw	r30, r20
    2a74:	ee 0f       	add	r30, r30
    2a76:	ff 1f       	adc	r31, r31
    2a78:	30 96       	adiw	r30, 0x00	; 0
    2a7a:	21 05       	cpc	r18, r1
    2a7c:	31 05       	cpc	r19, r1
    2a7e:	99 f1       	breq	.+102    	; 0x2ae6 <pow+0x74>
    2a80:	61 15       	cp	r22, r1
    2a82:	71 05       	cpc	r23, r1
    2a84:	61 f4       	brne	.+24     	; 0x2a9e <pow+0x2c>
    2a86:	80 38       	cpi	r24, 0x80	; 128
    2a88:	bf e3       	ldi	r27, 0x3F	; 63
    2a8a:	9b 07       	cpc	r25, r27
    2a8c:	49 f1       	breq	.+82     	; 0x2ae0 <pow+0x6e>
    2a8e:	68 94       	set
    2a90:	90 38       	cpi	r25, 0x80	; 128
    2a92:	81 05       	cpc	r24, r1
    2a94:	61 f0       	breq	.+24     	; 0x2aae <pow+0x3c>
    2a96:	80 38       	cpi	r24, 0x80	; 128
    2a98:	bf ef       	ldi	r27, 0xFF	; 255
    2a9a:	9b 07       	cpc	r25, r27
    2a9c:	41 f0       	breq	.+16     	; 0x2aae <pow+0x3c>
    2a9e:	99 23       	and	r25, r25
    2aa0:	42 f5       	brpl	.+80     	; 0x2af2 <pow+0x80>
    2aa2:	ff 3f       	cpi	r31, 0xFF	; 255
    2aa4:	e1 05       	cpc	r30, r1
    2aa6:	31 05       	cpc	r19, r1
    2aa8:	21 05       	cpc	r18, r1
    2aaa:	11 f1       	breq	.+68     	; 0x2af0 <pow+0x7e>
    2aac:	e8 94       	clt
    2aae:	08 94       	sec
    2ab0:	e7 95       	ror	r30
    2ab2:	d9 01       	movw	r26, r18
    2ab4:	aa 23       	and	r26, r26
    2ab6:	29 f4       	brne	.+10     	; 0x2ac2 <pow+0x50>
    2ab8:	ab 2f       	mov	r26, r27
    2aba:	be 2f       	mov	r27, r30
    2abc:	f8 5f       	subi	r31, 0xF8	; 248
    2abe:	d0 f3       	brcs	.-12     	; 0x2ab4 <pow+0x42>
    2ac0:	10 c0       	rjmp	.+32     	; 0x2ae2 <pow+0x70>
    2ac2:	ff 5f       	subi	r31, 0xFF	; 255
    2ac4:	70 f4       	brcc	.+28     	; 0x2ae2 <pow+0x70>
    2ac6:	a6 95       	lsr	r26
    2ac8:	e0 f7       	brcc	.-8      	; 0x2ac2 <pow+0x50>
    2aca:	f7 39       	cpi	r31, 0x97	; 151
    2acc:	50 f0       	brcs	.+20     	; 0x2ae2 <pow+0x70>
    2ace:	19 f0       	breq	.+6      	; 0x2ad6 <pow+0x64>
    2ad0:	ff 3a       	cpi	r31, 0xAF	; 175
    2ad2:	38 f4       	brcc	.+14     	; 0x2ae2 <pow+0x70>
    2ad4:	9f 77       	andi	r25, 0x7F	; 127
    2ad6:	9f 93       	push	r25
    2ad8:	0c d0       	rcall	.+24     	; 0x2af2 <pow+0x80>
    2ada:	0f 90       	pop	r0
    2adc:	07 fc       	sbrc	r0, 7
    2ade:	90 58       	subi	r25, 0x80	; 128
    2ae0:	08 95       	ret
    2ae2:	3e f0       	brts	.+14     	; 0x2af2 <pow+0x80>
    2ae4:	18 cf       	rjmp	.-464    	; 0x2916 <__fp_nan>
    2ae6:	60 e0       	ldi	r22, 0x00	; 0
    2ae8:	70 e0       	ldi	r23, 0x00	; 0
    2aea:	80 e8       	ldi	r24, 0x80	; 128
    2aec:	9f e3       	ldi	r25, 0x3F	; 63
    2aee:	08 95       	ret
    2af0:	4f e7       	ldi	r20, 0x7F	; 127
    2af2:	9f 77       	andi	r25, 0x7F	; 127
    2af4:	5f 93       	push	r21
    2af6:	4f 93       	push	r20
    2af8:	3f 93       	push	r19
    2afa:	2f 93       	push	r18
    2afc:	9e d0       	rcall	.+316    	; 0x2c3a <log>
    2afe:	2f 91       	pop	r18
    2b00:	3f 91       	pop	r19
    2b02:	4f 91       	pop	r20
    2b04:	5f 91       	pop	r21
    2b06:	52 df       	rcall	.-348    	; 0x29ac <__mulsf3>
    2b08:	05 c0       	rjmp	.+10     	; 0x2b14 <exp>
    2b0a:	19 f4       	brne	.+6      	; 0x2b12 <pow+0xa0>
    2b0c:	0e f0       	brts	.+2      	; 0x2b10 <pow+0x9e>
    2b0e:	fd ce       	rjmp	.-518    	; 0x290a <__fp_inf>
    2b10:	46 cf       	rjmp	.-372    	; 0x299e <__fp_zero>
    2b12:	01 cf       	rjmp	.-510    	; 0x2916 <__fp_nan>

00002b14 <exp>:
    2b14:	2a df       	rcall	.-428    	; 0x296a <__fp_splitA>
    2b16:	c8 f3       	brcs	.-14     	; 0x2b0a <pow+0x98>
    2b18:	96 38       	cpi	r25, 0x86	; 134
    2b1a:	c0 f7       	brcc	.-16     	; 0x2b0c <pow+0x9a>
    2b1c:	07 f8       	bld	r0, 7
    2b1e:	0f 92       	push	r0
    2b20:	e8 94       	clt
    2b22:	2b e3       	ldi	r18, 0x3B	; 59
    2b24:	3a ea       	ldi	r19, 0xAA	; 170
    2b26:	48 eb       	ldi	r20, 0xB8	; 184
    2b28:	5f e7       	ldi	r21, 0x7F	; 127
    2b2a:	4e df       	rcall	.-356    	; 0x29c8 <__mulsf3_pse>
    2b2c:	0f 92       	push	r0
    2b2e:	0f 92       	push	r0
    2b30:	0f 92       	push	r0
    2b32:	4d b7       	in	r20, 0x3d	; 61
    2b34:	5e b7       	in	r21, 0x3e	; 62
    2b36:	0f 92       	push	r0
    2b38:	c0 d0       	rcall	.+384    	; 0x2cba <modf>
    2b3a:	e4 ee       	ldi	r30, 0xE4	; 228
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	16 d0       	rcall	.+44     	; 0x2b6c <__fp_powser>
    2b40:	4f 91       	pop	r20
    2b42:	5f 91       	pop	r21
    2b44:	ef 91       	pop	r30
    2b46:	ff 91       	pop	r31
    2b48:	e5 95       	asr	r30
    2b4a:	ee 1f       	adc	r30, r30
    2b4c:	ff 1f       	adc	r31, r31
    2b4e:	49 f0       	breq	.+18     	; 0x2b62 <exp+0x4e>
    2b50:	fe 57       	subi	r31, 0x7E	; 126
    2b52:	e0 68       	ori	r30, 0x80	; 128
    2b54:	44 27       	eor	r20, r20
    2b56:	ee 0f       	add	r30, r30
    2b58:	44 1f       	adc	r20, r20
    2b5a:	fa 95       	dec	r31
    2b5c:	e1 f7       	brne	.-8      	; 0x2b56 <exp+0x42>
    2b5e:	41 95       	neg	r20
    2b60:	55 0b       	sbc	r21, r21
    2b62:	32 d0       	rcall	.+100    	; 0x2bc8 <ldexp>
    2b64:	0f 90       	pop	r0
    2b66:	07 fe       	sbrs	r0, 7
    2b68:	26 c0       	rjmp	.+76     	; 0x2bb6 <inverse>
    2b6a:	08 95       	ret

00002b6c <__fp_powser>:
    2b6c:	df 93       	push	r29
    2b6e:	cf 93       	push	r28
    2b70:	1f 93       	push	r17
    2b72:	0f 93       	push	r16
    2b74:	ff 92       	push	r15
    2b76:	ef 92       	push	r14
    2b78:	df 92       	push	r13
    2b7a:	7b 01       	movw	r14, r22
    2b7c:	8c 01       	movw	r16, r24
    2b7e:	68 94       	set
    2b80:	05 c0       	rjmp	.+10     	; 0x2b8c <__fp_powser+0x20>
    2b82:	da 2e       	mov	r13, r26
    2b84:	ef 01       	movw	r28, r30
    2b86:	1e df       	rcall	.-452    	; 0x29c4 <__mulsf3x>
    2b88:	fe 01       	movw	r30, r28
    2b8a:	e8 94       	clt
    2b8c:	a5 91       	lpm	r26, Z+
    2b8e:	25 91       	lpm	r18, Z+
    2b90:	35 91       	lpm	r19, Z+
    2b92:	45 91       	lpm	r20, Z+
    2b94:	55 91       	lpm	r21, Z+
    2b96:	ae f3       	brts	.-22     	; 0x2b82 <__fp_powser+0x16>
    2b98:	ef 01       	movw	r28, r30
    2b9a:	f6 dd       	rcall	.-1044   	; 0x2788 <__addsf3x>
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	97 01       	movw	r18, r14
    2ba0:	a8 01       	movw	r20, r16
    2ba2:	da 94       	dec	r13
    2ba4:	79 f7       	brne	.-34     	; 0x2b84 <__fp_powser+0x18>
    2ba6:	df 90       	pop	r13
    2ba8:	ef 90       	pop	r14
    2baa:	ff 90       	pop	r15
    2bac:	0f 91       	pop	r16
    2bae:	1f 91       	pop	r17
    2bb0:	cf 91       	pop	r28
    2bb2:	df 91       	pop	r29
    2bb4:	08 95       	ret

00002bb6 <inverse>:
    2bb6:	9b 01       	movw	r18, r22
    2bb8:	ac 01       	movw	r20, r24
    2bba:	60 e0       	ldi	r22, 0x00	; 0
    2bbc:	70 e0       	ldi	r23, 0x00	; 0
    2bbe:	80 e8       	ldi	r24, 0x80	; 128
    2bc0:	9f e3       	ldi	r25, 0x3F	; 63
    2bc2:	ae c0       	rjmp	.+348    	; 0x2d20 <__divsf3>
    2bc4:	a2 ce       	rjmp	.-700    	; 0x290a <__fp_inf>
    2bc6:	14 c1       	rjmp	.+552    	; 0x2df0 <__fp_mpack>

00002bc8 <ldexp>:
    2bc8:	d0 de       	rcall	.-608    	; 0x296a <__fp_splitA>
    2bca:	e8 f3       	brcs	.-6      	; 0x2bc6 <inverse+0x10>
    2bcc:	99 23       	and	r25, r25
    2bce:	d9 f3       	breq	.-10     	; 0x2bc6 <inverse+0x10>
    2bd0:	94 0f       	add	r25, r20
    2bd2:	51 1d       	adc	r21, r1
    2bd4:	bb f3       	brvs	.-18     	; 0x2bc4 <inverse+0xe>
    2bd6:	91 50       	subi	r25, 0x01	; 1
    2bd8:	50 40       	sbci	r21, 0x00	; 0
    2bda:	94 f0       	brlt	.+36     	; 0x2c00 <ldexp+0x38>
    2bdc:	59 f0       	breq	.+22     	; 0x2bf4 <ldexp+0x2c>
    2bde:	88 23       	and	r24, r24
    2be0:	32 f0       	brmi	.+12     	; 0x2bee <ldexp+0x26>
    2be2:	66 0f       	add	r22, r22
    2be4:	77 1f       	adc	r23, r23
    2be6:	88 1f       	adc	r24, r24
    2be8:	91 50       	subi	r25, 0x01	; 1
    2bea:	50 40       	sbci	r21, 0x00	; 0
    2bec:	c1 f7       	brne	.-16     	; 0x2bde <ldexp+0x16>
    2bee:	9e 3f       	cpi	r25, 0xFE	; 254
    2bf0:	51 05       	cpc	r21, r1
    2bf2:	44 f7       	brge	.-48     	; 0x2bc4 <inverse+0xe>
    2bf4:	88 0f       	add	r24, r24
    2bf6:	91 1d       	adc	r25, r1
    2bf8:	96 95       	lsr	r25
    2bfa:	87 95       	ror	r24
    2bfc:	97 f9       	bld	r25, 7
    2bfe:	08 95       	ret
    2c00:	5f 3f       	cpi	r21, 0xFF	; 255
    2c02:	ac f0       	brlt	.+42     	; 0x2c2e <ldexp+0x66>
    2c04:	98 3e       	cpi	r25, 0xE8	; 232
    2c06:	9c f0       	brlt	.+38     	; 0x2c2e <ldexp+0x66>
    2c08:	bb 27       	eor	r27, r27
    2c0a:	86 95       	lsr	r24
    2c0c:	77 95       	ror	r23
    2c0e:	67 95       	ror	r22
    2c10:	b7 95       	ror	r27
    2c12:	08 f4       	brcc	.+2      	; 0x2c16 <ldexp+0x4e>
    2c14:	b1 60       	ori	r27, 0x01	; 1
    2c16:	93 95       	inc	r25
    2c18:	c1 f7       	brne	.-16     	; 0x2c0a <ldexp+0x42>
    2c1a:	bb 0f       	add	r27, r27
    2c1c:	58 f7       	brcc	.-42     	; 0x2bf4 <ldexp+0x2c>
    2c1e:	11 f4       	brne	.+4      	; 0x2c24 <ldexp+0x5c>
    2c20:	60 ff       	sbrs	r22, 0
    2c22:	e8 cf       	rjmp	.-48     	; 0x2bf4 <ldexp+0x2c>
    2c24:	6f 5f       	subi	r22, 0xFF	; 255
    2c26:	7f 4f       	sbci	r23, 0xFF	; 255
    2c28:	8f 4f       	sbci	r24, 0xFF	; 255
    2c2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c2c:	e3 cf       	rjmp	.-58     	; 0x2bf4 <ldexp+0x2c>
    2c2e:	b8 ce       	rjmp	.-656    	; 0x29a0 <__fp_szero>
    2c30:	0e f0       	brts	.+2      	; 0x2c34 <ldexp+0x6c>
    2c32:	de c0       	rjmp	.+444    	; 0x2df0 <__fp_mpack>
    2c34:	70 ce       	rjmp	.-800    	; 0x2916 <__fp_nan>
    2c36:	68 94       	set
    2c38:	68 ce       	rjmp	.-816    	; 0x290a <__fp_inf>

00002c3a <log>:
    2c3a:	97 de       	rcall	.-722    	; 0x296a <__fp_splitA>
    2c3c:	c8 f3       	brcs	.-14     	; 0x2c30 <ldexp+0x68>
    2c3e:	99 23       	and	r25, r25
    2c40:	d1 f3       	breq	.-12     	; 0x2c36 <ldexp+0x6e>
    2c42:	c6 f3       	brts	.-16     	; 0x2c34 <ldexp+0x6c>
    2c44:	df 93       	push	r29
    2c46:	cf 93       	push	r28
    2c48:	1f 93       	push	r17
    2c4a:	0f 93       	push	r16
    2c4c:	ff 92       	push	r15
    2c4e:	c9 2f       	mov	r28, r25
    2c50:	dd 27       	eor	r29, r29
    2c52:	88 23       	and	r24, r24
    2c54:	2a f0       	brmi	.+10     	; 0x2c60 <log+0x26>
    2c56:	21 97       	sbiw	r28, 0x01	; 1
    2c58:	66 0f       	add	r22, r22
    2c5a:	77 1f       	adc	r23, r23
    2c5c:	88 1f       	adc	r24, r24
    2c5e:	da f7       	brpl	.-10     	; 0x2c56 <log+0x1c>
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	40 e8       	ldi	r20, 0x80	; 128
    2c66:	5f eb       	ldi	r21, 0xBF	; 191
    2c68:	9f e3       	ldi	r25, 0x3F	; 63
    2c6a:	88 39       	cpi	r24, 0x98	; 152
    2c6c:	20 f0       	brcs	.+8      	; 0x2c76 <log+0x3c>
    2c6e:	80 3e       	cpi	r24, 0xE0	; 224
    2c70:	30 f0       	brcs	.+12     	; 0x2c7e <log+0x44>
    2c72:	21 96       	adiw	r28, 0x01	; 1
    2c74:	8f 77       	andi	r24, 0x7F	; 127
    2c76:	77 dd       	rcall	.-1298   	; 0x2766 <__addsf3>
    2c78:	ec e0       	ldi	r30, 0x0C	; 12
    2c7a:	f1 e0       	ldi	r31, 0x01	; 1
    2c7c:	03 c0       	rjmp	.+6      	; 0x2c84 <log+0x4a>
    2c7e:	73 dd       	rcall	.-1306   	; 0x2766 <__addsf3>
    2c80:	e9 e3       	ldi	r30, 0x39	; 57
    2c82:	f1 e0       	ldi	r31, 0x01	; 1
    2c84:	73 df       	rcall	.-282    	; 0x2b6c <__fp_powser>
    2c86:	8b 01       	movw	r16, r22
    2c88:	be 01       	movw	r22, r28
    2c8a:	ec 01       	movw	r28, r24
    2c8c:	fb 2e       	mov	r15, r27
    2c8e:	6f 57       	subi	r22, 0x7F	; 127
    2c90:	71 09       	sbc	r23, r1
    2c92:	75 95       	asr	r23
    2c94:	77 1f       	adc	r23, r23
    2c96:	88 0b       	sbc	r24, r24
    2c98:	99 0b       	sbc	r25, r25
    2c9a:	fc dd       	rcall	.-1032   	; 0x2894 <__floatsisf>
    2c9c:	28 e1       	ldi	r18, 0x18	; 24
    2c9e:	32 e7       	ldi	r19, 0x72	; 114
    2ca0:	41 e3       	ldi	r20, 0x31	; 49
    2ca2:	5f e3       	ldi	r21, 0x3F	; 63
    2ca4:	8f de       	rcall	.-738    	; 0x29c4 <__mulsf3x>
    2ca6:	af 2d       	mov	r26, r15
    2ca8:	98 01       	movw	r18, r16
    2caa:	ae 01       	movw	r20, r28
    2cac:	ff 90       	pop	r15
    2cae:	0f 91       	pop	r16
    2cb0:	1f 91       	pop	r17
    2cb2:	cf 91       	pop	r28
    2cb4:	df 91       	pop	r29
    2cb6:	68 dd       	rcall	.-1328   	; 0x2788 <__addsf3x>
    2cb8:	3f ce       	rjmp	.-898    	; 0x2938 <__fp_round>

00002cba <modf>:
    2cba:	fa 01       	movw	r30, r20
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	aa 0f       	add	r26, r26
    2cc0:	bb 1f       	adc	r27, r27
    2cc2:	9b 01       	movw	r18, r22
    2cc4:	ac 01       	movw	r20, r24
    2cc6:	bf 57       	subi	r27, 0x7F	; 127
    2cc8:	28 f4       	brcc	.+10     	; 0x2cd4 <modf+0x1a>
    2cca:	22 27       	eor	r18, r18
    2ccc:	33 27       	eor	r19, r19
    2cce:	44 27       	eor	r20, r20
    2cd0:	50 78       	andi	r21, 0x80	; 128
    2cd2:	1f c0       	rjmp	.+62     	; 0x2d12 <modf+0x58>
    2cd4:	b7 51       	subi	r27, 0x17	; 23
    2cd6:	88 f4       	brcc	.+34     	; 0x2cfa <modf+0x40>
    2cd8:	ab 2f       	mov	r26, r27
    2cda:	00 24       	eor	r0, r0
    2cdc:	46 95       	lsr	r20
    2cde:	37 95       	ror	r19
    2ce0:	27 95       	ror	r18
    2ce2:	01 1c       	adc	r0, r1
    2ce4:	a3 95       	inc	r26
    2ce6:	d2 f3       	brmi	.-12     	; 0x2cdc <modf+0x22>
    2ce8:	00 20       	and	r0, r0
    2cea:	69 f0       	breq	.+26     	; 0x2d06 <modf+0x4c>
    2cec:	22 0f       	add	r18, r18
    2cee:	33 1f       	adc	r19, r19
    2cf0:	44 1f       	adc	r20, r20
    2cf2:	b3 95       	inc	r27
    2cf4:	da f3       	brmi	.-10     	; 0x2cec <modf+0x32>
    2cf6:	0d d0       	rcall	.+26     	; 0x2d12 <modf+0x58>
    2cf8:	35 cd       	rjmp	.-1430   	; 0x2764 <__subsf3>
    2cfa:	61 30       	cpi	r22, 0x01	; 1
    2cfc:	71 05       	cpc	r23, r1
    2cfe:	a0 e8       	ldi	r26, 0x80	; 128
    2d00:	8a 07       	cpc	r24, r26
    2d02:	b9 46       	sbci	r27, 0x69	; 105
    2d04:	30 f4       	brcc	.+12     	; 0x2d12 <modf+0x58>
    2d06:	9b 01       	movw	r18, r22
    2d08:	ac 01       	movw	r20, r24
    2d0a:	66 27       	eor	r22, r22
    2d0c:	77 27       	eor	r23, r23
    2d0e:	88 27       	eor	r24, r24
    2d10:	90 78       	andi	r25, 0x80	; 128
    2d12:	30 96       	adiw	r30, 0x00	; 0
    2d14:	21 f0       	breq	.+8      	; 0x2d1e <modf+0x64>
    2d16:	20 83       	st	Z, r18
    2d18:	31 83       	std	Z+1, r19	; 0x01
    2d1a:	42 83       	std	Z+2, r20	; 0x02
    2d1c:	53 83       	std	Z+3, r21	; 0x03
    2d1e:	08 95       	ret

00002d20 <__divsf3>:
    2d20:	0c d0       	rcall	.+24     	; 0x2d3a <__divsf3x>
    2d22:	0a ce       	rjmp	.-1004   	; 0x2938 <__fp_round>
    2d24:	02 de       	rcall	.-1020   	; 0x292a <__fp_pscB>
    2d26:	40 f0       	brcs	.+16     	; 0x2d38 <__divsf3+0x18>
    2d28:	f9 dd       	rcall	.-1038   	; 0x291c <__fp_pscA>
    2d2a:	30 f0       	brcs	.+12     	; 0x2d38 <__divsf3+0x18>
    2d2c:	21 f4       	brne	.+8      	; 0x2d36 <__divsf3+0x16>
    2d2e:	5f 3f       	cpi	r21, 0xFF	; 255
    2d30:	19 f0       	breq	.+6      	; 0x2d38 <__divsf3+0x18>
    2d32:	eb cd       	rjmp	.-1066   	; 0x290a <__fp_inf>
    2d34:	51 11       	cpse	r21, r1
    2d36:	34 ce       	rjmp	.-920    	; 0x29a0 <__fp_szero>
    2d38:	ee cd       	rjmp	.-1060   	; 0x2916 <__fp_nan>

00002d3a <__divsf3x>:
    2d3a:	0f de       	rcall	.-994    	; 0x295a <__fp_split3>
    2d3c:	98 f3       	brcs	.-26     	; 0x2d24 <__divsf3+0x4>

00002d3e <__divsf3_pse>:
    2d3e:	99 23       	and	r25, r25
    2d40:	c9 f3       	breq	.-14     	; 0x2d34 <__divsf3+0x14>
    2d42:	55 23       	and	r21, r21
    2d44:	b1 f3       	breq	.-20     	; 0x2d32 <__divsf3+0x12>
    2d46:	95 1b       	sub	r25, r21
    2d48:	55 0b       	sbc	r21, r21
    2d4a:	bb 27       	eor	r27, r27
    2d4c:	aa 27       	eor	r26, r26
    2d4e:	62 17       	cp	r22, r18
    2d50:	73 07       	cpc	r23, r19
    2d52:	84 07       	cpc	r24, r20
    2d54:	38 f0       	brcs	.+14     	; 0x2d64 <__divsf3_pse+0x26>
    2d56:	9f 5f       	subi	r25, 0xFF	; 255
    2d58:	5f 4f       	sbci	r21, 0xFF	; 255
    2d5a:	22 0f       	add	r18, r18
    2d5c:	33 1f       	adc	r19, r19
    2d5e:	44 1f       	adc	r20, r20
    2d60:	aa 1f       	adc	r26, r26
    2d62:	a9 f3       	breq	.-22     	; 0x2d4e <__divsf3_pse+0x10>
    2d64:	33 d0       	rcall	.+102    	; 0x2dcc <__divsf3_pse+0x8e>
    2d66:	0e 2e       	mov	r0, r30
    2d68:	3a f0       	brmi	.+14     	; 0x2d78 <__divsf3_pse+0x3a>
    2d6a:	e0 e8       	ldi	r30, 0x80	; 128
    2d6c:	30 d0       	rcall	.+96     	; 0x2dce <__divsf3_pse+0x90>
    2d6e:	91 50       	subi	r25, 0x01	; 1
    2d70:	50 40       	sbci	r21, 0x00	; 0
    2d72:	e6 95       	lsr	r30
    2d74:	00 1c       	adc	r0, r0
    2d76:	ca f7       	brpl	.-14     	; 0x2d6a <__divsf3_pse+0x2c>
    2d78:	29 d0       	rcall	.+82     	; 0x2dcc <__divsf3_pse+0x8e>
    2d7a:	fe 2f       	mov	r31, r30
    2d7c:	27 d0       	rcall	.+78     	; 0x2dcc <__divsf3_pse+0x8e>
    2d7e:	66 0f       	add	r22, r22
    2d80:	77 1f       	adc	r23, r23
    2d82:	88 1f       	adc	r24, r24
    2d84:	bb 1f       	adc	r27, r27
    2d86:	26 17       	cp	r18, r22
    2d88:	37 07       	cpc	r19, r23
    2d8a:	48 07       	cpc	r20, r24
    2d8c:	ab 07       	cpc	r26, r27
    2d8e:	b0 e8       	ldi	r27, 0x80	; 128
    2d90:	09 f0       	breq	.+2      	; 0x2d94 <__divsf3_pse+0x56>
    2d92:	bb 0b       	sbc	r27, r27
    2d94:	80 2d       	mov	r24, r0
    2d96:	bf 01       	movw	r22, r30
    2d98:	ff 27       	eor	r31, r31
    2d9a:	93 58       	subi	r25, 0x83	; 131
    2d9c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d9e:	2a f0       	brmi	.+10     	; 0x2daa <__divsf3_pse+0x6c>
    2da0:	9e 3f       	cpi	r25, 0xFE	; 254
    2da2:	51 05       	cpc	r21, r1
    2da4:	68 f0       	brcs	.+26     	; 0x2dc0 <__divsf3_pse+0x82>
    2da6:	b1 cd       	rjmp	.-1182   	; 0x290a <__fp_inf>
    2da8:	fb cd       	rjmp	.-1034   	; 0x29a0 <__fp_szero>
    2daa:	5f 3f       	cpi	r21, 0xFF	; 255
    2dac:	ec f3       	brlt	.-6      	; 0x2da8 <__divsf3_pse+0x6a>
    2dae:	98 3e       	cpi	r25, 0xE8	; 232
    2db0:	dc f3       	brlt	.-10     	; 0x2da8 <__divsf3_pse+0x6a>
    2db2:	86 95       	lsr	r24
    2db4:	77 95       	ror	r23
    2db6:	67 95       	ror	r22
    2db8:	b7 95       	ror	r27
    2dba:	f7 95       	ror	r31
    2dbc:	9f 5f       	subi	r25, 0xFF	; 255
    2dbe:	c9 f7       	brne	.-14     	; 0x2db2 <__divsf3_pse+0x74>
    2dc0:	88 0f       	add	r24, r24
    2dc2:	91 1d       	adc	r25, r1
    2dc4:	96 95       	lsr	r25
    2dc6:	87 95       	ror	r24
    2dc8:	97 f9       	bld	r25, 7
    2dca:	08 95       	ret
    2dcc:	e1 e0       	ldi	r30, 0x01	; 1
    2dce:	66 0f       	add	r22, r22
    2dd0:	77 1f       	adc	r23, r23
    2dd2:	88 1f       	adc	r24, r24
    2dd4:	bb 1f       	adc	r27, r27
    2dd6:	62 17       	cp	r22, r18
    2dd8:	73 07       	cpc	r23, r19
    2dda:	84 07       	cpc	r24, r20
    2ddc:	ba 07       	cpc	r27, r26
    2dde:	20 f0       	brcs	.+8      	; 0x2de8 <__divsf3_pse+0xaa>
    2de0:	62 1b       	sub	r22, r18
    2de2:	73 0b       	sbc	r23, r19
    2de4:	84 0b       	sbc	r24, r20
    2de6:	ba 0b       	sbc	r27, r26
    2de8:	ee 1f       	adc	r30, r30
    2dea:	88 f7       	brcc	.-30     	; 0x2dce <__divsf3_pse+0x90>
    2dec:	e0 95       	com	r30
    2dee:	08 95       	ret

00002df0 <__fp_mpack>:
    2df0:	9f 3f       	cpi	r25, 0xFF	; 255
    2df2:	31 f0       	breq	.+12     	; 0x2e00 <__fp_mpack_finite+0xc>

00002df4 <__fp_mpack_finite>:
    2df4:	91 50       	subi	r25, 0x01	; 1
    2df6:	20 f4       	brcc	.+8      	; 0x2e00 <__fp_mpack_finite+0xc>
    2df8:	87 95       	ror	r24
    2dfa:	77 95       	ror	r23
    2dfc:	67 95       	ror	r22
    2dfe:	b7 95       	ror	r27
    2e00:	88 0f       	add	r24, r24
    2e02:	91 1d       	adc	r25, r1
    2e04:	96 95       	lsr	r25
    2e06:	87 95       	ror	r24
    2e08:	97 f9       	bld	r25, 7
    2e0a:	08 95       	ret

00002e0c <__divmodhi4>:
    2e0c:	97 fb       	bst	r25, 7
    2e0e:	07 2e       	mov	r0, r23
    2e10:	16 f4       	brtc	.+4      	; 0x2e16 <__divmodhi4+0xa>
    2e12:	00 94       	com	r0
    2e14:	06 d0       	rcall	.+12     	; 0x2e22 <__divmodhi4_neg1>
    2e16:	77 fd       	sbrc	r23, 7
    2e18:	08 d0       	rcall	.+16     	; 0x2e2a <__divmodhi4_neg2>
    2e1a:	0b d0       	rcall	.+22     	; 0x2e32 <__udivmodhi4>
    2e1c:	07 fc       	sbrc	r0, 7
    2e1e:	05 d0       	rcall	.+10     	; 0x2e2a <__divmodhi4_neg2>
    2e20:	3e f4       	brtc	.+14     	; 0x2e30 <__divmodhi4_exit>

00002e22 <__divmodhi4_neg1>:
    2e22:	90 95       	com	r25
    2e24:	81 95       	neg	r24
    2e26:	9f 4f       	sbci	r25, 0xFF	; 255
    2e28:	08 95       	ret

00002e2a <__divmodhi4_neg2>:
    2e2a:	70 95       	com	r23
    2e2c:	61 95       	neg	r22
    2e2e:	7f 4f       	sbci	r23, 0xFF	; 255

00002e30 <__divmodhi4_exit>:
    2e30:	08 95       	ret

00002e32 <__udivmodhi4>:
    2e32:	aa 1b       	sub	r26, r26
    2e34:	bb 1b       	sub	r27, r27
    2e36:	51 e1       	ldi	r21, 0x11	; 17
    2e38:	07 c0       	rjmp	.+14     	; 0x2e48 <__udivmodhi4_ep>

00002e3a <__udivmodhi4_loop>:
    2e3a:	aa 1f       	adc	r26, r26
    2e3c:	bb 1f       	adc	r27, r27
    2e3e:	a6 17       	cp	r26, r22
    2e40:	b7 07       	cpc	r27, r23
    2e42:	10 f0       	brcs	.+4      	; 0x2e48 <__udivmodhi4_ep>
    2e44:	a6 1b       	sub	r26, r22
    2e46:	b7 0b       	sbc	r27, r23

00002e48 <__udivmodhi4_ep>:
    2e48:	88 1f       	adc	r24, r24
    2e4a:	99 1f       	adc	r25, r25
    2e4c:	5a 95       	dec	r21
    2e4e:	a9 f7       	brne	.-22     	; 0x2e3a <__udivmodhi4_loop>
    2e50:	80 95       	com	r24
    2e52:	90 95       	com	r25
    2e54:	bc 01       	movw	r22, r24
    2e56:	cd 01       	movw	r24, r26
    2e58:	08 95       	ret

00002e5a <memcpy>:
    2e5a:	fb 01       	movw	r30, r22
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	02 c0       	rjmp	.+4      	; 0x2e64 <memcpy+0xa>
    2e60:	01 90       	ld	r0, Z+
    2e62:	0d 92       	st	X+, r0
    2e64:	41 50       	subi	r20, 0x01	; 1
    2e66:	50 40       	sbci	r21, 0x00	; 0
    2e68:	d8 f7       	brcc	.-10     	; 0x2e60 <memcpy+0x6>
    2e6a:	08 95       	ret

00002e6c <_exit>:
    2e6c:	f8 94       	cli

00002e6e <__stop_program>:
    2e6e:	ff cf       	rjmp	.-2      	; 0x2e6e <__stop_program>
