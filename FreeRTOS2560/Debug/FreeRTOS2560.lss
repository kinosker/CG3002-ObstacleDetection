
FreeRTOS2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800200  00002d18  00002dac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000709  0080023e  0080023e  00002dea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002dea  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000548  00000000  00000000  00002e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005d2a  00000000  00000000  00003362  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001679  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000374f  00000000  00000000  0000a705  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ed0  00000000  00000000  0000de54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000016b7  00000000  00000000  0000ed24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003fbf  00000000  00000000  000103db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004d8  00000000  00000000  0001439a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b2 c0       	rjmp	.+356    	; 0x166 <__ctors_end>
       2:	00 00       	nop
       4:	d0 c0       	rjmp	.+416    	; 0x1a6 <__bad_interrupt>
       6:	00 00       	nop
       8:	ce c0       	rjmp	.+412    	; 0x1a6 <__bad_interrupt>
       a:	00 00       	nop
       c:	cc c0       	rjmp	.+408    	; 0x1a6 <__bad_interrupt>
       e:	00 00       	nop
      10:	ca c0       	rjmp	.+404    	; 0x1a6 <__bad_interrupt>
      12:	00 00       	nop
      14:	c8 c0       	rjmp	.+400    	; 0x1a6 <__bad_interrupt>
      16:	00 00       	nop
      18:	c6 c0       	rjmp	.+396    	; 0x1a6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c4 c0       	rjmp	.+392    	; 0x1a6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c2 c0       	rjmp	.+388    	; 0x1a6 <__bad_interrupt>
      22:	00 00       	nop
      24:	5c c3       	rjmp	.+1720   	; 0x6de <__vector_9>
      26:	00 00       	nop
      28:	be c0       	rjmp	.+380    	; 0x1a6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bc c0       	rjmp	.+376    	; 0x1a6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ba c0       	rjmp	.+372    	; 0x1a6 <__bad_interrupt>
      32:	00 00       	nop
      34:	b8 c0       	rjmp	.+368    	; 0x1a6 <__bad_interrupt>
      36:	00 00       	nop
      38:	b6 c0       	rjmp	.+364    	; 0x1a6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b4 c0       	rjmp	.+360    	; 0x1a6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b2 c0       	rjmp	.+356    	; 0x1a6 <__bad_interrupt>
      42:	00 00       	nop
      44:	b0 c0       	rjmp	.+352    	; 0x1a6 <__bad_interrupt>
      46:	00 00       	nop
      48:	ae c0       	rjmp	.+348    	; 0x1a6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ac c0       	rjmp	.+344    	; 0x1a6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	aa c0       	rjmp	.+340    	; 0x1a6 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__vector_21>
      58:	a6 c0       	rjmp	.+332    	; 0x1a6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a4 c0       	rjmp	.+328    	; 0x1a6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a2 c0       	rjmp	.+324    	; 0x1a6 <__bad_interrupt>
      62:	00 00       	nop
      64:	93 c6       	rjmp	.+3366   	; 0xd8c <__vector_25>
      66:	00 00       	nop
      68:	ff c6       	rjmp	.+3582   	; 0xe68 <__vector_26>
      6a:	00 00       	nop
      6c:	9c c0       	rjmp	.+312    	; 0x1a6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	9a c0       	rjmp	.+308    	; 0x1a6 <__bad_interrupt>
      72:	00 00       	nop
      74:	e9 c3       	rjmp	.+2002   	; 0x848 <__vector_29>
      76:	00 00       	nop
      78:	96 c0       	rjmp	.+300    	; 0x1a6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	94 c0       	rjmp	.+296    	; 0x1a6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	92 c0       	rjmp	.+292    	; 0x1a6 <__bad_interrupt>
      82:	00 00       	nop
      84:	90 c0       	rjmp	.+288    	; 0x1a6 <__bad_interrupt>
      86:	00 00       	nop
      88:	8e c0       	rjmp	.+284    	; 0x1a6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8c c0       	rjmp	.+280    	; 0x1a6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	45 c6       	rjmp	.+3210   	; 0xd1c <__vector_36>
      92:	00 00       	nop
      94:	b3 c6       	rjmp	.+3430   	; 0xdfc <__vector_37>
      96:	00 00       	nop
      98:	86 c0       	rjmp	.+268    	; 0x1a6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	84 c0       	rjmp	.+264    	; 0x1a6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	82 c0       	rjmp	.+260    	; 0x1a6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	80 c0       	rjmp	.+256    	; 0x1a6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7e c0       	rjmp	.+252    	; 0x1a6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	7c c0       	rjmp	.+248    	; 0x1a6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	7a c0       	rjmp	.+244    	; 0x1a6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	78 c0       	rjmp	.+240    	; 0x1a6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	76 c0       	rjmp	.+236    	; 0x1a6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	74 c0       	rjmp	.+232    	; 0x1a6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	72 c0       	rjmp	.+228    	; 0x1a6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	70 c0       	rjmp	.+224    	; 0x1a6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	6e c0       	rjmp	.+220    	; 0x1a6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	6c c0       	rjmp	.+216    	; 0x1a6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	6a c0       	rjmp	.+212    	; 0x1a6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	68 c0       	rjmp	.+208    	; 0x1a6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	66 c0       	rjmp	.+204    	; 0x1a6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	64 c0       	rjmp	.+200    	; 0x1a6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	62 c0       	rjmp	.+196    	; 0x1a6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <myADC_readADC+0x1c>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e8 e1       	ldi	r30, 0x18	; 24
     17e:	fd e2       	ldi	r31, 0x2D	; 45
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	ae 33       	cpi	r26, 0x3E	; 62
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	29 e0       	ldi	r18, 0x09	; 9
     192:	ae e3       	ldi	r26, 0x3E	; 62
     194:	b2 e0       	ldi	r27, 0x02	; 2
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a7 34       	cpi	r26, 0x47	; 71
     19c:	b2 07       	cpc	r27, r18
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	c6 d0       	rcall	.+396    	; 0x32e <main>
     1a2:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <_exit>

000001a6 <__bad_interrupt>:
     1a6:	2c cf       	rjmp	.-424    	; 0x0 <__vectors>

000001a8 <RPI_receiveTask>:
	}
}


void vApplicationIdleHook()
{
     1a8:	74 d7       	rcall	.+3816   	; 0x1092 <myUSART_peekReceiveUSART1>
     1aa:	c8 2f       	mov	r28, r24
     1ac:	60 d7       	rcall	.+3776   	; 0x106e <myUSART_receiveHandShakeAck>
     1ae:	88 23       	and	r24, r24
     1b0:	19 f0       	breq	.+6      	; 0x1b8 <RPI_receiveTask+0x10>
     1b2:	22 d7       	rcall	.+3652   	; 0xff8 <myUSART_receiveUSART1>
     1b4:	51 d7       	rcall	.+3746   	; 0x1058 <myUSART_completeHandShake>
     1b6:	f8 cf       	rjmp	.-16     	; 0x1a8 <RPI_receiveTask>
     1b8:	8c 2f       	mov	r24, r28
     1ba:	65 d7       	rcall	.+3786   	; 0x1086 <myUSART_receiveMessageACK>
     1bc:	88 23       	and	r24, r24
     1be:	11 f0       	breq	.+4      	; 0x1c4 <RPI_receiveTask+0x1c>
     1c0:	1b d7       	rcall	.+3638   	; 0xff8 <myUSART_receiveUSART1>
     1c2:	f2 cf       	rjmp	.-28     	; 0x1a8 <RPI_receiveTask>
     1c4:	8c 2f       	mov	r24, r28
     1c6:	59 d7       	rcall	.+3762   	; 0x107a <myUSART_receiveHandShakeStart>
     1c8:	88 23       	and	r24, r24
     1ca:	11 f0       	breq	.+4      	; 0x1d0 <RPI_receiveTask+0x28>
     1cc:	36 d7       	rcall	.+3692   	; 0x103a <myUSART_waitForHandshake>
     1ce:	ec cf       	rjmp	.-40     	; 0x1a8 <RPI_receiveTask>
     1d0:	13 d7       	rcall	.+3622   	; 0xff8 <myUSART_receiveUSART1>
     1d2:	ea cf       	rjmp	.-44     	; 0x1a8 <RPI_receiveTask>

000001d4 <RPI_sendTask>:
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
     1d8:	00 d0       	rcall	.+0      	; 0x1da <RPI_sendTask+0x6>
     1da:	00 d0       	rcall	.+0      	; 0x1dc <RPI_sendTask+0x8>
     1dc:	cd b7       	in	r28, 0x3d	; 61
     1de:	de b7       	in	r29, 0x3e	; 62
     1e0:	20 e0       	ldi	r18, 0x00	; 0
     1e2:	4f ef       	ldi	r20, 0xFF	; 255
     1e4:	5f ef       	ldi	r21, 0xFF	; 255
     1e6:	be 01       	movw	r22, r28
     1e8:	6a 5f       	subi	r22, 0xFA	; 250
     1ea:	7f 4f       	sbci	r23, 0xFF	; 255
     1ec:	80 91 8f 08 	lds	r24, 0x088F
     1f0:	90 91 90 08 	lds	r25, 0x0890
     1f4:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <xQueueGenericReceive>
     1f8:	8e 81       	ldd	r24, Y+6	; 0x06
     1fa:	80 5d       	subi	r24, 0xD0	; 208
     1fc:	ca d6       	rcall	.+3476   	; 0xf92 <myUSART_transmitUSART1_c>
     1fe:	8a e0       	ldi	r24, 0x0A	; 10
     200:	c8 d6       	rcall	.+3472   	; 0xf92 <myUSART_transmitUSART1_c>
     202:	8e 81       	ldd	r24, Y+6	; 0x06
     204:	9f ef       	ldi	r25, 0xFF	; 255
     206:	98 0f       	add	r25, r24
     208:	9e 83       	std	Y+6, r25	; 0x06
     20a:	88 23       	and	r24, r24
     20c:	21 f1       	breq	.+72     	; 0x256 <RPI_sendTask+0x82>
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	4f ef       	ldi	r20, 0xFF	; 255
     212:	5f ef       	ldi	r21, 0xFF	; 255
     214:	be 01       	movw	r22, r28
     216:	6f 5f       	subi	r22, 0xFF	; 255
     218:	7f 4f       	sbci	r23, 0xFF	; 255
     21a:	80 91 91 08 	lds	r24, 0x0891
     21e:	90 91 92 08 	lds	r25, 0x0892
     222:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <xQueueGenericReceive>
     226:	89 81       	ldd	r24, Y+1	; 0x01
     228:	9d d6       	rcall	.+3386   	; 0xf64 <myUSART_transmitUSART0_c>
     22a:	89 81       	ldd	r24, Y+1	; 0x01
     22c:	b2 d6       	rcall	.+3428   	; 0xf92 <myUSART_transmitUSART1_c>
     22e:	86 e0       	ldi	r24, 0x06	; 6
     230:	92 e0       	ldi	r25, 0x02	; 2
     232:	d4 d6       	rcall	.+3496   	; 0xfdc <myUSART_transmitUSART0>
     234:	ce 01       	movw	r24, r28
     236:	02 96       	adiw	r24, 0x02	; 2
     238:	d1 d6       	rcall	.+3490   	; 0xfdc <myUSART_transmitUSART0>
     23a:	ce 01       	movw	r24, r28
     23c:	02 96       	adiw	r24, 0x02	; 2
     23e:	c0 d6       	rcall	.+3456   	; 0xfc0 <myUSART_transmitUSART1>
     240:	8a e0       	ldi	r24, 0x0A	; 10
     242:	a7 d6       	rcall	.+3406   	; 0xf92 <myUSART_transmitUSART1_c>
     244:	89 e0       	ldi	r24, 0x09	; 9
     246:	92 e0       	ldi	r25, 0x02	; 2
     248:	c9 d6       	rcall	.+3474   	; 0xfdc <myUSART_transmitUSART0>
     24a:	8e 81       	ldd	r24, Y+6	; 0x06
     24c:	9f ef       	ldi	r25, 0xFF	; 255
     24e:	98 0f       	add	r25, r24
     250:	9e 83       	std	Y+6, r25	; 0x06
     252:	81 11       	cpse	r24, r1
     254:	dc cf       	rjmp	.-72     	; 0x20e <RPI_sendTask+0x3a>
     256:	8a e0       	ldi	r24, 0x0A	; 10
     258:	85 d6       	rcall	.+3338   	; 0xf64 <myUSART_transmitUSART0_c>
     25a:	c2 cf       	rjmp	.-124    	; 0x1e0 <RPI_sendTask+0xc>

0000025c <myTimerTask>:
     25c:	b0 d4       	rcall	.+2400   	; 0xbbe <myTimer_Init>
     25e:	ef d4       	rcall	.+2526   	; 0xc3e <myTimer_DelayChecker>
     260:	fe cf       	rjmp	.-4      	; 0x25e <myTimerTask+0x2>

00000262 <task1>:
     262:	26 9a       	sbi	0x04, 6	; 4
     264:	2e 9a       	sbi	0x05, 6	; 5
     266:	88 ee       	ldi	r24, 0xE8	; 232
     268:	93 e0       	ldi	r25, 0x03	; 3
     26a:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <vTaskDelay>
     26e:	85 b1       	in	r24, 0x05	; 5
     270:	15 b8       	out	0x05, r1	; 5
     272:	88 ee       	ldi	r24, 0xE8	; 232
     274:	93 e0       	ldi	r25, 0x03	; 3
     276:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <vTaskDelay>
     27a:	f4 cf       	rjmp	.-24     	; 0x264 <task1+0x2>

0000027c <setDigitalInputPowerReduction>:


void setDigitalInputPowerReduction()
{
	// Set when confirm which ADC pin not used for digital..
	DIDR0 = 0b11111111; // all adc pin not used for digital
     27c:	8f ef       	ldi	r24, 0xFF	; 255
     27e:	80 93 7e 00 	sts	0x007E, r24
	DIDR1 |= (1<<AIN1D) | (1<<AIN0D);
     282:	ef e7       	ldi	r30, 0x7F	; 127
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	90 81       	ld	r25, Z
     288:	93 60       	ori	r25, 0x03	; 3
     28a:	90 83       	st	Z, r25
	DIDR2 = 0b11111111; // add adc pin not used for digital
     28c:	80 93 7d 00 	sts	0x007D, r24
     290:	08 95       	ret

00000292 <setPowerReduction>:
}

// Shut down unused...
void setPowerReduction()
{
	PRR0 = (1<<PRTWI) | (1<<PRTIM2) | (1<<PRTIM1) | (1<<PRSPI); // Shut down I2C, timer2, timer 1, SPI
     292:	8c ec       	ldi	r24, 0xCC	; 204
     294:	80 93 64 00 	sts	0x0064, r24
	// Include USART0 after finish debugging using usb.... (1<<PRUSART0)
	
	PRR1 = (1<<PRTIM5) | (1<<PRTIM4) | (1<<PRTIM3) | (1<<PRUSART3) | (1<<PRUSART2); // Shut down timer5, timer4, timer3, USART3, USART2
     298:	8e e3       	ldi	r24, 0x3E	; 62
     29a:	80 93 65 00 	sts	0x0065, r24
	
	setDigitalInputPowerReduction();
     29e:	ee cf       	rjmp	.-36     	; 0x27c <setDigitalInputPowerReduction>
     2a0:	08 95       	ret

000002a2 <clearTimer>:
}

void clearTimer()
{
	// Clear Timer1
	TCCR1A = 0;     // Clear all settings
     2a2:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;     // Clear all settings
     2a6:	10 92 81 00 	sts	0x0081, r1
	TIMSK1 = 0;     // Disable all interrupts
     2aa:	10 92 6f 00 	sts	0x006F, r1

	// Clear Timer2
	TCCR2A = 0;     // Clear all settings
     2ae:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0;     // Clear all settings
     2b2:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;     // Disable all interrupts
     2b6:	10 92 70 00 	sts	0x0070, r1
	
	// Clear Timer3
	TCCR3A = 0;     // Clear all settings
     2ba:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;     // Clear all settings
     2be:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0;     // Disable all interrupts
     2c2:	10 92 71 00 	sts	0x0071, r1

	// Clear Timer4
	TCCR4A = 0;     // Clear all settings
     2c6:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0;     // Clear all settings
     2ca:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0;     // Disable all interrupts
     2ce:	10 92 72 00 	sts	0x0072, r1

	// Clear Timer5
	TCCR5A = 0;     // Clear all settings
     2d2:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;     // Clear all settings
     2d6:	10 92 21 01 	sts	0x0121, r1
	TIMSK5 = 0;     // Disable all interrupts
     2da:	10 92 73 00 	sts	0x0073, r1
     2de:	08 95       	ret

000002e0 <init>:
}

void init()
{
     2e0:	cf 93       	push	r28
	// Ensure atomic...
	ATOMIC_BLOCK( ATOMIC_RESTORESTATE )
     2e2:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2e4:	f8 94       	cli
	{
		clearTimer();
     2e6:	dd df       	rcall	.-70     	; 0x2a2 <clearTimer>
		setPowerReduction();
     2e8:	d4 df       	rcall	.-88     	; 0x292 <setPowerReduction>
		myUSART_USART0_Init();
     2ea:	f4 d5       	rcall	.+3048   	; 0xed4 <myUSART_USART0_Init>
		myUSART_USART1_Init();
     2ec:	13 d6       	rcall	.+3110   	; 0xf14 <myUSART_USART1_Init>
		myADC_Init();
     2ee:	e4 d2       	rcall	.+1480   	; 0x8b8 <myADC_Init>
		MaxSonar1_Init();
     2f0:	99 9a       	sbi	0x13, 1	; 19
		MaxSonar2_Init();
     2f2:	0e 9a       	sbi	0x01, 6	; 1
		
		myHcSonar_Init();
     2f4:	7e d2       	rcall	.+1276   	; 0x7f2 <myHcSonar_Init>
		
		
		queueObstacleNumber = xQueueCreate(QUEUE_SIZE, sizeof (char)); // create queue
     2f6:	40 e0       	ldi	r20, 0x00	; 0
     2f8:	61 e0       	ldi	r22, 0x01	; 1
     2fa:	85 e0       	ldi	r24, 0x05	; 5
     2fc:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <xQueueGenericCreate>
     300:	90 93 90 08 	sts	0x0890, r25
     304:	80 93 8f 08 	sts	0x088F, r24
		queueObstacleData = xQueueCreate( (QUEUE_SIZE*SONAR_NUM), sizeof (obstacleData)); // create queue
     308:	40 e0       	ldi	r20, 0x00	; 0
     30a:	65 e0       	ldi	r22, 0x05	; 5
     30c:	84 e1       	ldi	r24, 0x14	; 20
     30e:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <xQueueGenericCreate>
     312:	90 93 92 08 	sts	0x0892, r25
     316:	80 93 91 08 	sts	0x0891, r24
		
		MOTOR_LEFT_INIT();
     31a:	6c 9a       	sbi	0x0d, 4	; 13
		MOTOR_RIGHT_INIT();
     31c:	e1 e0       	ldi	r30, 0x01	; 1
     31e:	f1 e0       	ldi	r31, 0x01	; 1
     320:	80 81       	ld	r24, Z
     322:	80 61       	ori	r24, 0x10	; 16
     324:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     326:	cf bf       	out	0x3f, r28	; 63
		
		
	}
	
	sei(); // enable interrupts..
     328:	78 94       	sei
}
     32a:	cf 91       	pop	r28
     32c:	08 95       	ret

0000032e <main>:
	
	// do nth
}

int main(void)
{
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	cd b7       	in	r28, 0x3d	; 61
     334:	de b7       	in	r29, 0x3e	; 62
     336:	2a 97       	sbiw	r28, 0x0a	; 10
     338:	0f b6       	in	r0, 0x3f	; 63
     33a:	f8 94       	cli
     33c:	de bf       	out	0x3e, r29	; 62
     33e:	0f be       	out	0x3f, r0	; 63
     340:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
		TaskHandle_t t_maxSonar, t_rx, t_tx, t_delay, t1;
	
		init();
     342:	ce df       	rcall	.-100    	; 0x2e0 <init>

		xTaskCreate(task1, "Task 1", BLINK_1_STACK, NULL, BLINK_1_PRIORITY, &t1);
     344:	a1 2c       	mov	r10, r1
     346:	b1 2c       	mov	r11, r1
     348:	c1 2c       	mov	r12, r1
     34a:	d1 2c       	mov	r13, r1
     34c:	ce 01       	movw	r24, r28
     34e:	01 96       	adiw	r24, 0x01	; 1
     350:	7c 01       	movw	r14, r24
     352:	01 e0       	ldi	r16, 0x01	; 1
     354:	20 e0       	ldi	r18, 0x00	; 0
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	45 e5       	ldi	r20, 0x55	; 85
     35a:	50 e0       	ldi	r21, 0x00	; 0
     35c:	6c e0       	ldi	r22, 0x0C	; 12
     35e:	72 e0       	ldi	r23, 0x02	; 2
     360:	81 e3       	ldi	r24, 0x31	; 49
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <xTaskGenericCreate>
		//xTaskCreate(task2, "Task 2", BLINK_2_STACK, NULL, BLINK_2_PRIORITY, &t2);
		
		xTaskCreate(myTimerTask, "myTimer", MY_TIMER_STACK, (&t_delay) , MY_TIMER_PRIORITY, &t_delay); // danger?!?		
     368:	ce 01       	movw	r24, r28
     36a:	03 96       	adiw	r24, 0x03	; 3
     36c:	7c 01       	movw	r14, r24
     36e:	04 e0       	ldi	r16, 0x04	; 4
     370:	9c 01       	movw	r18, r24
     372:	49 e6       	ldi	r20, 0x69	; 105
     374:	50 e0       	ldi	r21, 0x00	; 0
     376:	63 e1       	ldi	r22, 0x13	; 19
     378:	72 e0       	ldi	r23, 0x02	; 2
     37a:	8e e2       	ldi	r24, 0x2E	; 46
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <xTaskGenericCreate>
		xTaskCreate(Sonar_Task, "maxSonar", MAXSONAR_STACK, NULL, MAXSONAR_PRIORITY, &t_maxSonar);
     382:	ce 01       	movw	r24, r28
     384:	09 96       	adiw	r24, 0x09	; 9
     386:	7c 01       	movw	r14, r24
     388:	02 e0       	ldi	r16, 0x02	; 2
     38a:	20 e0       	ldi	r18, 0x00	; 0
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	4f e4       	ldi	r20, 0x4F	; 79
     390:	51 e0       	ldi	r21, 0x01	; 1
     392:	6b e1       	ldi	r22, 0x1B	; 27
     394:	72 e0       	ldi	r23, 0x02	; 2
     396:	8b e5       	ldi	r24, 0x5B	; 91
     398:	92 e0       	ldi	r25, 0x02	; 2
     39a:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <xTaskGenericCreate>

		
		// Need fix receive concurrency issues.
		xTaskCreate(RPI_receiveTask, "RPI_Receive", RPI_RECEIVE_STACK, NULL, RPI_RECEIVE_PRIORITY, &t_rx);
     39e:	ce 01       	movw	r24, r28
     3a0:	07 96       	adiw	r24, 0x07	; 7
     3a2:	7c 01       	movw	r14, r24
     3a4:	03 e0       	ldi	r16, 0x03	; 3
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	47 e8       	ldi	r20, 0x87	; 135
     3ac:	50 e0       	ldi	r21, 0x00	; 0
     3ae:	64 e2       	ldi	r22, 0x24	; 36
     3b0:	72 e0       	ldi	r23, 0x02	; 2
     3b2:	84 ed       	ldi	r24, 0xD4	; 212
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <xTaskGenericCreate>
		xTaskCreate(RPI_sendTask, "RPI_Send", RPI_SEND_STACK, NULL, RPI_SEND_PRIORITY, &t_tx);
     3ba:	ce 01       	movw	r24, r28
     3bc:	05 96       	adiw	r24, 0x05	; 5
     3be:	7c 01       	movw	r14, r24
     3c0:	01 e0       	ldi	r16, 0x01	; 1
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	47 e8       	ldi	r20, 0x87	; 135
     3c8:	50 e0       	ldi	r21, 0x00	; 0
     3ca:	60 e3       	ldi	r22, 0x30	; 48
     3cc:	72 e0       	ldi	r23, 0x02	; 2
     3ce:	8a ee       	ldi	r24, 0xEA	; 234
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <xTaskGenericCreate>
	

		
		vTaskStartScheduler();
     3d6:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <vTaskStartScheduler>
     3da:	b3 cf       	rjmp	.-154    	; 0x342 <main+0x14>

000003dc <obstacleSend>:
	sei(); // enable interrupts..
}


void obstacleSend(char deviceToSend, int reading)
{
     3dc:	1f 93       	push	r17
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	00 d0       	rcall	.+0      	; 0x3e4 <obstacleSend+0x8>
     3e4:	1f 92       	push	r1
     3e6:	1f 92       	push	r1
     3e8:	cd b7       	in	r28, 0x3d	; 61
     3ea:	de b7       	in	r29, 0x3e	; 62
     3ec:	18 2f       	mov	r17, r24
     3ee:	cb 01       	movw	r24, r22
	obstacleData queueData;
	
	
	
	if(deviceToSend)
     3f0:	11 23       	and	r17, r17
     3f2:	99 f0       	breq	.+38     	; 0x41a <obstacleSend+0x3e>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     3f4:	4a e0       	ldi	r20, 0x0A	; 10
     3f6:	be 01       	movw	r22, r28
     3f8:	6e 5f       	subi	r22, 0xFE	; 254
     3fa:	7f 4f       	sbci	r23, 0xFF	; 255
     3fc:	0e 94 57 16 	call	0x2cae	; 0x2cae <__itoa_ncheck>
	{
		itoa(reading, queueData.data, 10); // convert to ascii
		
		queueData.deviceID = deviceToSend;
     400:	19 83       	std	Y+1, r17	; 0x01
		
		xQueueSendToBack(queueObstacleData, &queueData, portMAX_DELAY); // send data to queueData
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	4f ef       	ldi	r20, 0xFF	; 255
     406:	5f ef       	ldi	r21, 0xFF	; 255
     408:	be 01       	movw	r22, r28
     40a:	6f 5f       	subi	r22, 0xFF	; 255
     40c:	7f 4f       	sbci	r23, 0xFF	; 255
     40e:	80 91 91 08 	lds	r24, 0x0891
     412:	90 91 92 08 	lds	r25, 0x0892
     416:	0e 94 05 0b 	call	0x160a	; 0x160a <xQueueGenericSend>
	}
}
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	1f 91       	pop	r17
     42a:	08 95       	ret

0000042c <sendObstacleDetected>:



// Queue the obstacle to send..
void sendObstacleDetected(char obstacleDetected, char * deviceToSend, int frontSonar, int leftSonar, int rightSonar, int btmIR, int topSonar)
{
     42c:	6f 92       	push	r6
     42e:	7f 92       	push	r7
     430:	8f 92       	push	r8
     432:	9f 92       	push	r9
     434:	af 92       	push	r10
     436:	bf 92       	push	r11
     438:	cf 92       	push	r12
     43a:	df 92       	push	r13
     43c:	ef 92       	push	r14
     43e:	ff 92       	push	r15
     440:	0f 93       	push	r16
     442:	1f 93       	push	r17
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
     448:	1f 92       	push	r1
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
     44e:	89 83       	std	Y+1, r24	; 0x01
     450:	5b 01       	movw	r10, r22
     452:	3a 01       	movw	r6, r20
     454:	49 01       	movw	r8, r18
	//if(obstacleDetected > 0)
	{
		
		xQueueSendToBack(queueObstacleNumber,  &obstacleDetected, portMAX_DELAY); // send obstacle...
     456:	20 e0       	ldi	r18, 0x00	; 0
     458:	4f ef       	ldi	r20, 0xFF	; 255
     45a:	5f ef       	ldi	r21, 0xFF	; 255
     45c:	be 01       	movw	r22, r28
     45e:	6f 5f       	subi	r22, 0xFF	; 255
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	80 91 8f 08 	lds	r24, 0x088F
     466:	90 91 90 08 	lds	r25, 0x0890
     46a:	0e 94 05 0b 	call	0x160a	; 0x160a <xQueueGenericSend>
		
		obstacleSend(deviceToSend[FRONT_DEVICE], frontSonar);
     46e:	b3 01       	movw	r22, r6
     470:	f5 01       	movw	r30, r10
     472:	80 81       	ld	r24, Z
     474:	b3 df       	rcall	.-154    	; 0x3dc <obstacleSend>

		obstacleSend(deviceToSend[LEFT_DEVICE], leftSonar);
     476:	b4 01       	movw	r22, r8
     478:	f5 01       	movw	r30, r10
     47a:	81 81       	ldd	r24, Z+1	; 0x01
     47c:	af df       	rcall	.-162    	; 0x3dc <obstacleSend>

		obstacleSend(deviceToSend[RIGHT_DEVICE], rightSonar);
     47e:	b8 01       	movw	r22, r16
     480:	f5 01       	movw	r30, r10
     482:	82 81       	ldd	r24, Z+2	; 0x02
     484:	ab df       	rcall	.-170    	; 0x3dc <obstacleSend>

		obstacleSend(deviceToSend[BTM_DEVICE], btmIR);
     486:	b7 01       	movw	r22, r14
     488:	f5 01       	movw	r30, r10
     48a:	83 81       	ldd	r24, Z+3	; 0x03
     48c:	a7 df       	rcall	.-178    	; 0x3dc <obstacleSend>
		
		obstacleSend(deviceToSend[TOP_DEVICE], topSonar);
     48e:	b6 01       	movw	r22, r12
     490:	f5 01       	movw	r30, r10
     492:	84 81       	ldd	r24, Z+4	; 0x04
     494:	a3 df       	rcall	.-186    	; 0x3dc <obstacleSend>
		
	}
}
     496:	0f 90       	pop	r0
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	1f 91       	pop	r17
     49e:	0f 91       	pop	r16
     4a0:	ff 90       	pop	r15
     4a2:	ef 90       	pop	r14
     4a4:	df 90       	pop	r13
     4a6:	cf 90       	pop	r12
     4a8:	bf 90       	pop	r11
     4aa:	af 90       	pop	r10
     4ac:	9f 90       	pop	r9
     4ae:	8f 90       	pop	r8
     4b0:	7f 90       	pop	r7
     4b2:	6f 90       	pop	r6
     4b4:	08 95       	ret

000004b6 <Sonar_Task>:
	}
}


void Sonar_Task(void *p)
{
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	cd b7       	in	r28, 0x3d	; 61
     4bc:	de b7       	in	r29, 0x3e	; 62
     4be:	29 97       	sbiw	r28, 0x09	; 9
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	f8 94       	cli
     4c4:	de bf       	out	0x3e, r29	; 62
     4c6:	0f be       	out	0x3f, r0	; 63
     4c8:	cd bf       	out	0x3d, r28	; 61
	TickType_t xLastWakeTime;
	char obstacleDetected = 0;
	int topSonar, frontSonar, leftSonar, rightSonar, btmIR;
	char deviceToSend[5] = {0}; // flag to indicate if we should send the reading to RPI
     4ca:	fe 01       	movw	r30, r28
     4cc:	33 96       	adiw	r30, 0x03	; 3
     4ce:	85 e0       	ldi	r24, 0x05	; 5
     4d0:	df 01       	movw	r26, r30
     4d2:	1d 92       	st	X+, r1
     4d4:	8a 95       	dec	r24
     4d6:	e9 f7       	brne	.-6      	; 0x4d2 <Sonar_Task+0x1c>
	
	int calibratedBtmIR = mySharpIR_Read(AN12); // get first value...
     4d8:	84 e2       	ldi	r24, 0x24	; 36
     4da:	d4 d2       	rcall	.+1448   	; 0xa84 <mySharpIR_Read>
     4dc:	99 87       	std	Y+9, r25	; 0x09
     4de:	88 87       	std	Y+8, r24	; 0x08
	
	xLastWakeTime = xTaskGetTickCount(); // get tick count
     4e0:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <xTaskGetTickCount>
     4e4:	9a 83       	std	Y+2, r25	; 0x02
     4e6:	89 83       	std	Y+1, r24	; 0x01
		
	while(1)
	{	
		myMaxSonar_TopStart();
     4e8:	9f d1       	rcall	.+830    	; 0x828 <myMaxSonar_TopStart>
		topSonar = myMaxSonar_Read(AN11);
     4ea:	83 e2       	ldi	r24, 0x23	; 35
     4ec:	a3 d1       	rcall	.+838    	; 0x834 <myMaxSonar_Read>
     4ee:	6c 01       	movw	r12, r24
		myMaxSonar_BtmStart();
     4f0:	95 d1       	rcall	.+810    	; 0x81c <myMaxSonar_BtmStart>
		
		frontSonar	= myMaxSonar_Read(AN15);
     4f2:	87 e2       	ldi	r24, 0x27	; 39
     4f4:	9f d1       	rcall	.+830    	; 0x834 <myMaxSonar_Read>
     4f6:	5c 01       	movw	r10, r24
		leftSonar	= myMaxSonar_Read(AN14);
     4f8:	86 e2       	ldi	r24, 0x26	; 38
     4fa:	9c d1       	rcall	.+824    	; 0x834 <myMaxSonar_Read>
     4fc:	4c 01       	movw	r8, r24
		rightSonar	= myMaxSonar_Read(AN13); 
     4fe:	85 e2       	ldi	r24, 0x25	; 37
     500:	99 d1       	rcall	.+818    	; 0x834 <myMaxSonar_Read>
     502:	3c 01       	movw	r6, r24
		btmIR		= mySharpIR_Read(AN12);	
     504:	84 e2       	ldi	r24, 0x24	; 36
     506:	be d2       	rcall	.+1404   	; 0xa84 <mySharpIR_Read>
     508:	2c 01       	movw	r4, r24
		
	
		mySharpIR_ReCalibrate(&calibratedBtmIR, btmIR); // attempt to re-calibrate btm ir sensor if stable enough..
     50a:	bc 01       	movw	r22, r24
     50c:	ce 01       	movw	r24, r28
     50e:	08 96       	adiw	r24, 0x08	; 8
     510:	f2 d2       	rcall	.+1508   	; 0xaf6 <mySharpIR_ReCalibrate>
	
		obstacleDetected = obstacleDetection(frontSonar, obstacleDetected, deviceToSend, leftSonar, rightSonar, topSonar);
     512:	76 01       	movw	r14, r12
     514:	83 01       	movw	r16, r6
     516:	94 01       	movw	r18, r8
     518:	ae 01       	movw	r20, r28
     51a:	4d 5f       	subi	r20, 0xFD	; 253
     51c:	5f 4f       	sbci	r21, 0xFF	; 255
     51e:	60 e0       	ldi	r22, 0x00	; 0
     520:	c5 01       	movw	r24, r10
     522:	a2 d2       	rcall	.+1348   	; 0xa68 <obstacleDetection>
     524:	38 2e       	mov	r3, r24
		obstacleAvoidance(frontSonar, leftSonar, rightSonar, btmIR, calibratedBtmIR);
     526:	08 85       	ldd	r16, Y+8	; 0x08
     528:	19 85       	ldd	r17, Y+9	; 0x09
     52a:	92 01       	movw	r18, r4
     52c:	a3 01       	movw	r20, r6
     52e:	b4 01       	movw	r22, r8
     530:	c5 01       	movw	r24, r10
     532:	43 d2       	rcall	.+1158   	; 0x9ba <obstacleAvoidance>
		sendObstacleDetected(obstacleDetected, deviceToSend, frontSonar, leftSonar, rightSonar, btmIR, topSonar);
     534:	72 01       	movw	r14, r4
     536:	83 01       	movw	r16, r6
     538:	94 01       	movw	r18, r8
     53a:	a5 01       	movw	r20, r10
     53c:	be 01       	movw	r22, r28
     53e:	6d 5f       	subi	r22, 0xFD	; 253
     540:	7f 4f       	sbci	r23, 0xFF	; 255
     542:	83 2d       	mov	r24, r3
     544:	73 df       	rcall	.-282    	; 0x42c <sendObstacleDetected>
	
		// reset the variables back to 0
		obstacleDetected = 0; 
		deviceToSend[0] = deviceToSend[1] = deviceToSend[2] = deviceToSend[3] = deviceToSend[4] = 0;
     546:	1f 82       	std	Y+7, r1	; 0x07
     548:	1e 82       	std	Y+6, r1	; 0x06
     54a:	1d 82       	std	Y+5, r1	; 0x05
     54c:	1c 82       	std	Y+4, r1	; 0x04
     54e:	1b 82       	std	Y+3, r1	; 0x03
		
		vTaskDelayUntil( &xLastWakeTime, 150);  // delay 150 ms for 3 sonar chain...
     550:	66 e9       	ldi	r22, 0x96	; 150
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	0e 94 2c 10 	call	0x2058	; 0x2058 <vTaskDelayUntil>
     55c:	c5 cf       	rjmp	.-118    	; 0x4e8 <Sonar_Task+0x32>

0000055e <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     564:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     568:	80 91 3e 02 	lds	r24, 0x023E
     56c:	90 91 3f 02 	lds	r25, 0x023F
     570:	89 2b       	or	r24, r25
     572:	31 f4       	brne	.+12     	; 0x580 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     574:	83 e4       	ldi	r24, 0x43	; 67
     576:	92 e0       	ldi	r25, 0x02	; 2
     578:	90 93 3f 02 	sts	0x023F, r25
     57c:	80 93 3e 02 	sts	0x023E, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     580:	40 91 40 02 	lds	r20, 0x0240
     584:	50 91 41 02 	lds	r21, 0x0241
     588:	9e 01       	movw	r18, r28
     58a:	24 0f       	add	r18, r20
     58c:	35 1f       	adc	r19, r21
     58e:	2b 3d       	cpi	r18, 0xDB	; 219
     590:	85 e0       	ldi	r24, 0x05	; 5
     592:	38 07       	cpc	r19, r24
     594:	70 f4       	brcc	.+28     	; 0x5b2 <pvPortMalloc+0x54>
     596:	42 17       	cp	r20, r18
     598:	53 07       	cpc	r21, r19
     59a:	70 f4       	brcc	.+28     	; 0x5b8 <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     59c:	c0 91 3e 02 	lds	r28, 0x023E
     5a0:	d0 91 3f 02 	lds	r29, 0x023F
     5a4:	c4 0f       	add	r28, r20
     5a6:	d5 1f       	adc	r29, r21
			xNextFreeByte += xWantedSize;
     5a8:	30 93 41 02 	sts	0x0241, r19
     5ac:	20 93 40 02 	sts	0x0240, r18
     5b0:	05 c0       	rjmp	.+10     	; 0x5bc <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     5b2:	c0 e0       	ldi	r28, 0x00	; 0
     5b4:	d0 e0       	ldi	r29, 0x00	; 0
     5b6:	02 c0       	rjmp	.+4      	; 0x5bc <pvPortMalloc+0x5e>
     5b8:	c0 e0       	ldi	r28, 0x00	; 0
     5ba:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     5bc:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     5c0:	ce 01       	movw	r24, r28
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	08 95       	ret

000005c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     5c8:	08 95       	ret

000005ca <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     5ca:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5cc:	03 96       	adiw	r24, 0x03	; 3
     5ce:	92 83       	std	Z+2, r25	; 0x02
     5d0:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     5d2:	2f ef       	ldi	r18, 0xFF	; 255
     5d4:	3f ef       	ldi	r19, 0xFF	; 255
     5d6:	34 83       	std	Z+4, r19	; 0x04
     5d8:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5da:	96 83       	std	Z+6, r25	; 0x06
     5dc:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5de:	90 87       	std	Z+8, r25	; 0x08
     5e0:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     5e2:	10 82       	st	Z, r1
     5e4:	08 95       	ret

000005e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     5e6:	fc 01       	movw	r30, r24
     5e8:	11 86       	std	Z+9, r1	; 0x09
     5ea:	10 86       	std	Z+8, r1	; 0x08
     5ec:	08 95       	ret

000005ee <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	9c 01       	movw	r18, r24
     5f4:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     5f6:	dc 01       	movw	r26, r24
     5f8:	11 96       	adiw	r26, 0x01	; 1
     5fa:	cd 91       	ld	r28, X+
     5fc:	dc 91       	ld	r29, X
     5fe:	12 97       	sbiw	r26, 0x02	; 2

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     600:	d3 83       	std	Z+3, r29	; 0x03
     602:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     604:	8c 81       	ldd	r24, Y+4	; 0x04
     606:	9d 81       	ldd	r25, Y+5	; 0x05
     608:	95 83       	std	Z+5, r25	; 0x05
     60a:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxPrevious->pxNext = pxNewListItem;
     60c:	8c 81       	ldd	r24, Y+4	; 0x04
     60e:	9d 81       	ldd	r25, Y+5	; 0x05
     610:	dc 01       	movw	r26, r24
     612:	13 96       	adiw	r26, 0x03	; 3
     614:	7c 93       	st	X, r23
     616:	6e 93       	st	-X, r22
     618:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     61a:	7d 83       	std	Y+5, r23	; 0x05
     61c:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     61e:	31 87       	std	Z+9, r19	; 0x09
     620:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     622:	f9 01       	movw	r30, r18
     624:	80 81       	ld	r24, Z
     626:	8f 5f       	subi	r24, 0xFF	; 255
     628:	80 83       	st	Z, r24
}
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	08 95       	ret

00000630 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     636:	48 81       	ld	r20, Y
     638:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     63a:	4f 3f       	cpi	r20, 0xFF	; 255
     63c:	2f ef       	ldi	r18, 0xFF	; 255
     63e:	52 07       	cpc	r21, r18
     640:	21 f4       	brne	.+8      	; 0x64a <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     642:	fc 01       	movw	r30, r24
     644:	a7 81       	ldd	r26, Z+7	; 0x07
     646:	b0 85       	ldd	r27, Z+8	; 0x08
     648:	0d c0       	rjmp	.+26     	; 0x664 <vListInsert+0x34>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     64a:	dc 01       	movw	r26, r24
     64c:	13 96       	adiw	r26, 0x03	; 3
     64e:	12 96       	adiw	r26, 0x02	; 2
     650:	ed 91       	ld	r30, X+
     652:	fc 91       	ld	r31, X
     654:	13 97       	sbiw	r26, 0x03	; 3
     656:	20 81       	ld	r18, Z
     658:	31 81       	ldd	r19, Z+1	; 0x01
     65a:	42 17       	cp	r20, r18
     65c:	53 07       	cpc	r21, r19
     65e:	10 f0       	brcs	.+4      	; 0x664 <vListInsert+0x34>
     660:	df 01       	movw	r26, r30
     662:	f5 cf       	rjmp	.-22     	; 0x64e <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     664:	12 96       	adiw	r26, 0x02	; 2
     666:	ed 91       	ld	r30, X+
     668:	fc 91       	ld	r31, X
     66a:	13 97       	sbiw	r26, 0x03	; 3
     66c:	fb 83       	std	Y+3, r31	; 0x03
     66e:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     670:	d5 83       	std	Z+5, r29	; 0x05
     672:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     674:	bd 83       	std	Y+5, r27	; 0x05
     676:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     678:	13 96       	adiw	r26, 0x03	; 3
     67a:	dc 93       	st	X, r29
     67c:	ce 93       	st	-X, r28
     67e:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     680:	99 87       	std	Y+9, r25	; 0x09
     682:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     684:	fc 01       	movw	r30, r24
     686:	20 81       	ld	r18, Z
     688:	2f 5f       	subi	r18, 0xFF	; 255
     68a:	20 83       	st	Z, r18
}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     698:	a0 85       	ldd	r26, Z+8	; 0x08
     69a:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     69c:	c2 81       	ldd	r28, Z+2	; 0x02
     69e:	d3 81       	ldd	r29, Z+3	; 0x03
     6a0:	84 81       	ldd	r24, Z+4	; 0x04
     6a2:	95 81       	ldd	r25, Z+5	; 0x05
     6a4:	9d 83       	std	Y+5, r25	; 0x05
     6a6:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     6a8:	c4 81       	ldd	r28, Z+4	; 0x04
     6aa:	d5 81       	ldd	r29, Z+5	; 0x05
     6ac:	82 81       	ldd	r24, Z+2	; 0x02
     6ae:	93 81       	ldd	r25, Z+3	; 0x03
     6b0:	9b 83       	std	Y+3, r25	; 0x03
     6b2:	8a 83       	std	Y+2, r24	; 0x02

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     6b4:	11 96       	adiw	r26, 0x01	; 1
     6b6:	cd 91       	ld	r28, X+
     6b8:	dc 91       	ld	r29, X
     6ba:	12 97       	sbiw	r26, 0x02	; 2
     6bc:	ce 17       	cp	r28, r30
     6be:	df 07       	cpc	r29, r31
     6c0:	31 f4       	brne	.+12     	; 0x6ce <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     6c2:	8c 81       	ldd	r24, Y+4	; 0x04
     6c4:	9d 81       	ldd	r25, Y+5	; 0x05
     6c6:	12 96       	adiw	r26, 0x02	; 2
     6c8:	9c 93       	st	X, r25
     6ca:	8e 93       	st	-X, r24
     6cc:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     6ce:	11 86       	std	Z+9, r1	; 0x09
     6d0:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     6d2:	8c 91       	ld	r24, X
     6d4:	81 50       	subi	r24, 0x01	; 1
     6d6:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	08 95       	ret

000006de <__vector_9>:
volatile int us_tickLapsed;
SemaphoreHandle_t semaReadReady;


ISR(PCINT0_vect) //Digital pin 50
{
     6de:	1f 92       	push	r1
     6e0:	0f 92       	push	r0
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	0f 92       	push	r0
     6e6:	11 24       	eor	r1, r1
     6e8:	0b b6       	in	r0, 0x3b	; 59
     6ea:	0f 92       	push	r0
     6ec:	2f 93       	push	r18
     6ee:	3f 93       	push	r19
     6f0:	4f 93       	push	r20
     6f2:	5f 93       	push	r21
     6f4:	6f 93       	push	r22
     6f6:	7f 93       	push	r23
     6f8:	8f 93       	push	r24
     6fa:	9f 93       	push	r25
     6fc:	af 93       	push	r26
     6fe:	bf 93       	push	r27
     700:	ef 93       	push	r30
     702:	ff 93       	push	r31
		
	if(HC_Echo_Read)
     704:	1b 9b       	sbis	0x03, 3	; 3
     706:	0d c0       	rjmp	.+26     	; 0x722 <__vector_9+0x44>
	{
		us_tickStart = myTimer_Read();
     708:	74 d2       	rcall	.+1256   	; 0xbf2 <myTimer_Read>
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	90 93 98 08 	sts	0x0898, r25
     710:	80 93 97 08 	sts	0x0897, r24
		ms_tickStart = xTaskGetTickCountFromISR();
     714:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <xTaskGetTickCountFromISR>
     718:	90 93 94 08 	sts	0x0894, r25
     71c:	80 93 93 08 	sts	0x0893, r24
     720:	55 c0       	rjmp	.+170    	; 0x7cc <__vector_9+0xee>
	}	
	else if (!(HC_Echo_Read))
     722:	1b 99       	sbic	0x03, 3	; 3
     724:	53 c0       	rjmp	.+166    	; 0x7cc <__vector_9+0xee>
	{

		if ((ms_tickEnd = xTaskGetTickCountFromISR()) < ms_tickStart)
     726:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <xTaskGetTickCountFromISR>
     72a:	90 93 9e 08 	sts	0x089E, r25
     72e:	80 93 9d 08 	sts	0x089D, r24
     732:	20 91 93 08 	lds	r18, 0x0893
     736:	30 91 94 08 	lds	r19, 0x0894
     73a:	82 17       	cp	r24, r18
     73c:	93 07       	cpc	r25, r19
     73e:	4c f4       	brge	.+18     	; 0x752 <__vector_9+0x74>
			ms_tickEnd += 65535;
     740:	80 91 9d 08 	lds	r24, 0x089D
     744:	90 91 9e 08 	lds	r25, 0x089E
     748:	01 97       	sbiw	r24, 0x01	; 1
     74a:	90 93 9e 08 	sts	0x089E, r25
     74e:	80 93 9d 08 	sts	0x089D, r24
		
		if ((us_tickEnd = myTimer_Read()) < us_tickStart) // if smaller then add...
     752:	4f d2       	rcall	.+1182   	; 0xbf2 <myTimer_Read>
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	90 93 a0 08 	sts	0x08A0, r25
     75a:	80 93 9f 08 	sts	0x089F, r24
     75e:	20 91 97 08 	lds	r18, 0x0897
     762:	30 91 98 08 	lds	r19, 0x0898
     766:	82 17       	cp	r24, r18
     768:	93 07       	cpc	r25, r19
     76a:	54 f4       	brge	.+20     	; 0x780 <__vector_9+0xa2>
			us_tickEnd += MAX_TICKS;
     76c:	80 91 9f 08 	lds	r24, 0x089F
     770:	90 91 a0 08 	lds	r25, 0x08A0
     774:	86 50       	subi	r24, 0x06	; 6
     776:	9f 4f       	sbci	r25, 0xFF	; 255
     778:	90 93 a0 08 	sts	0x08A0, r25
     77c:	80 93 9f 08 	sts	0x089F, r24
		
			
			
		us_tickLapsed = us_tickEnd - us_tickStart;
     780:	80 91 9f 08 	lds	r24, 0x089F
     784:	90 91 a0 08 	lds	r25, 0x08A0
     788:	20 91 97 08 	lds	r18, 0x0897
     78c:	30 91 98 08 	lds	r19, 0x0898
     790:	82 1b       	sub	r24, r18
     792:	93 0b       	sbc	r25, r19
     794:	90 93 9a 08 	sts	0x089A, r25
     798:	80 93 99 08 	sts	0x0899, r24
		ms_tickLapsed = ms_tickEnd - ms_tickStart;
     79c:	80 91 9d 08 	lds	r24, 0x089D
     7a0:	90 91 9e 08 	lds	r25, 0x089E
     7a4:	20 91 93 08 	lds	r18, 0x0893
     7a8:	30 91 94 08 	lds	r19, 0x0894
     7ac:	82 1b       	sub	r24, r18
     7ae:	93 0b       	sbc	r25, r19
     7b0:	90 93 96 08 	sts	0x0896, r25
     7b4:	80 93 95 08 	sts	0x0895, r24
		
		xSemaphoreGiveFromISR(semaReadReady, pdFALSE);
     7b8:	20 e0       	ldi	r18, 0x00	; 0
     7ba:	40 e0       	ldi	r20, 0x00	; 0
     7bc:	50 e0       	ldi	r21, 0x00	; 0
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	80 91 9b 08 	lds	r24, 0x089B
     7c6:	90 91 9c 08 	lds	r25, 0x089C
     7ca:	dd d7       	rcall	.+4026   	; 0x1786 <xQueueGenericSendFromISR>
	}	
}
     7cc:	ff 91       	pop	r31
     7ce:	ef 91       	pop	r30
     7d0:	bf 91       	pop	r27
     7d2:	af 91       	pop	r26
     7d4:	9f 91       	pop	r25
     7d6:	8f 91       	pop	r24
     7d8:	7f 91       	pop	r23
     7da:	6f 91       	pop	r22
     7dc:	5f 91       	pop	r21
     7de:	4f 91       	pop	r20
     7e0:	3f 91       	pop	r19
     7e2:	2f 91       	pop	r18
     7e4:	0f 90       	pop	r0
     7e6:	0b be       	out	0x3b, r0	; 59
     7e8:	0f 90       	pop	r0
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	0f 90       	pop	r0
     7ee:	1f 90       	pop	r1
     7f0:	18 95       	reti

000007f2 <myHcSonar_Init>:

void myHcSonar_Init()
{
	HC_Trigger_Init(); // set trigger as output
     7f2:	22 9a       	sbi	0x04, 2	; 4
	HC_Echo_Init(); // set echo as input
     7f4:	23 98       	cbi	0x04, 3	; 4
		
	PCICR |= (1<<PCIE0); // enable control for PCINT 7:0
     7f6:	e8 e6       	ldi	r30, 0x68	; 104
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	81 60       	ori	r24, 0x01	; 1
     7fe:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT3); // set interrupt for PCINT3
     800:	eb e6       	ldi	r30, 0x6B	; 107
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 81       	ld	r24, Z
     806:	88 60       	ori	r24, 0x08	; 8
     808:	80 83       	st	Z, r24
	
	semaReadReady = xSemaphoreCreateBinary();
     80a:	43 e0       	ldi	r20, 0x03	; 3
     80c:	60 e0       	ldi	r22, 0x00	; 0
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	cf d6       	rcall	.+3486   	; 0x15b0 <xQueueGenericCreate>
     812:	90 93 9c 08 	sts	0x089C, r25
     816:	80 93 9b 08 	sts	0x089B, r24
     81a:	08 95       	ret

0000081c <myMaxSonar_BtmStart>:
#include <myADC.h>
#include <myTimer.h>

void myMaxSonar_BtmStart()
{
	MaxSonar_BtmTriggerStart();
     81c:	a1 9a       	sbi	0x14, 1	; 20
	
	myTimer_DelayMicro(25); // delay 25 micro seconds...
     81e:	89 e1       	ldi	r24, 0x19	; 25
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	e9 d1       	rcall	.+978    	; 0xbf6 <myTimer_DelayMicro>
	//vTaskDelay(1);	// delay 1ms using vTaskDelay
	
	MaxSonar_BtmTriggerStop();
     824:	a1 98       	cbi	0x14, 1	; 20
     826:	08 95       	ret

00000828 <myMaxSonar_TopStart>:
}

void myMaxSonar_TopStart()
{
	MaxSonar_TopTriggerStart();
     828:	16 9a       	sbi	0x02, 6	; 2
	
	myTimer_DelayMicro(25); // delay 25 micro seconds...
     82a:	89 e1       	ldi	r24, 0x19	; 25
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	e3 d1       	rcall	.+966    	; 0xbf6 <myTimer_DelayMicro>
	//vTaskDelay(1);	// delay 1ms using vTaskDelay
	
	MaxSonar_TopTriggerStart();
     830:	16 9a       	sbi	0x02, 6	; 2
     832:	08 95       	ret

00000834 <myMaxSonar_Read>:
// Return distance in cm
int myMaxSonar_Read(char analogChannel)
{
	int reading = 0;
	
	int adcReading = myADC_analogRead(analogChannel);
     834:	ab d0       	rcall	.+342    	; 0x98c <myADC_analogRead>
     836:	9c 01       	movw	r18, r24
	reading = adcReading /FLOAT_TO_CM; // get the decimal point of ADC
     838:	63 e0       	ldi	r22, 0x03	; 3
     83a:	70 e0       	ldi	r23, 0x00	; 0
     83c:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__divmodhi4>
	reading += adcReading; // add the exact adcReading
	
	return reading;
}
     840:	cb 01       	movw	r24, r22
     842:	82 0f       	add	r24, r18
     844:	93 1f       	adc	r25, r19
     846:	08 95       	ret

00000848 <__vector_29>:
volatile unsigned char adcReading_L;


/*ADC Conversion Complete Interrupt Service Routine (ISR)*/
ISR(ADC_vect)
{	
     848:	1f 92       	push	r1
     84a:	0f 92       	push	r0
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	0f 92       	push	r0
     850:	11 24       	eor	r1, r1
     852:	0b b6       	in	r0, 0x3b	; 59
     854:	0f 92       	push	r0
     856:	2f 93       	push	r18
     858:	3f 93       	push	r19
     85a:	4f 93       	push	r20
     85c:	5f 93       	push	r21
     85e:	6f 93       	push	r22
     860:	7f 93       	push	r23
     862:	8f 93       	push	r24
     864:	9f 93       	push	r25
     866:	af 93       	push	r26
     868:	bf 93       	push	r27
     86a:	ef 93       	push	r30
     86c:	ff 93       	push	r31
	adcReading_L = ADCL; // dont change the ORDER L first then H!!! Reading L will hold H value.
     86e:	80 91 78 00 	lds	r24, 0x0078
     872:	80 93 a1 08 	sts	0x08A1, r24
	adcReading_H = ADCH; // read value of H (not used, 640cm and 1280cm for the resolution)
     876:	80 91 79 00 	lds	r24, 0x0079
     87a:	80 93 a2 08 	sts	0x08A2, r24
	// give semaphore, dont run block task immediately..
	xSemaphoreGiveFromISR(semaReadADC, pdFALSE);
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	40 e0       	ldi	r20, 0x00	; 0
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	80 91 a5 08 	lds	r24, 0x08A5
     88c:	90 91 a6 08 	lds	r25, 0x08A6
     890:	7a d7       	rcall	.+3828   	; 0x1786 <xQueueGenericSendFromISR>
}
     892:	ff 91       	pop	r31
     894:	ef 91       	pop	r30
     896:	bf 91       	pop	r27
     898:	af 91       	pop	r26
     89a:	9f 91       	pop	r25
     89c:	8f 91       	pop	r24
     89e:	7f 91       	pop	r23
     8a0:	6f 91       	pop	r22
     8a2:	5f 91       	pop	r21
     8a4:	4f 91       	pop	r20
     8a6:	3f 91       	pop	r19
     8a8:	2f 91       	pop	r18
     8aa:	0f 90       	pop	r0
     8ac:	0b be       	out	0x3b, r0	; 59
     8ae:	0f 90       	pop	r0
     8b0:	0f be       	out	0x3f, r0	; 63
     8b2:	0f 90       	pop	r0
     8b4:	1f 90       	pop	r1
     8b6:	18 95       	reti

000008b8 <myADC_Init>:

void myADC_Init()
{
	
	ADCSRA = ( 1<<ADEN ) | ( 1<<ADIE ) | ADC_PRESCALER; // enable ADC, enable interrupt, set prescaler
     8b8:	8f e8       	ldi	r24, 0x8F	; 143
     8ba:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = 0; // No auto trigger (0 for ADATE), No analog compare... 
     8be:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = ( 1 << REFS0 ) ; // use AVCC as reference, right adjust (take LSB but not 2 MSB)
     8c2:	80 e4       	ldi	r24, 0x40	; 64
     8c4:	80 93 7c 00 	sts	0x007C, r24
	
	// initialize semaphore..
	semaReadADC = xSemaphoreCreateBinary();
     8c8:	43 e0       	ldi	r20, 0x03	; 3
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	70 d6       	rcall	.+3296   	; 0x15b0 <xQueueGenericCreate>
     8d0:	90 93 a6 08 	sts	0x08A6, r25
     8d4:	80 93 a5 08 	sts	0x08A5, r24
	semaGuardStartADC = xSemaphoreCreateMutex();
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	2a d7       	rcall	.+3668   	; 0x1730 <xQueueCreateMutex>
     8dc:	90 93 a4 08 	sts	0x08A4, r25
     8e0:	80 93 a3 08 	sts	0x08A3, r24
	xSemaphoreGive(semaGuardStartADC); // free to read at start.
     8e4:	20 e0       	ldi	r18, 0x00	; 0
     8e6:	40 e0       	ldi	r20, 0x00	; 0
     8e8:	50 e0       	ldi	r21, 0x00	; 0
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	8d c6       	rjmp	.+3354   	; 0x160a <xQueueGenericSend>
     8f0:	08 95       	ret

000008f2 <myADC_startADC>:
	return myADC_readADC(channel);
}

// channel = AN0 to AN15, use the macro...
void myADC_startADC(char channel)
{
     8f2:	cf 93       	push	r28
     8f4:	c8 2f       	mov	r28, r24
	
	 //char buffer [10];	
	xSemaphoreTake(semaGuardStartADC, portMAX_DELAY); // guard against concurrent task starting adc at same time
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	4f ef       	ldi	r20, 0xFF	; 255
     8fa:	5f ef       	ldi	r21, 0xFF	; 255
     8fc:	60 e0       	ldi	r22, 0x00	; 0
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	80 91 a3 08 	lds	r24, 0x08A3
     904:	90 91 a4 08 	lds	r25, 0x08A4
     908:	78 d7       	rcall	.+3824   	; 0x17fa <xQueueGenericReceive>
    ADMUX = ( ADMUX & 11100000 ) | ( channel & 0b00011111 ); // keep bit 5:7, set bit 0:4 as Mux
     90a:	ec e7       	ldi	r30, 0x7C	; 124
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	80 81       	ld	r24, Z
     910:	9c 2f       	mov	r25, r28
     912:	9f 71       	andi	r25, 0x1F	; 31
     914:	80 76       	andi	r24, 0x60	; 96
     916:	89 2b       	or	r24, r25
     918:	80 83       	st	Z, r24
	
	//transmitUSART0("ADMUX = ");
	//transmitUSART0(itoa(ADMUX, buffer, 2)); // debugging...
	//transmitUSART0(" \n");
	
	ADCSRB = ( ADCSRB & 11100000 ) | (( channel & 0b00100000 ) >> 2); // keep all bits except bit 3, set Mux @ bit 3
     91a:	eb e7       	ldi	r30, 0x7B	; 123
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	20 81       	ld	r18, Z
     920:	c0 72       	andi	r28, 0x20	; 32
     922:	8c 2f       	mov	r24, r28
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	95 95       	asr	r25
     928:	87 95       	ror	r24
     92a:	95 95       	asr	r25
     92c:	87 95       	ror	r24
     92e:	92 2f       	mov	r25, r18
     930:	90 76       	andi	r25, 0x60	; 96
     932:	89 2b       	or	r24, r25
     934:	80 83       	st	Z, r24
	//transmitUSART0(itoa(ADCSRB, buffer, 2)); // debugging...
	//transmitUSART0(" \n");
	//
	
	//vTaskDelay(1);
	ADCSRA |= ( 1 << ADSC );	// READY TO SEND!!
     936:	ea e7       	ldi	r30, 0x7A	; 122
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	80 81       	ld	r24, Z
     93c:	80 64       	ori	r24, 0x40	; 64
     93e:	80 83       	st	Z, r24
}
     940:	cf 91       	pop	r28
     942:	08 95       	ret

00000944 <myADC_readADC>:

int myADC_readADC(char channel)
{
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
	int adcReading=0;
	xSemaphoreTake(semaReadADC, portMAX_DELAY); // wait for reading...
     948:	20 e0       	ldi	r18, 0x00	; 0
     94a:	4f ef       	ldi	r20, 0xFF	; 255
     94c:	5f ef       	ldi	r21, 0xFF	; 255
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	80 91 a5 08 	lds	r24, 0x08A5
     956:	90 91 a6 08 	lds	r25, 0x08A6
     95a:	4f d7       	rcall	.+3742   	; 0x17fa <xQueueGenericReceive>

	adcReading = ((adcReading_H & 0b11) << 8);
     95c:	c0 91 a2 08 	lds	r28, 0x08A2
     960:	c3 70       	andi	r28, 0x03	; 3
     962:	d0 e0       	ldi	r29, 0x00	; 0
     964:	dc 2f       	mov	r29, r28
     966:	cc 27       	eor	r28, r28
	adcReading += adcReading_L;
     968:	80 91 a1 08 	lds	r24, 0x08A1
     96c:	c8 0f       	add	r28, r24
     96e:	d1 1d       	adc	r29, r1

	xSemaphoreGive(semaGuardStartADC); // reading done, nxt task can start ADC
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	40 e0       	ldi	r20, 0x00	; 0
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	80 91 a3 08 	lds	r24, 0x08A3
     97e:	90 91 a4 08 	lds	r25, 0x08A4
     982:	43 d6       	rcall	.+3206   	; 0x160a <xQueueGenericSend>
	
	return adcReading;
     984:	ce 01       	movw	r24, r28
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	08 95       	ret

0000098c <myADC_analogRead>:
	xSemaphoreGive(semaGuardStartADC); // free to read at start.
}


int myADC_analogRead(char channel)
{
     98c:	cf 93       	push	r28
     98e:	c8 2f       	mov	r28, r24
	myADC_startADC(channel);
     990:	b0 df       	rcall	.-160    	; 0x8f2 <myADC_startADC>
	return myADC_readADC(channel);
     992:	8c 2f       	mov	r24, r28
     994:	d7 df       	rcall	.-82     	; 0x944 <myADC_readADC>
}
     996:	cf 91       	pop	r28
     998:	08 95       	ret

0000099a <detectStairs>:



char detectStairs(int calibratedBtmIR, int btmIR)
{
	if(btmIR > calibratedBtmIR + STAIRS_OFFSET || btmIR < calibratedBtmIR - STAIRS_OFFSET)
     99a:	9c 01       	movw	r18, r24
     99c:	21 5f       	subi	r18, 0xF1	; 241
     99e:	3f 4f       	sbci	r19, 0xFF	; 255
     9a0:	26 17       	cp	r18, r22
     9a2:	37 07       	cpc	r19, r23
     9a4:	44 f0       	brlt	.+16     	; 0x9b6 <detectStairs+0x1c>
     9a6:	2e 51       	subi	r18, 0x1E	; 30
     9a8:	31 09       	sbc	r19, r1
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	62 17       	cp	r22, r18
     9ae:	73 07       	cpc	r23, r19
     9b0:	1c f0       	brlt	.+6      	; 0x9b8 <detectStairs+0x1e>
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	08 95       	ret
	{
		return 1; // stairs found
     9b6:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		return 0; // no stairs
		
	}
}
     9b8:	08 95       	ret

000009ba <obstacleAvoidance>:

void obstacleAvoidance(int frontSonar, int leftSonar, int rightSonar, int btmIR, int calibratedBtmIR)
{
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
	if(frontSonar < FRONT_OBSTACLE_DISTANCE)
     9be:	86 34       	cpi	r24, 0x46	; 70
     9c0:	91 05       	cpc	r25, r1
     9c2:	1c f5       	brge	.+70     	; 0xa0a <obstacleAvoidance+0x50>
	{
		if(leftSonar < SIDE_OBSTACLE_DISTANCE && rightSonar < SIDE_OBSTACLE_DISTANCE)
     9c4:	6e 31       	cpi	r22, 0x1E	; 30
     9c6:	71 05       	cpc	r23, r1
     9c8:	54 f4       	brge	.+20     	; 0x9de <obstacleAvoidance+0x24>
     9ca:	4e 31       	cpi	r20, 0x1E	; 30
     9cc:	51 05       	cpc	r21, r1
     9ce:	3c f4       	brge	.+14     	; 0x9de <obstacleAvoidance+0x24>
		{
			// dead end... block on 3 side...
			MOTOR_LEFT_START();
     9d0:	74 9a       	sbi	0x0e, 4	; 14
			MOTOR_RIGHT_START();
     9d2:	e2 e0       	ldi	r30, 0x02	; 2
     9d4:	f1 e0       	ldi	r31, 0x01	; 1
     9d6:	80 81       	ld	r24, Z
     9d8:	80 61       	ori	r24, 0x10	; 16
     9da:	80 83       	st	Z, r24
     9dc:	42 c0       	rjmp	.+132    	; 0xa62 <obstacleAvoidance+0xa8>
		}
		else if( (leftSonar+10) > rightSonar)
     9de:	66 5f       	subi	r22, 0xF6	; 246
     9e0:	7f 4f       	sbci	r23, 0xFF	; 255
     9e2:	46 17       	cp	r20, r22
     9e4:	57 07       	cpc	r21, r23
     9e6:	3c f4       	brge	.+14     	; 0x9f6 <obstacleAvoidance+0x3c>
		{
			MOTOR_RIGHT_STOP();
     9e8:	e2 e0       	ldi	r30, 0x02	; 2
     9ea:	f1 e0       	ldi	r31, 0x01	; 1
     9ec:	80 81       	ld	r24, Z
     9ee:	8f 7e       	andi	r24, 0xEF	; 239
     9f0:	80 83       	st	Z, r24
			MOTOR_LEFT_START();
     9f2:	74 9a       	sbi	0x0e, 4	; 14
     9f4:	36 c0       	rjmp	.+108    	; 0xa62 <obstacleAvoidance+0xa8>
		}
		else if (rightSonar > (leftSonar+10))
     9f6:	64 17       	cp	r22, r20
     9f8:	75 07       	cpc	r23, r21
     9fa:	9c f5       	brge	.+102    	; 0xa62 <obstacleAvoidance+0xa8>
		{
			MOTOR_LEFT_STOP();
     9fc:	74 98       	cbi	0x0e, 4	; 14
			MOTOR_RIGHT_START();
     9fe:	e2 e0       	ldi	r30, 0x02	; 2
     a00:	f1 e0       	ldi	r31, 0x01	; 1
     a02:	80 81       	ld	r24, Z
     a04:	80 61       	ori	r24, 0x10	; 16
     a06:	80 83       	st	Z, r24
     a08:	2c c0       	rjmp	.+88     	; 0xa62 <obstacleAvoidance+0xa8>
		}
		
	}
	else if (rightSonar < SIDE_OBSTACLE_DISTANCE && leftSonar > SIDE_OBSTACLE_DISTANCE)
     a0a:	4e 31       	cpi	r20, 0x1E	; 30
     a0c:	51 05       	cpc	r21, r1
     a0e:	54 f4       	brge	.+20     	; 0xa24 <obstacleAvoidance+0x6a>
     a10:	6f 31       	cpi	r22, 0x1F	; 31
     a12:	71 05       	cpc	r23, r1
     a14:	3c f0       	brlt	.+14     	; 0xa24 <obstacleAvoidance+0x6a>
	{
		// too close to right
		MOTOR_RIGHT_STOP();
     a16:	e2 e0       	ldi	r30, 0x02	; 2
     a18:	f1 e0       	ldi	r31, 0x01	; 1
     a1a:	80 81       	ld	r24, Z
     a1c:	8f 7e       	andi	r24, 0xEF	; 239
     a1e:	80 83       	st	Z, r24
		MOTOR_LEFT_START();
     a20:	74 9a       	sbi	0x0e, 4	; 14
     a22:	1f c0       	rjmp	.+62     	; 0xa62 <obstacleAvoidance+0xa8>
	}
	else if (leftSonar < SIDE_OBSTACLE_DISTANCE && rightSonar > SIDE_OBSTACLE_DISTANCE)
     a24:	6e 31       	cpi	r22, 0x1E	; 30
     a26:	71 05       	cpc	r23, r1
     a28:	54 f4       	brge	.+20     	; 0xa3e <obstacleAvoidance+0x84>
     a2a:	4f 31       	cpi	r20, 0x1F	; 31
     a2c:	51 05       	cpc	r21, r1
     a2e:	3c f0       	brlt	.+14     	; 0xa3e <obstacleAvoidance+0x84>
	{
		// too close to left
		MOTOR_RIGHT_START();
     a30:	e2 e0       	ldi	r30, 0x02	; 2
     a32:	f1 e0       	ldi	r31, 0x01	; 1
     a34:	80 81       	ld	r24, Z
     a36:	80 61       	ori	r24, 0x10	; 16
     a38:	80 83       	st	Z, r24
		MOTOR_LEFT_STOP();
     a3a:	74 98       	cbi	0x0e, 4	; 14
     a3c:	12 c0       	rjmp	.+36     	; 0xa62 <obstacleAvoidance+0xa8>
	}
	else if (detectStairs(calibratedBtmIR, btmIR))
     a3e:	b9 01       	movw	r22, r18
     a40:	c8 01       	movw	r24, r16
     a42:	ab df       	rcall	.-170    	; 0x99a <detectStairs>
     a44:	88 23       	and	r24, r24
     a46:	39 f0       	breq	.+14     	; 0xa56 <obstacleAvoidance+0x9c>
	{
		// stairs detection
		MOTOR_LEFT_START();
     a48:	74 9a       	sbi	0x0e, 4	; 14
		MOTOR_RIGHT_START();
     a4a:	e2 e0       	ldi	r30, 0x02	; 2
     a4c:	f1 e0       	ldi	r31, 0x01	; 1
     a4e:	80 81       	ld	r24, Z
     a50:	80 61       	ori	r24, 0x10	; 16
     a52:	80 83       	st	Z, r24
     a54:	06 c0       	rjmp	.+12     	; 0xa62 <obstacleAvoidance+0xa8>
	}
	else
	{
		// narrow path or no obstacle infront.
		MOTOR_RIGHT_STOP();
     a56:	e2 e0       	ldi	r30, 0x02	; 2
     a58:	f1 e0       	ldi	r31, 0x01	; 1
     a5a:	80 81       	ld	r24, Z
     a5c:	8f 7e       	andi	r24, 0xEF	; 239
     a5e:	80 83       	st	Z, r24
		MOTOR_LEFT_STOP();
     a60:	74 98       	cbi	0x0e, 4	; 14
	}
}
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	08 95       	ret

00000a68 <obstacleDetection>:

// return number of obstacle detected...
// implicitly return the device to send.
char obstacleDetection(int frontSonar, char obstacleDetected, char * deviceToSend, int leftSonar, int rightSonar, int topSonar)
{
     a68:	fa 01       	movw	r30, r20
	// Commented out when debuggin.

	//	if(frontSonar < FRONT_OBSTACLE_DISTANCE)
	{
		obstacleDetected ++;
		deviceToSend[FRONT_DEVICE] = FRONT_SONAR_ID;
     a6a:	86 e4       	ldi	r24, 0x46	; 70
     a6c:	80 83       	st	Z, r24
	}
	//	if (leftSonar < SIDE_OBSTACLE_DISTANCE)
	{
		obstacleDetected ++;
		deviceToSend[LEFT_DEVICE] = LEFT_SONAR_ID;
     a6e:	8c e4       	ldi	r24, 0x4C	; 76
     a70:	81 83       	std	Z+1, r24	; 0x01
	}
	//	if (rightSonar < SIDE_OBSTACLE_DISTANCE)
	{
		obstacleDetected++;
		deviceToSend[RIGHT_DEVICE] = RIGHT_SONAR_ID;
     a72:	82 e5       	ldi	r24, 0x52	; 82
     a74:	82 83       	std	Z+2, r24	; 0x02
	}
	//	if (detectStairs(calibratedBtmIR, btmIR))
	{
		obstacleDetected++;
		deviceToSend[BTM_DEVICE] = BTM_SONAR_ID;
     a76:	82 e4       	ldi	r24, 0x42	; 66
     a78:	83 83       	std	Z+3, r24	; 0x03
	}
	// if (...)
	{
		
		obstacleDetected++;
		deviceToSend[TOP_DEVICE] = TOP_SONAR_ID;
     a7a:	84 e5       	ldi	r24, 0x54	; 84
     a7c:	84 83       	std	Z+4, r24	; 0x04
	}
	
	return obstacleDetected;
}
     a7e:	85 e0       	ldi	r24, 0x05	; 5
     a80:	86 0f       	add	r24, r22
     a82:	08 95       	ret

00000a84 <mySharpIR_Read>:
#include <math.h>

// Return distance in cm
int mySharpIR_Read(char analogChannel)
{
	int adcReading = myADC_analogRead(analogChannel);
     a84:	83 df       	rcall	.-250    	; 0x98c <myADC_analogRead>
	adcReading = 10650.08 * pow(adcReading,-0.935) - 10;
     a86:	bc 01       	movw	r22, r24
     a88:	88 27       	eor	r24, r24
     a8a:	77 fd       	sbrc	r23, 7
     a8c:	80 95       	com	r24
     a8e:	98 2f       	mov	r25, r24
     a90:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__floatsisf>
     a94:	29 e2       	ldi	r18, 0x29	; 41
     a96:	3c e5       	ldi	r19, 0x5C	; 92
     a98:	4f e6       	ldi	r20, 0x6F	; 111
     a9a:	5f eb       	ldi	r21, 0xBF	; 191
     a9c:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <pow>
     aa0:	22 e5       	ldi	r18, 0x52	; 82
     aa2:	38 e6       	ldi	r19, 0x68	; 104
     aa4:	46 e2       	ldi	r20, 0x26	; 38
     aa6:	56 e4       	ldi	r21, 0x46	; 70
     aa8:	0e 94 f7 13 	call	0x27ee	; 0x27ee <__mulsf3>
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	40 e2       	ldi	r20, 0x20	; 32
     ab2:	51 e4       	ldi	r21, 0x41	; 65
     ab4:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__subsf3>
     ab8:	0e 94 38 13 	call	0x2670	; 0x2670 <__fixsfsi>
     abc:	cb 01       	movw	r24, r22
     abe:	68 3e       	cpi	r22, 0xE8	; 232
     ac0:	23 e0       	ldi	r18, 0x03	; 3
     ac2:	72 07       	cpc	r23, r18
     ac4:	14 f0       	brlt	.+4      	; 0xaca <mySharpIR_Read+0x46>
     ac6:	87 ee       	ldi	r24, 0xE7	; 231
     ac8:	93 e0       	ldi	r25, 0x03	; 3
	if(adcReading > 999)
		adcReading = 999;
	
	return adcReading;
}
     aca:	08 95       	ret

00000acc <checkWithinRange>:

char checkWithinRange(int reading, int * checkReading, const char range)
{
	return reading > (*checkReading + range) || reading < (*checkReading - range);
     acc:	fb 01       	movw	r30, r22
     ace:	20 81       	ld	r18, Z
     ad0:	31 81       	ldd	r19, Z+1	; 0x01
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	b9 01       	movw	r22, r18
     ad6:	64 0f       	add	r22, r20
     ad8:	75 1f       	adc	r23, r21
     ada:	68 17       	cp	r22, r24
     adc:	79 07       	cpc	r23, r25
     ade:	4c f0       	brlt	.+18     	; 0xaf2 <checkWithinRange+0x26>
     ae0:	24 1b       	sub	r18, r20
     ae2:	35 0b       	sbc	r19, r21
     ae4:	41 e0       	ldi	r20, 0x01	; 1
     ae6:	82 17       	cp	r24, r18
     ae8:	93 07       	cpc	r25, r19
     aea:	0c f0       	brlt	.+2      	; 0xaee <checkWithinRange+0x22>
     aec:	40 e0       	ldi	r20, 0x00	; 0
     aee:	84 2f       	mov	r24, r20
     af0:	08 95       	ret
     af2:	81 e0       	ldi	r24, 0x01	; 1
}
     af4:	08 95       	ret

00000af6 <mySharpIR_ReCalibrate>:
// final reading = btmIR reading (i = CALIBRATE_COUNT)
// firstCheck reading = btmIR reading ( i = CALIBRATE_COUNT/2)
// initial reading  = btmIR reading (i = 0)
// Write new calibrate value if all matches..
void mySharpIR_ReCalibrate(int* calibratedReading, int reading)
{
     af6:	0f 93       	push	r16
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	8c 01       	movw	r16, r24
     b00:	eb 01       	movw	r28, r22
	static const char range = 5; // put at header file later...
	static const char CALIBRATE_COUNT = 20; // put at header file later...
	static int i = 0;
	static int checkReading[2] = {0};
	
	if(checkWithinRange(reading, calibratedReading, range) && i == 0)
     b02:	45 e0       	ldi	r20, 0x05	; 5
     b04:	bc 01       	movw	r22, r24
     b06:	ce 01       	movw	r24, r28
     b08:	e1 df       	rcall	.-62     	; 0xacc <checkWithinRange>
     b0a:	88 23       	and	r24, r24
     b0c:	41 f0       	breq	.+16     	; 0xb1e <mySharpIR_ReCalibrate+0x28>
     b0e:	20 91 22 08 	lds	r18, 0x0822
     b12:	30 91 23 08 	lds	r19, 0x0823
     b16:	21 15       	cp	r18, r1
     b18:	31 05       	cpc	r19, r1
     b1a:	69 f4       	brne	.+26     	; 0xb36 <mySharpIR_ReCalibrate+0x40>
     b1c:	4b c0       	rjmp	.+150    	; 0xbb4 <mySharpIR_ReCalibrate+0xbe>
		// skip the calibration process... not needed
		return;
	}
	
	
	if (i == 0)
     b1e:	20 91 22 08 	lds	r18, 0x0822
     b22:	30 91 23 08 	lds	r19, 0x0823
     b26:	21 15       	cp	r18, r1
     b28:	31 05       	cpc	r19, r1
     b2a:	29 f4       	brne	.+10     	; 0xb36 <mySharpIR_ReCalibrate+0x40>
	{
		checkReading[0] = reading;
     b2c:	d0 93 1f 08 	sts	0x081F, r29
     b30:	c0 93 1e 08 	sts	0x081E, r28
     b34:	32 c0       	rjmp	.+100    	; 0xb9a <mySharpIR_ReCalibrate+0xa4>
	}
	else if (i == CALIBRATE_COUNT/2)
     b36:	2a 30       	cpi	r18, 0x0A	; 10
     b38:	31 05       	cpc	r19, r1
     b3a:	a9 f4       	brne	.+42     	; 0xb66 <mySharpIR_ReCalibrate+0x70>
	{
		if(checkWithinRange(reading, checkReading, range))
     b3c:	45 e0       	ldi	r20, 0x05	; 5
     b3e:	6e e1       	ldi	r22, 0x1E	; 30
     b40:	78 e0       	ldi	r23, 0x08	; 8
     b42:	ce 01       	movw	r24, r28
     b44:	c3 df       	rcall	.-122    	; 0xacc <checkWithinRange>
     b46:	88 23       	and	r24, r24
     b48:	49 f0       	breq	.+18     	; 0xb5c <mySharpIR_ReCalibrate+0x66>
		{
			// Out of range.. restart to find new calibration point..
			checkReading[0] = reading;
     b4a:	d0 93 1f 08 	sts	0x081F, r29
     b4e:	c0 93 1e 08 	sts	0x081E, r28
			i = 0; // reset to count...
     b52:	10 92 23 08 	sts	0x0823, r1
     b56:	10 92 22 08 	sts	0x0822, r1
     b5a:	1f c0       	rjmp	.+62     	; 0xb9a <mySharpIR_ReCalibrate+0xa4>
		}
		else
		{	// within range.. need more confirmation
			checkReading[1] = reading;
     b5c:	d0 93 21 08 	sts	0x0821, r29
     b60:	c0 93 20 08 	sts	0x0820, r28
     b64:	1a c0       	rjmp	.+52     	; 0xb9a <mySharpIR_ReCalibrate+0xa4>
		}
	}
	else if (i == CALIBRATE_COUNT)
     b66:	24 31       	cpi	r18, 0x14	; 20
     b68:	31 05       	cpc	r19, r1
     b6a:	b9 f4       	brne	.+46     	; 0xb9a <mySharpIR_ReCalibrate+0xa4>
	{
		i = 0; // reset to count..
     b6c:	10 92 23 08 	sts	0x0823, r1
     b70:	10 92 22 08 	sts	0x0822, r1

		if(checkWithinRange(reading, checkReading, range))
     b74:	45 e0       	ldi	r20, 0x05	; 5
     b76:	6e e1       	ldi	r22, 0x1E	; 30
     b78:	78 e0       	ldi	r23, 0x08	; 8
     b7a:	ce 01       	movw	r24, r28
     b7c:	a7 df       	rcall	.-178    	; 0xacc <checkWithinRange>
     b7e:	88 23       	and	r24, r24
     b80:	29 f0       	breq	.+10     	; 0xb8c <mySharpIR_ReCalibrate+0x96>
		{
			// Out of range.. restart to find new calibration point..
			checkReading[0] = reading;
     b82:	d0 93 1f 08 	sts	0x081F, r29
     b86:	c0 93 1e 08 	sts	0x081E, r28
     b8a:	07 c0       	rjmp	.+14     	; 0xb9a <mySharpIR_ReCalibrate+0xa4>
		}
		else
		{
			// all 3 readings within range... can calibrate as new stable.
			*calibratedReading = checkReading[0]; // btmIR is calibrated..
     b8c:	80 91 1e 08 	lds	r24, 0x081E
     b90:	90 91 1f 08 	lds	r25, 0x081F
     b94:	f8 01       	movw	r30, r16
     b96:	91 83       	std	Z+1, r25	; 0x01
     b98:	80 83       	st	Z, r24
		}
	}
	
	i = (i+1) % CALIBRATE_COUNT;
     b9a:	80 91 22 08 	lds	r24, 0x0822
     b9e:	90 91 23 08 	lds	r25, 0x0823
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	64 e1       	ldi	r22, 0x14	; 20
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__divmodhi4>
     bac:	90 93 23 08 	sts	0x0823, r25
     bb0:	80 93 22 08 	sts	0x0822, r24
}
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	1f 91       	pop	r17
     bba:	0f 91       	pop	r16
     bbc:	08 95       	ret

00000bbe <myTimer_Init>:
	unsigned char currentTick = myTimer_Read();

	delay /= MICROSECONDS_PER_TICK; // convert delay into ticks..
	expectedTick2 = currentTick + delay; 
	vTaskResume( *timerTask ); // resume delayMicroCheck..
	xSemaphoreTake(semaDelayMicro2, MAX_SEMA_WAIT);	// delay for the micro here... safety mech: max wait for 2 ms... cannot be more than tht..
     bbe:	90 93 ac 08 	sts	0x08AC, r25
     bc2:	80 93 ab 08 	sts	0x08AB, r24
     bc6:	fc 01       	movw	r30, r24
     bc8:	80 81       	ld	r24, Z
     bca:	91 81       	ldd	r25, Z+1	; 0x01
     bcc:	0e 94 1d 11 	call	0x223a	; 0x223a <vTaskSuspend>
     bd0:	43 e0       	ldi	r20, 0x03	; 3
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	ec d4       	rcall	.+2520   	; 0x15b0 <xQueueGenericCreate>
     bd8:	90 93 a8 08 	sts	0x08A8, r25
     bdc:	80 93 a7 08 	sts	0x08A7, r24
     be0:	43 e0       	ldi	r20, 0x03	; 3
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	e4 d4       	rcall	.+2504   	; 0x15b0 <xQueueGenericCreate>
     be8:	90 93 aa 08 	sts	0x08AA, r25
     bec:	80 93 a9 08 	sts	0x08A9, r24
     bf0:	08 95       	ret

00000bf2 <myTimer_Read>:
     bf2:	86 b5       	in	r24, 0x26	; 38
     bf4:	08 95       	ret

00000bf6 <myTimer_DelayMicro>:
     bf6:	46 b5       	in	r20, 0x26	; 38
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	9c 01       	movw	r18, r24
     bfc:	99 23       	and	r25, r25
     bfe:	14 f4       	brge	.+4      	; 0xc04 <myTimer_DelayMicro+0xe>
     c00:	2d 5f       	subi	r18, 0xFD	; 253
     c02:	3f 4f       	sbci	r19, 0xFF	; 255
     c04:	35 95       	asr	r19
     c06:	27 95       	ror	r18
     c08:	35 95       	asr	r19
     c0a:	27 95       	ror	r18
     c0c:	24 0f       	add	r18, r20
     c0e:	35 1f       	adc	r19, r21
     c10:	30 93 03 02 	sts	0x0203, r19
     c14:	20 93 02 02 	sts	0x0202, r18
     c18:	e0 91 ab 08 	lds	r30, 0x08AB
     c1c:	f0 91 ac 08 	lds	r31, 0x08AC
     c20:	80 81       	ld	r24, Z
     c22:	91 81       	ldd	r25, Z+1	; 0x01
     c24:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <vTaskResume>
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	42 e0       	ldi	r20, 0x02	; 2
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	80 91 a7 08 	lds	r24, 0x08A7
     c36:	90 91 a8 08 	lds	r25, 0x08A8
     c3a:	df c5       	rjmp	.+3006   	; 0x17fa <xQueueGenericReceive>
     c3c:	08 95       	ret

00000c3e <myTimer_DelayChecker>:
}

// Semaphore on sale if u match lucky number ...
void myTimer_DelayChecker()
{
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
}

// Return timer 0 value
unsigned char myTimer_Read()
{
	return TCNT0;
     c42:	c6 b5       	in	r28, 0x26	; 38
// Semaphore on sale if u match lucky number ...
void myTimer_DelayChecker()
{
	unsigned char currentTick = myTimer_Read();
	
	if(currentTick == 0) // overflow happened
     c44:	c1 11       	cpse	r28, r1
     c46:	22 c0       	rjmp	.+68     	; 0xc8c <myTimer_DelayChecker+0x4e>
	{
		if(expectedTick != IMPOSSIBLE_RANGE)
     c48:	80 91 02 02 	lds	r24, 0x0202
     c4c:	90 91 03 02 	lds	r25, 0x0203
     c50:	88 38       	cpi	r24, 0x88	; 136
     c52:	93 41       	sbci	r25, 0x13	; 19
     c54:	51 f0       	breq	.+20     	; 0xc6a <myTimer_DelayChecker+0x2c>
			expectedTick -= MAX_TICKS;
     c56:	80 91 02 02 	lds	r24, 0x0202
     c5a:	90 91 03 02 	lds	r25, 0x0203
     c5e:	8a 5f       	subi	r24, 0xFA	; 250
     c60:	91 09       	sbc	r25, r1
     c62:	90 93 03 02 	sts	0x0203, r25
     c66:	80 93 02 02 	sts	0x0202, r24

		if(expectedTick2 != IMPOSSIBLE_RANGE)
     c6a:	80 91 00 02 	lds	r24, 0x0200
     c6e:	90 91 01 02 	lds	r25, 0x0201
     c72:	88 38       	cpi	r24, 0x88	; 136
     c74:	93 41       	sbci	r25, 0x13	; 19
     c76:	51 f0       	breq	.+20     	; 0xc8c <myTimer_DelayChecker+0x4e>
			expectedTick2 -= MAX_TICKS;
     c78:	80 91 00 02 	lds	r24, 0x0200
     c7c:	90 91 01 02 	lds	r25, 0x0201
     c80:	8a 5f       	subi	r24, 0xFA	; 250
     c82:	91 09       	sbc	r25, r1
     c84:	90 93 01 02 	sts	0x0201, r25
     c88:	80 93 00 02 	sts	0x0200, r24
	}
	
	if( currentTick > expectedTick) // more than => 1 more tick => positive error..
     c8c:	d0 e0       	ldi	r29, 0x00	; 0
     c8e:	80 91 02 02 	lds	r24, 0x0202
     c92:	90 91 03 02 	lds	r25, 0x0203
     c96:	8c 17       	cp	r24, r28
     c98:	9d 07       	cpc	r25, r29
     c9a:	84 f4       	brge	.+32     	; 0xcbc <myTimer_DelayChecker+0x7e>
	{
		expectedTick = IMPOSSIBLE_RANGE; // set back to impossible range.
     c9c:	88 e8       	ldi	r24, 0x88	; 136
     c9e:	93 e1       	ldi	r25, 0x13	; 19
     ca0:	90 93 03 02 	sts	0x0203, r25
     ca4:	80 93 02 02 	sts	0x0202, r24
		xSemaphoreGive(semaDelayMicro); // give the semaphore to resume...	
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	40 e0       	ldi	r20, 0x00	; 0
     cac:	50 e0       	ldi	r21, 0x00	; 0
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	80 91 a7 08 	lds	r24, 0x08A7
     cb6:	90 91 a8 08 	lds	r25, 0x08A8
     cba:	a7 d4       	rcall	.+2382   	; 0x160a <xQueueGenericSend>
	}
	
	
	if( currentTick > expectedTick2) // more than => 1 more tick => positive error..
     cbc:	80 91 00 02 	lds	r24, 0x0200
     cc0:	90 91 01 02 	lds	r25, 0x0201
     cc4:	8c 17       	cp	r24, r28
     cc6:	9d 07       	cpc	r25, r29
     cc8:	84 f4       	brge	.+32     	; 0xcea <myTimer_DelayChecker+0xac>
	{
		expectedTick2 = IMPOSSIBLE_RANGE; // set back to impossible range.
     cca:	88 e8       	ldi	r24, 0x88	; 136
     ccc:	93 e1       	ldi	r25, 0x13	; 19
     cce:	90 93 01 02 	sts	0x0201, r25
     cd2:	80 93 00 02 	sts	0x0200, r24
		xSemaphoreGive(semaDelayMicro2); // give the semaphore to resume...
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	40 e0       	ldi	r20, 0x00	; 0
     cda:	50 e0       	ldi	r21, 0x00	; 0
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	80 91 a9 08 	lds	r24, 0x08A9
     ce4:	90 91 aa 08 	lds	r25, 0x08AA
     ce8:	90 d4       	rcall	.+2336   	; 0x160a <xQueueGenericSend>
	}
	
	if(expectedTick == IMPOSSIBLE_RANGE && expectedTick2 == IMPOSSIBLE_RANGE)
     cea:	80 91 02 02 	lds	r24, 0x0202
     cee:	90 91 03 02 	lds	r25, 0x0203
     cf2:	88 38       	cpi	r24, 0x88	; 136
     cf4:	93 41       	sbci	r25, 0x13	; 19
     cf6:	79 f4       	brne	.+30     	; 0xd16 <myTimer_DelayChecker+0xd8>
     cf8:	80 91 00 02 	lds	r24, 0x0200
     cfc:	90 91 01 02 	lds	r25, 0x0201
     d00:	88 38       	cpi	r24, 0x88	; 136
     d02:	93 41       	sbci	r25, 0x13	; 19
     d04:	41 f4       	brne	.+16     	; 0xd16 <myTimer_DelayChecker+0xd8>
	{
		vTaskSuspend(*timerTask); // suspend when both is done..
     d06:	e0 91 ab 08 	lds	r30, 0x08AB
     d0a:	f0 91 ac 08 	lds	r31, 0x08AC
     d0e:	80 81       	ld	r24, Z
     d10:	91 81       	ldd	r25, Z+1	; 0x01
     d12:	0e 94 1d 11 	call	0x223a	; 0x223a <vTaskSuspend>
	}
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	08 95       	ret

00000d1c <__vector_36>:


char myUSART_receiveHandShakeFin(unsigned char message)
{
	return (message == HANDSHAKE_FIN);
}
     d1c:	1f 92       	push	r1
     d1e:	0f 92       	push	r0
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	0f 92       	push	r0
     d24:	11 24       	eor	r1, r1
     d26:	0b b6       	in	r0, 0x3b	; 59
     d28:	0f 92       	push	r0
     d2a:	2f 93       	push	r18
     d2c:	3f 93       	push	r19
     d2e:	4f 93       	push	r20
     d30:	5f 93       	push	r21
     d32:	6f 93       	push	r22
     d34:	7f 93       	push	r23
     d36:	8f 93       	push	r24
     d38:	9f 93       	push	r25
     d3a:	af 93       	push	r26
     d3c:	bf 93       	push	r27
     d3e:	ef 93       	push	r30
     d40:	ff 93       	push	r31
     d42:	60 91 ce 00 	lds	r22, 0x00CE
     d46:	82 e4       	ldi	r24, 0x42	; 66
     d48:	99 e0       	ldi	r25, 0x09	; 9
     d4a:	2d d6       	rcall	.+3162   	; 0x19a6 <ringBufferPush>
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	40 e0       	ldi	r20, 0x00	; 0
     d50:	50 e0       	ldi	r21, 0x00	; 0
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	80 91 36 09 	lds	r24, 0x0936
     d5a:	90 91 37 09 	lds	r25, 0x0937
     d5e:	13 d5       	rcall	.+2598   	; 0x1786 <xQueueGenericSendFromISR>
     d60:	82 e4       	ldi	r24, 0x42	; 66
     d62:	99 e0       	ldi	r25, 0x09	; 9
     d64:	37 d6       	rcall	.+3182   	; 0x19d4 <ringBufferFull>
     d66:	ff 91       	pop	r31
     d68:	ef 91       	pop	r30
     d6a:	bf 91       	pop	r27
     d6c:	af 91       	pop	r26
     d6e:	9f 91       	pop	r25
     d70:	8f 91       	pop	r24
     d72:	7f 91       	pop	r23
     d74:	6f 91       	pop	r22
     d76:	5f 91       	pop	r21
     d78:	4f 91       	pop	r20
     d7a:	3f 91       	pop	r19
     d7c:	2f 91       	pop	r18
     d7e:	0f 90       	pop	r0
     d80:	0b be       	out	0x3b, r0	; 59
     d82:	0f 90       	pop	r0
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	0f 90       	pop	r0
     d88:	1f 90       	pop	r1
     d8a:	18 95       	reti

00000d8c <__vector_25>:
     d8c:	1f 92       	push	r1
     d8e:	0f 92       	push	r0
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	0f 92       	push	r0
     d94:	11 24       	eor	r1, r1
     d96:	0b b6       	in	r0, 0x3b	; 59
     d98:	0f 92       	push	r0
     d9a:	2f 93       	push	r18
     d9c:	3f 93       	push	r19
     d9e:	4f 93       	push	r20
     da0:	5f 93       	push	r21
     da2:	6f 93       	push	r22
     da4:	7f 93       	push	r23
     da6:	8f 93       	push	r24
     da8:	9f 93       	push	r25
     daa:	af 93       	push	r26
     dac:	bf 93       	push	r27
     dae:	ef 93       	push	r30
     db0:	ff 93       	push	r31
     db2:	60 91 c6 00 	lds	r22, 0x00C6
     db6:	8d ec       	ldi	r24, 0xCD	; 205
     db8:	98 e0       	ldi	r25, 0x08	; 8
     dba:	f5 d5       	rcall	.+3050   	; 0x19a6 <ringBufferPush>
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	40 e0       	ldi	r20, 0x00	; 0
     dc0:	50 e0       	ldi	r21, 0x00	; 0
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	70 e0       	ldi	r23, 0x00	; 0
     dc6:	80 91 36 09 	lds	r24, 0x0936
     dca:	90 91 37 09 	lds	r25, 0x0937
     dce:	db d4       	rcall	.+2486   	; 0x1786 <xQueueGenericSendFromISR>
     dd0:	8d ec       	ldi	r24, 0xCD	; 205
     dd2:	98 e0       	ldi	r25, 0x08	; 8
     dd4:	ff d5       	rcall	.+3070   	; 0x19d4 <ringBufferFull>
     dd6:	ff 91       	pop	r31
     dd8:	ef 91       	pop	r30
     dda:	bf 91       	pop	r27
     ddc:	af 91       	pop	r26
     dde:	9f 91       	pop	r25
     de0:	8f 91       	pop	r24
     de2:	7f 91       	pop	r23
     de4:	6f 91       	pop	r22
     de6:	5f 91       	pop	r21
     de8:	4f 91       	pop	r20
     dea:	3f 91       	pop	r19
     dec:	2f 91       	pop	r18
     dee:	0f 90       	pop	r0
     df0:	0b be       	out	0x3b, r0	; 59
     df2:	0f 90       	pop	r0
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	0f 90       	pop	r0
     df8:	1f 90       	pop	r1
     dfa:	18 95       	reti

00000dfc <__vector_37>:
     dfc:	1f 92       	push	r1
     dfe:	0f 92       	push	r0
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	0f 92       	push	r0
     e04:	11 24       	eor	r1, r1
     e06:	0b b6       	in	r0, 0x3b	; 59
     e08:	0f 92       	push	r0
     e0a:	2f 93       	push	r18
     e0c:	3f 93       	push	r19
     e0e:	4f 93       	push	r20
     e10:	5f 93       	push	r21
     e12:	6f 93       	push	r22
     e14:	7f 93       	push	r23
     e16:	8f 93       	push	r24
     e18:	9f 93       	push	r25
     e1a:	af 93       	push	r26
     e1c:	bf 93       	push	r27
     e1e:	ef 93       	push	r30
     e20:	ff 93       	push	r31
     e22:	88 e3       	ldi	r24, 0x38	; 56
     e24:	99 e0       	ldi	r25, 0x09	; 9
     e26:	dd d5       	rcall	.+3002   	; 0x19e2 <ringBufferNotEmpty>
     e28:	88 23       	and	r24, r24
     e2a:	31 f0       	breq	.+12     	; 0xe38 <__vector_37+0x3c>
     e2c:	88 e3       	ldi	r24, 0x38	; 56
     e2e:	99 e0       	ldi	r25, 0x09	; 9
     e30:	a8 d5       	rcall	.+2896   	; 0x1982 <ringBufferPop>
     e32:	80 93 ce 00 	sts	0x00CE, r24
     e36:	05 c0       	rjmp	.+10     	; 0xe42 <__vector_37+0x46>
     e38:	e9 ec       	ldi	r30, 0xC9	; 201
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	8f 7d       	andi	r24, 0xDF	; 223
     e40:	80 83       	st	Z, r24
     e42:	ff 91       	pop	r31
     e44:	ef 91       	pop	r30
     e46:	bf 91       	pop	r27
     e48:	af 91       	pop	r26
     e4a:	9f 91       	pop	r25
     e4c:	8f 91       	pop	r24
     e4e:	7f 91       	pop	r23
     e50:	6f 91       	pop	r22
     e52:	5f 91       	pop	r21
     e54:	4f 91       	pop	r20
     e56:	3f 91       	pop	r19
     e58:	2f 91       	pop	r18
     e5a:	0f 90       	pop	r0
     e5c:	0b be       	out	0x3b, r0	; 59
     e5e:	0f 90       	pop	r0
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	0f 90       	pop	r0
     e64:	1f 90       	pop	r1
     e66:	18 95       	reti

00000e68 <__vector_26>:
     e68:	1f 92       	push	r1
     e6a:	0f 92       	push	r0
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	0f 92       	push	r0
     e70:	11 24       	eor	r1, r1
     e72:	0b b6       	in	r0, 0x3b	; 59
     e74:	0f 92       	push	r0
     e76:	2f 93       	push	r18
     e78:	3f 93       	push	r19
     e7a:	4f 93       	push	r20
     e7c:	5f 93       	push	r21
     e7e:	6f 93       	push	r22
     e80:	7f 93       	push	r23
     e82:	8f 93       	push	r24
     e84:	9f 93       	push	r25
     e86:	af 93       	push	r26
     e88:	bf 93       	push	r27
     e8a:	ef 93       	push	r30
     e8c:	ff 93       	push	r31
     e8e:	8d e3       	ldi	r24, 0x3D	; 61
     e90:	99 e0       	ldi	r25, 0x09	; 9
     e92:	a7 d5       	rcall	.+2894   	; 0x19e2 <ringBufferNotEmpty>
     e94:	88 23       	and	r24, r24
     e96:	31 f0       	breq	.+12     	; 0xea4 <__vector_26+0x3c>
     e98:	8d e3       	ldi	r24, 0x3D	; 61
     e9a:	99 e0       	ldi	r25, 0x09	; 9
     e9c:	72 d5       	rcall	.+2788   	; 0x1982 <ringBufferPop>
     e9e:	80 93 c6 00 	sts	0x00C6, r24
     ea2:	05 c0       	rjmp	.+10     	; 0xeae <__vector_26+0x46>
     ea4:	e1 ec       	ldi	r30, 0xC1	; 193
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	8f 7d       	andi	r24, 0xDF	; 223
     eac:	80 83       	st	Z, r24
     eae:	ff 91       	pop	r31
     eb0:	ef 91       	pop	r30
     eb2:	bf 91       	pop	r27
     eb4:	af 91       	pop	r26
     eb6:	9f 91       	pop	r25
     eb8:	8f 91       	pop	r24
     eba:	7f 91       	pop	r23
     ebc:	6f 91       	pop	r22
     ebe:	5f 91       	pop	r21
     ec0:	4f 91       	pop	r20
     ec2:	3f 91       	pop	r19
     ec4:	2f 91       	pop	r18
     ec6:	0f 90       	pop	r0
     ec8:	0b be       	out	0x3b, r0	; 59
     eca:	0f 90       	pop	r0
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	0f 90       	pop	r0
     ed0:	1f 90       	pop	r1
     ed2:	18 95       	reti

00000ed4 <myUSART_USART0_Init>:
     ed4:	10 92 c5 00 	sts	0x00C5, r1
     ed8:	87 e6       	ldi	r24, 0x67	; 103
     eda:	80 93 c4 00 	sts	0x00C4, r24
     ede:	88 eb       	ldi	r24, 0xB8	; 184
     ee0:	80 93 c1 00 	sts	0x00C1, r24
     ee4:	86 e0       	ldi	r24, 0x06	; 6
     ee6:	80 93 c2 00 	sts	0x00C2, r24
     eea:	40 e2       	ldi	r20, 0x20	; 32
     eec:	64 ef       	ldi	r22, 0xF4	; 244
     eee:	78 e0       	ldi	r23, 0x08	; 8
     ef0:	8d ec       	ldi	r24, 0xCD	; 205
     ef2:	98 e0       	ldi	r25, 0x08	; 8
     ef4:	35 d5       	rcall	.+2666   	; 0x1960 <ringBufferInit>
     ef6:	40 e2       	ldi	r20, 0x20	; 32
     ef8:	62 ed       	ldi	r22, 0xD2	; 210
     efa:	78 e0       	ldi	r23, 0x08	; 8
     efc:	8d e3       	ldi	r24, 0x3D	; 61
     efe:	99 e0       	ldi	r25, 0x09	; 9
     f00:	2f d5       	rcall	.+2654   	; 0x1960 <ringBufferInit>
     f02:	43 e0       	ldi	r20, 0x03	; 3
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	53 d3       	rcall	.+1702   	; 0x15b0 <xQueueGenericCreate>
     f0a:	90 93 35 09 	sts	0x0935, r25
     f0e:	80 93 34 09 	sts	0x0934, r24
     f12:	08 95       	ret

00000f14 <myUSART_USART1_Init>:
     f14:	10 92 cd 00 	sts	0x00CD, r1
     f18:	87 e6       	ldi	r24, 0x67	; 103
     f1a:	80 93 cc 00 	sts	0x00CC, r24
     f1e:	88 eb       	ldi	r24, 0xB8	; 184
     f20:	80 93 c9 00 	sts	0x00C9, r24
     f24:	86 e0       	ldi	r24, 0x06	; 6
     f26:	80 93 ca 00 	sts	0x00CA, r24
     f2a:	40 e2       	ldi	r20, 0x20	; 32
     f2c:	6d ea       	ldi	r22, 0xAD	; 173
     f2e:	78 e0       	ldi	r23, 0x08	; 8
     f30:	82 e4       	ldi	r24, 0x42	; 66
     f32:	99 e0       	ldi	r25, 0x09	; 9
     f34:	15 d5       	rcall	.+2602   	; 0x1960 <ringBufferInit>
     f36:	40 e2       	ldi	r20, 0x20	; 32
     f38:	64 e1       	ldi	r22, 0x14	; 20
     f3a:	79 e0       	ldi	r23, 0x09	; 9
     f3c:	88 e3       	ldi	r24, 0x38	; 56
     f3e:	99 e0       	ldi	r25, 0x09	; 9
     f40:	0f d5       	rcall	.+2590   	; 0x1960 <ringBufferInit>
     f42:	43 e0       	ldi	r20, 0x03	; 3
     f44:	60 e0       	ldi	r22, 0x00	; 0
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	33 d3       	rcall	.+1638   	; 0x15b0 <xQueueGenericCreate>
     f4a:	90 93 37 09 	sts	0x0937, r25
     f4e:	80 93 36 09 	sts	0x0936, r24
     f52:	43 e0       	ldi	r20, 0x03	; 3
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	2b d3       	rcall	.+1622   	; 0x15b0 <xQueueGenericCreate>
     f5a:	90 93 f3 08 	sts	0x08F3, r25
     f5e:	80 93 f2 08 	sts	0x08F2, r24
     f62:	08 95       	ret

00000f64 <myUSART_transmitUSART0_c>:
     f64:	cf 93       	push	r28
     f66:	c8 2f       	mov	r28, r24
     f68:	8d e3       	ldi	r24, 0x3D	; 61
     f6a:	99 e0       	ldi	r25, 0x09	; 9
     f6c:	33 d5       	rcall	.+2662   	; 0x19d4 <ringBufferFull>
     f6e:	81 11       	cpse	r24, r1
     f70:	fb cf       	rjmp	.-10     	; 0xf68 <myUSART_transmitUSART0_c+0x4>
     f72:	6c 2f       	mov	r22, r28
     f74:	8d e3       	ldi	r24, 0x3D	; 61
     f76:	99 e0       	ldi	r25, 0x09	; 9
     f78:	16 d5       	rcall	.+2604   	; 0x19a6 <ringBufferPush>
     f7a:	e1 ec       	ldi	r30, 0xC1	; 193
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	80 62       	ori	r24, 0x20	; 32
     f82:	80 83       	st	Z, r24
     f84:	e0 ec       	ldi	r30, 0xC0	; 192
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	80 64       	ori	r24, 0x40	; 64
     f8c:	80 83       	st	Z, r24
     f8e:	cf 91       	pop	r28
     f90:	08 95       	ret

00000f92 <myUSART_transmitUSART1_c>:
     f92:	cf 93       	push	r28
     f94:	c8 2f       	mov	r28, r24
     f96:	88 e3       	ldi	r24, 0x38	; 56
     f98:	99 e0       	ldi	r25, 0x09	; 9
     f9a:	1c d5       	rcall	.+2616   	; 0x19d4 <ringBufferFull>
     f9c:	81 11       	cpse	r24, r1
     f9e:	fb cf       	rjmp	.-10     	; 0xf96 <myUSART_transmitUSART1_c+0x4>
     fa0:	6c 2f       	mov	r22, r28
     fa2:	88 e3       	ldi	r24, 0x38	; 56
     fa4:	99 e0       	ldi	r25, 0x09	; 9
     fa6:	ff d4       	rcall	.+2558   	; 0x19a6 <ringBufferPush>
     fa8:	e9 ec       	ldi	r30, 0xC9	; 201
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	80 62       	ori	r24, 0x20	; 32
     fb0:	80 83       	st	Z, r24
     fb2:	e8 ec       	ldi	r30, 0xC8	; 200
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	80 64       	ori	r24, 0x40	; 64
     fba:	80 83       	st	Z, r24
     fbc:	cf 91       	pop	r28
     fbe:	08 95       	ret

00000fc0 <myUSART_transmitUSART1>:
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	ec 01       	movw	r28, r24
     fc6:	88 81       	ld	r24, Y
     fc8:	88 23       	and	r24, r24
     fca:	29 f0       	breq	.+10     	; 0xfd6 <myUSART_transmitUSART1+0x16>
     fcc:	21 96       	adiw	r28, 0x01	; 1
     fce:	e1 df       	rcall	.-62     	; 0xf92 <myUSART_transmitUSART1_c>
     fd0:	89 91       	ld	r24, Y+
     fd2:	81 11       	cpse	r24, r1
     fd4:	fc cf       	rjmp	.-8      	; 0xfce <myUSART_transmitUSART1+0xe>
     fd6:	df 91       	pop	r29
     fd8:	cf 91       	pop	r28
     fda:	08 95       	ret

00000fdc <myUSART_transmitUSART0>:
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	ec 01       	movw	r28, r24
     fe2:	88 81       	ld	r24, Y
     fe4:	88 23       	and	r24, r24
     fe6:	29 f0       	breq	.+10     	; 0xff2 <myUSART_transmitUSART0+0x16>
     fe8:	21 96       	adiw	r28, 0x01	; 1
     fea:	bc df       	rcall	.-136    	; 0xf64 <myUSART_transmitUSART0_c>
     fec:	89 91       	ld	r24, Y+
     fee:	81 11       	cpse	r24, r1
     ff0:	fc cf       	rjmp	.-8      	; 0xfea <myUSART_transmitUSART0+0xe>
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	08 95       	ret

00000ff8 <myUSART_receiveUSART1>:
     ff8:	cf 93       	push	r28
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	4f ef       	ldi	r20, 0xFF	; 255
     ffe:	5f ef       	ldi	r21, 0xFF	; 255
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	80 91 36 09 	lds	r24, 0x0936
    1008:	90 91 37 09 	lds	r25, 0x0937
    100c:	f6 d3       	rcall	.+2028   	; 0x17fa <xQueueGenericReceive>
    100e:	82 e4       	ldi	r24, 0x42	; 66
    1010:	99 e0       	ldi	r25, 0x09	; 9
    1012:	b7 d4       	rcall	.+2414   	; 0x1982 <ringBufferPop>
    1014:	c8 2f       	mov	r28, r24
    1016:	82 e4       	ldi	r24, 0x42	; 66
    1018:	99 e0       	ldi	r25, 0x09	; 9
    101a:	e3 d4       	rcall	.+2502   	; 0x19e2 <ringBufferNotEmpty>
    101c:	88 23       	and	r24, r24
    101e:	51 f0       	breq	.+20     	; 0x1034 <myUSART_receiveUSART1+0x3c>
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	40 e0       	ldi	r20, 0x00	; 0
    1024:	50 e0       	ldi	r21, 0x00	; 0
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	80 91 36 09 	lds	r24, 0x0936
    102e:	90 91 37 09 	lds	r25, 0x0937
    1032:	eb d2       	rcall	.+1494   	; 0x160a <xQueueGenericSend>
    1034:	8c 2f       	mov	r24, r28
    1036:	cf 91       	pop	r28
    1038:	08 95       	ret

0000103a <myUSART_waitForHandshake>:
    103a:	de df       	rcall	.-68     	; 0xff8 <myUSART_receiveUSART1>
    103c:	86 31       	cpi	r24, 0x16	; 22
    103e:	51 f4       	brne	.+20     	; 0x1054 <myUSART_waitForHandshake+0x1a>
    1040:	85 e0       	ldi	r24, 0x05	; 5
    1042:	a7 df       	rcall	.-178    	; 0xf92 <myUSART_transmitUSART1_c>
    1044:	d9 df       	rcall	.-78     	; 0xff8 <myUSART_receiveUSART1>
    1046:	91 e0       	ldi	r25, 0x01	; 1
    1048:	86 31       	cpi	r24, 0x16	; 22
    104a:	09 f4       	brne	.+2      	; 0x104e <myUSART_waitForHandshake+0x14>
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	89 2f       	mov	r24, r25
    1050:	81 95       	neg	r24
    1052:	08 95       	ret
    1054:	8f ef       	ldi	r24, 0xFF	; 255
    1056:	08 95       	ret

00001058 <myUSART_completeHandShake>:
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	40 e0       	ldi	r20, 0x00	; 0
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	80 91 f2 08 	lds	r24, 0x08F2
    1066:	90 91 f3 08 	lds	r25, 0x08F3
    106a:	cf c2       	rjmp	.+1438   	; 0x160a <xQueueGenericSend>
    106c:	08 95       	ret

0000106e <myUSART_receiveHandShakeAck>:
    106e:	91 e0       	ldi	r25, 0x01	; 1
    1070:	85 30       	cpi	r24, 0x05	; 5
    1072:	09 f0       	breq	.+2      	; 0x1076 <myUSART_receiveHandShakeAck+0x8>
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	89 2f       	mov	r24, r25
    1078:	08 95       	ret

0000107a <myUSART_receiveHandShakeStart>:
    107a:	91 e0       	ldi	r25, 0x01	; 1
    107c:	86 31       	cpi	r24, 0x16	; 22
    107e:	09 f0       	breq	.+2      	; 0x1082 <myUSART_receiveHandShakeStart+0x8>
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	89 2f       	mov	r24, r25
    1084:	08 95       	ret

00001086 <myUSART_receiveMessageACK>:


char myUSART_receiveMessageACK(unsigned char message)
{
	return (message == MESSAGE_ACK);
    1086:	91 e0       	ldi	r25, 0x01	; 1
    1088:	86 30       	cpi	r24, 0x06	; 6
    108a:	09 f0       	breq	.+2      	; 0x108e <myUSART_receiveMessageACK+0x8>
    108c:	90 e0       	ldi	r25, 0x00	; 0
}
    108e:	89 2f       	mov	r24, r25
    1090:	08 95       	ret

00001092 <myUSART_peekReceiveUSART1>:


unsigned char myUSART_peekReceiveUSART1()
{
    1092:	cf 93       	push	r28
	unsigned char data;
	
	xSemaphoreTake(semaUsart1Receive, portMAX_DELAY);
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	4f ef       	ldi	r20, 0xFF	; 255
    1098:	5f ef       	ldi	r21, 0xFF	; 255
    109a:	60 e0       	ldi	r22, 0x00	; 0
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	80 91 36 09 	lds	r24, 0x0936
    10a2:	90 91 37 09 	lds	r25, 0x0937
    10a6:	a9 d3       	rcall	.+1874   	; 0x17fa <xQueueGenericReceive>
	data = ringBufferPeek(&uart1_rxRingBuffer);
    10a8:	82 e4       	ldi	r24, 0x42	; 66
    10aa:	99 e0       	ldi	r25, 0x09	; 9
    10ac:	60 d4       	rcall	.+2240   	; 0x196e <ringBufferPeek>
    10ae:	c8 2f       	mov	r28, r24
	
	//need?
	if(ringBufferNotEmpty(&uart1_rxRingBuffer))
    10b0:	82 e4       	ldi	r24, 0x42	; 66
    10b2:	99 e0       	ldi	r25, 0x09	; 9
    10b4:	96 d4       	rcall	.+2348   	; 0x19e2 <ringBufferNotEmpty>
    10b6:	88 23       	and	r24, r24
    10b8:	51 f0       	breq	.+20     	; 0x10ce <myUSART_peekReceiveUSART1+0x3c>
	{
		xSemaphoreGive(semaUsart1Receive);
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	40 e0       	ldi	r20, 0x00	; 0
    10be:	50 e0       	ldi	r21, 0x00	; 0
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	80 91 36 09 	lds	r24, 0x0936
    10c8:	90 91 37 09 	lds	r25, 0x0937
    10cc:	9e d2       	rcall	.+1340   	; 0x160a <xQueueGenericSend>
	}
	
	return data;
    10ce:	8c 2f       	mov	r24, r28
    10d0:	cf 91       	pop	r28
    10d2:	08 95       	ret

000010d4 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    10d4:	31 e1       	ldi	r19, 0x11	; 17
    10d6:	fc 01       	movw	r30, r24
    10d8:	30 83       	st	Z, r19
    10da:	31 97       	sbiw	r30, 0x01	; 1
    10dc:	22 e2       	ldi	r18, 0x22	; 34
    10de:	20 83       	st	Z, r18
    10e0:	31 97       	sbiw	r30, 0x01	; 1
    10e2:	a3 e3       	ldi	r26, 0x33	; 51
    10e4:	a0 83       	st	Z, r26
    10e6:	31 97       	sbiw	r30, 0x01	; 1
    10e8:	60 83       	st	Z, r22
    10ea:	31 97       	sbiw	r30, 0x01	; 1
    10ec:	70 83       	st	Z, r23
    10ee:	31 97       	sbiw	r30, 0x01	; 1
    10f0:	10 82       	st	Z, r1
    10f2:	31 97       	sbiw	r30, 0x01	; 1
    10f4:	10 82       	st	Z, r1
    10f6:	31 97       	sbiw	r30, 0x01	; 1
    10f8:	60 e8       	ldi	r22, 0x80	; 128
    10fa:	60 83       	st	Z, r22
    10fc:	31 97       	sbiw	r30, 0x01	; 1
    10fe:	10 82       	st	Z, r1
    1100:	31 97       	sbiw	r30, 0x01	; 1
    1102:	10 82       	st	Z, r1
    1104:	31 97       	sbiw	r30, 0x01	; 1
    1106:	10 82       	st	Z, r1
    1108:	31 97       	sbiw	r30, 0x01	; 1
    110a:	62 e0       	ldi	r22, 0x02	; 2
    110c:	60 83       	st	Z, r22
    110e:	31 97       	sbiw	r30, 0x01	; 1
    1110:	63 e0       	ldi	r22, 0x03	; 3
    1112:	60 83       	st	Z, r22
    1114:	31 97       	sbiw	r30, 0x01	; 1
    1116:	64 e0       	ldi	r22, 0x04	; 4
    1118:	60 83       	st	Z, r22
    111a:	31 97       	sbiw	r30, 0x01	; 1
    111c:	65 e0       	ldi	r22, 0x05	; 5
    111e:	60 83       	st	Z, r22
    1120:	31 97       	sbiw	r30, 0x01	; 1
    1122:	66 e0       	ldi	r22, 0x06	; 6
    1124:	60 83       	st	Z, r22
    1126:	31 97       	sbiw	r30, 0x01	; 1
    1128:	67 e0       	ldi	r22, 0x07	; 7
    112a:	60 83       	st	Z, r22
    112c:	31 97       	sbiw	r30, 0x01	; 1
    112e:	68 e0       	ldi	r22, 0x08	; 8
    1130:	60 83       	st	Z, r22
    1132:	31 97       	sbiw	r30, 0x01	; 1
    1134:	69 e0       	ldi	r22, 0x09	; 9
    1136:	60 83       	st	Z, r22
    1138:	31 97       	sbiw	r30, 0x01	; 1
    113a:	60 e1       	ldi	r22, 0x10	; 16
    113c:	60 83       	st	Z, r22
    113e:	31 97       	sbiw	r30, 0x01	; 1
    1140:	30 83       	st	Z, r19
    1142:	31 97       	sbiw	r30, 0x01	; 1
    1144:	32 e1       	ldi	r19, 0x12	; 18
    1146:	30 83       	st	Z, r19
    1148:	31 97       	sbiw	r30, 0x01	; 1
    114a:	33 e1       	ldi	r19, 0x13	; 19
    114c:	30 83       	st	Z, r19
    114e:	31 97       	sbiw	r30, 0x01	; 1
    1150:	34 e1       	ldi	r19, 0x14	; 20
    1152:	30 83       	st	Z, r19
    1154:	31 97       	sbiw	r30, 0x01	; 1
    1156:	35 e1       	ldi	r19, 0x15	; 21
    1158:	30 83       	st	Z, r19
    115a:	31 97       	sbiw	r30, 0x01	; 1
    115c:	36 e1       	ldi	r19, 0x16	; 22
    115e:	30 83       	st	Z, r19
    1160:	31 97       	sbiw	r30, 0x01	; 1
    1162:	37 e1       	ldi	r19, 0x17	; 23
    1164:	30 83       	st	Z, r19
    1166:	31 97       	sbiw	r30, 0x01	; 1
    1168:	38 e1       	ldi	r19, 0x18	; 24
    116a:	30 83       	st	Z, r19
    116c:	31 97       	sbiw	r30, 0x01	; 1
    116e:	39 e1       	ldi	r19, 0x19	; 25
    1170:	30 83       	st	Z, r19
    1172:	31 97       	sbiw	r30, 0x01	; 1
    1174:	30 e2       	ldi	r19, 0x20	; 32
    1176:	30 83       	st	Z, r19
    1178:	31 97       	sbiw	r30, 0x01	; 1
    117a:	31 e2       	ldi	r19, 0x21	; 33
    117c:	30 83       	st	Z, r19
    117e:	31 97       	sbiw	r30, 0x01	; 1
    1180:	20 83       	st	Z, r18
    1182:	31 97       	sbiw	r30, 0x01	; 1
    1184:	23 e2       	ldi	r18, 0x23	; 35
    1186:	20 83       	st	Z, r18
    1188:	31 97       	sbiw	r30, 0x01	; 1
    118a:	40 83       	st	Z, r20
    118c:	31 97       	sbiw	r30, 0x01	; 1
    118e:	50 83       	st	Z, r21
    1190:	31 97       	sbiw	r30, 0x01	; 1
    1192:	26 e2       	ldi	r18, 0x26	; 38
    1194:	20 83       	st	Z, r18
    1196:	31 97       	sbiw	r30, 0x01	; 1
    1198:	27 e2       	ldi	r18, 0x27	; 39
    119a:	20 83       	st	Z, r18
    119c:	31 97       	sbiw	r30, 0x01	; 1
    119e:	28 e2       	ldi	r18, 0x28	; 40
    11a0:	20 83       	st	Z, r18
    11a2:	31 97       	sbiw	r30, 0x01	; 1
    11a4:	29 e2       	ldi	r18, 0x29	; 41
    11a6:	20 83       	st	Z, r18
    11a8:	31 97       	sbiw	r30, 0x01	; 1
    11aa:	20 e3       	ldi	r18, 0x30	; 48
    11ac:	20 83       	st	Z, r18
    11ae:	31 97       	sbiw	r30, 0x01	; 1
    11b0:	21 e3       	ldi	r18, 0x31	; 49
    11b2:	20 83       	st	Z, r18
    11b4:	89 97       	sbiw	r24, 0x29	; 41
    11b6:	08 95       	ret

000011b8 <xPortStartScheduler>:
    11b8:	82 e0       	ldi	r24, 0x02	; 2
    11ba:	84 bd       	out	0x24, r24	; 36
    11bc:	16 bc       	out	0x26, r1	; 38
    11be:	80 e3       	ldi	r24, 0x30	; 48
    11c0:	87 bd       	out	0x27, r24	; 39
    11c2:	ee e6       	ldi	r30, 0x6E	; 110
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	82 60       	ori	r24, 0x02	; 2
    11ca:	80 83       	st	Z, r24
    11cc:	83 e0       	ldi	r24, 0x03	; 3
    11ce:	85 bd       	out	0x25, r24	; 37
    11d0:	a0 91 8d 08 	lds	r26, 0x088D
    11d4:	b0 91 8e 08 	lds	r27, 0x088E
    11d8:	cd 91       	ld	r28, X+
    11da:	cd bf       	out	0x3d, r28	; 61
    11dc:	dd 91       	ld	r29, X+
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	ff 91       	pop	r31
    11e2:	ef 91       	pop	r30
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	bf 91       	pop	r27
    11ea:	af 91       	pop	r26
    11ec:	9f 91       	pop	r25
    11ee:	8f 91       	pop	r24
    11f0:	7f 91       	pop	r23
    11f2:	6f 91       	pop	r22
    11f4:	5f 91       	pop	r21
    11f6:	4f 91       	pop	r20
    11f8:	3f 91       	pop	r19
    11fa:	2f 91       	pop	r18
    11fc:	1f 91       	pop	r17
    11fe:	0f 91       	pop	r16
    1200:	ff 90       	pop	r15
    1202:	ef 90       	pop	r14
    1204:	df 90       	pop	r13
    1206:	cf 90       	pop	r12
    1208:	bf 90       	pop	r11
    120a:	af 90       	pop	r10
    120c:	9f 90       	pop	r9
    120e:	8f 90       	pop	r8
    1210:	7f 90       	pop	r7
    1212:	6f 90       	pop	r6
    1214:	5f 90       	pop	r5
    1216:	4f 90       	pop	r4
    1218:	3f 90       	pop	r3
    121a:	2f 90       	pop	r2
    121c:	1f 90       	pop	r1
    121e:	0f 90       	pop	r0
    1220:	0c be       	out	0x3c, r0	; 60
    1222:	0f 90       	pop	r0
    1224:	0b be       	out	0x3b, r0	; 59
    1226:	0f 90       	pop	r0
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	0f 90       	pop	r0
    122c:	08 95       	ret
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	08 95       	ret

00001232 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1232:	0f 92       	push	r0
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	0f 92       	push	r0
    123a:	0b b6       	in	r0, 0x3b	; 59
    123c:	0f 92       	push	r0
    123e:	0c b6       	in	r0, 0x3c	; 60
    1240:	0f 92       	push	r0
    1242:	1f 92       	push	r1
    1244:	11 24       	eor	r1, r1
    1246:	2f 92       	push	r2
    1248:	3f 92       	push	r3
    124a:	4f 92       	push	r4
    124c:	5f 92       	push	r5
    124e:	6f 92       	push	r6
    1250:	7f 92       	push	r7
    1252:	8f 92       	push	r8
    1254:	9f 92       	push	r9
    1256:	af 92       	push	r10
    1258:	bf 92       	push	r11
    125a:	cf 92       	push	r12
    125c:	df 92       	push	r13
    125e:	ef 92       	push	r14
    1260:	ff 92       	push	r15
    1262:	0f 93       	push	r16
    1264:	1f 93       	push	r17
    1266:	2f 93       	push	r18
    1268:	3f 93       	push	r19
    126a:	4f 93       	push	r20
    126c:	5f 93       	push	r21
    126e:	6f 93       	push	r22
    1270:	7f 93       	push	r23
    1272:	8f 93       	push	r24
    1274:	9f 93       	push	r25
    1276:	af 93       	push	r26
    1278:	bf 93       	push	r27
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	ef 93       	push	r30
    1280:	ff 93       	push	r31
    1282:	a0 91 8d 08 	lds	r26, 0x088D
    1286:	b0 91 8e 08 	lds	r27, 0x088E
    128a:	0d b6       	in	r0, 0x3d	; 61
    128c:	0d 92       	st	X+, r0
    128e:	0e b6       	in	r0, 0x3e	; 62
    1290:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1292:	75 d7       	rcall	.+3818   	; 0x217e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1294:	a0 91 8d 08 	lds	r26, 0x088D
    1298:	b0 91 8e 08 	lds	r27, 0x088E
    129c:	cd 91       	ld	r28, X+
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	dd 91       	ld	r29, X+
    12a2:	de bf       	out	0x3e, r29	; 62
    12a4:	ff 91       	pop	r31
    12a6:	ef 91       	pop	r30
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	bf 91       	pop	r27
    12ae:	af 91       	pop	r26
    12b0:	9f 91       	pop	r25
    12b2:	8f 91       	pop	r24
    12b4:	7f 91       	pop	r23
    12b6:	6f 91       	pop	r22
    12b8:	5f 91       	pop	r21
    12ba:	4f 91       	pop	r20
    12bc:	3f 91       	pop	r19
    12be:	2f 91       	pop	r18
    12c0:	1f 91       	pop	r17
    12c2:	0f 91       	pop	r16
    12c4:	ff 90       	pop	r15
    12c6:	ef 90       	pop	r14
    12c8:	df 90       	pop	r13
    12ca:	cf 90       	pop	r12
    12cc:	bf 90       	pop	r11
    12ce:	af 90       	pop	r10
    12d0:	9f 90       	pop	r9
    12d2:	8f 90       	pop	r8
    12d4:	7f 90       	pop	r7
    12d6:	6f 90       	pop	r6
    12d8:	5f 90       	pop	r5
    12da:	4f 90       	pop	r4
    12dc:	3f 90       	pop	r3
    12de:	2f 90       	pop	r2
    12e0:	1f 90       	pop	r1
    12e2:	0f 90       	pop	r0
    12e4:	0c be       	out	0x3c, r0	; 60
    12e6:	0f 90       	pop	r0
    12e8:	0b be       	out	0x3b, r0	; 59
    12ea:	0f 90       	pop	r0
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	0f 90       	pop	r0

	asm volatile ( "ret" );
    12f0:	08 95       	ret

000012f2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    12f2:	0f 92       	push	r0
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	0f 92       	push	r0
    12fa:	0b b6       	in	r0, 0x3b	; 59
    12fc:	0f 92       	push	r0
    12fe:	0c b6       	in	r0, 0x3c	; 60
    1300:	0f 92       	push	r0
    1302:	1f 92       	push	r1
    1304:	11 24       	eor	r1, r1
    1306:	2f 92       	push	r2
    1308:	3f 92       	push	r3
    130a:	4f 92       	push	r4
    130c:	5f 92       	push	r5
    130e:	6f 92       	push	r6
    1310:	7f 92       	push	r7
    1312:	8f 92       	push	r8
    1314:	9f 92       	push	r9
    1316:	af 92       	push	r10
    1318:	bf 92       	push	r11
    131a:	cf 92       	push	r12
    131c:	df 92       	push	r13
    131e:	ef 92       	push	r14
    1320:	ff 92       	push	r15
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	2f 93       	push	r18
    1328:	3f 93       	push	r19
    132a:	4f 93       	push	r20
    132c:	5f 93       	push	r21
    132e:	6f 93       	push	r22
    1330:	7f 93       	push	r23
    1332:	8f 93       	push	r24
    1334:	9f 93       	push	r25
    1336:	af 93       	push	r26
    1338:	bf 93       	push	r27
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
    133e:	ef 93       	push	r30
    1340:	ff 93       	push	r31
    1342:	a0 91 8d 08 	lds	r26, 0x088D
    1346:	b0 91 8e 08 	lds	r27, 0x088E
    134a:	0d b6       	in	r0, 0x3d	; 61
    134c:	0d 92       	st	X+, r0
    134e:	0e b6       	in	r0, 0x3e	; 62
    1350:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    1352:	43 d5       	rcall	.+2694   	; 0x1dda <xTaskIncrementTick>
    1354:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    1356:	13 d7       	rcall	.+3622   	; 0x217e <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    1358:	a0 91 8d 08 	lds	r26, 0x088D
    135c:	b0 91 8e 08 	lds	r27, 0x088E
    1360:	cd 91       	ld	r28, X+
    1362:	cd bf       	out	0x3d, r28	; 61
    1364:	dd 91       	ld	r29, X+
    1366:	de bf       	out	0x3e, r29	; 62
    1368:	ff 91       	pop	r31
    136a:	ef 91       	pop	r30
    136c:	df 91       	pop	r29
    136e:	cf 91       	pop	r28
    1370:	bf 91       	pop	r27
    1372:	af 91       	pop	r26
    1374:	9f 91       	pop	r25
    1376:	8f 91       	pop	r24
    1378:	7f 91       	pop	r23
    137a:	6f 91       	pop	r22
    137c:	5f 91       	pop	r21
    137e:	4f 91       	pop	r20
    1380:	3f 91       	pop	r19
    1382:	2f 91       	pop	r18
    1384:	1f 91       	pop	r17
    1386:	0f 91       	pop	r16
    1388:	ff 90       	pop	r15
    138a:	ef 90       	pop	r14
    138c:	df 90       	pop	r13
    138e:	cf 90       	pop	r12
    1390:	bf 90       	pop	r11
    1392:	af 90       	pop	r10
    1394:	9f 90       	pop	r9
    1396:	8f 90       	pop	r8
    1398:	7f 90       	pop	r7
    139a:	6f 90       	pop	r6
    139c:	5f 90       	pop	r5
    139e:	4f 90       	pop	r4
    13a0:	3f 90       	pop	r3
    13a2:	2f 90       	pop	r2
    13a4:	1f 90       	pop	r1
    13a6:	0f 90       	pop	r0
    13a8:	0c be       	out	0x3c, r0	; 60
    13aa:	0f 90       	pop	r0
    13ac:	0b be       	out	0x3b, r0	; 59
    13ae:	0f 90       	pop	r0
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	0f 90       	pop	r0

	asm volatile ( "ret" );
    13b4:	08 95       	ret

000013b6 <__vector_21>:
	 * the context is saved at the start of vPortYieldFromTick().  The tick
	 * count is incremented after the context is saved.
	 */
	 ISR(TIMER0_COMPA_vect, ISR_NAKED)
	 {
		 vPortYieldFromTick();
    13b6:	9d df       	rcall	.-198    	; 0x12f2 <vPortYieldFromTick>
		 asm volatile ("reti");
    13b8:	18 95       	reti

000013ba <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    13ba:	1f 93       	push	r17
    13bc:	cf 93       	push	r28
    13be:	df 93       	push	r29
    13c0:	ec 01       	movw	r28, r24
    13c2:	14 2f       	mov	r17, r20
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    13c4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13c6:	81 11       	cpse	r24, r1
    13c8:	0c c0       	rjmp	.+24     	; 0x13e2 <prvCopyDataToQueue+0x28>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    13ca:	88 81       	ld	r24, Y
    13cc:	99 81       	ldd	r25, Y+1	; 0x01
    13ce:	89 2b       	or	r24, r25
    13d0:	09 f0       	breq	.+2      	; 0x13d4 <prvCopyDataToQueue+0x1a>
    13d2:	47 c0       	rjmp	.+142    	; 0x1462 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	9b 81       	ldd	r25, Y+3	; 0x03
    13d8:	0e 94 82 12 	call	0x2504	; 0x2504 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    13dc:	1b 82       	std	Y+3, r1	; 0x03
    13de:	1a 82       	std	Y+2, r1	; 0x02
    13e0:	47 c0       	rjmp	.+142    	; 0x1470 <prvCopyDataToQueue+0xb6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    13e2:	41 11       	cpse	r20, r1
    13e4:	18 c0       	rjmp	.+48     	; 0x1416 <prvCopyDataToQueue+0x5c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    13e6:	48 2f       	mov	r20, r24
    13e8:	50 e0       	ldi	r21, 0x00	; 0
    13ea:	8c 81       	ldd	r24, Y+4	; 0x04
    13ec:	9d 81       	ldd	r25, Y+5	; 0x05
    13ee:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    13f2:	2c 8d       	ldd	r18, Y+28	; 0x1c
    13f4:	8c 81       	ldd	r24, Y+4	; 0x04
    13f6:	9d 81       	ldd	r25, Y+5	; 0x05
    13f8:	82 0f       	add	r24, r18
    13fa:	91 1d       	adc	r25, r1
    13fc:	9d 83       	std	Y+5, r25	; 0x05
    13fe:	8c 83       	std	Y+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1400:	2a 81       	ldd	r18, Y+2	; 0x02
    1402:	3b 81       	ldd	r19, Y+3	; 0x03
    1404:	82 17       	cp	r24, r18
    1406:	93 07       	cpc	r25, r19
    1408:	70 f1       	brcs	.+92     	; 0x1466 <prvCopyDataToQueue+0xac>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    140a:	88 81       	ld	r24, Y
    140c:	99 81       	ldd	r25, Y+1	; 0x01
    140e:	9d 83       	std	Y+5, r25	; 0x05
    1410:	8c 83       	std	Y+4, r24	; 0x04
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	2d c0       	rjmp	.+90     	; 0x1470 <prvCopyDataToQueue+0xb6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1416:	48 2f       	mov	r20, r24
    1418:	50 e0       	ldi	r21, 0x00	; 0
    141a:	8e 81       	ldd	r24, Y+6	; 0x06
    141c:	9f 81       	ldd	r25, Y+7	; 0x07
    141e:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    1422:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	31 95       	neg	r19
    1428:	21 95       	neg	r18
    142a:	31 09       	sbc	r19, r1
    142c:	8e 81       	ldd	r24, Y+6	; 0x06
    142e:	9f 81       	ldd	r25, Y+7	; 0x07
    1430:	82 0f       	add	r24, r18
    1432:	93 1f       	adc	r25, r19
    1434:	9f 83       	std	Y+7, r25	; 0x07
    1436:	8e 83       	std	Y+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1438:	68 81       	ld	r22, Y
    143a:	79 81       	ldd	r23, Y+1	; 0x01
    143c:	86 17       	cp	r24, r22
    143e:	97 07       	cpc	r25, r23
    1440:	30 f4       	brcc	.+12     	; 0x144e <prvCopyDataToQueue+0x94>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	9b 81       	ldd	r25, Y+3	; 0x03
    1446:	28 0f       	add	r18, r24
    1448:	39 1f       	adc	r19, r25
    144a:	3f 83       	std	Y+7, r19	; 0x07
    144c:	2e 83       	std	Y+6, r18	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    144e:	12 30       	cpi	r17, 0x02	; 2
    1450:	61 f4       	brne	.+24     	; 0x146a <prvCopyDataToQueue+0xb0>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    1452:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1454:	88 23       	and	r24, r24
    1456:	59 f0       	breq	.+22     	; 0x146e <prvCopyDataToQueue+0xb4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
    1458:	8a 8d       	ldd	r24, Y+26	; 0x1a
    145a:	81 50       	subi	r24, 0x01	; 1
    145c:	8a 8f       	std	Y+26, r24	; 0x1a
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	07 c0       	rjmp	.+14     	; 0x1470 <prvCopyDataToQueue+0xb6>
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	05 c0       	rjmp	.+10     	; 0x1470 <prvCopyDataToQueue+0xb6>
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	03 c0       	rjmp	.+6      	; 0x1470 <prvCopyDataToQueue+0xb6>
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	01 c0       	rjmp	.+2      	; 0x1470 <prvCopyDataToQueue+0xb6>
    146e:	80 e0       	ldi	r24, 0x00	; 0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    1470:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1472:	9f 5f       	subi	r25, 0xFF	; 255
    1474:	9a 8f       	std	Y+26, r25	; 0x1a

	return xReturn;
}
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	1f 91       	pop	r17
    147c:	08 95       	ret

0000147e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    147e:	fc 01       	movw	r30, r24
    1480:	cb 01       	movw	r24, r22
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    1482:	44 8d       	ldd	r20, Z+28	; 0x1c
    1484:	44 23       	and	r20, r20
    1486:	a1 f0       	breq	.+40     	; 0x14b0 <prvCopyDataFromQueue+0x32>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    1488:	50 e0       	ldi	r21, 0x00	; 0
    148a:	26 81       	ldd	r18, Z+6	; 0x06
    148c:	37 81       	ldd	r19, Z+7	; 0x07
    148e:	24 0f       	add	r18, r20
    1490:	35 1f       	adc	r19, r21
    1492:	37 83       	std	Z+7, r19	; 0x07
    1494:	26 83       	std	Z+6, r18	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    1496:	62 81       	ldd	r22, Z+2	; 0x02
    1498:	73 81       	ldd	r23, Z+3	; 0x03
    149a:	26 17       	cp	r18, r22
    149c:	37 07       	cpc	r19, r23
    149e:	20 f0       	brcs	.+8      	; 0x14a8 <prvCopyDataFromQueue+0x2a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    14a0:	20 81       	ld	r18, Z
    14a2:	31 81       	ldd	r19, Z+1	; 0x01
    14a4:	37 83       	std	Z+7, r19	; 0x07
    14a6:	26 83       	std	Z+6, r18	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    14a8:	66 81       	ldd	r22, Z+6	; 0x06
    14aa:	77 81       	ldd	r23, Z+7	; 0x07
    14ac:	0c 94 4e 16 	jmp	0x2c9c	; 0x2c9c <memcpy>
    14b0:	08 95       	ret

000014b2 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    14b2:	0f 93       	push	r16
    14b4:	1f 93       	push	r17
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	ec 01       	movw	r28, r24

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	f8 94       	cli
    14c0:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    14c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14c4:	18 16       	cp	r1, r24
    14c6:	a4 f4       	brge	.+40     	; 0x14f0 <prvUnlockQueue+0x3e>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    14c8:	89 89       	ldd	r24, Y+17	; 0x11
    14ca:	88 23       	and	r24, r24
    14cc:	89 f0       	breq	.+34     	; 0x14f0 <prvUnlockQueue+0x3e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    14ce:	8e 01       	movw	r16, r28
    14d0:	0f 5e       	subi	r16, 0xEF	; 239
    14d2:	1f 4f       	sbci	r17, 0xFF	; 255
    14d4:	03 c0       	rjmp	.+6      	; 0x14dc <prvUnlockQueue+0x2a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    14d6:	89 89       	ldd	r24, Y+17	; 0x11
    14d8:	88 23       	and	r24, r24
    14da:	51 f0       	breq	.+20     	; 0x14f0 <prvUnlockQueue+0x3e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    14dc:	c8 01       	movw	r24, r16
    14de:	25 d7       	rcall	.+3658   	; 0x232a <xTaskRemoveFromEventList>
    14e0:	81 11       	cpse	r24, r1
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    14e2:	ae d7       	rcall	.+3932   	; 0x2440 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    14e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14e6:	81 50       	subi	r24, 0x01	; 1
    14e8:	8e 8f       	std	Y+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    14ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14ec:	18 16       	cp	r1, r24
    14ee:	9c f3       	brlt	.-26     	; 0x14d6 <prvUnlockQueue+0x24>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    14f0:	8f ef       	ldi	r24, 0xFF	; 255
    14f2:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    14f4:	0f 90       	pop	r0
    14f6:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	f8 94       	cli
    14fc:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    14fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1500:	18 16       	cp	r1, r24
    1502:	a4 f4       	brge	.+40     	; 0x152c <prvUnlockQueue+0x7a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1504:	88 85       	ldd	r24, Y+8	; 0x08
    1506:	88 23       	and	r24, r24
    1508:	89 f0       	breq	.+34     	; 0x152c <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    150a:	8e 01       	movw	r16, r28
    150c:	08 5f       	subi	r16, 0xF8	; 248
    150e:	1f 4f       	sbci	r17, 0xFF	; 255
    1510:	03 c0       	rjmp	.+6      	; 0x1518 <prvUnlockQueue+0x66>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1512:	88 85       	ldd	r24, Y+8	; 0x08
    1514:	88 23       	and	r24, r24
    1516:	51 f0       	breq	.+20     	; 0x152c <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1518:	c8 01       	movw	r24, r16
    151a:	07 d7       	rcall	.+3598   	; 0x232a <xTaskRemoveFromEventList>
    151c:	81 11       	cpse	r24, r1
				{
					vTaskMissedYield();
    151e:	90 d7       	rcall	.+3872   	; 0x2440 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    1520:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1522:	81 50       	subi	r24, 0x01	; 1
    1524:	8d 8f       	std	Y+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    1526:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1528:	18 16       	cp	r1, r24
    152a:	9c f3       	brlt	.-26     	; 0x1512 <prvUnlockQueue+0x60>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    152c:	8f ef       	ldi	r24, 0xFF	; 255
    152e:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    1530:	0f 90       	pop	r0
    1532:	0f be       	out	0x3f, r0	; 63
}
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	1f 91       	pop	r17
    153a:	0f 91       	pop	r16
    153c:	08 95       	ret

0000153e <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	ec 01       	movw	r28, r24
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    154a:	88 81       	ld	r24, Y
    154c:	99 81       	ldd	r25, Y+1	; 0x01
    154e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1554:	72 9f       	mul	r23, r18
    1556:	a0 01       	movw	r20, r0
    1558:	73 9f       	mul	r23, r19
    155a:	50 0d       	add	r21, r0
    155c:	11 24       	eor	r1, r1
    155e:	fc 01       	movw	r30, r24
    1560:	e4 0f       	add	r30, r20
    1562:	f5 1f       	adc	r31, r21
    1564:	fb 83       	std	Y+3, r31	; 0x03
    1566:	ea 83       	std	Y+2, r30	; 0x02
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1568:	1a 8e       	std	Y+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    156a:	9d 83       	std	Y+5, r25	; 0x05
    156c:	8c 83       	std	Y+4, r24	; 0x04
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    156e:	42 1b       	sub	r20, r18
    1570:	53 0b       	sbc	r21, r19
    1572:	84 0f       	add	r24, r20
    1574:	95 1f       	adc	r25, r21
    1576:	9f 83       	std	Y+7, r25	; 0x07
    1578:	8e 83       	std	Y+6, r24	; 0x06
		pxQueue->xRxLock = queueUNLOCKED;
    157a:	8f ef       	ldi	r24, 0xFF	; 255
    157c:	8d 8f       	std	Y+29, r24	; 0x1d
		pxQueue->xTxLock = queueUNLOCKED;
    157e:	8e 8f       	std	Y+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    1580:	61 11       	cpse	r22, r1
    1582:	0a c0       	rjmp	.+20     	; 0x1598 <xQueueGenericReset+0x5a>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1584:	88 85       	ldd	r24, Y+8	; 0x08
    1586:	88 23       	and	r24, r24
    1588:	69 f0       	breq	.+26     	; 0x15a4 <xQueueGenericReset+0x66>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    158a:	ce 01       	movw	r24, r28
    158c:	08 96       	adiw	r24, 0x08	; 8
    158e:	cd d6       	rcall	.+3482   	; 0x232a <xTaskRemoveFromEventList>
    1590:	81 30       	cpi	r24, 0x01	; 1
    1592:	41 f4       	brne	.+16     	; 0x15a4 <xQueueGenericReset+0x66>
				{
					queueYIELD_IF_USING_PREEMPTION();
    1594:	4e de       	rcall	.-868    	; 0x1232 <vPortYield>
    1596:	06 c0       	rjmp	.+12     	; 0x15a4 <xQueueGenericReset+0x66>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1598:	ce 01       	movw	r24, r28
    159a:	08 96       	adiw	r24, 0x08	; 8
    159c:	16 d8       	rcall	.-4052   	; 0x5ca <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    159e:	ce 01       	movw	r24, r28
    15a0:	41 96       	adiw	r24, 0x11	; 17
    15a2:	13 d8       	rcall	.-4058   	; 0x5ca <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    15a4:	0f 90       	pop	r0
    15a6:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	df 91       	pop	r29
    15ac:	cf 91       	pop	r28
    15ae:	08 95       	ret

000015b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    15b0:	0f 93       	push	r16
    15b2:	1f 93       	push	r17
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
    15b8:	18 2f       	mov	r17, r24
    15ba:	06 2f       	mov	r16, r22
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
    15bc:	88 23       	and	r24, r24
    15be:	e9 f0       	breq	.+58     	; 0x15fa <xQueueGenericCreate+0x4a>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    15c0:	8f e1       	ldi	r24, 0x1F	; 31
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	0e 94 af 02 	call	0x55e	; 0x55e <pvPortMalloc>
    15c8:	ec 01       	movw	r28, r24
		if( pxNewQueue != NULL )
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	c1 f0       	breq	.+48     	; 0x15fe <xQueueGenericCreate+0x4e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    15ce:	10 9f       	mul	r17, r16
    15d0:	c0 01       	movw	r24, r0
    15d2:	11 24       	eor	r1, r1

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
    15d4:	01 96       	adiw	r24, 0x01	; 1
    15d6:	0e 94 af 02 	call	0x55e	; 0x55e <pvPortMalloc>
    15da:	99 83       	std	Y+1, r25	; 0x01
    15dc:	88 83       	st	Y, r24
			if( pxNewQueue->pcHead != NULL )
    15de:	89 2b       	or	r24, r25
    15e0:	31 f0       	breq	.+12     	; 0x15ee <xQueueGenericCreate+0x3e>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    15e2:	1b 8f       	std	Y+27, r17	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    15e4:	0c 8f       	std	Y+28, r16	; 0x1c
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    15e6:	61 e0       	ldi	r22, 0x01	; 1
    15e8:	ce 01       	movw	r24, r28
    15ea:	a9 df       	rcall	.-174    	; 0x153e <xQueueGenericReset>
    15ec:	08 c0       	rjmp	.+16     	; 0x15fe <xQueueGenericCreate+0x4e>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    15ee:	ce 01       	movw	r24, r28
    15f0:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <vPortFree>

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
    15f4:	c0 e0       	ldi	r28, 0x00	; 0
    15f6:	d0 e0       	ldi	r29, 0x00	; 0
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <xQueueGenericCreate+0x4e>
    15fa:	c0 e0       	ldi	r28, 0x00	; 0
    15fc:	d0 e0       	ldi	r29, 0x00	; 0
	}

	configASSERT( xReturn );

	return xReturn;
}
    15fe:	ce 01       	movw	r24, r28
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	1f 91       	pop	r17
    1606:	0f 91       	pop	r16
    1608:	08 95       	ret

0000160a <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    160a:	9f 92       	push	r9
    160c:	af 92       	push	r10
    160e:	bf 92       	push	r11
    1610:	cf 92       	push	r12
    1612:	df 92       	push	r13
    1614:	ef 92       	push	r14
    1616:	ff 92       	push	r15
    1618:	0f 93       	push	r16
    161a:	1f 93       	push	r17
    161c:	cf 93       	push	r28
    161e:	df 93       	push	r29
    1620:	00 d0       	rcall	.+0      	; 0x1622 <xQueueGenericSend+0x18>
    1622:	1f 92       	push	r1
    1624:	1f 92       	push	r1
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    162a:	8c 01       	movw	r16, r24
    162c:	6b 01       	movw	r12, r22
    162e:	5d 83       	std	Y+5, r21	; 0x05
    1630:	4c 83       	std	Y+4, r20	; 0x04
    1632:	a2 2e       	mov	r10, r18
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    1634:	b1 2c       	mov	r11, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    1636:	99 24       	eor	r9, r9
    1638:	93 94       	inc	r9
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    163a:	7c 01       	movw	r14, r24
    163c:	88 e0       	ldi	r24, 0x08	; 8
    163e:	e8 0e       	add	r14, r24
    1640:	f1 1c       	adc	r15, r1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	f8 94       	cli
    1646:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1648:	f8 01       	movw	r30, r16
    164a:	92 8d       	ldd	r25, Z+26	; 0x1a
    164c:	83 8d       	ldd	r24, Z+27	; 0x1b
    164e:	98 17       	cp	r25, r24
    1650:	18 f0       	brcs	.+6      	; 0x1658 <xQueueGenericSend+0x4e>
    1652:	f2 e0       	ldi	r31, 0x02	; 2
    1654:	af 12       	cpse	r10, r31
    1656:	15 c0       	rjmp	.+42     	; 0x1682 <xQueueGenericSend+0x78>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1658:	4a 2d       	mov	r20, r10
    165a:	b6 01       	movw	r22, r12
    165c:	c8 01       	movw	r24, r16
    165e:	ad de       	rcall	.-678    	; 0x13ba <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1660:	f8 01       	movw	r30, r16
    1662:	91 89       	ldd	r25, Z+17	; 0x11
    1664:	99 23       	and	r25, r25
    1666:	39 f0       	breq	.+14     	; 0x1676 <xQueueGenericSend+0x6c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    1668:	c8 01       	movw	r24, r16
    166a:	41 96       	adiw	r24, 0x11	; 17
    166c:	5e d6       	rcall	.+3260   	; 0x232a <xTaskRemoveFromEventList>
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	21 f4       	brne	.+8      	; 0x167a <xQueueGenericSend+0x70>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    1672:	df dd       	rcall	.-1090   	; 0x1232 <vPortYield>
    1674:	02 c0       	rjmp	.+4      	; 0x167a <xQueueGenericSend+0x70>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    1676:	81 11       	cpse	r24, r1
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    1678:	dc dd       	rcall	.-1096   	; 0x1232 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    167a:	0f 90       	pop	r0
    167c:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	46 c0       	rjmp	.+140    	; 0x170e <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1682:	ec 81       	ldd	r30, Y+4	; 0x04
    1684:	fd 81       	ldd	r31, Y+5	; 0x05
    1686:	ef 2b       	or	r30, r31
    1688:	21 f4       	brne	.+8      	; 0x1692 <xQueueGenericSend+0x88>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    168a:	0f 90       	pop	r0
    168c:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	3e c0       	rjmp	.+124    	; 0x170e <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    1692:	b1 10       	cpse	r11, r1
    1694:	04 c0       	rjmp	.+8      	; 0x169e <xQueueGenericSend+0x94>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1696:	ce 01       	movw	r24, r28
    1698:	01 96       	adiw	r24, 0x01	; 1
    169a:	8f d6       	rcall	.+3358   	; 0x23ba <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    169c:	b9 2c       	mov	r11, r9
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    169e:	0f 90       	pop	r0
    16a0:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    16a2:	86 d3       	rcall	.+1804   	; 0x1db0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	0f 92       	push	r0
    16aa:	f8 01       	movw	r30, r16
    16ac:	85 8d       	ldd	r24, Z+29	; 0x1d
    16ae:	8f 3f       	cpi	r24, 0xFF	; 255
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <xQueueGenericSend+0xaa>
    16b2:	15 8e       	std	Z+29, r1	; 0x1d
    16b4:	f8 01       	movw	r30, r16
    16b6:	86 8d       	ldd	r24, Z+30	; 0x1e
    16b8:	8f 3f       	cpi	r24, 0xFF	; 255
    16ba:	09 f4       	brne	.+2      	; 0x16be <xQueueGenericSend+0xb4>
    16bc:	16 8e       	std	Z+30, r1	; 0x1e
    16be:	0f 90       	pop	r0
    16c0:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    16c2:	be 01       	movw	r22, r28
    16c4:	6c 5f       	subi	r22, 0xFC	; 252
    16c6:	7f 4f       	sbci	r23, 0xFF	; 255
    16c8:	ce 01       	movw	r24, r28
    16ca:	01 96       	adiw	r24, 0x01	; 1
    16cc:	81 d6       	rcall	.+3330   	; 0x23d0 <xTaskCheckForTimeOut>
    16ce:	81 11       	cpse	r24, r1
    16d0:	1a c0       	rjmp	.+52     	; 0x1706 <xQueueGenericSend+0xfc>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    16d8:	f8 01       	movw	r30, r16
    16da:	92 8d       	ldd	r25, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    16dc:	0f 90       	pop	r0
    16de:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    16e0:	f8 01       	movw	r30, r16
    16e2:	83 8d       	ldd	r24, Z+27	; 0x1b
    16e4:	98 13       	cpse	r25, r24
    16e6:	0b c0       	rjmp	.+22     	; 0x16fe <xQueueGenericSend+0xf4>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    16e8:	6c 81       	ldd	r22, Y+4	; 0x04
    16ea:	7d 81       	ldd	r23, Y+5	; 0x05
    16ec:	c7 01       	movw	r24, r14
    16ee:	f2 d5       	rcall	.+3044   	; 0x22d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    16f0:	c8 01       	movw	r24, r16
    16f2:	df de       	rcall	.-578    	; 0x14b2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    16f4:	30 d4       	rcall	.+2144   	; 0x1f56 <xTaskResumeAll>
    16f6:	81 11       	cpse	r24, r1
    16f8:	a4 cf       	rjmp	.-184    	; 0x1642 <xQueueGenericSend+0x38>
				{
					portYIELD_WITHIN_API();
    16fa:	9b dd       	rcall	.-1226   	; 0x1232 <vPortYield>
    16fc:	a2 cf       	rjmp	.-188    	; 0x1642 <xQueueGenericSend+0x38>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    16fe:	c8 01       	movw	r24, r16
    1700:	d8 de       	rcall	.-592    	; 0x14b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1702:	29 d4       	rcall	.+2130   	; 0x1f56 <xTaskResumeAll>
    1704:	9e cf       	rjmp	.-196    	; 0x1642 <xQueueGenericSend+0x38>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    1706:	c8 01       	movw	r24, r16
    1708:	d4 de       	rcall	.-600    	; 0x14b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    170a:	25 d4       	rcall	.+2122   	; 0x1f56 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    170c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	1f 91       	pop	r17
    171e:	0f 91       	pop	r16
    1720:	ff 90       	pop	r15
    1722:	ef 90       	pop	r14
    1724:	df 90       	pop	r13
    1726:	cf 90       	pop	r12
    1728:	bf 90       	pop	r11
    172a:	af 90       	pop	r10
    172c:	9f 90       	pop	r9
    172e:	08 95       	ret

00001730 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    1734:	8f e1       	ldi	r24, 0x1F	; 31
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	0e 94 af 02 	call	0x55e	; 0x55e <pvPortMalloc>
    173c:	ec 01       	movw	r28, r24
		if( pxNewQueue != NULL )
    173e:	00 97       	sbiw	r24, 0x00	; 0
    1740:	f1 f0       	breq	.+60     	; 0x177e <xQueueCreateMutex+0x4e>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    1742:	1b 82       	std	Y+3, r1	; 0x03
    1744:	1a 82       	std	Y+2, r1	; 0x02
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    1746:	19 82       	std	Y+1, r1	; 0x01
    1748:	18 82       	st	Y, r1

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    174a:	1d 82       	std	Y+5, r1	; 0x05
    174c:	1c 82       	std	Y+4, r1	; 0x04
			pxNewQueue->u.pcReadFrom = NULL;
    174e:	1f 82       	std	Y+7, r1	; 0x07
    1750:	1e 82       	std	Y+6, r1	; 0x06

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1752:	1a 8e       	std	Y+26, r1	; 0x1a
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	8b 8f       	std	Y+27, r24	; 0x1b
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
    1758:	1c 8e       	std	Y+28, r1	; 0x1c
			pxNewQueue->xRxLock = queueUNLOCKED;
    175a:	8f ef       	ldi	r24, 0xFF	; 255
    175c:	8d 8f       	std	Y+29, r24	; 0x1d
			pxNewQueue->xTxLock = queueUNLOCKED;
    175e:	8e 8f       	std	Y+30, r24	; 0x1e
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    1760:	ce 01       	movw	r24, r28
    1762:	08 96       	adiw	r24, 0x08	; 8
    1764:	0e 94 e5 02 	call	0x5ca	; 0x5ca <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    1768:	ce 01       	movw	r24, r28
    176a:	41 96       	adiw	r24, 0x11	; 17
    176c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	40 e0       	ldi	r20, 0x00	; 0
    1774:	50 e0       	ldi	r21, 0x00	; 0
    1776:	60 e0       	ldi	r22, 0x00	; 0
    1778:	70 e0       	ldi	r23, 0x00	; 0
    177a:	ce 01       	movw	r24, r28
    177c:	46 df       	rcall	.-372    	; 0x160a <xQueueGenericSend>
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
    177e:	ce 01       	movw	r24, r28
    1780:	df 91       	pop	r29
    1782:	cf 91       	pop	r28
    1784:	08 95       	ret

00001786 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    1786:	0f 93       	push	r16
    1788:	1f 93       	push	r17
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
    178e:	ec 01       	movw	r28, r24
    1790:	8a 01       	movw	r16, r20
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1792:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1794:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1796:	98 17       	cp	r25, r24
    1798:	10 f0       	brcs	.+4      	; 0x179e <xQueueGenericSendFromISR+0x18>
    179a:	22 30       	cpi	r18, 0x02	; 2
    179c:	11 f5       	brne	.+68     	; 0x17e2 <xQueueGenericSendFromISR+0x5c>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			if( prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition ) != pdFALSE )
    179e:	42 2f       	mov	r20, r18
    17a0:	ce 01       	movw	r24, r28
    17a2:	0b de       	rcall	.-1002   	; 0x13ba <prvCopyDataToQueue>
    17a4:	88 23       	and	r24, r24
    17a6:	31 f0       	breq	.+12     	; 0x17b4 <xQueueGenericSendFromISR+0x2e>
			{
				/* This is a special case that can only be executed if a task
				holds multiple mutexes and then gives the mutexes back in an
				order that is different to that in which they were taken. */
				if( pxHigherPriorityTaskWoken != NULL )
    17a8:	01 15       	cp	r16, r1
    17aa:	11 05       	cpc	r17, r1
    17ac:	19 f0       	breq	.+6      	; 0x17b4 <xQueueGenericSendFromISR+0x2e>
				{
					*pxHigherPriorityTaskWoken = pdTRUE;
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	f8 01       	movw	r30, r16
    17b2:	80 83       	st	Z, r24
				}
			}

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    17b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17b6:	8f 3f       	cpi	r24, 0xFF	; 255
    17b8:	79 f4       	brne	.+30     	; 0x17d8 <xQueueGenericSendFromISR+0x52>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    17ba:	89 89       	ldd	r24, Y+17	; 0x11
    17bc:	88 23       	and	r24, r24
    17be:	99 f0       	breq	.+38     	; 0x17e6 <xQueueGenericSendFromISR+0x60>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    17c0:	ce 01       	movw	r24, r28
    17c2:	41 96       	adiw	r24, 0x11	; 17
    17c4:	b2 d5       	rcall	.+2916   	; 0x232a <xTaskRemoveFromEventList>
    17c6:	88 23       	and	r24, r24
    17c8:	81 f0       	breq	.+32     	; 0x17ea <xQueueGenericSendFromISR+0x64>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    17ca:	01 15       	cp	r16, r1
    17cc:	11 05       	cpc	r17, r1
    17ce:	79 f0       	breq	.+30     	; 0x17ee <xQueueGenericSendFromISR+0x68>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	f8 01       	movw	r30, r16
    17d4:	80 83       	st	Z, r24
    17d6:	0c c0       	rjmp	.+24     	; 0x17f0 <xQueueGenericSendFromISR+0x6a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    17d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17da:	8f 5f       	subi	r24, 0xFF	; 255
    17dc:	8e 8f       	std	Y+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	07 c0       	rjmp	.+14     	; 0x17f0 <xQueueGenericSendFromISR+0x6a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	05 c0       	rjmp	.+10     	; 0x17f0 <xQueueGenericSendFromISR+0x6a>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	03 c0       	rjmp	.+6      	; 0x17f0 <xQueueGenericSendFromISR+0x6a>
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	01 c0       	rjmp	.+2      	; 0x17f0 <xQueueGenericSendFromISR+0x6a>
    17ee:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	08 95       	ret

000017fa <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    17fa:	9f 92       	push	r9
    17fc:	af 92       	push	r10
    17fe:	bf 92       	push	r11
    1800:	cf 92       	push	r12
    1802:	df 92       	push	r13
    1804:	ef 92       	push	r14
    1806:	ff 92       	push	r15
    1808:	0f 93       	push	r16
    180a:	1f 93       	push	r17
    180c:	cf 93       	push	r28
    180e:	df 93       	push	r29
    1810:	00 d0       	rcall	.+0      	; 0x1812 <xQueueGenericReceive+0x18>
    1812:	1f 92       	push	r1
    1814:	1f 92       	push	r1
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	8c 01       	movw	r16, r24
    181c:	6b 01       	movw	r12, r22
    181e:	5d 83       	std	Y+5, r21	; 0x05
    1820:	4c 83       	std	Y+4, r20	; 0x04
    1822:	b2 2e       	mov	r11, r18
BaseType_t xEntryTimeSet = pdFALSE;
    1824:	a1 2c       	mov	r10, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    1826:	99 24       	eor	r9, r9
    1828:	93 94       	inc	r9
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    182a:	7c 01       	movw	r14, r24
    182c:	81 e1       	ldi	r24, 0x11	; 17
    182e:	e8 0e       	add	r14, r24
    1830:	f1 1c       	adc	r15, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    1838:	f8 01       	movw	r30, r16
    183a:	82 8d       	ldd	r24, Z+26	; 0x1a
    183c:	88 23       	and	r24, r24
    183e:	69 f1       	breq	.+90     	; 0x189a <xQueueGenericReceive+0xa0>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    1840:	e6 80       	ldd	r14, Z+6	; 0x06
    1842:	f7 80       	ldd	r15, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1844:	b6 01       	movw	r22, r12
    1846:	c8 01       	movw	r24, r16
    1848:	1a de       	rcall	.-972    	; 0x147e <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    184a:	b1 10       	cpse	r11, r1
    184c:	17 c0       	rjmp	.+46     	; 0x187c <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    184e:	f8 01       	movw	r30, r16
    1850:	82 8d       	ldd	r24, Z+26	; 0x1a
    1852:	81 50       	subi	r24, 0x01	; 1
    1854:	82 8f       	std	Z+26, r24	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1856:	80 81       	ld	r24, Z
    1858:	91 81       	ldd	r25, Z+1	; 0x01
    185a:	89 2b       	or	r24, r25
    185c:	21 f4       	brne	.+8      	; 0x1866 <xQueueGenericReceive+0x6c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    185e:	91 d6       	rcall	.+3362   	; 0x2582 <pvTaskIncrementMutexHeldCount>
    1860:	f8 01       	movw	r30, r16
    1862:	93 83       	std	Z+3, r25	; 0x03
    1864:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1866:	f8 01       	movw	r30, r16
    1868:	80 85       	ldd	r24, Z+8	; 0x08
    186a:	88 23       	and	r24, r24
    186c:	91 f0       	breq	.+36     	; 0x1892 <xQueueGenericReceive+0x98>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    186e:	c8 01       	movw	r24, r16
    1870:	08 96       	adiw	r24, 0x08	; 8
    1872:	5b d5       	rcall	.+2742   	; 0x232a <xTaskRemoveFromEventList>
    1874:	81 30       	cpi	r24, 0x01	; 1
    1876:	69 f4       	brne	.+26     	; 0x1892 <xQueueGenericReceive+0x98>
						{
							queueYIELD_IF_USING_PREEMPTION();
    1878:	dc dc       	rcall	.-1608   	; 0x1232 <vPortYield>
    187a:	0b c0       	rjmp	.+22     	; 0x1892 <xQueueGenericReceive+0x98>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    187c:	f8 01       	movw	r30, r16
    187e:	f7 82       	std	Z+7, r15	; 0x07
    1880:	e6 82       	std	Z+6, r14	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1882:	81 89       	ldd	r24, Z+17	; 0x11
    1884:	88 23       	and	r24, r24
    1886:	29 f0       	breq	.+10     	; 0x1892 <xQueueGenericReceive+0x98>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1888:	c8 01       	movw	r24, r16
    188a:	41 96       	adiw	r24, 0x11	; 17
    188c:	4e d5       	rcall	.+2716   	; 0x232a <xTaskRemoveFromEventList>
    188e:	81 11       	cpse	r24, r1
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    1890:	d0 dc       	rcall	.-1632   	; 0x1232 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    1892:	0f 90       	pop	r0
    1894:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	52 c0       	rjmp	.+164    	; 0x193e <xQueueGenericReceive+0x144>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    189a:	4c 81       	ldd	r20, Y+4	; 0x04
    189c:	5d 81       	ldd	r21, Y+5	; 0x05
    189e:	45 2b       	or	r20, r21
    18a0:	21 f4       	brne	.+8      	; 0x18aa <xQueueGenericReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    18a2:	0f 90       	pop	r0
    18a4:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	4a c0       	rjmp	.+148    	; 0x193e <xQueueGenericReceive+0x144>
				}
				else if( xEntryTimeSet == pdFALSE )
    18aa:	a1 10       	cpse	r10, r1
    18ac:	04 c0       	rjmp	.+8      	; 0x18b6 <xQueueGenericReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    18ae:	ce 01       	movw	r24, r28
    18b0:	01 96       	adiw	r24, 0x01	; 1
    18b2:	83 d5       	rcall	.+2822   	; 0x23ba <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    18b4:	a9 2c       	mov	r10, r9
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    18b6:	0f 90       	pop	r0
    18b8:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    18ba:	7a d2       	rcall	.+1268   	; 0x1db0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    18bc:	0f b6       	in	r0, 0x3f	; 63
    18be:	f8 94       	cli
    18c0:	0f 92       	push	r0
    18c2:	f8 01       	movw	r30, r16
    18c4:	85 8d       	ldd	r24, Z+29	; 0x1d
    18c6:	8f 3f       	cpi	r24, 0xFF	; 255
    18c8:	09 f4       	brne	.+2      	; 0x18cc <xQueueGenericReceive+0xd2>
    18ca:	15 8e       	std	Z+29, r1	; 0x1d
    18cc:	f8 01       	movw	r30, r16
    18ce:	86 8d       	ldd	r24, Z+30	; 0x1e
    18d0:	8f 3f       	cpi	r24, 0xFF	; 255
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <xQueueGenericReceive+0xdc>
    18d4:	16 8e       	std	Z+30, r1	; 0x1e
    18d6:	0f 90       	pop	r0
    18d8:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    18da:	be 01       	movw	r22, r28
    18dc:	6c 5f       	subi	r22, 0xFC	; 252
    18de:	7f 4f       	sbci	r23, 0xFF	; 255
    18e0:	ce 01       	movw	r24, r28
    18e2:	01 96       	adiw	r24, 0x01	; 1
    18e4:	75 d5       	rcall	.+2794   	; 0x23d0 <xTaskCheckForTimeOut>
    18e6:	81 11       	cpse	r24, r1
    18e8:	26 c0       	rjmp	.+76     	; 0x1936 <xQueueGenericReceive+0x13c>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	f8 94       	cli
    18ee:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    18f0:	f8 01       	movw	r30, r16
    18f2:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    18f4:	0f 90       	pop	r0
    18f6:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    18f8:	81 11       	cpse	r24, r1
    18fa:	19 c0       	rjmp	.+50     	; 0x192e <xQueueGenericReceive+0x134>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    18fc:	f8 01       	movw	r30, r16
    18fe:	80 81       	ld	r24, Z
    1900:	91 81       	ldd	r25, Z+1	; 0x01
    1902:	89 2b       	or	r24, r25
    1904:	49 f4       	brne	.+18     	; 0x1918 <xQueueGenericReceive+0x11e>
					{
						taskENTER_CRITICAL();
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	f8 94       	cli
    190a:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    190c:	f8 01       	movw	r30, r16
    190e:	82 81       	ldd	r24, Z+2	; 0x02
    1910:	93 81       	ldd	r25, Z+3	; 0x03
    1912:	9a d5       	rcall	.+2868   	; 0x2448 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    1914:	0f 90       	pop	r0
    1916:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1918:	6c 81       	ldd	r22, Y+4	; 0x04
    191a:	7d 81       	ldd	r23, Y+5	; 0x05
    191c:	c7 01       	movw	r24, r14
    191e:	da d4       	rcall	.+2484   	; 0x22d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1920:	c8 01       	movw	r24, r16
    1922:	c7 dd       	rcall	.-1138   	; 0x14b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1924:	18 d3       	rcall	.+1584   	; 0x1f56 <xTaskResumeAll>
    1926:	81 11       	cpse	r24, r1
    1928:	84 cf       	rjmp	.-248    	; 0x1832 <xQueueGenericReceive+0x38>
				{
					portYIELD_WITHIN_API();
    192a:	83 dc       	rcall	.-1786   	; 0x1232 <vPortYield>
    192c:	82 cf       	rjmp	.-252    	; 0x1832 <xQueueGenericReceive+0x38>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    192e:	c8 01       	movw	r24, r16
    1930:	c0 dd       	rcall	.-1152   	; 0x14b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1932:	11 d3       	rcall	.+1570   	; 0x1f56 <xTaskResumeAll>
    1934:	7e cf       	rjmp	.-260    	; 0x1832 <xQueueGenericReceive+0x38>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1936:	c8 01       	movw	r24, r16
    1938:	bc dd       	rcall	.-1160   	; 0x14b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    193a:	0d d3       	rcall	.+1562   	; 0x1f56 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    193c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	df 91       	pop	r29
    194a:	cf 91       	pop	r28
    194c:	1f 91       	pop	r17
    194e:	0f 91       	pop	r16
    1950:	ff 90       	pop	r15
    1952:	ef 90       	pop	r14
    1954:	df 90       	pop	r13
    1956:	cf 90       	pop	r12
    1958:	bf 90       	pop	r11
    195a:	af 90       	pop	r10
    195c:	9f 90       	pop	r9
    195e:	08 95       	ret

00001960 <ringBufferInit>:

#include <ringBuffer.h>


void ringBufferInit(ringBuffer *ring, unsigned char* buffer, unsigned char size)
{
    1960:	fc 01       	movw	r30, r24
	ring->rBuffer = buffer;
    1962:	71 83       	std	Z+1, r23	; 0x01
    1964:	60 83       	st	Z, r22
	ring->rSize = size;
    1966:	42 83       	std	Z+2, r20	; 0x02
	ring->rIndex = 0;
    1968:	14 82       	std	Z+4, r1	; 0x04
	ring->rLength = 0;	 
    196a:	13 82       	std	Z+3, r1	; 0x03
    196c:	08 95       	ret

0000196e <ringBufferPeek>:
}

unsigned char ringBufferPeek(ringBuffer *ring)
{
	   return ring->rBuffer[ ring->rIndex ];	
    196e:	dc 01       	movw	r26, r24
    1970:	14 96       	adiw	r26, 0x04	; 4
    1972:	2c 91       	ld	r18, X
    1974:	14 97       	sbiw	r26, 0x04	; 4
    1976:	ed 91       	ld	r30, X+
    1978:	fc 91       	ld	r31, X
    197a:	e2 0f       	add	r30, r18
    197c:	f1 1d       	adc	r31, r1
}
    197e:	80 81       	ld	r24, Z
    1980:	08 95       	ret

00001982 <ringBufferPop>:

// int?
unsigned char ringBufferPop(ringBuffer *ring)
{
    1982:	fc 01       	movw	r30, r24
    unsigned char element;
	
            element = ring->rBuffer[ ring->rIndex ];
    1984:	94 81       	ldd	r25, Z+4	; 0x04
    1986:	a0 81       	ld	r26, Z
    1988:	b1 81       	ldd	r27, Z+1	; 0x01
    198a:	a9 0f       	add	r26, r25
    198c:	b1 1d       	adc	r27, r1
    198e:	8c 91       	ld	r24, X
            ring->rIndex ++;
    1990:	9f 5f       	subi	r25, 0xFF	; 255
    1992:	94 83       	std	Z+4, r25	; 0x04
            if ( ring->rIndex >= ring->rSize )
    1994:	22 81       	ldd	r18, Z+2	; 0x02
    1996:	92 17       	cp	r25, r18
    1998:	10 f0       	brcs	.+4      	; 0x199e <ringBufferPop+0x1c>
            {
                ring->rIndex -= ring->rSize;
    199a:	92 1b       	sub	r25, r18
    199c:	94 83       	std	Z+4, r25	; 0x04
            }
            ring->rLength --;
    199e:	93 81       	ldd	r25, Z+3	; 0x03
    19a0:	91 50       	subi	r25, 0x01	; 1
    19a2:	93 83       	std	Z+3, r25	; 0x03
    
    return element;
}
    19a4:	08 95       	ret

000019a6 <ringBufferPush>:



void ringBufferPush( ringBuffer *ring, unsigned char element )
{
    19a6:	fc 01       	movw	r30, r24
    19a8:	46 2f       	mov	r20, r22
    
        if ( ring->rLength < ring->rSize )
    19aa:	83 81       	ldd	r24, Z+3	; 0x03
    19ac:	22 81       	ldd	r18, Z+2	; 0x02
    19ae:	82 17       	cp	r24, r18
    19b0:	80 f4       	brcc	.+32     	; 0x19d2 <ringBufferPush+0x2c>
        {
            ring->rBuffer[ ( ring->rIndex + ring->rLength ) % ring->rSize ] = element;
    19b2:	34 81       	ldd	r19, Z+4	; 0x04
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	83 0f       	add	r24, r19
    19b8:	91 1d       	adc	r25, r1
    19ba:	62 2f       	mov	r22, r18
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__divmodhi4>
    19c2:	a0 81       	ld	r26, Z
    19c4:	b1 81       	ldd	r27, Z+1	; 0x01
    19c6:	a8 0f       	add	r26, r24
    19c8:	b9 1f       	adc	r27, r25
    19ca:	4c 93       	st	X, r20
            ring->rLength++;
    19cc:	83 81       	ldd	r24, Z+3	; 0x03
    19ce:	8f 5f       	subi	r24, 0xFF	; 255
    19d0:	83 83       	std	Z+3, r24	; 0x03
    19d2:	08 95       	ret

000019d4 <ringBufferFull>:


// return 1 if full
// return 0 if not full
char ringBufferFull(ringBuffer *ring)
{
    19d4:	fc 01       	movw	r30, r24
   return (ring->rSize == ring->rLength);
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	22 81       	ldd	r18, Z+2	; 0x02
    19da:	93 81       	ldd	r25, Z+3	; 0x03
    19dc:	29 13       	cpse	r18, r25
    19de:	80 e0       	ldi	r24, 0x00	; 0
}
    19e0:	08 95       	ret

000019e2 <ringBufferNotEmpty>:

// return 1 if not empty
// return 0 if empty
char ringBufferNotEmpty(ringBuffer *ring)
{
	return (ring->rLength > 0);
    19e2:	21 e0       	ldi	r18, 0x01	; 1
    19e4:	fc 01       	movw	r30, r24
    19e6:	83 81       	ldd	r24, Z+3	; 0x03
    19e8:	81 11       	cpse	r24, r1
    19ea:	01 c0       	rjmp	.+2      	; 0x19ee <ringBufferNotEmpty+0xc>
    19ec:	20 e0       	ldi	r18, 0x00	; 0
}
    19ee:	82 2f       	mov	r24, r18
    19f0:	08 95       	ret

000019f2 <prvResetNextTaskUnblockTime>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
    19f2:	e0 91 4c 08 	lds	r30, 0x084C
    19f6:	f0 91 4d 08 	lds	r31, 0x084D
    19fa:	80 81       	ld	r24, Z
    19fc:	81 11       	cpse	r24, r1
    19fe:	07 c0       	rjmp	.+14     	; 0x1a0e <prvResetNextTaskUnblockTime+0x1c>
    1a00:	8f ef       	ldi	r24, 0xFF	; 255
    1a02:	9f ef       	ldi	r25, 0xFF	; 255
    1a04:	90 93 05 02 	sts	0x0205, r25
    1a08:	80 93 04 02 	sts	0x0204, r24
    1a0c:	08 95       	ret
    1a0e:	e0 91 4c 08 	lds	r30, 0x084C
    1a12:	f0 91 4d 08 	lds	r31, 0x084D
    1a16:	05 80       	ldd	r0, Z+5	; 0x05
    1a18:	f6 81       	ldd	r31, Z+6	; 0x06
    1a1a:	e0 2d       	mov	r30, r0
    1a1c:	06 80       	ldd	r0, Z+6	; 0x06
    1a1e:	f7 81       	ldd	r31, Z+7	; 0x07
    1a20:	e0 2d       	mov	r30, r0
    1a22:	82 81       	ldd	r24, Z+2	; 0x02
    1a24:	93 81       	ldd	r25, Z+3	; 0x03
    1a26:	90 93 05 02 	sts	0x0205, r25
    1a2a:	80 93 04 02 	sts	0x0204, r24
    1a2e:	08 95       	ret

00001a30 <prvAddCurrentTaskToDelayedList>:
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	ec 01       	movw	r28, r24
    1a36:	e0 91 8d 08 	lds	r30, 0x088D
    1a3a:	f0 91 8e 08 	lds	r31, 0x088E
    1a3e:	93 83       	std	Z+3, r25	; 0x03
    1a40:	82 83       	std	Z+2, r24	; 0x02
    1a42:	80 91 2b 08 	lds	r24, 0x082B
    1a46:	90 91 2c 08 	lds	r25, 0x082C
    1a4a:	c8 17       	cp	r28, r24
    1a4c:	d9 07       	cpc	r29, r25
    1a4e:	68 f4       	brcc	.+26     	; 0x1a6a <prvAddCurrentTaskToDelayedList+0x3a>
    1a50:	60 91 8d 08 	lds	r22, 0x088D
    1a54:	70 91 8e 08 	lds	r23, 0x088E
    1a58:	80 91 4a 08 	lds	r24, 0x084A
    1a5c:	90 91 4b 08 	lds	r25, 0x084B
    1a60:	6e 5f       	subi	r22, 0xFE	; 254
    1a62:	7f 4f       	sbci	r23, 0xFF	; 255
    1a64:	0e 94 18 03 	call	0x630	; 0x630 <vListInsert>
    1a68:	17 c0       	rjmp	.+46     	; 0x1a98 <prvAddCurrentTaskToDelayedList+0x68>
    1a6a:	60 91 8d 08 	lds	r22, 0x088D
    1a6e:	70 91 8e 08 	lds	r23, 0x088E
    1a72:	80 91 4c 08 	lds	r24, 0x084C
    1a76:	90 91 4d 08 	lds	r25, 0x084D
    1a7a:	6e 5f       	subi	r22, 0xFE	; 254
    1a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7e:	0e 94 18 03 	call	0x630	; 0x630 <vListInsert>
    1a82:	80 91 04 02 	lds	r24, 0x0204
    1a86:	90 91 05 02 	lds	r25, 0x0205
    1a8a:	c8 17       	cp	r28, r24
    1a8c:	d9 07       	cpc	r29, r25
    1a8e:	20 f4       	brcc	.+8      	; 0x1a98 <prvAddCurrentTaskToDelayedList+0x68>
    1a90:	d0 93 05 02 	sts	0x0205, r29
    1a94:	c0 93 04 02 	sts	0x0204, r28
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	08 95       	ret

00001a9e <xTaskGenericCreate>:
    1a9e:	4f 92       	push	r4
    1aa0:	5f 92       	push	r5
    1aa2:	6f 92       	push	r6
    1aa4:	7f 92       	push	r7
    1aa6:	8f 92       	push	r8
    1aa8:	9f 92       	push	r9
    1aaa:	af 92       	push	r10
    1aac:	bf 92       	push	r11
    1aae:	cf 92       	push	r12
    1ab0:	df 92       	push	r13
    1ab2:	ef 92       	push	r14
    1ab4:	ff 92       	push	r15
    1ab6:	0f 93       	push	r16
    1ab8:	1f 93       	push	r17
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	4c 01       	movw	r8, r24
    1ac0:	5b 01       	movw	r10, r22
    1ac2:	2a 01       	movw	r4, r20
    1ac4:	39 01       	movw	r6, r18
    1ac6:	83 e2       	ldi	r24, 0x23	; 35
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	0e 94 af 02 	call	0x55e	; 0x55e <pvPortMalloc>
    1ace:	ec 01       	movw	r28, r24
    1ad0:	00 97       	sbiw	r24, 0x00	; 0
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <xTaskGenericCreate+0x38>
    1ad4:	e7 c0       	rjmp	.+462    	; 0x1ca4 <xTaskGenericCreate+0x206>
    1ad6:	c1 14       	cp	r12, r1
    1ad8:	d1 04       	cpc	r13, r1
    1ada:	09 f0       	breq	.+2      	; 0x1ade <xTaskGenericCreate+0x40>
    1adc:	cc c0       	rjmp	.+408    	; 0x1c76 <xTaskGenericCreate+0x1d8>
    1ade:	c2 01       	movw	r24, r4
    1ae0:	0e 94 af 02 	call	0x55e	; 0x55e <pvPortMalloc>
    1ae4:	98 8f       	std	Y+24, r25	; 0x18
    1ae6:	8f 8b       	std	Y+23, r24	; 0x17
    1ae8:	89 2b       	or	r24, r25
    1aea:	09 f0       	breq	.+2      	; 0x1aee <xTaskGenericCreate+0x50>
    1aec:	c6 c0       	rjmp	.+396    	; 0x1c7a <xTaskGenericCreate+0x1dc>
    1aee:	ce 01       	movw	r24, r28
    1af0:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <vPortFree>
    1af4:	d7 c0       	rjmp	.+430    	; 0x1ca4 <xTaskGenericCreate+0x206>
    1af6:	cf 01       	movw	r24, r30
    1af8:	31 91       	ld	r19, Z+
    1afa:	da 01       	movw	r26, r20
    1afc:	3d 93       	st	X+, r19
    1afe:	ad 01       	movw	r20, r26
    1b00:	dc 01       	movw	r26, r24
    1b02:	8c 91       	ld	r24, X
    1b04:	88 23       	and	r24, r24
    1b06:	11 f0       	breq	.+4      	; 0x1b0c <xTaskGenericCreate+0x6e>
    1b08:	21 50       	subi	r18, 0x01	; 1
    1b0a:	a9 f7       	brne	.-22     	; 0x1af6 <xTaskGenericCreate+0x58>
    1b0c:	18 a2       	std	Y+32, r1	; 0x20
    1b0e:	10 2f       	mov	r17, r16
    1b10:	05 30       	cpi	r16, 0x05	; 5
    1b12:	08 f0       	brcs	.+2      	; 0x1b16 <xTaskGenericCreate+0x78>
    1b14:	14 e0       	ldi	r17, 0x04	; 4
    1b16:	1e 8b       	std	Y+22, r17	; 0x16
    1b18:	19 a3       	std	Y+33, r17	; 0x21
    1b1a:	1a a2       	std	Y+34, r1	; 0x22
    1b1c:	5e 01       	movw	r10, r28
    1b1e:	b2 e0       	ldi	r27, 0x02	; 2
    1b20:	ab 0e       	add	r10, r27
    1b22:	b1 1c       	adc	r11, r1
    1b24:	c5 01       	movw	r24, r10
    1b26:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <vListInitialiseItem>
    1b2a:	ce 01       	movw	r24, r28
    1b2c:	0c 96       	adiw	r24, 0x0c	; 12
    1b2e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <vListInitialiseItem>
    1b32:	d9 87       	std	Y+9, r29	; 0x09
    1b34:	c8 87       	std	Y+8, r28	; 0x08
    1b36:	85 e0       	ldi	r24, 0x05	; 5
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	81 1b       	sub	r24, r17
    1b3c:	91 09       	sbc	r25, r1
    1b3e:	9d 87       	std	Y+13, r25	; 0x0d
    1b40:	8c 87       	std	Y+12, r24	; 0x0c
    1b42:	db 8b       	std	Y+19, r29	; 0x13
    1b44:	ca 8b       	std	Y+18, r28	; 0x12
    1b46:	a3 01       	movw	r20, r6
    1b48:	b4 01       	movw	r22, r8
    1b4a:	c6 01       	movw	r24, r12
    1b4c:	c3 da       	rcall	.-2682   	; 0x10d4 <pxPortInitialiseStack>
    1b4e:	99 83       	std	Y+1, r25	; 0x01
    1b50:	88 83       	st	Y, r24
    1b52:	e1 14       	cp	r14, r1
    1b54:	f1 04       	cpc	r15, r1
    1b56:	19 f0       	breq	.+6      	; 0x1b5e <xTaskGenericCreate+0xc0>
    1b58:	f7 01       	movw	r30, r14
    1b5a:	d1 83       	std	Z+1, r29	; 0x01
    1b5c:	c0 83       	st	Z, r28
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	f8 94       	cli
    1b62:	0f 92       	push	r0
    1b64:	80 91 2d 08 	lds	r24, 0x082D
    1b68:	8f 5f       	subi	r24, 0xFF	; 255
    1b6a:	80 93 2d 08 	sts	0x082D, r24
    1b6e:	80 91 8d 08 	lds	r24, 0x088D
    1b72:	90 91 8e 08 	lds	r25, 0x088E
    1b76:	89 2b       	or	r24, r25
    1b78:	09 f0       	breq	.+2      	; 0x1b7c <xTaskGenericCreate+0xde>
    1b7a:	3f c0       	rjmp	.+126    	; 0x1bfa <xTaskGenericCreate+0x15c>
    1b7c:	d0 93 8e 08 	sts	0x088E, r29
    1b80:	c0 93 8d 08 	sts	0x088D, r28
    1b84:	80 91 2d 08 	lds	r24, 0x082D
    1b88:	81 30       	cpi	r24, 0x01	; 1
    1b8a:	09 f0       	breq	.+2      	; 0x1b8e <xTaskGenericCreate+0xf0>
    1b8c:	45 c0       	rjmp	.+138    	; 0x1c18 <xTaskGenericCreate+0x17a>
    1b8e:	0f 2e       	mov	r0, r31
    1b90:	f0 e6       	ldi	r31, 0x60	; 96
    1b92:	ef 2e       	mov	r14, r31
    1b94:	f8 e0       	ldi	r31, 0x08	; 8
    1b96:	ff 2e       	mov	r15, r31
    1b98:	f0 2d       	mov	r31, r0
    1b9a:	0f 2e       	mov	r0, r31
    1b9c:	fd e8       	ldi	r31, 0x8D	; 141
    1b9e:	cf 2e       	mov	r12, r31
    1ba0:	f8 e0       	ldi	r31, 0x08	; 8
    1ba2:	df 2e       	mov	r13, r31
    1ba4:	f0 2d       	mov	r31, r0
    1ba6:	c7 01       	movw	r24, r14
    1ba8:	0e 94 e5 02 	call	0x5ca	; 0x5ca <vListInitialise>
    1bac:	f9 e0       	ldi	r31, 0x09	; 9
    1bae:	ef 0e       	add	r14, r31
    1bb0:	f1 1c       	adc	r15, r1
    1bb2:	ec 14       	cp	r14, r12
    1bb4:	fd 04       	cpc	r15, r13
    1bb6:	b9 f7       	brne	.-18     	; 0x1ba6 <xTaskGenericCreate+0x108>
    1bb8:	87 e5       	ldi	r24, 0x57	; 87
    1bba:	98 e0       	ldi	r25, 0x08	; 8
    1bbc:	0e 94 e5 02 	call	0x5ca	; 0x5ca <vListInitialise>
    1bc0:	8e e4       	ldi	r24, 0x4E	; 78
    1bc2:	98 e0       	ldi	r25, 0x08	; 8
    1bc4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <vListInitialise>
    1bc8:	81 e4       	ldi	r24, 0x41	; 65
    1bca:	98 e0       	ldi	r25, 0x08	; 8
    1bcc:	0e 94 e5 02 	call	0x5ca	; 0x5ca <vListInitialise>
    1bd0:	88 e3       	ldi	r24, 0x38	; 56
    1bd2:	98 e0       	ldi	r25, 0x08	; 8
    1bd4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <vListInitialise>
    1bd8:	8e e2       	ldi	r24, 0x2E	; 46
    1bda:	98 e0       	ldi	r25, 0x08	; 8
    1bdc:	0e 94 e5 02 	call	0x5ca	; 0x5ca <vListInitialise>
    1be0:	87 e5       	ldi	r24, 0x57	; 87
    1be2:	98 e0       	ldi	r25, 0x08	; 8
    1be4:	90 93 4d 08 	sts	0x084D, r25
    1be8:	80 93 4c 08 	sts	0x084C, r24
    1bec:	8e e4       	ldi	r24, 0x4E	; 78
    1bee:	98 e0       	ldi	r25, 0x08	; 8
    1bf0:	90 93 4b 08 	sts	0x084B, r25
    1bf4:	80 93 4a 08 	sts	0x084A, r24
    1bf8:	0f c0       	rjmp	.+30     	; 0x1c18 <xTaskGenericCreate+0x17a>
    1bfa:	80 91 29 08 	lds	r24, 0x0829
    1bfe:	81 11       	cpse	r24, r1
    1c00:	0b c0       	rjmp	.+22     	; 0x1c18 <xTaskGenericCreate+0x17a>
    1c02:	e0 91 8d 08 	lds	r30, 0x088D
    1c06:	f0 91 8e 08 	lds	r31, 0x088E
    1c0a:	86 89       	ldd	r24, Z+22	; 0x16
    1c0c:	08 17       	cp	r16, r24
    1c0e:	20 f0       	brcs	.+8      	; 0x1c18 <xTaskGenericCreate+0x17a>
    1c10:	d0 93 8e 08 	sts	0x088E, r29
    1c14:	c0 93 8d 08 	sts	0x088D, r28
    1c18:	80 91 25 08 	lds	r24, 0x0825
    1c1c:	8f 5f       	subi	r24, 0xFF	; 255
    1c1e:	80 93 25 08 	sts	0x0825, r24
    1c22:	8e 89       	ldd	r24, Y+22	; 0x16
    1c24:	90 91 2a 08 	lds	r25, 0x082A
    1c28:	98 17       	cp	r25, r24
    1c2a:	10 f4       	brcc	.+4      	; 0x1c30 <xTaskGenericCreate+0x192>
    1c2c:	80 93 2a 08 	sts	0x082A, r24
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	9c 01       	movw	r18, r24
    1c34:	22 0f       	add	r18, r18
    1c36:	33 1f       	adc	r19, r19
    1c38:	22 0f       	add	r18, r18
    1c3a:	33 1f       	adc	r19, r19
    1c3c:	22 0f       	add	r18, r18
    1c3e:	33 1f       	adc	r19, r19
    1c40:	82 0f       	add	r24, r18
    1c42:	93 1f       	adc	r25, r19
    1c44:	b5 01       	movw	r22, r10
    1c46:	80 5a       	subi	r24, 0xA0	; 160
    1c48:	97 4f       	sbci	r25, 0xF7	; 247
    1c4a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <vListInsertEnd>
    1c4e:	0f 90       	pop	r0
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	80 91 29 08 	lds	r24, 0x0829
    1c56:	88 23       	and	r24, r24
    1c58:	51 f0       	breq	.+20     	; 0x1c6e <xTaskGenericCreate+0x1d0>
    1c5a:	e0 91 8d 08 	lds	r30, 0x088D
    1c5e:	f0 91 8e 08 	lds	r31, 0x088E
    1c62:	86 89       	ldd	r24, Z+22	; 0x16
    1c64:	80 17       	cp	r24, r16
    1c66:	28 f4       	brcc	.+10     	; 0x1c72 <xTaskGenericCreate+0x1d4>
    1c68:	e4 da       	rcall	.-2616   	; 0x1232 <vPortYield>
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	1c c0       	rjmp	.+56     	; 0x1ca6 <xTaskGenericCreate+0x208>
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	1a c0       	rjmp	.+52     	; 0x1ca6 <xTaskGenericCreate+0x208>
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	18 c0       	rjmp	.+48     	; 0x1ca6 <xTaskGenericCreate+0x208>
    1c76:	d8 8e       	std	Y+24, r13	; 0x18
    1c78:	cf 8a       	std	Y+23, r12	; 0x17
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	48 1a       	sub	r4, r24
    1c7e:	51 08       	sbc	r5, r1
    1c80:	cf 88       	ldd	r12, Y+23	; 0x17
    1c82:	d8 8c       	ldd	r13, Y+24	; 0x18
    1c84:	c4 0c       	add	r12, r4
    1c86:	d5 1c       	adc	r13, r5
    1c88:	d5 01       	movw	r26, r10
    1c8a:	8c 91       	ld	r24, X
    1c8c:	89 8f       	std	Y+25, r24	; 0x19
    1c8e:	8c 91       	ld	r24, X
    1c90:	88 23       	and	r24, r24
    1c92:	09 f4       	brne	.+2      	; 0x1c96 <xTaskGenericCreate+0x1f8>
    1c94:	3b cf       	rjmp	.-394    	; 0x1b0c <xTaskGenericCreate+0x6e>
    1c96:	ae 01       	movw	r20, r28
    1c98:	46 5e       	subi	r20, 0xE6	; 230
    1c9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c9c:	f5 01       	movw	r30, r10
    1c9e:	31 96       	adiw	r30, 0x01	; 1
    1ca0:	27 e0       	ldi	r18, 0x07	; 7
    1ca2:	29 cf       	rjmp	.-430    	; 0x1af6 <xTaskGenericCreate+0x58>
    1ca4:	8f ef       	ldi	r24, 0xFF	; 255
    1ca6:	df 91       	pop	r29
    1ca8:	cf 91       	pop	r28
    1caa:	1f 91       	pop	r17
    1cac:	0f 91       	pop	r16
    1cae:	ff 90       	pop	r15
    1cb0:	ef 90       	pop	r14
    1cb2:	df 90       	pop	r13
    1cb4:	cf 90       	pop	r12
    1cb6:	bf 90       	pop	r11
    1cb8:	af 90       	pop	r10
    1cba:	9f 90       	pop	r9
    1cbc:	8f 90       	pop	r8
    1cbe:	7f 90       	pop	r7
    1cc0:	6f 90       	pop	r6
    1cc2:	5f 90       	pop	r5
    1cc4:	4f 90       	pop	r4
    1cc6:	08 95       	ret

00001cc8 <vTaskResume>:
    1cc8:	0f 93       	push	r16
    1cca:	1f 93       	push	r17
    1ccc:	cf 93       	push	r28
    1cce:	df 93       	push	r29
    1cd0:	ec 01       	movw	r28, r24
    1cd2:	00 97       	sbiw	r24, 0x00	; 0
    1cd4:	09 f4       	brne	.+2      	; 0x1cd8 <vTaskResume+0x10>
    1cd6:	3e c0       	rjmp	.+124    	; 0x1d54 <vTaskResume+0x8c>
    1cd8:	80 91 8d 08 	lds	r24, 0x088D
    1cdc:	90 91 8e 08 	lds	r25, 0x088E
    1ce0:	c8 17       	cp	r28, r24
    1ce2:	d9 07       	cpc	r29, r25
    1ce4:	b9 f1       	breq	.+110    	; 0x1d54 <vTaskResume+0x8c>
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	f8 94       	cli
    1cea:	0f 92       	push	r0
    1cec:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cee:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cf0:	8e 52       	subi	r24, 0x2E	; 46
    1cf2:	98 40       	sbci	r25, 0x08	; 8
    1cf4:	69 f5       	brne	.+90     	; 0x1d50 <vTaskResume+0x88>
    1cf6:	8c 89       	ldd	r24, Y+20	; 0x14
    1cf8:	9d 89       	ldd	r25, Y+21	; 0x15
    1cfa:	28 e0       	ldi	r18, 0x08	; 8
    1cfc:	81 34       	cpi	r24, 0x41	; 65
    1cfe:	92 07       	cpc	r25, r18
    1d00:	39 f1       	breq	.+78     	; 0x1d50 <vTaskResume+0x88>
    1d02:	89 2b       	or	r24, r25
    1d04:	29 f5       	brne	.+74     	; 0x1d50 <vTaskResume+0x88>
    1d06:	8e 01       	movw	r16, r28
    1d08:	0e 5f       	subi	r16, 0xFE	; 254
    1d0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0c:	c8 01       	movw	r24, r16
    1d0e:	0e 94 49 03 	call	0x692	; 0x692 <uxListRemove>
    1d12:	8e 89       	ldd	r24, Y+22	; 0x16
    1d14:	90 91 2a 08 	lds	r25, 0x082A
    1d18:	98 17       	cp	r25, r24
    1d1a:	10 f4       	brcc	.+4      	; 0x1d20 <vTaskResume+0x58>
    1d1c:	80 93 2a 08 	sts	0x082A, r24
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	9c 01       	movw	r18, r24
    1d24:	22 0f       	add	r18, r18
    1d26:	33 1f       	adc	r19, r19
    1d28:	22 0f       	add	r18, r18
    1d2a:	33 1f       	adc	r19, r19
    1d2c:	22 0f       	add	r18, r18
    1d2e:	33 1f       	adc	r19, r19
    1d30:	82 0f       	add	r24, r18
    1d32:	93 1f       	adc	r25, r19
    1d34:	b8 01       	movw	r22, r16
    1d36:	80 5a       	subi	r24, 0xA0	; 160
    1d38:	97 4f       	sbci	r25, 0xF7	; 247
    1d3a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <vListInsertEnd>
    1d3e:	e0 91 8d 08 	lds	r30, 0x088D
    1d42:	f0 91 8e 08 	lds	r31, 0x088E
    1d46:	9e 89       	ldd	r25, Y+22	; 0x16
    1d48:	86 89       	ldd	r24, Z+22	; 0x16
    1d4a:	98 17       	cp	r25, r24
    1d4c:	08 f0       	brcs	.+2      	; 0x1d50 <vTaskResume+0x88>
    1d4e:	71 da       	rcall	.-2846   	; 0x1232 <vPortYield>
    1d50:	0f 90       	pop	r0
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	df 91       	pop	r29
    1d56:	cf 91       	pop	r28
    1d58:	1f 91       	pop	r17
    1d5a:	0f 91       	pop	r16
    1d5c:	08 95       	ret

00001d5e <vTaskStartScheduler>:
    1d5e:	af 92       	push	r10
    1d60:	bf 92       	push	r11
    1d62:	cf 92       	push	r12
    1d64:	df 92       	push	r13
    1d66:	ef 92       	push	r14
    1d68:	ff 92       	push	r15
    1d6a:	0f 93       	push	r16
    1d6c:	a1 2c       	mov	r10, r1
    1d6e:	b1 2c       	mov	r11, r1
    1d70:	c1 2c       	mov	r12, r1
    1d72:	d1 2c       	mov	r13, r1
    1d74:	e1 2c       	mov	r14, r1
    1d76:	f1 2c       	mov	r15, r1
    1d78:	00 e0       	ldi	r16, 0x00	; 0
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	45 e5       	ldi	r20, 0x55	; 85
    1d80:	50 e0       	ldi	r21, 0x00	; 0
    1d82:	69 e3       	ldi	r22, 0x39	; 57
    1d84:	72 e0       	ldi	r23, 0x02	; 2
    1d86:	86 e8       	ldi	r24, 0x86	; 134
    1d88:	90 e1       	ldi	r25, 0x10	; 16
    1d8a:	89 de       	rcall	.-750    	; 0x1a9e <xTaskGenericCreate>
    1d8c:	81 30       	cpi	r24, 0x01	; 1
    1d8e:	41 f4       	brne	.+16     	; 0x1da0 <vTaskStartScheduler+0x42>
    1d90:	f8 94       	cli
    1d92:	80 93 29 08 	sts	0x0829, r24
    1d96:	10 92 2c 08 	sts	0x082C, r1
    1d9a:	10 92 2b 08 	sts	0x082B, r1
    1d9e:	0c da       	rcall	.-3048   	; 0x11b8 <xPortStartScheduler>
    1da0:	0f 91       	pop	r16
    1da2:	ff 90       	pop	r15
    1da4:	ef 90       	pop	r14
    1da6:	df 90       	pop	r13
    1da8:	cf 90       	pop	r12
    1daa:	bf 90       	pop	r11
    1dac:	af 90       	pop	r10
    1dae:	08 95       	ret

00001db0 <vTaskSuspendAll>:
    1db0:	80 91 24 08 	lds	r24, 0x0824
    1db4:	8f 5f       	subi	r24, 0xFF	; 255
    1db6:	80 93 24 08 	sts	0x0824, r24
    1dba:	08 95       	ret

00001dbc <xTaskGetTickCount>:
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	0f 92       	push	r0
    1dc2:	80 91 2b 08 	lds	r24, 0x082B
    1dc6:	90 91 2c 08 	lds	r25, 0x082C
    1dca:	0f 90       	pop	r0
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	08 95       	ret

00001dd0 <xTaskGetTickCountFromISR>:
    1dd0:	80 91 2b 08 	lds	r24, 0x082B
    1dd4:	90 91 2c 08 	lds	r25, 0x082C
    1dd8:	08 95       	ret

00001dda <xTaskIncrementTick>:
    1dda:	cf 92       	push	r12
    1ddc:	df 92       	push	r13
    1dde:	ef 92       	push	r14
    1de0:	ff 92       	push	r15
    1de2:	0f 93       	push	r16
    1de4:	1f 93       	push	r17
    1de6:	cf 93       	push	r28
    1de8:	df 93       	push	r29
    1dea:	80 91 24 08 	lds	r24, 0x0824
    1dee:	81 11       	cpse	r24, r1
    1df0:	99 c0       	rjmp	.+306    	; 0x1f24 <xTaskIncrementTick+0x14a>
    1df2:	80 91 2b 08 	lds	r24, 0x082B
    1df6:	90 91 2c 08 	lds	r25, 0x082C
    1dfa:	01 96       	adiw	r24, 0x01	; 1
    1dfc:	90 93 2c 08 	sts	0x082C, r25
    1e00:	80 93 2b 08 	sts	0x082B, r24
    1e04:	e0 90 2b 08 	lds	r14, 0x082B
    1e08:	f0 90 2c 08 	lds	r15, 0x082C
    1e0c:	e1 14       	cp	r14, r1
    1e0e:	f1 04       	cpc	r15, r1
    1e10:	b1 f4       	brne	.+44     	; 0x1e3e <xTaskIncrementTick+0x64>
    1e12:	80 91 4c 08 	lds	r24, 0x084C
    1e16:	90 91 4d 08 	lds	r25, 0x084D
    1e1a:	20 91 4a 08 	lds	r18, 0x084A
    1e1e:	30 91 4b 08 	lds	r19, 0x084B
    1e22:	30 93 4d 08 	sts	0x084D, r19
    1e26:	20 93 4c 08 	sts	0x084C, r18
    1e2a:	90 93 4b 08 	sts	0x084B, r25
    1e2e:	80 93 4a 08 	sts	0x084A, r24
    1e32:	80 91 26 08 	lds	r24, 0x0826
    1e36:	8f 5f       	subi	r24, 0xFF	; 255
    1e38:	80 93 26 08 	sts	0x0826, r24
    1e3c:	da dd       	rcall	.-1100   	; 0x19f2 <prvResetNextTaskUnblockTime>
    1e3e:	80 91 04 02 	lds	r24, 0x0204
    1e42:	90 91 05 02 	lds	r25, 0x0205
    1e46:	e8 16       	cp	r14, r24
    1e48:	f9 06       	cpc	r15, r25
    1e4a:	08 f4       	brcc	.+2      	; 0x1e4e <xTaskIncrementTick+0x74>
    1e4c:	54 c0       	rjmp	.+168    	; 0x1ef6 <xTaskIncrementTick+0x11c>
    1e4e:	d1 2c       	mov	r13, r1
    1e50:	cc 24       	eor	r12, r12
    1e52:	c3 94       	inc	r12
    1e54:	01 c0       	rjmp	.+2      	; 0x1e58 <xTaskIncrementTick+0x7e>
    1e56:	dc 2c       	mov	r13, r12
    1e58:	e0 91 4c 08 	lds	r30, 0x084C
    1e5c:	f0 91 4d 08 	lds	r31, 0x084D
    1e60:	80 81       	ld	r24, Z
    1e62:	81 11       	cpse	r24, r1
    1e64:	07 c0       	rjmp	.+14     	; 0x1e74 <xTaskIncrementTick+0x9a>
    1e66:	8f ef       	ldi	r24, 0xFF	; 255
    1e68:	9f ef       	ldi	r25, 0xFF	; 255
    1e6a:	90 93 05 02 	sts	0x0205, r25
    1e6e:	80 93 04 02 	sts	0x0204, r24
    1e72:	42 c0       	rjmp	.+132    	; 0x1ef8 <xTaskIncrementTick+0x11e>
    1e74:	e0 91 4c 08 	lds	r30, 0x084C
    1e78:	f0 91 4d 08 	lds	r31, 0x084D
    1e7c:	05 80       	ldd	r0, Z+5	; 0x05
    1e7e:	f6 81       	ldd	r31, Z+6	; 0x06
    1e80:	e0 2d       	mov	r30, r0
    1e82:	c6 81       	ldd	r28, Z+6	; 0x06
    1e84:	d7 81       	ldd	r29, Z+7	; 0x07
    1e86:	2a 81       	ldd	r18, Y+2	; 0x02
    1e88:	3b 81       	ldd	r19, Y+3	; 0x03
    1e8a:	e2 16       	cp	r14, r18
    1e8c:	f3 06       	cpc	r15, r19
    1e8e:	28 f4       	brcc	.+10     	; 0x1e9a <xTaskIncrementTick+0xc0>
    1e90:	30 93 05 02 	sts	0x0205, r19
    1e94:	20 93 04 02 	sts	0x0204, r18
    1e98:	2f c0       	rjmp	.+94     	; 0x1ef8 <xTaskIncrementTick+0x11e>
    1e9a:	8e 01       	movw	r16, r28
    1e9c:	0e 5f       	subi	r16, 0xFE	; 254
    1e9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea0:	c8 01       	movw	r24, r16
    1ea2:	0e 94 49 03 	call	0x692	; 0x692 <uxListRemove>
    1ea6:	8c 89       	ldd	r24, Y+20	; 0x14
    1ea8:	9d 89       	ldd	r25, Y+21	; 0x15
    1eaa:	89 2b       	or	r24, r25
    1eac:	21 f0       	breq	.+8      	; 0x1eb6 <xTaskIncrementTick+0xdc>
    1eae:	ce 01       	movw	r24, r28
    1eb0:	0c 96       	adiw	r24, 0x0c	; 12
    1eb2:	0e 94 49 03 	call	0x692	; 0x692 <uxListRemove>
    1eb6:	2e 89       	ldd	r18, Y+22	; 0x16
    1eb8:	80 91 2a 08 	lds	r24, 0x082A
    1ebc:	82 17       	cp	r24, r18
    1ebe:	10 f4       	brcc	.+4      	; 0x1ec4 <xTaskIncrementTick+0xea>
    1ec0:	20 93 2a 08 	sts	0x082A, r18
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	c9 01       	movw	r24, r18
    1ec8:	88 0f       	add	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	88 0f       	add	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	88 0f       	add	r24, r24
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	82 0f       	add	r24, r18
    1ed6:	93 1f       	adc	r25, r19
    1ed8:	b8 01       	movw	r22, r16
    1eda:	80 5a       	subi	r24, 0xA0	; 160
    1edc:	97 4f       	sbci	r25, 0xF7	; 247
    1ede:	0e 94 f7 02 	call	0x5ee	; 0x5ee <vListInsertEnd>
    1ee2:	e0 91 8d 08 	lds	r30, 0x088D
    1ee6:	f0 91 8e 08 	lds	r31, 0x088E
    1eea:	9e 89       	ldd	r25, Y+22	; 0x16
    1eec:	86 89       	ldd	r24, Z+22	; 0x16
    1eee:	98 17       	cp	r25, r24
    1ef0:	08 f0       	brcs	.+2      	; 0x1ef4 <xTaskIncrementTick+0x11a>
    1ef2:	b1 cf       	rjmp	.-158    	; 0x1e56 <xTaskIncrementTick+0x7c>
    1ef4:	b1 cf       	rjmp	.-158    	; 0x1e58 <xTaskIncrementTick+0x7e>
    1ef6:	d1 2c       	mov	r13, r1
    1ef8:	e0 91 8d 08 	lds	r30, 0x088D
    1efc:	f0 91 8e 08 	lds	r31, 0x088E
    1f00:	86 89       	ldd	r24, Z+22	; 0x16
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	fc 01       	movw	r30, r24
    1f06:	ee 0f       	add	r30, r30
    1f08:	ff 1f       	adc	r31, r31
    1f0a:	ee 0f       	add	r30, r30
    1f0c:	ff 1f       	adc	r31, r31
    1f0e:	ee 0f       	add	r30, r30
    1f10:	ff 1f       	adc	r31, r31
    1f12:	8e 0f       	add	r24, r30
    1f14:	9f 1f       	adc	r25, r31
    1f16:	fc 01       	movw	r30, r24
    1f18:	e0 5a       	subi	r30, 0xA0	; 160
    1f1a:	f7 4f       	sbci	r31, 0xF7	; 247
    1f1c:	80 81       	ld	r24, Z
    1f1e:	82 30       	cpi	r24, 0x02	; 2
    1f20:	40 f4       	brcc	.+16     	; 0x1f32 <xTaskIncrementTick+0x158>
    1f22:	09 c0       	rjmp	.+18     	; 0x1f36 <xTaskIncrementTick+0x15c>
    1f24:	80 91 28 08 	lds	r24, 0x0828
    1f28:	8f 5f       	subi	r24, 0xFF	; 255
    1f2a:	80 93 28 08 	sts	0x0828, r24
    1f2e:	d1 2c       	mov	r13, r1
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <xTaskIncrementTick+0x15c>
    1f32:	dd 24       	eor	r13, r13
    1f34:	d3 94       	inc	r13
    1f36:	80 91 27 08 	lds	r24, 0x0827
    1f3a:	88 23       	and	r24, r24
    1f3c:	11 f0       	breq	.+4      	; 0x1f42 <xTaskIncrementTick+0x168>
    1f3e:	dd 24       	eor	r13, r13
    1f40:	d3 94       	inc	r13
    1f42:	8d 2d       	mov	r24, r13
    1f44:	df 91       	pop	r29
    1f46:	cf 91       	pop	r28
    1f48:	1f 91       	pop	r17
    1f4a:	0f 91       	pop	r16
    1f4c:	ff 90       	pop	r15
    1f4e:	ef 90       	pop	r14
    1f50:	df 90       	pop	r13
    1f52:	cf 90       	pop	r12
    1f54:	08 95       	ret

00001f56 <xTaskResumeAll>:
    1f56:	df 92       	push	r13
    1f58:	ef 92       	push	r14
    1f5a:	ff 92       	push	r15
    1f5c:	0f 93       	push	r16
    1f5e:	1f 93       	push	r17
    1f60:	cf 93       	push	r28
    1f62:	df 93       	push	r29
    1f64:	0f b6       	in	r0, 0x3f	; 63
    1f66:	f8 94       	cli
    1f68:	0f 92       	push	r0
    1f6a:	80 91 24 08 	lds	r24, 0x0824
    1f6e:	81 50       	subi	r24, 0x01	; 1
    1f70:	80 93 24 08 	sts	0x0824, r24
    1f74:	80 91 24 08 	lds	r24, 0x0824
    1f78:	81 11       	cpse	r24, r1
    1f7a:	5f c0       	rjmp	.+190    	; 0x203a <xTaskResumeAll+0xe4>
    1f7c:	80 91 2d 08 	lds	r24, 0x082D
    1f80:	88 23       	and	r24, r24
    1f82:	09 f4       	brne	.+2      	; 0x1f86 <xTaskResumeAll+0x30>
    1f84:	5c c0       	rjmp	.+184    	; 0x203e <xTaskResumeAll+0xe8>
    1f86:	0f 2e       	mov	r0, r31
    1f88:	f1 e4       	ldi	r31, 0x41	; 65
    1f8a:	ef 2e       	mov	r14, r31
    1f8c:	f8 e0       	ldi	r31, 0x08	; 8
    1f8e:	ff 2e       	mov	r15, r31
    1f90:	f0 2d       	mov	r31, r0
    1f92:	dd 24       	eor	r13, r13
    1f94:	d3 94       	inc	r13
    1f96:	30 c0       	rjmp	.+96     	; 0x1ff8 <xTaskResumeAll+0xa2>
    1f98:	e0 91 46 08 	lds	r30, 0x0846
    1f9c:	f0 91 47 08 	lds	r31, 0x0847
    1fa0:	c6 81       	ldd	r28, Z+6	; 0x06
    1fa2:	d7 81       	ldd	r29, Z+7	; 0x07
    1fa4:	ce 01       	movw	r24, r28
    1fa6:	0c 96       	adiw	r24, 0x0c	; 12
    1fa8:	0e 94 49 03 	call	0x692	; 0x692 <uxListRemove>
    1fac:	8e 01       	movw	r16, r28
    1fae:	0e 5f       	subi	r16, 0xFE	; 254
    1fb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb2:	c8 01       	movw	r24, r16
    1fb4:	0e 94 49 03 	call	0x692	; 0x692 <uxListRemove>
    1fb8:	8e 89       	ldd	r24, Y+22	; 0x16
    1fba:	90 91 2a 08 	lds	r25, 0x082A
    1fbe:	98 17       	cp	r25, r24
    1fc0:	10 f4       	brcc	.+4      	; 0x1fc6 <xTaskResumeAll+0x70>
    1fc2:	80 93 2a 08 	sts	0x082A, r24
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	9c 01       	movw	r18, r24
    1fca:	22 0f       	add	r18, r18
    1fcc:	33 1f       	adc	r19, r19
    1fce:	22 0f       	add	r18, r18
    1fd0:	33 1f       	adc	r19, r19
    1fd2:	22 0f       	add	r18, r18
    1fd4:	33 1f       	adc	r19, r19
    1fd6:	82 0f       	add	r24, r18
    1fd8:	93 1f       	adc	r25, r19
    1fda:	b8 01       	movw	r22, r16
    1fdc:	80 5a       	subi	r24, 0xA0	; 160
    1fde:	97 4f       	sbci	r25, 0xF7	; 247
    1fe0:	0e 94 f7 02 	call	0x5ee	; 0x5ee <vListInsertEnd>
    1fe4:	e0 91 8d 08 	lds	r30, 0x088D
    1fe8:	f0 91 8e 08 	lds	r31, 0x088E
    1fec:	9e 89       	ldd	r25, Y+22	; 0x16
    1fee:	86 89       	ldd	r24, Z+22	; 0x16
    1ff0:	98 17       	cp	r25, r24
    1ff2:	10 f0       	brcs	.+4      	; 0x1ff8 <xTaskResumeAll+0xa2>
    1ff4:	d0 92 27 08 	sts	0x0827, r13
    1ff8:	f7 01       	movw	r30, r14
    1ffa:	80 81       	ld	r24, Z
    1ffc:	81 11       	cpse	r24, r1
    1ffe:	cc cf       	rjmp	.-104    	; 0x1f98 <xTaskResumeAll+0x42>
    2000:	80 91 28 08 	lds	r24, 0x0828
    2004:	88 23       	and	r24, r24
    2006:	91 f0       	breq	.+36     	; 0x202c <xTaskResumeAll+0xd6>
    2008:	80 91 28 08 	lds	r24, 0x0828
    200c:	88 23       	and	r24, r24
    200e:	71 f0       	breq	.+28     	; 0x202c <xTaskResumeAll+0xd6>
    2010:	c1 e0       	ldi	r28, 0x01	; 1
    2012:	e3 de       	rcall	.-570    	; 0x1dda <xTaskIncrementTick>
    2014:	81 11       	cpse	r24, r1
    2016:	c0 93 27 08 	sts	0x0827, r28
    201a:	80 91 28 08 	lds	r24, 0x0828
    201e:	81 50       	subi	r24, 0x01	; 1
    2020:	80 93 28 08 	sts	0x0828, r24
    2024:	80 91 28 08 	lds	r24, 0x0828
    2028:	81 11       	cpse	r24, r1
    202a:	f3 cf       	rjmp	.-26     	; 0x2012 <xTaskResumeAll+0xbc>
    202c:	80 91 27 08 	lds	r24, 0x0827
    2030:	81 30       	cpi	r24, 0x01	; 1
    2032:	39 f4       	brne	.+14     	; 0x2042 <xTaskResumeAll+0xec>
    2034:	fe d8       	rcall	.-3588   	; 0x1232 <vPortYield>
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	05 c0       	rjmp	.+10     	; 0x2044 <xTaskResumeAll+0xee>
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	03 c0       	rjmp	.+6      	; 0x2044 <xTaskResumeAll+0xee>
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	01 c0       	rjmp	.+2      	; 0x2044 <xTaskResumeAll+0xee>
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	0f 90       	pop	r0
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	df 91       	pop	r29
    204a:	cf 91       	pop	r28
    204c:	1f 91       	pop	r17
    204e:	0f 91       	pop	r16
    2050:	ff 90       	pop	r15
    2052:	ef 90       	pop	r14
    2054:	df 90       	pop	r13
    2056:	08 95       	ret

00002058 <vTaskDelayUntil>:
    2058:	0f 93       	push	r16
    205a:	1f 93       	push	r17
    205c:	cf 93       	push	r28
    205e:	df 93       	push	r29
    2060:	8c 01       	movw	r16, r24
    2062:	eb 01       	movw	r28, r22
    2064:	a5 de       	rcall	.-694    	; 0x1db0 <vTaskSuspendAll>
    2066:	80 91 2b 08 	lds	r24, 0x082B
    206a:	90 91 2c 08 	lds	r25, 0x082C
    206e:	f8 01       	movw	r30, r16
    2070:	20 81       	ld	r18, Z
    2072:	31 81       	ldd	r19, Z+1	; 0x01
    2074:	c2 0f       	add	r28, r18
    2076:	d3 1f       	adc	r29, r19
    2078:	82 17       	cp	r24, r18
    207a:	93 07       	cpc	r25, r19
    207c:	48 f4       	brcc	.+18     	; 0x2090 <vTaskDelayUntil+0x38>
    207e:	c2 17       	cp	r28, r18
    2080:	d3 07       	cpc	r29, r19
    2082:	f8 f4       	brcc	.+62     	; 0x20c2 <vTaskDelayUntil+0x6a>
    2084:	d1 83       	std	Z+1, r29	; 0x01
    2086:	c0 83       	st	Z, r28
    2088:	8c 17       	cp	r24, r28
    208a:	9d 07       	cpc	r25, r29
    208c:	88 f4       	brcc	.+34     	; 0x20b0 <vTaskDelayUntil+0x58>
    208e:	07 c0       	rjmp	.+14     	; 0x209e <vTaskDelayUntil+0x46>
    2090:	c2 17       	cp	r28, r18
    2092:	d3 07       	cpc	r29, r19
    2094:	90 f0       	brcs	.+36     	; 0x20ba <vTaskDelayUntil+0x62>
    2096:	8c 17       	cp	r24, r28
    2098:	9d 07       	cpc	r25, r29
    209a:	78 f0       	brcs	.+30     	; 0x20ba <vTaskDelayUntil+0x62>
    209c:	12 c0       	rjmp	.+36     	; 0x20c2 <vTaskDelayUntil+0x6a>
    209e:	80 91 8d 08 	lds	r24, 0x088D
    20a2:	90 91 8e 08 	lds	r25, 0x088E
    20a6:	02 96       	adiw	r24, 0x02	; 2
    20a8:	0e 94 49 03 	call	0x692	; 0x692 <uxListRemove>
    20ac:	ce 01       	movw	r24, r28
    20ae:	c0 dc       	rcall	.-1664   	; 0x1a30 <prvAddCurrentTaskToDelayedList>
    20b0:	52 df       	rcall	.-348    	; 0x1f56 <xTaskResumeAll>
    20b2:	81 11       	cpse	r24, r1
    20b4:	0a c0       	rjmp	.+20     	; 0x20ca <vTaskDelayUntil+0x72>
    20b6:	bd d8       	rcall	.-3718   	; 0x1232 <vPortYield>
    20b8:	08 c0       	rjmp	.+16     	; 0x20ca <vTaskDelayUntil+0x72>
    20ba:	f8 01       	movw	r30, r16
    20bc:	d1 83       	std	Z+1, r29	; 0x01
    20be:	c0 83       	st	Z, r28
    20c0:	ee cf       	rjmp	.-36     	; 0x209e <vTaskDelayUntil+0x46>
    20c2:	f8 01       	movw	r30, r16
    20c4:	d1 83       	std	Z+1, r29	; 0x01
    20c6:	c0 83       	st	Z, r28
    20c8:	f3 cf       	rjmp	.-26     	; 0x20b0 <vTaskDelayUntil+0x58>
    20ca:	df 91       	pop	r29
    20cc:	cf 91       	pop	r28
    20ce:	1f 91       	pop	r17
    20d0:	0f 91       	pop	r16
    20d2:	08 95       	ret

000020d4 <vTaskDelay>:
    20d4:	cf 93       	push	r28
    20d6:	df 93       	push	r29
    20d8:	ec 01       	movw	r28, r24
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	99 f0       	breq	.+38     	; 0x2104 <vTaskDelay+0x30>
    20de:	68 de       	rcall	.-816    	; 0x1db0 <vTaskSuspendAll>
    20e0:	80 91 2b 08 	lds	r24, 0x082B
    20e4:	90 91 2c 08 	lds	r25, 0x082C
    20e8:	c8 0f       	add	r28, r24
    20ea:	d9 1f       	adc	r29, r25
    20ec:	80 91 8d 08 	lds	r24, 0x088D
    20f0:	90 91 8e 08 	lds	r25, 0x088E
    20f4:	02 96       	adiw	r24, 0x02	; 2
    20f6:	0e 94 49 03 	call	0x692	; 0x692 <uxListRemove>
    20fa:	ce 01       	movw	r24, r28
    20fc:	99 dc       	rcall	.-1742   	; 0x1a30 <prvAddCurrentTaskToDelayedList>
    20fe:	2b df       	rcall	.-426    	; 0x1f56 <xTaskResumeAll>
    2100:	81 11       	cpse	r24, r1
    2102:	01 c0       	rjmp	.+2      	; 0x2106 <vTaskDelay+0x32>
    2104:	96 d8       	rcall	.-3796   	; 0x1232 <vPortYield>
    2106:	df 91       	pop	r29
    2108:	cf 91       	pop	r28
    210a:	08 95       	ret

0000210c <prvIdleTask>:
    210c:	0f 2e       	mov	r0, r31
    210e:	f0 e6       	ldi	r31, 0x60	; 96
    2110:	ef 2e       	mov	r14, r31
    2112:	f8 e0       	ldi	r31, 0x08	; 8
    2114:	ff 2e       	mov	r15, r31
    2116:	f0 2d       	mov	r31, r0
    2118:	c8 e3       	ldi	r28, 0x38	; 56
    211a:	d8 e0       	ldi	r29, 0x08	; 8
    211c:	26 c0       	rjmp	.+76     	; 0x216a <prvIdleTask+0x5e>
    211e:	48 de       	rcall	.-880    	; 0x1db0 <vTaskSuspendAll>
    2120:	18 81       	ld	r17, Y
    2122:	19 df       	rcall	.-462    	; 0x1f56 <xTaskResumeAll>
    2124:	11 23       	and	r17, r17
    2126:	09 f1       	breq	.+66     	; 0x216a <prvIdleTask+0x5e>
    2128:	0f b6       	in	r0, 0x3f	; 63
    212a:	f8 94       	cli
    212c:	0f 92       	push	r0
    212e:	e0 91 3d 08 	lds	r30, 0x083D
    2132:	f0 91 3e 08 	lds	r31, 0x083E
    2136:	06 81       	ldd	r16, Z+6	; 0x06
    2138:	17 81       	ldd	r17, Z+7	; 0x07
    213a:	c8 01       	movw	r24, r16
    213c:	02 96       	adiw	r24, 0x02	; 2
    213e:	0e 94 49 03 	call	0x692	; 0x692 <uxListRemove>
    2142:	80 91 2d 08 	lds	r24, 0x082D
    2146:	81 50       	subi	r24, 0x01	; 1
    2148:	80 93 2d 08 	sts	0x082D, r24
    214c:	80 91 37 08 	lds	r24, 0x0837
    2150:	81 50       	subi	r24, 0x01	; 1
    2152:	80 93 37 08 	sts	0x0837, r24
    2156:	0f 90       	pop	r0
    2158:	0f be       	out	0x3f, r0	; 63
    215a:	f8 01       	movw	r30, r16
    215c:	87 89       	ldd	r24, Z+23	; 0x17
    215e:	90 8d       	ldd	r25, Z+24	; 0x18
    2160:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <vPortFree>
    2164:	c8 01       	movw	r24, r16
    2166:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <vPortFree>
    216a:	80 91 37 08 	lds	r24, 0x0837
    216e:	81 11       	cpse	r24, r1
    2170:	d6 cf       	rjmp	.-84     	; 0x211e <prvIdleTask+0x12>
    2172:	f7 01       	movw	r30, r14
    2174:	80 81       	ld	r24, Z
    2176:	82 30       	cpi	r24, 0x02	; 2
    2178:	c0 f3       	brcs	.-16     	; 0x216a <prvIdleTask+0x5e>
    217a:	5b d8       	rcall	.-3914   	; 0x1232 <vPortYield>
    217c:	f6 cf       	rjmp	.-20     	; 0x216a <prvIdleTask+0x5e>

0000217e <vTaskSwitchContext>:
    217e:	80 91 24 08 	lds	r24, 0x0824
    2182:	88 23       	and	r24, r24
    2184:	21 f0       	breq	.+8      	; 0x218e <vTaskSwitchContext+0x10>
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	80 93 27 08 	sts	0x0827, r24
    218c:	08 95       	ret
    218e:	10 92 27 08 	sts	0x0827, r1
    2192:	80 91 2a 08 	lds	r24, 0x082A
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	fc 01       	movw	r30, r24
    219a:	ee 0f       	add	r30, r30
    219c:	ff 1f       	adc	r31, r31
    219e:	ee 0f       	add	r30, r30
    21a0:	ff 1f       	adc	r31, r31
    21a2:	ee 0f       	add	r30, r30
    21a4:	ff 1f       	adc	r31, r31
    21a6:	8e 0f       	add	r24, r30
    21a8:	9f 1f       	adc	r25, r31
    21aa:	fc 01       	movw	r30, r24
    21ac:	e0 5a       	subi	r30, 0xA0	; 160
    21ae:	f7 4f       	sbci	r31, 0xF7	; 247
    21b0:	80 81       	ld	r24, Z
    21b2:	81 11       	cpse	r24, r1
    21b4:	17 c0       	rjmp	.+46     	; 0x21e4 <vTaskSwitchContext+0x66>
    21b6:	80 91 2a 08 	lds	r24, 0x082A
    21ba:	81 50       	subi	r24, 0x01	; 1
    21bc:	80 93 2a 08 	sts	0x082A, r24
    21c0:	80 91 2a 08 	lds	r24, 0x082A
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	fc 01       	movw	r30, r24
    21c8:	ee 0f       	add	r30, r30
    21ca:	ff 1f       	adc	r31, r31
    21cc:	ee 0f       	add	r30, r30
    21ce:	ff 1f       	adc	r31, r31
    21d0:	ee 0f       	add	r30, r30
    21d2:	ff 1f       	adc	r31, r31
    21d4:	8e 0f       	add	r24, r30
    21d6:	9f 1f       	adc	r25, r31
    21d8:	fc 01       	movw	r30, r24
    21da:	e0 5a       	subi	r30, 0xA0	; 160
    21dc:	f7 4f       	sbci	r31, 0xF7	; 247
    21de:	80 81       	ld	r24, Z
    21e0:	88 23       	and	r24, r24
    21e2:	49 f3       	breq	.-46     	; 0x21b6 <vTaskSwitchContext+0x38>
    21e4:	e0 91 2a 08 	lds	r30, 0x082A
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	cf 01       	movw	r24, r30
    21ec:	88 0f       	add	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	88 0f       	add	r24, r24
    21f6:	99 1f       	adc	r25, r25
    21f8:	e8 0f       	add	r30, r24
    21fa:	f9 1f       	adc	r31, r25
    21fc:	e0 5a       	subi	r30, 0xA0	; 160
    21fe:	f7 4f       	sbci	r31, 0xF7	; 247
    2200:	a1 81       	ldd	r26, Z+1	; 0x01
    2202:	b2 81       	ldd	r27, Z+2	; 0x02
    2204:	12 96       	adiw	r26, 0x02	; 2
    2206:	0d 90       	ld	r0, X+
    2208:	bc 91       	ld	r27, X
    220a:	a0 2d       	mov	r26, r0
    220c:	b2 83       	std	Z+2, r27	; 0x02
    220e:	a1 83       	std	Z+1, r26	; 0x01
    2210:	cf 01       	movw	r24, r30
    2212:	03 96       	adiw	r24, 0x03	; 3
    2214:	a8 17       	cp	r26, r24
    2216:	b9 07       	cpc	r27, r25
    2218:	31 f4       	brne	.+12     	; 0x2226 <__stack+0x27>
    221a:	12 96       	adiw	r26, 0x02	; 2
    221c:	8d 91       	ld	r24, X+
    221e:	9c 91       	ld	r25, X
    2220:	13 97       	sbiw	r26, 0x03	; 3
    2222:	92 83       	std	Z+2, r25	; 0x02
    2224:	81 83       	std	Z+1, r24	; 0x01
    2226:	01 80       	ldd	r0, Z+1	; 0x01
    2228:	f2 81       	ldd	r31, Z+2	; 0x02
    222a:	e0 2d       	mov	r30, r0
    222c:	86 81       	ldd	r24, Z+6	; 0x06
    222e:	97 81       	ldd	r25, Z+7	; 0x07
    2230:	90 93 8e 08 	sts	0x088E, r25
    2234:	80 93 8d 08 	sts	0x088D, r24
    2238:	08 95       	ret

0000223a <vTaskSuspend>:
    223a:	0f 93       	push	r16
    223c:	1f 93       	push	r17
    223e:	cf 93       	push	r28
    2240:	df 93       	push	r29
    2242:	ec 01       	movw	r28, r24
    2244:	0f b6       	in	r0, 0x3f	; 63
    2246:	f8 94       	cli
    2248:	0f 92       	push	r0
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	21 f4       	brne	.+8      	; 0x2256 <vTaskSuspend+0x1c>
    224e:	c0 91 8d 08 	lds	r28, 0x088D
    2252:	d0 91 8e 08 	lds	r29, 0x088E
    2256:	8e 01       	movw	r16, r28
    2258:	0e 5f       	subi	r16, 0xFE	; 254
    225a:	1f 4f       	sbci	r17, 0xFF	; 255
    225c:	c8 01       	movw	r24, r16
    225e:	0e 94 49 03 	call	0x692	; 0x692 <uxListRemove>
    2262:	8c 89       	ldd	r24, Y+20	; 0x14
    2264:	9d 89       	ldd	r25, Y+21	; 0x15
    2266:	89 2b       	or	r24, r25
    2268:	21 f0       	breq	.+8      	; 0x2272 <vTaskSuspend+0x38>
    226a:	ce 01       	movw	r24, r28
    226c:	0c 96       	adiw	r24, 0x0c	; 12
    226e:	0e 94 49 03 	call	0x692	; 0x692 <uxListRemove>
    2272:	b8 01       	movw	r22, r16
    2274:	8e e2       	ldi	r24, 0x2E	; 46
    2276:	98 e0       	ldi	r25, 0x08	; 8
    2278:	0e 94 f7 02 	call	0x5ee	; 0x5ee <vListInsertEnd>
    227c:	0f 90       	pop	r0
    227e:	0f be       	out	0x3f, r0	; 63
    2280:	80 91 8d 08 	lds	r24, 0x088D
    2284:	90 91 8e 08 	lds	r25, 0x088E
    2288:	c8 17       	cp	r28, r24
    228a:	d9 07       	cpc	r29, r25
    228c:	a1 f4       	brne	.+40     	; 0x22b6 <vTaskSuspend+0x7c>
    228e:	80 91 29 08 	lds	r24, 0x0829
    2292:	88 23       	and	r24, r24
    2294:	19 f0       	breq	.+6      	; 0x229c <vTaskSuspend+0x62>
    2296:	0e 94 19 09 	call	0x1232	; 0x1232 <vPortYield>
    229a:	17 c0       	rjmp	.+46     	; 0x22ca <vTaskSuspend+0x90>
    229c:	80 91 2d 08 	lds	r24, 0x082D
    22a0:	90 91 2e 08 	lds	r25, 0x082E
    22a4:	98 13       	cpse	r25, r24
    22a6:	05 c0       	rjmp	.+10     	; 0x22b2 <vTaskSuspend+0x78>
    22a8:	10 92 8e 08 	sts	0x088E, r1
    22ac:	10 92 8d 08 	sts	0x088D, r1
    22b0:	0c c0       	rjmp	.+24     	; 0x22ca <vTaskSuspend+0x90>
    22b2:	65 df       	rcall	.-310    	; 0x217e <vTaskSwitchContext>
    22b4:	0a c0       	rjmp	.+20     	; 0x22ca <vTaskSuspend+0x90>
    22b6:	80 91 29 08 	lds	r24, 0x0829
    22ba:	88 23       	and	r24, r24
    22bc:	31 f0       	breq	.+12     	; 0x22ca <vTaskSuspend+0x90>
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	0f 92       	push	r0
    22c4:	96 db       	rcall	.-2260   	; 0x19f2 <prvResetNextTaskUnblockTime>
    22c6:	0f 90       	pop	r0
    22c8:	0f be       	out	0x3f, r0	; 63
    22ca:	df 91       	pop	r29
    22cc:	cf 91       	pop	r28
    22ce:	1f 91       	pop	r17
    22d0:	0f 91       	pop	r16
    22d2:	08 95       	ret

000022d4 <vTaskPlaceOnEventList>:
    22d4:	cf 93       	push	r28
    22d6:	df 93       	push	r29
    22d8:	eb 01       	movw	r28, r22
    22da:	60 91 8d 08 	lds	r22, 0x088D
    22de:	70 91 8e 08 	lds	r23, 0x088E
    22e2:	64 5f       	subi	r22, 0xF4	; 244
    22e4:	7f 4f       	sbci	r23, 0xFF	; 255
    22e6:	0e 94 18 03 	call	0x630	; 0x630 <vListInsert>
    22ea:	80 91 8d 08 	lds	r24, 0x088D
    22ee:	90 91 8e 08 	lds	r25, 0x088E
    22f2:	02 96       	adiw	r24, 0x02	; 2
    22f4:	0e 94 49 03 	call	0x692	; 0x692 <uxListRemove>
    22f8:	cf 3f       	cpi	r28, 0xFF	; 255
    22fa:	8f ef       	ldi	r24, 0xFF	; 255
    22fc:	d8 07       	cpc	r29, r24
    22fe:	59 f4       	brne	.+22     	; 0x2316 <vTaskPlaceOnEventList+0x42>
    2300:	60 91 8d 08 	lds	r22, 0x088D
    2304:	70 91 8e 08 	lds	r23, 0x088E
    2308:	6e 5f       	subi	r22, 0xFE	; 254
    230a:	7f 4f       	sbci	r23, 0xFF	; 255
    230c:	8e e2       	ldi	r24, 0x2E	; 46
    230e:	98 e0       	ldi	r25, 0x08	; 8
    2310:	0e 94 f7 02 	call	0x5ee	; 0x5ee <vListInsertEnd>
    2314:	07 c0       	rjmp	.+14     	; 0x2324 <vTaskPlaceOnEventList+0x50>
    2316:	80 91 2b 08 	lds	r24, 0x082B
    231a:	90 91 2c 08 	lds	r25, 0x082C
    231e:	8c 0f       	add	r24, r28
    2320:	9d 1f       	adc	r25, r29
    2322:	86 db       	rcall	.-2292   	; 0x1a30 <prvAddCurrentTaskToDelayedList>
    2324:	df 91       	pop	r29
    2326:	cf 91       	pop	r28
    2328:	08 95       	ret

0000232a <xTaskRemoveFromEventList>:
    232a:	0f 93       	push	r16
    232c:	1f 93       	push	r17
    232e:	cf 93       	push	r28
    2330:	df 93       	push	r29
    2332:	dc 01       	movw	r26, r24
    2334:	15 96       	adiw	r26, 0x05	; 5
    2336:	ed 91       	ld	r30, X+
    2338:	fc 91       	ld	r31, X
    233a:	16 97       	sbiw	r26, 0x06	; 6
    233c:	c6 81       	ldd	r28, Z+6	; 0x06
    233e:	d7 81       	ldd	r29, Z+7	; 0x07
    2340:	8e 01       	movw	r16, r28
    2342:	04 5f       	subi	r16, 0xF4	; 244
    2344:	1f 4f       	sbci	r17, 0xFF	; 255
    2346:	c8 01       	movw	r24, r16
    2348:	0e 94 49 03 	call	0x692	; 0x692 <uxListRemove>
    234c:	80 91 24 08 	lds	r24, 0x0824
    2350:	81 11       	cpse	r24, r1
    2352:	1c c0       	rjmp	.+56     	; 0x238c <xTaskRemoveFromEventList+0x62>
    2354:	0a 50       	subi	r16, 0x0A	; 10
    2356:	11 09       	sbc	r17, r1
    2358:	c8 01       	movw	r24, r16
    235a:	0e 94 49 03 	call	0x692	; 0x692 <uxListRemove>
    235e:	8e 89       	ldd	r24, Y+22	; 0x16
    2360:	90 91 2a 08 	lds	r25, 0x082A
    2364:	98 17       	cp	r25, r24
    2366:	10 f4       	brcc	.+4      	; 0x236c <xTaskRemoveFromEventList+0x42>
    2368:	80 93 2a 08 	sts	0x082A, r24
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	9c 01       	movw	r18, r24
    2370:	22 0f       	add	r18, r18
    2372:	33 1f       	adc	r19, r19
    2374:	22 0f       	add	r18, r18
    2376:	33 1f       	adc	r19, r19
    2378:	22 0f       	add	r18, r18
    237a:	33 1f       	adc	r19, r19
    237c:	82 0f       	add	r24, r18
    237e:	93 1f       	adc	r25, r19
    2380:	b8 01       	movw	r22, r16
    2382:	80 5a       	subi	r24, 0xA0	; 160
    2384:	97 4f       	sbci	r25, 0xF7	; 247
    2386:	0e 94 f7 02 	call	0x5ee	; 0x5ee <vListInsertEnd>
    238a:	05 c0       	rjmp	.+10     	; 0x2396 <xTaskRemoveFromEventList+0x6c>
    238c:	b8 01       	movw	r22, r16
    238e:	81 e4       	ldi	r24, 0x41	; 65
    2390:	98 e0       	ldi	r25, 0x08	; 8
    2392:	0e 94 f7 02 	call	0x5ee	; 0x5ee <vListInsertEnd>
    2396:	e0 91 8d 08 	lds	r30, 0x088D
    239a:	f0 91 8e 08 	lds	r31, 0x088E
    239e:	9e 89       	ldd	r25, Y+22	; 0x16
    23a0:	86 89       	ldd	r24, Z+22	; 0x16
    23a2:	89 17       	cp	r24, r25
    23a4:	20 f4       	brcc	.+8      	; 0x23ae <xTaskRemoveFromEventList+0x84>
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	80 93 27 08 	sts	0x0827, r24
    23ac:	01 c0       	rjmp	.+2      	; 0x23b0 <xTaskRemoveFromEventList+0x86>
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	df 91       	pop	r29
    23b2:	cf 91       	pop	r28
    23b4:	1f 91       	pop	r17
    23b6:	0f 91       	pop	r16
    23b8:	08 95       	ret

000023ba <vTaskSetTimeOutState>:
    23ba:	20 91 26 08 	lds	r18, 0x0826
    23be:	fc 01       	movw	r30, r24
    23c0:	20 83       	st	Z, r18
    23c2:	20 91 2b 08 	lds	r18, 0x082B
    23c6:	30 91 2c 08 	lds	r19, 0x082C
    23ca:	32 83       	std	Z+2, r19	; 0x02
    23cc:	21 83       	std	Z+1, r18	; 0x01
    23ce:	08 95       	ret

000023d0 <xTaskCheckForTimeOut>:
    23d0:	0f b6       	in	r0, 0x3f	; 63
    23d2:	f8 94       	cli
    23d4:	0f 92       	push	r0
    23d6:	40 91 2b 08 	lds	r20, 0x082B
    23da:	50 91 2c 08 	lds	r21, 0x082C
    23de:	db 01       	movw	r26, r22
    23e0:	2d 91       	ld	r18, X+
    23e2:	3c 91       	ld	r19, X
    23e4:	2f 3f       	cpi	r18, 0xFF	; 255
    23e6:	bf ef       	ldi	r27, 0xFF	; 255
    23e8:	3b 07       	cpc	r19, r27
    23ea:	11 f1       	breq	.+68     	; 0x2430 <xTaskCheckForTimeOut+0x60>
    23ec:	e0 91 26 08 	lds	r30, 0x0826
    23f0:	dc 01       	movw	r26, r24
    23f2:	fc 91       	ld	r31, X
    23f4:	fe 17       	cp	r31, r30
    23f6:	39 f0       	breq	.+14     	; 0x2406 <xTaskCheckForTimeOut+0x36>
    23f8:	11 96       	adiw	r26, 0x01	; 1
    23fa:	ed 91       	ld	r30, X+
    23fc:	fc 91       	ld	r31, X
    23fe:	12 97       	sbiw	r26, 0x02	; 2
    2400:	4e 17       	cp	r20, r30
    2402:	5f 07       	cpc	r21, r31
    2404:	b8 f4       	brcc	.+46     	; 0x2434 <xTaskCheckForTimeOut+0x64>
    2406:	dc 01       	movw	r26, r24
    2408:	11 96       	adiw	r26, 0x01	; 1
    240a:	ed 91       	ld	r30, X+
    240c:	fc 91       	ld	r31, X
    240e:	12 97       	sbiw	r26, 0x02	; 2
    2410:	da 01       	movw	r26, r20
    2412:	ae 1b       	sub	r26, r30
    2414:	bf 0b       	sbc	r27, r31
    2416:	a2 17       	cp	r26, r18
    2418:	b3 07       	cpc	r27, r19
    241a:	70 f4       	brcc	.+28     	; 0x2438 <xTaskCheckForTimeOut+0x68>
    241c:	e4 1b       	sub	r30, r20
    241e:	f5 0b       	sbc	r31, r21
    2420:	2e 0f       	add	r18, r30
    2422:	3f 1f       	adc	r19, r31
    2424:	fb 01       	movw	r30, r22
    2426:	31 83       	std	Z+1, r19	; 0x01
    2428:	20 83       	st	Z, r18
    242a:	c7 df       	rcall	.-114    	; 0x23ba <vTaskSetTimeOutState>
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	05 c0       	rjmp	.+10     	; 0x243a <xTaskCheckForTimeOut+0x6a>
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	03 c0       	rjmp	.+6      	; 0x243a <xTaskCheckForTimeOut+0x6a>
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	01 c0       	rjmp	.+2      	; 0x243a <xTaskCheckForTimeOut+0x6a>
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	0f 90       	pop	r0
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	08 95       	ret

00002440 <vTaskMissedYield>:
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	80 93 27 08 	sts	0x0827, r24
    2446:	08 95       	ret

00002448 <vTaskPriorityInherit>:
    2448:	0f 93       	push	r16
    244a:	1f 93       	push	r17
    244c:	cf 93       	push	r28
    244e:	df 93       	push	r29
    2450:	ec 01       	movw	r28, r24
    2452:	00 97       	sbiw	r24, 0x00	; 0
    2454:	09 f4       	brne	.+2      	; 0x2458 <vTaskPriorityInherit+0x10>
    2456:	51 c0       	rjmp	.+162    	; 0x24fa <vTaskPriorityInherit+0xb2>
    2458:	8e 89       	ldd	r24, Y+22	; 0x16
    245a:	e0 91 8d 08 	lds	r30, 0x088D
    245e:	f0 91 8e 08 	lds	r31, 0x088E
    2462:	96 89       	ldd	r25, Z+22	; 0x16
    2464:	89 17       	cp	r24, r25
    2466:	08 f0       	brcs	.+2      	; 0x246a <vTaskPriorityInherit+0x22>
    2468:	48 c0       	rjmp	.+144    	; 0x24fa <vTaskPriorityInherit+0xb2>
    246a:	2c 85       	ldd	r18, Y+12	; 0x0c
    246c:	3d 85       	ldd	r19, Y+13	; 0x0d
    246e:	33 23       	and	r19, r19
    2470:	5c f0       	brlt	.+22     	; 0x2488 <vTaskPriorityInherit+0x40>
    2472:	e0 91 8d 08 	lds	r30, 0x088D
    2476:	f0 91 8e 08 	lds	r31, 0x088E
    247a:	96 89       	ldd	r25, Z+22	; 0x16
    247c:	25 e0       	ldi	r18, 0x05	; 5
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	29 1b       	sub	r18, r25
    2482:	31 09       	sbc	r19, r1
    2484:	3d 87       	std	Y+13, r19	; 0x0d
    2486:	2c 87       	std	Y+12, r18	; 0x0c
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	9c 01       	movw	r18, r24
    248c:	22 0f       	add	r18, r18
    248e:	33 1f       	adc	r19, r19
    2490:	22 0f       	add	r18, r18
    2492:	33 1f       	adc	r19, r19
    2494:	22 0f       	add	r18, r18
    2496:	33 1f       	adc	r19, r19
    2498:	82 0f       	add	r24, r18
    249a:	93 1f       	adc	r25, r19
    249c:	80 5a       	subi	r24, 0xA0	; 160
    249e:	97 4f       	sbci	r25, 0xF7	; 247
    24a0:	2a 85       	ldd	r18, Y+10	; 0x0a
    24a2:	3b 85       	ldd	r19, Y+11	; 0x0b
    24a4:	28 17       	cp	r18, r24
    24a6:	39 07       	cpc	r19, r25
    24a8:	11 f5       	brne	.+68     	; 0x24ee <vTaskPriorityInherit+0xa6>
    24aa:	8e 01       	movw	r16, r28
    24ac:	0e 5f       	subi	r16, 0xFE	; 254
    24ae:	1f 4f       	sbci	r17, 0xFF	; 255
    24b0:	c8 01       	movw	r24, r16
    24b2:	0e 94 49 03 	call	0x692	; 0x692 <uxListRemove>
    24b6:	e0 91 8d 08 	lds	r30, 0x088D
    24ba:	f0 91 8e 08 	lds	r31, 0x088E
    24be:	86 89       	ldd	r24, Z+22	; 0x16
    24c0:	8e 8b       	std	Y+22, r24	; 0x16
    24c2:	90 91 2a 08 	lds	r25, 0x082A
    24c6:	98 17       	cp	r25, r24
    24c8:	10 f4       	brcc	.+4      	; 0x24ce <vTaskPriorityInherit+0x86>
    24ca:	80 93 2a 08 	sts	0x082A, r24
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	9c 01       	movw	r18, r24
    24d2:	22 0f       	add	r18, r18
    24d4:	33 1f       	adc	r19, r19
    24d6:	22 0f       	add	r18, r18
    24d8:	33 1f       	adc	r19, r19
    24da:	22 0f       	add	r18, r18
    24dc:	33 1f       	adc	r19, r19
    24de:	82 0f       	add	r24, r18
    24e0:	93 1f       	adc	r25, r19
    24e2:	b8 01       	movw	r22, r16
    24e4:	80 5a       	subi	r24, 0xA0	; 160
    24e6:	97 4f       	sbci	r25, 0xF7	; 247
    24e8:	0e 94 f7 02 	call	0x5ee	; 0x5ee <vListInsertEnd>
    24ec:	06 c0       	rjmp	.+12     	; 0x24fa <vTaskPriorityInherit+0xb2>
    24ee:	e0 91 8d 08 	lds	r30, 0x088D
    24f2:	f0 91 8e 08 	lds	r31, 0x088E
    24f6:	86 89       	ldd	r24, Z+22	; 0x16
    24f8:	8e 8b       	std	Y+22, r24	; 0x16
    24fa:	df 91       	pop	r29
    24fc:	cf 91       	pop	r28
    24fe:	1f 91       	pop	r17
    2500:	0f 91       	pop	r16
    2502:	08 95       	ret

00002504 <xTaskPriorityDisinherit>:
    2504:	0f 93       	push	r16
    2506:	1f 93       	push	r17
    2508:	cf 93       	push	r28
    250a:	df 93       	push	r29
    250c:	ec 01       	movw	r28, r24
    250e:	00 97       	sbiw	r24, 0x00	; 0
    2510:	71 f1       	breq	.+92     	; 0x256e <xTaskPriorityDisinherit+0x6a>
    2512:	8a a1       	ldd	r24, Y+34	; 0x22
    2514:	81 50       	subi	r24, 0x01	; 1
    2516:	8a a3       	std	Y+34, r24	; 0x22
    2518:	2e 89       	ldd	r18, Y+22	; 0x16
    251a:	99 a1       	ldd	r25, Y+33	; 0x21
    251c:	29 17       	cp	r18, r25
    251e:	49 f1       	breq	.+82     	; 0x2572 <xTaskPriorityDisinherit+0x6e>
    2520:	81 11       	cpse	r24, r1
    2522:	29 c0       	rjmp	.+82     	; 0x2576 <xTaskPriorityDisinherit+0x72>
    2524:	8e 01       	movw	r16, r28
    2526:	0e 5f       	subi	r16, 0xFE	; 254
    2528:	1f 4f       	sbci	r17, 0xFF	; 255
    252a:	c8 01       	movw	r24, r16
    252c:	0e 94 49 03 	call	0x692	; 0x692 <uxListRemove>
    2530:	89 a1       	ldd	r24, Y+33	; 0x21
    2532:	8e 8b       	std	Y+22, r24	; 0x16
    2534:	25 e0       	ldi	r18, 0x05	; 5
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	28 1b       	sub	r18, r24
    253a:	31 09       	sbc	r19, r1
    253c:	3d 87       	std	Y+13, r19	; 0x0d
    253e:	2c 87       	std	Y+12, r18	; 0x0c
    2540:	90 91 2a 08 	lds	r25, 0x082A
    2544:	98 17       	cp	r25, r24
    2546:	10 f4       	brcc	.+4      	; 0x254c <xTaskPriorityDisinherit+0x48>
    2548:	80 93 2a 08 	sts	0x082A, r24
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	9c 01       	movw	r18, r24
    2550:	22 0f       	add	r18, r18
    2552:	33 1f       	adc	r19, r19
    2554:	22 0f       	add	r18, r18
    2556:	33 1f       	adc	r19, r19
    2558:	22 0f       	add	r18, r18
    255a:	33 1f       	adc	r19, r19
    255c:	82 0f       	add	r24, r18
    255e:	93 1f       	adc	r25, r19
    2560:	b8 01       	movw	r22, r16
    2562:	80 5a       	subi	r24, 0xA0	; 160
    2564:	97 4f       	sbci	r25, 0xF7	; 247
    2566:	0e 94 f7 02 	call	0x5ee	; 0x5ee <vListInsertEnd>
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	05 c0       	rjmp	.+10     	; 0x2578 <xTaskPriorityDisinherit+0x74>
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	03 c0       	rjmp	.+6      	; 0x2578 <xTaskPriorityDisinherit+0x74>
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	01 c0       	rjmp	.+2      	; 0x2578 <xTaskPriorityDisinherit+0x74>
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	df 91       	pop	r29
    257a:	cf 91       	pop	r28
    257c:	1f 91       	pop	r17
    257e:	0f 91       	pop	r16
    2580:	08 95       	ret

00002582 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    2582:	80 91 8d 08 	lds	r24, 0x088D
    2586:	90 91 8e 08 	lds	r25, 0x088E
    258a:	89 2b       	or	r24, r25
    258c:	39 f0       	breq	.+14     	; 0x259c <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    258e:	e0 91 8d 08 	lds	r30, 0x088D
    2592:	f0 91 8e 08 	lds	r31, 0x088E
    2596:	82 a1       	ldd	r24, Z+34	; 0x22
    2598:	8f 5f       	subi	r24, 0xFF	; 255
    259a:	82 a3       	std	Z+34, r24	; 0x22
		}

		return pxCurrentTCB;
    259c:	80 91 8d 08 	lds	r24, 0x088D
    25a0:	90 91 8e 08 	lds	r25, 0x088E
	}
    25a4:	08 95       	ret

000025a6 <__subsf3>:
    25a6:	50 58       	subi	r21, 0x80	; 128

000025a8 <__addsf3>:
    25a8:	bb 27       	eor	r27, r27
    25aa:	aa 27       	eor	r26, r26
    25ac:	0e d0       	rcall	.+28     	; 0x25ca <__addsf3x>
    25ae:	e5 c0       	rjmp	.+458    	; 0x277a <__fp_round>
    25b0:	d6 d0       	rcall	.+428    	; 0x275e <__fp_pscA>
    25b2:	30 f0       	brcs	.+12     	; 0x25c0 <__addsf3+0x18>
    25b4:	db d0       	rcall	.+438    	; 0x276c <__fp_pscB>
    25b6:	20 f0       	brcs	.+8      	; 0x25c0 <__addsf3+0x18>
    25b8:	31 f4       	brne	.+12     	; 0x25c6 <__addsf3+0x1e>
    25ba:	9f 3f       	cpi	r25, 0xFF	; 255
    25bc:	11 f4       	brne	.+4      	; 0x25c2 <__addsf3+0x1a>
    25be:	1e f4       	brtc	.+6      	; 0x25c6 <__addsf3+0x1e>
    25c0:	cb c0       	rjmp	.+406    	; 0x2758 <__fp_nan>
    25c2:	0e f4       	brtc	.+2      	; 0x25c6 <__addsf3+0x1e>
    25c4:	e0 95       	com	r30
    25c6:	e7 fb       	bst	r30, 7
    25c8:	c1 c0       	rjmp	.+386    	; 0x274c <__fp_inf>

000025ca <__addsf3x>:
    25ca:	e9 2f       	mov	r30, r25
    25cc:	e7 d0       	rcall	.+462    	; 0x279c <__fp_split3>
    25ce:	80 f3       	brcs	.-32     	; 0x25b0 <__addsf3+0x8>
    25d0:	ba 17       	cp	r27, r26
    25d2:	62 07       	cpc	r22, r18
    25d4:	73 07       	cpc	r23, r19
    25d6:	84 07       	cpc	r24, r20
    25d8:	95 07       	cpc	r25, r21
    25da:	18 f0       	brcs	.+6      	; 0x25e2 <__addsf3x+0x18>
    25dc:	71 f4       	brne	.+28     	; 0x25fa <__addsf3x+0x30>
    25de:	9e f5       	brtc	.+102    	; 0x2646 <__addsf3x+0x7c>
    25e0:	ff c0       	rjmp	.+510    	; 0x27e0 <__fp_zero>
    25e2:	0e f4       	brtc	.+2      	; 0x25e6 <__addsf3x+0x1c>
    25e4:	e0 95       	com	r30
    25e6:	0b 2e       	mov	r0, r27
    25e8:	ba 2f       	mov	r27, r26
    25ea:	a0 2d       	mov	r26, r0
    25ec:	0b 01       	movw	r0, r22
    25ee:	b9 01       	movw	r22, r18
    25f0:	90 01       	movw	r18, r0
    25f2:	0c 01       	movw	r0, r24
    25f4:	ca 01       	movw	r24, r20
    25f6:	a0 01       	movw	r20, r0
    25f8:	11 24       	eor	r1, r1
    25fa:	ff 27       	eor	r31, r31
    25fc:	59 1b       	sub	r21, r25
    25fe:	99 f0       	breq	.+38     	; 0x2626 <__addsf3x+0x5c>
    2600:	59 3f       	cpi	r21, 0xF9	; 249
    2602:	50 f4       	brcc	.+20     	; 0x2618 <__addsf3x+0x4e>
    2604:	50 3e       	cpi	r21, 0xE0	; 224
    2606:	68 f1       	brcs	.+90     	; 0x2662 <__addsf3x+0x98>
    2608:	1a 16       	cp	r1, r26
    260a:	f0 40       	sbci	r31, 0x00	; 0
    260c:	a2 2f       	mov	r26, r18
    260e:	23 2f       	mov	r18, r19
    2610:	34 2f       	mov	r19, r20
    2612:	44 27       	eor	r20, r20
    2614:	58 5f       	subi	r21, 0xF8	; 248
    2616:	f3 cf       	rjmp	.-26     	; 0x25fe <__addsf3x+0x34>
    2618:	46 95       	lsr	r20
    261a:	37 95       	ror	r19
    261c:	27 95       	ror	r18
    261e:	a7 95       	ror	r26
    2620:	f0 40       	sbci	r31, 0x00	; 0
    2622:	53 95       	inc	r21
    2624:	c9 f7       	brne	.-14     	; 0x2618 <__addsf3x+0x4e>
    2626:	7e f4       	brtc	.+30     	; 0x2646 <__addsf3x+0x7c>
    2628:	1f 16       	cp	r1, r31
    262a:	ba 0b       	sbc	r27, r26
    262c:	62 0b       	sbc	r22, r18
    262e:	73 0b       	sbc	r23, r19
    2630:	84 0b       	sbc	r24, r20
    2632:	ba f0       	brmi	.+46     	; 0x2662 <__addsf3x+0x98>
    2634:	91 50       	subi	r25, 0x01	; 1
    2636:	a1 f0       	breq	.+40     	; 0x2660 <__addsf3x+0x96>
    2638:	ff 0f       	add	r31, r31
    263a:	bb 1f       	adc	r27, r27
    263c:	66 1f       	adc	r22, r22
    263e:	77 1f       	adc	r23, r23
    2640:	88 1f       	adc	r24, r24
    2642:	c2 f7       	brpl	.-16     	; 0x2634 <__addsf3x+0x6a>
    2644:	0e c0       	rjmp	.+28     	; 0x2662 <__addsf3x+0x98>
    2646:	ba 0f       	add	r27, r26
    2648:	62 1f       	adc	r22, r18
    264a:	73 1f       	adc	r23, r19
    264c:	84 1f       	adc	r24, r20
    264e:	48 f4       	brcc	.+18     	; 0x2662 <__addsf3x+0x98>
    2650:	87 95       	ror	r24
    2652:	77 95       	ror	r23
    2654:	67 95       	ror	r22
    2656:	b7 95       	ror	r27
    2658:	f7 95       	ror	r31
    265a:	9e 3f       	cpi	r25, 0xFE	; 254
    265c:	08 f0       	brcs	.+2      	; 0x2660 <__addsf3x+0x96>
    265e:	b3 cf       	rjmp	.-154    	; 0x25c6 <__addsf3+0x1e>
    2660:	93 95       	inc	r25
    2662:	88 0f       	add	r24, r24
    2664:	08 f0       	brcs	.+2      	; 0x2668 <__addsf3x+0x9e>
    2666:	99 27       	eor	r25, r25
    2668:	ee 0f       	add	r30, r30
    266a:	97 95       	ror	r25
    266c:	87 95       	ror	r24
    266e:	08 95       	ret

00002670 <__fixsfsi>:
    2670:	04 d0       	rcall	.+8      	; 0x267a <__fixunssfsi>
    2672:	68 94       	set
    2674:	b1 11       	cpse	r27, r1
    2676:	b5 c0       	rjmp	.+362    	; 0x27e2 <__fp_szero>
    2678:	08 95       	ret

0000267a <__fixunssfsi>:
    267a:	98 d0       	rcall	.+304    	; 0x27ac <__fp_splitA>
    267c:	88 f0       	brcs	.+34     	; 0x26a0 <__fixunssfsi+0x26>
    267e:	9f 57       	subi	r25, 0x7F	; 127
    2680:	90 f0       	brcs	.+36     	; 0x26a6 <__fixunssfsi+0x2c>
    2682:	b9 2f       	mov	r27, r25
    2684:	99 27       	eor	r25, r25
    2686:	b7 51       	subi	r27, 0x17	; 23
    2688:	a0 f0       	brcs	.+40     	; 0x26b2 <__fixunssfsi+0x38>
    268a:	d1 f0       	breq	.+52     	; 0x26c0 <__fixunssfsi+0x46>
    268c:	66 0f       	add	r22, r22
    268e:	77 1f       	adc	r23, r23
    2690:	88 1f       	adc	r24, r24
    2692:	99 1f       	adc	r25, r25
    2694:	1a f0       	brmi	.+6      	; 0x269c <__fixunssfsi+0x22>
    2696:	ba 95       	dec	r27
    2698:	c9 f7       	brne	.-14     	; 0x268c <__fixunssfsi+0x12>
    269a:	12 c0       	rjmp	.+36     	; 0x26c0 <__fixunssfsi+0x46>
    269c:	b1 30       	cpi	r27, 0x01	; 1
    269e:	81 f0       	breq	.+32     	; 0x26c0 <__fixunssfsi+0x46>
    26a0:	9f d0       	rcall	.+318    	; 0x27e0 <__fp_zero>
    26a2:	b1 e0       	ldi	r27, 0x01	; 1
    26a4:	08 95       	ret
    26a6:	9c c0       	rjmp	.+312    	; 0x27e0 <__fp_zero>
    26a8:	67 2f       	mov	r22, r23
    26aa:	78 2f       	mov	r23, r24
    26ac:	88 27       	eor	r24, r24
    26ae:	b8 5f       	subi	r27, 0xF8	; 248
    26b0:	39 f0       	breq	.+14     	; 0x26c0 <__fixunssfsi+0x46>
    26b2:	b9 3f       	cpi	r27, 0xF9	; 249
    26b4:	cc f3       	brlt	.-14     	; 0x26a8 <__fixunssfsi+0x2e>
    26b6:	86 95       	lsr	r24
    26b8:	77 95       	ror	r23
    26ba:	67 95       	ror	r22
    26bc:	b3 95       	inc	r27
    26be:	d9 f7       	brne	.-10     	; 0x26b6 <__fixunssfsi+0x3c>
    26c0:	3e f4       	brtc	.+14     	; 0x26d0 <__fixunssfsi+0x56>
    26c2:	90 95       	com	r25
    26c4:	80 95       	com	r24
    26c6:	70 95       	com	r23
    26c8:	61 95       	neg	r22
    26ca:	7f 4f       	sbci	r23, 0xFF	; 255
    26cc:	8f 4f       	sbci	r24, 0xFF	; 255
    26ce:	9f 4f       	sbci	r25, 0xFF	; 255
    26d0:	08 95       	ret

000026d2 <__floatunsisf>:
    26d2:	e8 94       	clt
    26d4:	09 c0       	rjmp	.+18     	; 0x26e8 <__floatsisf+0x12>

000026d6 <__floatsisf>:
    26d6:	97 fb       	bst	r25, 7
    26d8:	3e f4       	brtc	.+14     	; 0x26e8 <__floatsisf+0x12>
    26da:	90 95       	com	r25
    26dc:	80 95       	com	r24
    26de:	70 95       	com	r23
    26e0:	61 95       	neg	r22
    26e2:	7f 4f       	sbci	r23, 0xFF	; 255
    26e4:	8f 4f       	sbci	r24, 0xFF	; 255
    26e6:	9f 4f       	sbci	r25, 0xFF	; 255
    26e8:	99 23       	and	r25, r25
    26ea:	a9 f0       	breq	.+42     	; 0x2716 <__floatsisf+0x40>
    26ec:	f9 2f       	mov	r31, r25
    26ee:	96 e9       	ldi	r25, 0x96	; 150
    26f0:	bb 27       	eor	r27, r27
    26f2:	93 95       	inc	r25
    26f4:	f6 95       	lsr	r31
    26f6:	87 95       	ror	r24
    26f8:	77 95       	ror	r23
    26fa:	67 95       	ror	r22
    26fc:	b7 95       	ror	r27
    26fe:	f1 11       	cpse	r31, r1
    2700:	f8 cf       	rjmp	.-16     	; 0x26f2 <__floatsisf+0x1c>
    2702:	fa f4       	brpl	.+62     	; 0x2742 <__floatsisf+0x6c>
    2704:	bb 0f       	add	r27, r27
    2706:	11 f4       	brne	.+4      	; 0x270c <__floatsisf+0x36>
    2708:	60 ff       	sbrs	r22, 0
    270a:	1b c0       	rjmp	.+54     	; 0x2742 <__floatsisf+0x6c>
    270c:	6f 5f       	subi	r22, 0xFF	; 255
    270e:	7f 4f       	sbci	r23, 0xFF	; 255
    2710:	8f 4f       	sbci	r24, 0xFF	; 255
    2712:	9f 4f       	sbci	r25, 0xFF	; 255
    2714:	16 c0       	rjmp	.+44     	; 0x2742 <__floatsisf+0x6c>
    2716:	88 23       	and	r24, r24
    2718:	11 f0       	breq	.+4      	; 0x271e <__floatsisf+0x48>
    271a:	96 e9       	ldi	r25, 0x96	; 150
    271c:	11 c0       	rjmp	.+34     	; 0x2740 <__floatsisf+0x6a>
    271e:	77 23       	and	r23, r23
    2720:	21 f0       	breq	.+8      	; 0x272a <__floatsisf+0x54>
    2722:	9e e8       	ldi	r25, 0x8E	; 142
    2724:	87 2f       	mov	r24, r23
    2726:	76 2f       	mov	r23, r22
    2728:	05 c0       	rjmp	.+10     	; 0x2734 <__floatsisf+0x5e>
    272a:	66 23       	and	r22, r22
    272c:	71 f0       	breq	.+28     	; 0x274a <__floatsisf+0x74>
    272e:	96 e8       	ldi	r25, 0x86	; 134
    2730:	86 2f       	mov	r24, r22
    2732:	70 e0       	ldi	r23, 0x00	; 0
    2734:	60 e0       	ldi	r22, 0x00	; 0
    2736:	2a f0       	brmi	.+10     	; 0x2742 <__floatsisf+0x6c>
    2738:	9a 95       	dec	r25
    273a:	66 0f       	add	r22, r22
    273c:	77 1f       	adc	r23, r23
    273e:	88 1f       	adc	r24, r24
    2740:	da f7       	brpl	.-10     	; 0x2738 <__floatsisf+0x62>
    2742:	88 0f       	add	r24, r24
    2744:	96 95       	lsr	r25
    2746:	87 95       	ror	r24
    2748:	97 f9       	bld	r25, 7
    274a:	08 95       	ret

0000274c <__fp_inf>:
    274c:	97 f9       	bld	r25, 7
    274e:	9f 67       	ori	r25, 0x7F	; 127
    2750:	80 e8       	ldi	r24, 0x80	; 128
    2752:	70 e0       	ldi	r23, 0x00	; 0
    2754:	60 e0       	ldi	r22, 0x00	; 0
    2756:	08 95       	ret

00002758 <__fp_nan>:
    2758:	9f ef       	ldi	r25, 0xFF	; 255
    275a:	80 ec       	ldi	r24, 0xC0	; 192
    275c:	08 95       	ret

0000275e <__fp_pscA>:
    275e:	00 24       	eor	r0, r0
    2760:	0a 94       	dec	r0
    2762:	16 16       	cp	r1, r22
    2764:	17 06       	cpc	r1, r23
    2766:	18 06       	cpc	r1, r24
    2768:	09 06       	cpc	r0, r25
    276a:	08 95       	ret

0000276c <__fp_pscB>:
    276c:	00 24       	eor	r0, r0
    276e:	0a 94       	dec	r0
    2770:	12 16       	cp	r1, r18
    2772:	13 06       	cpc	r1, r19
    2774:	14 06       	cpc	r1, r20
    2776:	05 06       	cpc	r0, r21
    2778:	08 95       	ret

0000277a <__fp_round>:
    277a:	09 2e       	mov	r0, r25
    277c:	03 94       	inc	r0
    277e:	00 0c       	add	r0, r0
    2780:	11 f4       	brne	.+4      	; 0x2786 <__fp_round+0xc>
    2782:	88 23       	and	r24, r24
    2784:	52 f0       	brmi	.+20     	; 0x279a <__fp_round+0x20>
    2786:	bb 0f       	add	r27, r27
    2788:	40 f4       	brcc	.+16     	; 0x279a <__fp_round+0x20>
    278a:	bf 2b       	or	r27, r31
    278c:	11 f4       	brne	.+4      	; 0x2792 <__fp_round+0x18>
    278e:	60 ff       	sbrs	r22, 0
    2790:	04 c0       	rjmp	.+8      	; 0x279a <__fp_round+0x20>
    2792:	6f 5f       	subi	r22, 0xFF	; 255
    2794:	7f 4f       	sbci	r23, 0xFF	; 255
    2796:	8f 4f       	sbci	r24, 0xFF	; 255
    2798:	9f 4f       	sbci	r25, 0xFF	; 255
    279a:	08 95       	ret

0000279c <__fp_split3>:
    279c:	57 fd       	sbrc	r21, 7
    279e:	90 58       	subi	r25, 0x80	; 128
    27a0:	44 0f       	add	r20, r20
    27a2:	55 1f       	adc	r21, r21
    27a4:	59 f0       	breq	.+22     	; 0x27bc <__fp_splitA+0x10>
    27a6:	5f 3f       	cpi	r21, 0xFF	; 255
    27a8:	71 f0       	breq	.+28     	; 0x27c6 <__fp_splitA+0x1a>
    27aa:	47 95       	ror	r20

000027ac <__fp_splitA>:
    27ac:	88 0f       	add	r24, r24
    27ae:	97 fb       	bst	r25, 7
    27b0:	99 1f       	adc	r25, r25
    27b2:	61 f0       	breq	.+24     	; 0x27cc <__fp_splitA+0x20>
    27b4:	9f 3f       	cpi	r25, 0xFF	; 255
    27b6:	79 f0       	breq	.+30     	; 0x27d6 <__fp_splitA+0x2a>
    27b8:	87 95       	ror	r24
    27ba:	08 95       	ret
    27bc:	12 16       	cp	r1, r18
    27be:	13 06       	cpc	r1, r19
    27c0:	14 06       	cpc	r1, r20
    27c2:	55 1f       	adc	r21, r21
    27c4:	f2 cf       	rjmp	.-28     	; 0x27aa <__fp_split3+0xe>
    27c6:	46 95       	lsr	r20
    27c8:	f1 df       	rcall	.-30     	; 0x27ac <__fp_splitA>
    27ca:	08 c0       	rjmp	.+16     	; 0x27dc <__fp_splitA+0x30>
    27cc:	16 16       	cp	r1, r22
    27ce:	17 06       	cpc	r1, r23
    27d0:	18 06       	cpc	r1, r24
    27d2:	99 1f       	adc	r25, r25
    27d4:	f1 cf       	rjmp	.-30     	; 0x27b8 <__fp_splitA+0xc>
    27d6:	86 95       	lsr	r24
    27d8:	71 05       	cpc	r23, r1
    27da:	61 05       	cpc	r22, r1
    27dc:	08 94       	sec
    27de:	08 95       	ret

000027e0 <__fp_zero>:
    27e0:	e8 94       	clt

000027e2 <__fp_szero>:
    27e2:	bb 27       	eor	r27, r27
    27e4:	66 27       	eor	r22, r22
    27e6:	77 27       	eor	r23, r23
    27e8:	cb 01       	movw	r24, r22
    27ea:	97 f9       	bld	r25, 7
    27ec:	08 95       	ret

000027ee <__mulsf3>:
    27ee:	0b d0       	rcall	.+22     	; 0x2806 <__mulsf3x>
    27f0:	c4 cf       	rjmp	.-120    	; 0x277a <__fp_round>
    27f2:	b5 df       	rcall	.-150    	; 0x275e <__fp_pscA>
    27f4:	28 f0       	brcs	.+10     	; 0x2800 <__mulsf3+0x12>
    27f6:	ba df       	rcall	.-140    	; 0x276c <__fp_pscB>
    27f8:	18 f0       	brcs	.+6      	; 0x2800 <__mulsf3+0x12>
    27fa:	95 23       	and	r25, r21
    27fc:	09 f0       	breq	.+2      	; 0x2800 <__mulsf3+0x12>
    27fe:	a6 cf       	rjmp	.-180    	; 0x274c <__fp_inf>
    2800:	ab cf       	rjmp	.-170    	; 0x2758 <__fp_nan>
    2802:	11 24       	eor	r1, r1
    2804:	ee cf       	rjmp	.-36     	; 0x27e2 <__fp_szero>

00002806 <__mulsf3x>:
    2806:	ca df       	rcall	.-108    	; 0x279c <__fp_split3>
    2808:	a0 f3       	brcs	.-24     	; 0x27f2 <__mulsf3+0x4>

0000280a <__mulsf3_pse>:
    280a:	95 9f       	mul	r25, r21
    280c:	d1 f3       	breq	.-12     	; 0x2802 <__mulsf3+0x14>
    280e:	95 0f       	add	r25, r21
    2810:	50 e0       	ldi	r21, 0x00	; 0
    2812:	55 1f       	adc	r21, r21
    2814:	62 9f       	mul	r22, r18
    2816:	f0 01       	movw	r30, r0
    2818:	72 9f       	mul	r23, r18
    281a:	bb 27       	eor	r27, r27
    281c:	f0 0d       	add	r31, r0
    281e:	b1 1d       	adc	r27, r1
    2820:	63 9f       	mul	r22, r19
    2822:	aa 27       	eor	r26, r26
    2824:	f0 0d       	add	r31, r0
    2826:	b1 1d       	adc	r27, r1
    2828:	aa 1f       	adc	r26, r26
    282a:	64 9f       	mul	r22, r20
    282c:	66 27       	eor	r22, r22
    282e:	b0 0d       	add	r27, r0
    2830:	a1 1d       	adc	r26, r1
    2832:	66 1f       	adc	r22, r22
    2834:	82 9f       	mul	r24, r18
    2836:	22 27       	eor	r18, r18
    2838:	b0 0d       	add	r27, r0
    283a:	a1 1d       	adc	r26, r1
    283c:	62 1f       	adc	r22, r18
    283e:	73 9f       	mul	r23, r19
    2840:	b0 0d       	add	r27, r0
    2842:	a1 1d       	adc	r26, r1
    2844:	62 1f       	adc	r22, r18
    2846:	83 9f       	mul	r24, r19
    2848:	a0 0d       	add	r26, r0
    284a:	61 1d       	adc	r22, r1
    284c:	22 1f       	adc	r18, r18
    284e:	74 9f       	mul	r23, r20
    2850:	33 27       	eor	r19, r19
    2852:	a0 0d       	add	r26, r0
    2854:	61 1d       	adc	r22, r1
    2856:	23 1f       	adc	r18, r19
    2858:	84 9f       	mul	r24, r20
    285a:	60 0d       	add	r22, r0
    285c:	21 1d       	adc	r18, r1
    285e:	82 2f       	mov	r24, r18
    2860:	76 2f       	mov	r23, r22
    2862:	6a 2f       	mov	r22, r26
    2864:	11 24       	eor	r1, r1
    2866:	9f 57       	subi	r25, 0x7F	; 127
    2868:	50 40       	sbci	r21, 0x00	; 0
    286a:	8a f0       	brmi	.+34     	; 0x288e <__mulsf3_pse+0x84>
    286c:	e1 f0       	breq	.+56     	; 0x28a6 <__mulsf3_pse+0x9c>
    286e:	88 23       	and	r24, r24
    2870:	4a f0       	brmi	.+18     	; 0x2884 <__mulsf3_pse+0x7a>
    2872:	ee 0f       	add	r30, r30
    2874:	ff 1f       	adc	r31, r31
    2876:	bb 1f       	adc	r27, r27
    2878:	66 1f       	adc	r22, r22
    287a:	77 1f       	adc	r23, r23
    287c:	88 1f       	adc	r24, r24
    287e:	91 50       	subi	r25, 0x01	; 1
    2880:	50 40       	sbci	r21, 0x00	; 0
    2882:	a9 f7       	brne	.-22     	; 0x286e <__mulsf3_pse+0x64>
    2884:	9e 3f       	cpi	r25, 0xFE	; 254
    2886:	51 05       	cpc	r21, r1
    2888:	70 f0       	brcs	.+28     	; 0x28a6 <__mulsf3_pse+0x9c>
    288a:	60 cf       	rjmp	.-320    	; 0x274c <__fp_inf>
    288c:	aa cf       	rjmp	.-172    	; 0x27e2 <__fp_szero>
    288e:	5f 3f       	cpi	r21, 0xFF	; 255
    2890:	ec f3       	brlt	.-6      	; 0x288c <__mulsf3_pse+0x82>
    2892:	98 3e       	cpi	r25, 0xE8	; 232
    2894:	dc f3       	brlt	.-10     	; 0x288c <__mulsf3_pse+0x82>
    2896:	86 95       	lsr	r24
    2898:	77 95       	ror	r23
    289a:	67 95       	ror	r22
    289c:	b7 95       	ror	r27
    289e:	f7 95       	ror	r31
    28a0:	e7 95       	ror	r30
    28a2:	9f 5f       	subi	r25, 0xFF	; 255
    28a4:	c1 f7       	brne	.-16     	; 0x2896 <__mulsf3_pse+0x8c>
    28a6:	fe 2b       	or	r31, r30
    28a8:	88 0f       	add	r24, r24
    28aa:	91 1d       	adc	r25, r1
    28ac:	96 95       	lsr	r25
    28ae:	87 95       	ror	r24
    28b0:	97 f9       	bld	r25, 7
    28b2:	08 95       	ret

000028b4 <pow>:
    28b4:	fa 01       	movw	r30, r20
    28b6:	ee 0f       	add	r30, r30
    28b8:	ff 1f       	adc	r31, r31
    28ba:	30 96       	adiw	r30, 0x00	; 0
    28bc:	21 05       	cpc	r18, r1
    28be:	31 05       	cpc	r19, r1
    28c0:	99 f1       	breq	.+102    	; 0x2928 <pow+0x74>
    28c2:	61 15       	cp	r22, r1
    28c4:	71 05       	cpc	r23, r1
    28c6:	61 f4       	brne	.+24     	; 0x28e0 <pow+0x2c>
    28c8:	80 38       	cpi	r24, 0x80	; 128
    28ca:	bf e3       	ldi	r27, 0x3F	; 63
    28cc:	9b 07       	cpc	r25, r27
    28ce:	49 f1       	breq	.+82     	; 0x2922 <pow+0x6e>
    28d0:	68 94       	set
    28d2:	90 38       	cpi	r25, 0x80	; 128
    28d4:	81 05       	cpc	r24, r1
    28d6:	61 f0       	breq	.+24     	; 0x28f0 <pow+0x3c>
    28d8:	80 38       	cpi	r24, 0x80	; 128
    28da:	bf ef       	ldi	r27, 0xFF	; 255
    28dc:	9b 07       	cpc	r25, r27
    28de:	41 f0       	breq	.+16     	; 0x28f0 <pow+0x3c>
    28e0:	99 23       	and	r25, r25
    28e2:	42 f5       	brpl	.+80     	; 0x2934 <pow+0x80>
    28e4:	ff 3f       	cpi	r31, 0xFF	; 255
    28e6:	e1 05       	cpc	r30, r1
    28e8:	31 05       	cpc	r19, r1
    28ea:	21 05       	cpc	r18, r1
    28ec:	11 f1       	breq	.+68     	; 0x2932 <pow+0x7e>
    28ee:	e8 94       	clt
    28f0:	08 94       	sec
    28f2:	e7 95       	ror	r30
    28f4:	d9 01       	movw	r26, r18
    28f6:	aa 23       	and	r26, r26
    28f8:	29 f4       	brne	.+10     	; 0x2904 <pow+0x50>
    28fa:	ab 2f       	mov	r26, r27
    28fc:	be 2f       	mov	r27, r30
    28fe:	f8 5f       	subi	r31, 0xF8	; 248
    2900:	d0 f3       	brcs	.-12     	; 0x28f6 <pow+0x42>
    2902:	10 c0       	rjmp	.+32     	; 0x2924 <pow+0x70>
    2904:	ff 5f       	subi	r31, 0xFF	; 255
    2906:	70 f4       	brcc	.+28     	; 0x2924 <pow+0x70>
    2908:	a6 95       	lsr	r26
    290a:	e0 f7       	brcc	.-8      	; 0x2904 <pow+0x50>
    290c:	f7 39       	cpi	r31, 0x97	; 151
    290e:	50 f0       	brcs	.+20     	; 0x2924 <pow+0x70>
    2910:	19 f0       	breq	.+6      	; 0x2918 <pow+0x64>
    2912:	ff 3a       	cpi	r31, 0xAF	; 175
    2914:	38 f4       	brcc	.+14     	; 0x2924 <pow+0x70>
    2916:	9f 77       	andi	r25, 0x7F	; 127
    2918:	9f 93       	push	r25
    291a:	0c d0       	rcall	.+24     	; 0x2934 <pow+0x80>
    291c:	0f 90       	pop	r0
    291e:	07 fc       	sbrc	r0, 7
    2920:	90 58       	subi	r25, 0x80	; 128
    2922:	08 95       	ret
    2924:	3e f0       	brts	.+14     	; 0x2934 <pow+0x80>
    2926:	18 cf       	rjmp	.-464    	; 0x2758 <__fp_nan>
    2928:	60 e0       	ldi	r22, 0x00	; 0
    292a:	70 e0       	ldi	r23, 0x00	; 0
    292c:	80 e8       	ldi	r24, 0x80	; 128
    292e:	9f e3       	ldi	r25, 0x3F	; 63
    2930:	08 95       	ret
    2932:	4f e7       	ldi	r20, 0x7F	; 127
    2934:	9f 77       	andi	r25, 0x7F	; 127
    2936:	5f 93       	push	r21
    2938:	4f 93       	push	r20
    293a:	3f 93       	push	r19
    293c:	2f 93       	push	r18
    293e:	9e d0       	rcall	.+316    	; 0x2a7c <log>
    2940:	2f 91       	pop	r18
    2942:	3f 91       	pop	r19
    2944:	4f 91       	pop	r20
    2946:	5f 91       	pop	r21
    2948:	52 df       	rcall	.-348    	; 0x27ee <__mulsf3>
    294a:	05 c0       	rjmp	.+10     	; 0x2956 <exp>
    294c:	19 f4       	brne	.+6      	; 0x2954 <pow+0xa0>
    294e:	0e f0       	brts	.+2      	; 0x2952 <pow+0x9e>
    2950:	fd ce       	rjmp	.-518    	; 0x274c <__fp_inf>
    2952:	46 cf       	rjmp	.-372    	; 0x27e0 <__fp_zero>
    2954:	01 cf       	rjmp	.-510    	; 0x2758 <__fp_nan>

00002956 <exp>:
    2956:	2a df       	rcall	.-428    	; 0x27ac <__fp_splitA>
    2958:	c8 f3       	brcs	.-14     	; 0x294c <pow+0x98>
    295a:	96 38       	cpi	r25, 0x86	; 134
    295c:	c0 f7       	brcc	.-16     	; 0x294e <pow+0x9a>
    295e:	07 f8       	bld	r0, 7
    2960:	0f 92       	push	r0
    2962:	e8 94       	clt
    2964:	2b e3       	ldi	r18, 0x3B	; 59
    2966:	3a ea       	ldi	r19, 0xAA	; 170
    2968:	48 eb       	ldi	r20, 0xB8	; 184
    296a:	5f e7       	ldi	r21, 0x7F	; 127
    296c:	4e df       	rcall	.-356    	; 0x280a <__mulsf3_pse>
    296e:	0f 92       	push	r0
    2970:	0f 92       	push	r0
    2972:	0f 92       	push	r0
    2974:	4d b7       	in	r20, 0x3d	; 61
    2976:	5e b7       	in	r21, 0x3e	; 62
    2978:	0f 92       	push	r0
    297a:	c0 d0       	rcall	.+384    	; 0x2afc <modf>
    297c:	e4 ee       	ldi	r30, 0xE4	; 228
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	16 d0       	rcall	.+44     	; 0x29ae <__fp_powser>
    2982:	4f 91       	pop	r20
    2984:	5f 91       	pop	r21
    2986:	ef 91       	pop	r30
    2988:	ff 91       	pop	r31
    298a:	e5 95       	asr	r30
    298c:	ee 1f       	adc	r30, r30
    298e:	ff 1f       	adc	r31, r31
    2990:	49 f0       	breq	.+18     	; 0x29a4 <exp+0x4e>
    2992:	fe 57       	subi	r31, 0x7E	; 126
    2994:	e0 68       	ori	r30, 0x80	; 128
    2996:	44 27       	eor	r20, r20
    2998:	ee 0f       	add	r30, r30
    299a:	44 1f       	adc	r20, r20
    299c:	fa 95       	dec	r31
    299e:	e1 f7       	brne	.-8      	; 0x2998 <exp+0x42>
    29a0:	41 95       	neg	r20
    29a2:	55 0b       	sbc	r21, r21
    29a4:	32 d0       	rcall	.+100    	; 0x2a0a <ldexp>
    29a6:	0f 90       	pop	r0
    29a8:	07 fe       	sbrs	r0, 7
    29aa:	26 c0       	rjmp	.+76     	; 0x29f8 <inverse>
    29ac:	08 95       	ret

000029ae <__fp_powser>:
    29ae:	df 93       	push	r29
    29b0:	cf 93       	push	r28
    29b2:	1f 93       	push	r17
    29b4:	0f 93       	push	r16
    29b6:	ff 92       	push	r15
    29b8:	ef 92       	push	r14
    29ba:	df 92       	push	r13
    29bc:	7b 01       	movw	r14, r22
    29be:	8c 01       	movw	r16, r24
    29c0:	68 94       	set
    29c2:	05 c0       	rjmp	.+10     	; 0x29ce <__fp_powser+0x20>
    29c4:	da 2e       	mov	r13, r26
    29c6:	ef 01       	movw	r28, r30
    29c8:	1e df       	rcall	.-452    	; 0x2806 <__mulsf3x>
    29ca:	fe 01       	movw	r30, r28
    29cc:	e8 94       	clt
    29ce:	a5 91       	lpm	r26, Z+
    29d0:	25 91       	lpm	r18, Z+
    29d2:	35 91       	lpm	r19, Z+
    29d4:	45 91       	lpm	r20, Z+
    29d6:	55 91       	lpm	r21, Z+
    29d8:	ae f3       	brts	.-22     	; 0x29c4 <__fp_powser+0x16>
    29da:	ef 01       	movw	r28, r30
    29dc:	f6 dd       	rcall	.-1044   	; 0x25ca <__addsf3x>
    29de:	fe 01       	movw	r30, r28
    29e0:	97 01       	movw	r18, r14
    29e2:	a8 01       	movw	r20, r16
    29e4:	da 94       	dec	r13
    29e6:	79 f7       	brne	.-34     	; 0x29c6 <__fp_powser+0x18>
    29e8:	df 90       	pop	r13
    29ea:	ef 90       	pop	r14
    29ec:	ff 90       	pop	r15
    29ee:	0f 91       	pop	r16
    29f0:	1f 91       	pop	r17
    29f2:	cf 91       	pop	r28
    29f4:	df 91       	pop	r29
    29f6:	08 95       	ret

000029f8 <inverse>:
    29f8:	9b 01       	movw	r18, r22
    29fa:	ac 01       	movw	r20, r24
    29fc:	60 e0       	ldi	r22, 0x00	; 0
    29fe:	70 e0       	ldi	r23, 0x00	; 0
    2a00:	80 e8       	ldi	r24, 0x80	; 128
    2a02:	9f e3       	ldi	r25, 0x3F	; 63
    2a04:	ae c0       	rjmp	.+348    	; 0x2b62 <__divsf3>
    2a06:	a2 ce       	rjmp	.-700    	; 0x274c <__fp_inf>
    2a08:	14 c1       	rjmp	.+552    	; 0x2c32 <__fp_mpack>

00002a0a <ldexp>:
    2a0a:	d0 de       	rcall	.-608    	; 0x27ac <__fp_splitA>
    2a0c:	e8 f3       	brcs	.-6      	; 0x2a08 <inverse+0x10>
    2a0e:	99 23       	and	r25, r25
    2a10:	d9 f3       	breq	.-10     	; 0x2a08 <inverse+0x10>
    2a12:	94 0f       	add	r25, r20
    2a14:	51 1d       	adc	r21, r1
    2a16:	bb f3       	brvs	.-18     	; 0x2a06 <inverse+0xe>
    2a18:	91 50       	subi	r25, 0x01	; 1
    2a1a:	50 40       	sbci	r21, 0x00	; 0
    2a1c:	94 f0       	brlt	.+36     	; 0x2a42 <ldexp+0x38>
    2a1e:	59 f0       	breq	.+22     	; 0x2a36 <ldexp+0x2c>
    2a20:	88 23       	and	r24, r24
    2a22:	32 f0       	brmi	.+12     	; 0x2a30 <ldexp+0x26>
    2a24:	66 0f       	add	r22, r22
    2a26:	77 1f       	adc	r23, r23
    2a28:	88 1f       	adc	r24, r24
    2a2a:	91 50       	subi	r25, 0x01	; 1
    2a2c:	50 40       	sbci	r21, 0x00	; 0
    2a2e:	c1 f7       	brne	.-16     	; 0x2a20 <ldexp+0x16>
    2a30:	9e 3f       	cpi	r25, 0xFE	; 254
    2a32:	51 05       	cpc	r21, r1
    2a34:	44 f7       	brge	.-48     	; 0x2a06 <inverse+0xe>
    2a36:	88 0f       	add	r24, r24
    2a38:	91 1d       	adc	r25, r1
    2a3a:	96 95       	lsr	r25
    2a3c:	87 95       	ror	r24
    2a3e:	97 f9       	bld	r25, 7
    2a40:	08 95       	ret
    2a42:	5f 3f       	cpi	r21, 0xFF	; 255
    2a44:	ac f0       	brlt	.+42     	; 0x2a70 <ldexp+0x66>
    2a46:	98 3e       	cpi	r25, 0xE8	; 232
    2a48:	9c f0       	brlt	.+38     	; 0x2a70 <ldexp+0x66>
    2a4a:	bb 27       	eor	r27, r27
    2a4c:	86 95       	lsr	r24
    2a4e:	77 95       	ror	r23
    2a50:	67 95       	ror	r22
    2a52:	b7 95       	ror	r27
    2a54:	08 f4       	brcc	.+2      	; 0x2a58 <ldexp+0x4e>
    2a56:	b1 60       	ori	r27, 0x01	; 1
    2a58:	93 95       	inc	r25
    2a5a:	c1 f7       	brne	.-16     	; 0x2a4c <ldexp+0x42>
    2a5c:	bb 0f       	add	r27, r27
    2a5e:	58 f7       	brcc	.-42     	; 0x2a36 <ldexp+0x2c>
    2a60:	11 f4       	brne	.+4      	; 0x2a66 <ldexp+0x5c>
    2a62:	60 ff       	sbrs	r22, 0
    2a64:	e8 cf       	rjmp	.-48     	; 0x2a36 <ldexp+0x2c>
    2a66:	6f 5f       	subi	r22, 0xFF	; 255
    2a68:	7f 4f       	sbci	r23, 0xFF	; 255
    2a6a:	8f 4f       	sbci	r24, 0xFF	; 255
    2a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a6e:	e3 cf       	rjmp	.-58     	; 0x2a36 <ldexp+0x2c>
    2a70:	b8 ce       	rjmp	.-656    	; 0x27e2 <__fp_szero>
    2a72:	0e f0       	brts	.+2      	; 0x2a76 <ldexp+0x6c>
    2a74:	de c0       	rjmp	.+444    	; 0x2c32 <__fp_mpack>
    2a76:	70 ce       	rjmp	.-800    	; 0x2758 <__fp_nan>
    2a78:	68 94       	set
    2a7a:	68 ce       	rjmp	.-816    	; 0x274c <__fp_inf>

00002a7c <log>:
    2a7c:	97 de       	rcall	.-722    	; 0x27ac <__fp_splitA>
    2a7e:	c8 f3       	brcs	.-14     	; 0x2a72 <ldexp+0x68>
    2a80:	99 23       	and	r25, r25
    2a82:	d1 f3       	breq	.-12     	; 0x2a78 <ldexp+0x6e>
    2a84:	c6 f3       	brts	.-16     	; 0x2a76 <ldexp+0x6c>
    2a86:	df 93       	push	r29
    2a88:	cf 93       	push	r28
    2a8a:	1f 93       	push	r17
    2a8c:	0f 93       	push	r16
    2a8e:	ff 92       	push	r15
    2a90:	c9 2f       	mov	r28, r25
    2a92:	dd 27       	eor	r29, r29
    2a94:	88 23       	and	r24, r24
    2a96:	2a f0       	brmi	.+10     	; 0x2aa2 <log+0x26>
    2a98:	21 97       	sbiw	r28, 0x01	; 1
    2a9a:	66 0f       	add	r22, r22
    2a9c:	77 1f       	adc	r23, r23
    2a9e:	88 1f       	adc	r24, r24
    2aa0:	da f7       	brpl	.-10     	; 0x2a98 <log+0x1c>
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e8       	ldi	r20, 0x80	; 128
    2aa8:	5f eb       	ldi	r21, 0xBF	; 191
    2aaa:	9f e3       	ldi	r25, 0x3F	; 63
    2aac:	88 39       	cpi	r24, 0x98	; 152
    2aae:	20 f0       	brcs	.+8      	; 0x2ab8 <log+0x3c>
    2ab0:	80 3e       	cpi	r24, 0xE0	; 224
    2ab2:	30 f0       	brcs	.+12     	; 0x2ac0 <log+0x44>
    2ab4:	21 96       	adiw	r28, 0x01	; 1
    2ab6:	8f 77       	andi	r24, 0x7F	; 127
    2ab8:	77 dd       	rcall	.-1298   	; 0x25a8 <__addsf3>
    2aba:	ec e0       	ldi	r30, 0x0C	; 12
    2abc:	f1 e0       	ldi	r31, 0x01	; 1
    2abe:	03 c0       	rjmp	.+6      	; 0x2ac6 <log+0x4a>
    2ac0:	73 dd       	rcall	.-1306   	; 0x25a8 <__addsf3>
    2ac2:	e9 e3       	ldi	r30, 0x39	; 57
    2ac4:	f1 e0       	ldi	r31, 0x01	; 1
    2ac6:	73 df       	rcall	.-282    	; 0x29ae <__fp_powser>
    2ac8:	8b 01       	movw	r16, r22
    2aca:	be 01       	movw	r22, r28
    2acc:	ec 01       	movw	r28, r24
    2ace:	fb 2e       	mov	r15, r27
    2ad0:	6f 57       	subi	r22, 0x7F	; 127
    2ad2:	71 09       	sbc	r23, r1
    2ad4:	75 95       	asr	r23
    2ad6:	77 1f       	adc	r23, r23
    2ad8:	88 0b       	sbc	r24, r24
    2ada:	99 0b       	sbc	r25, r25
    2adc:	fc dd       	rcall	.-1032   	; 0x26d6 <__floatsisf>
    2ade:	28 e1       	ldi	r18, 0x18	; 24
    2ae0:	32 e7       	ldi	r19, 0x72	; 114
    2ae2:	41 e3       	ldi	r20, 0x31	; 49
    2ae4:	5f e3       	ldi	r21, 0x3F	; 63
    2ae6:	8f de       	rcall	.-738    	; 0x2806 <__mulsf3x>
    2ae8:	af 2d       	mov	r26, r15
    2aea:	98 01       	movw	r18, r16
    2aec:	ae 01       	movw	r20, r28
    2aee:	ff 90       	pop	r15
    2af0:	0f 91       	pop	r16
    2af2:	1f 91       	pop	r17
    2af4:	cf 91       	pop	r28
    2af6:	df 91       	pop	r29
    2af8:	68 dd       	rcall	.-1328   	; 0x25ca <__addsf3x>
    2afa:	3f ce       	rjmp	.-898    	; 0x277a <__fp_round>

00002afc <modf>:
    2afc:	fa 01       	movw	r30, r20
    2afe:	dc 01       	movw	r26, r24
    2b00:	aa 0f       	add	r26, r26
    2b02:	bb 1f       	adc	r27, r27
    2b04:	9b 01       	movw	r18, r22
    2b06:	ac 01       	movw	r20, r24
    2b08:	bf 57       	subi	r27, 0x7F	; 127
    2b0a:	28 f4       	brcc	.+10     	; 0x2b16 <modf+0x1a>
    2b0c:	22 27       	eor	r18, r18
    2b0e:	33 27       	eor	r19, r19
    2b10:	44 27       	eor	r20, r20
    2b12:	50 78       	andi	r21, 0x80	; 128
    2b14:	1f c0       	rjmp	.+62     	; 0x2b54 <modf+0x58>
    2b16:	b7 51       	subi	r27, 0x17	; 23
    2b18:	88 f4       	brcc	.+34     	; 0x2b3c <modf+0x40>
    2b1a:	ab 2f       	mov	r26, r27
    2b1c:	00 24       	eor	r0, r0
    2b1e:	46 95       	lsr	r20
    2b20:	37 95       	ror	r19
    2b22:	27 95       	ror	r18
    2b24:	01 1c       	adc	r0, r1
    2b26:	a3 95       	inc	r26
    2b28:	d2 f3       	brmi	.-12     	; 0x2b1e <modf+0x22>
    2b2a:	00 20       	and	r0, r0
    2b2c:	69 f0       	breq	.+26     	; 0x2b48 <modf+0x4c>
    2b2e:	22 0f       	add	r18, r18
    2b30:	33 1f       	adc	r19, r19
    2b32:	44 1f       	adc	r20, r20
    2b34:	b3 95       	inc	r27
    2b36:	da f3       	brmi	.-10     	; 0x2b2e <modf+0x32>
    2b38:	0d d0       	rcall	.+26     	; 0x2b54 <modf+0x58>
    2b3a:	35 cd       	rjmp	.-1430   	; 0x25a6 <__subsf3>
    2b3c:	61 30       	cpi	r22, 0x01	; 1
    2b3e:	71 05       	cpc	r23, r1
    2b40:	a0 e8       	ldi	r26, 0x80	; 128
    2b42:	8a 07       	cpc	r24, r26
    2b44:	b9 46       	sbci	r27, 0x69	; 105
    2b46:	30 f4       	brcc	.+12     	; 0x2b54 <modf+0x58>
    2b48:	9b 01       	movw	r18, r22
    2b4a:	ac 01       	movw	r20, r24
    2b4c:	66 27       	eor	r22, r22
    2b4e:	77 27       	eor	r23, r23
    2b50:	88 27       	eor	r24, r24
    2b52:	90 78       	andi	r25, 0x80	; 128
    2b54:	30 96       	adiw	r30, 0x00	; 0
    2b56:	21 f0       	breq	.+8      	; 0x2b60 <modf+0x64>
    2b58:	20 83       	st	Z, r18
    2b5a:	31 83       	std	Z+1, r19	; 0x01
    2b5c:	42 83       	std	Z+2, r20	; 0x02
    2b5e:	53 83       	std	Z+3, r21	; 0x03
    2b60:	08 95       	ret

00002b62 <__divsf3>:
    2b62:	0c d0       	rcall	.+24     	; 0x2b7c <__divsf3x>
    2b64:	0a ce       	rjmp	.-1004   	; 0x277a <__fp_round>
    2b66:	02 de       	rcall	.-1020   	; 0x276c <__fp_pscB>
    2b68:	40 f0       	brcs	.+16     	; 0x2b7a <__divsf3+0x18>
    2b6a:	f9 dd       	rcall	.-1038   	; 0x275e <__fp_pscA>
    2b6c:	30 f0       	brcs	.+12     	; 0x2b7a <__divsf3+0x18>
    2b6e:	21 f4       	brne	.+8      	; 0x2b78 <__divsf3+0x16>
    2b70:	5f 3f       	cpi	r21, 0xFF	; 255
    2b72:	19 f0       	breq	.+6      	; 0x2b7a <__divsf3+0x18>
    2b74:	eb cd       	rjmp	.-1066   	; 0x274c <__fp_inf>
    2b76:	51 11       	cpse	r21, r1
    2b78:	34 ce       	rjmp	.-920    	; 0x27e2 <__fp_szero>
    2b7a:	ee cd       	rjmp	.-1060   	; 0x2758 <__fp_nan>

00002b7c <__divsf3x>:
    2b7c:	0f de       	rcall	.-994    	; 0x279c <__fp_split3>
    2b7e:	98 f3       	brcs	.-26     	; 0x2b66 <__divsf3+0x4>

00002b80 <__divsf3_pse>:
    2b80:	99 23       	and	r25, r25
    2b82:	c9 f3       	breq	.-14     	; 0x2b76 <__divsf3+0x14>
    2b84:	55 23       	and	r21, r21
    2b86:	b1 f3       	breq	.-20     	; 0x2b74 <__divsf3+0x12>
    2b88:	95 1b       	sub	r25, r21
    2b8a:	55 0b       	sbc	r21, r21
    2b8c:	bb 27       	eor	r27, r27
    2b8e:	aa 27       	eor	r26, r26
    2b90:	62 17       	cp	r22, r18
    2b92:	73 07       	cpc	r23, r19
    2b94:	84 07       	cpc	r24, r20
    2b96:	38 f0       	brcs	.+14     	; 0x2ba6 <__divsf3_pse+0x26>
    2b98:	9f 5f       	subi	r25, 0xFF	; 255
    2b9a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b9c:	22 0f       	add	r18, r18
    2b9e:	33 1f       	adc	r19, r19
    2ba0:	44 1f       	adc	r20, r20
    2ba2:	aa 1f       	adc	r26, r26
    2ba4:	a9 f3       	breq	.-22     	; 0x2b90 <__divsf3_pse+0x10>
    2ba6:	33 d0       	rcall	.+102    	; 0x2c0e <__divsf3_pse+0x8e>
    2ba8:	0e 2e       	mov	r0, r30
    2baa:	3a f0       	brmi	.+14     	; 0x2bba <__divsf3_pse+0x3a>
    2bac:	e0 e8       	ldi	r30, 0x80	; 128
    2bae:	30 d0       	rcall	.+96     	; 0x2c10 <__divsf3_pse+0x90>
    2bb0:	91 50       	subi	r25, 0x01	; 1
    2bb2:	50 40       	sbci	r21, 0x00	; 0
    2bb4:	e6 95       	lsr	r30
    2bb6:	00 1c       	adc	r0, r0
    2bb8:	ca f7       	brpl	.-14     	; 0x2bac <__divsf3_pse+0x2c>
    2bba:	29 d0       	rcall	.+82     	; 0x2c0e <__divsf3_pse+0x8e>
    2bbc:	fe 2f       	mov	r31, r30
    2bbe:	27 d0       	rcall	.+78     	; 0x2c0e <__divsf3_pse+0x8e>
    2bc0:	66 0f       	add	r22, r22
    2bc2:	77 1f       	adc	r23, r23
    2bc4:	88 1f       	adc	r24, r24
    2bc6:	bb 1f       	adc	r27, r27
    2bc8:	26 17       	cp	r18, r22
    2bca:	37 07       	cpc	r19, r23
    2bcc:	48 07       	cpc	r20, r24
    2bce:	ab 07       	cpc	r26, r27
    2bd0:	b0 e8       	ldi	r27, 0x80	; 128
    2bd2:	09 f0       	breq	.+2      	; 0x2bd6 <__divsf3_pse+0x56>
    2bd4:	bb 0b       	sbc	r27, r27
    2bd6:	80 2d       	mov	r24, r0
    2bd8:	bf 01       	movw	r22, r30
    2bda:	ff 27       	eor	r31, r31
    2bdc:	93 58       	subi	r25, 0x83	; 131
    2bde:	5f 4f       	sbci	r21, 0xFF	; 255
    2be0:	2a f0       	brmi	.+10     	; 0x2bec <__divsf3_pse+0x6c>
    2be2:	9e 3f       	cpi	r25, 0xFE	; 254
    2be4:	51 05       	cpc	r21, r1
    2be6:	68 f0       	brcs	.+26     	; 0x2c02 <__divsf3_pse+0x82>
    2be8:	b1 cd       	rjmp	.-1182   	; 0x274c <__fp_inf>
    2bea:	fb cd       	rjmp	.-1034   	; 0x27e2 <__fp_szero>
    2bec:	5f 3f       	cpi	r21, 0xFF	; 255
    2bee:	ec f3       	brlt	.-6      	; 0x2bea <__divsf3_pse+0x6a>
    2bf0:	98 3e       	cpi	r25, 0xE8	; 232
    2bf2:	dc f3       	brlt	.-10     	; 0x2bea <__divsf3_pse+0x6a>
    2bf4:	86 95       	lsr	r24
    2bf6:	77 95       	ror	r23
    2bf8:	67 95       	ror	r22
    2bfa:	b7 95       	ror	r27
    2bfc:	f7 95       	ror	r31
    2bfe:	9f 5f       	subi	r25, 0xFF	; 255
    2c00:	c9 f7       	brne	.-14     	; 0x2bf4 <__divsf3_pse+0x74>
    2c02:	88 0f       	add	r24, r24
    2c04:	91 1d       	adc	r25, r1
    2c06:	96 95       	lsr	r25
    2c08:	87 95       	ror	r24
    2c0a:	97 f9       	bld	r25, 7
    2c0c:	08 95       	ret
    2c0e:	e1 e0       	ldi	r30, 0x01	; 1
    2c10:	66 0f       	add	r22, r22
    2c12:	77 1f       	adc	r23, r23
    2c14:	88 1f       	adc	r24, r24
    2c16:	bb 1f       	adc	r27, r27
    2c18:	62 17       	cp	r22, r18
    2c1a:	73 07       	cpc	r23, r19
    2c1c:	84 07       	cpc	r24, r20
    2c1e:	ba 07       	cpc	r27, r26
    2c20:	20 f0       	brcs	.+8      	; 0x2c2a <__divsf3_pse+0xaa>
    2c22:	62 1b       	sub	r22, r18
    2c24:	73 0b       	sbc	r23, r19
    2c26:	84 0b       	sbc	r24, r20
    2c28:	ba 0b       	sbc	r27, r26
    2c2a:	ee 1f       	adc	r30, r30
    2c2c:	88 f7       	brcc	.-30     	; 0x2c10 <__divsf3_pse+0x90>
    2c2e:	e0 95       	com	r30
    2c30:	08 95       	ret

00002c32 <__fp_mpack>:
    2c32:	9f 3f       	cpi	r25, 0xFF	; 255
    2c34:	31 f0       	breq	.+12     	; 0x2c42 <__fp_mpack_finite+0xc>

00002c36 <__fp_mpack_finite>:
    2c36:	91 50       	subi	r25, 0x01	; 1
    2c38:	20 f4       	brcc	.+8      	; 0x2c42 <__fp_mpack_finite+0xc>
    2c3a:	87 95       	ror	r24
    2c3c:	77 95       	ror	r23
    2c3e:	67 95       	ror	r22
    2c40:	b7 95       	ror	r27
    2c42:	88 0f       	add	r24, r24
    2c44:	91 1d       	adc	r25, r1
    2c46:	96 95       	lsr	r25
    2c48:	87 95       	ror	r24
    2c4a:	97 f9       	bld	r25, 7
    2c4c:	08 95       	ret

00002c4e <__divmodhi4>:
    2c4e:	97 fb       	bst	r25, 7
    2c50:	07 2e       	mov	r0, r23
    2c52:	16 f4       	brtc	.+4      	; 0x2c58 <__divmodhi4+0xa>
    2c54:	00 94       	com	r0
    2c56:	06 d0       	rcall	.+12     	; 0x2c64 <__divmodhi4_neg1>
    2c58:	77 fd       	sbrc	r23, 7
    2c5a:	08 d0       	rcall	.+16     	; 0x2c6c <__divmodhi4_neg2>
    2c5c:	0b d0       	rcall	.+22     	; 0x2c74 <__udivmodhi4>
    2c5e:	07 fc       	sbrc	r0, 7
    2c60:	05 d0       	rcall	.+10     	; 0x2c6c <__divmodhi4_neg2>
    2c62:	3e f4       	brtc	.+14     	; 0x2c72 <__divmodhi4_exit>

00002c64 <__divmodhi4_neg1>:
    2c64:	90 95       	com	r25
    2c66:	81 95       	neg	r24
    2c68:	9f 4f       	sbci	r25, 0xFF	; 255
    2c6a:	08 95       	ret

00002c6c <__divmodhi4_neg2>:
    2c6c:	70 95       	com	r23
    2c6e:	61 95       	neg	r22
    2c70:	7f 4f       	sbci	r23, 0xFF	; 255

00002c72 <__divmodhi4_exit>:
    2c72:	08 95       	ret

00002c74 <__udivmodhi4>:
    2c74:	aa 1b       	sub	r26, r26
    2c76:	bb 1b       	sub	r27, r27
    2c78:	51 e1       	ldi	r21, 0x11	; 17
    2c7a:	07 c0       	rjmp	.+14     	; 0x2c8a <__udivmodhi4_ep>

00002c7c <__udivmodhi4_loop>:
    2c7c:	aa 1f       	adc	r26, r26
    2c7e:	bb 1f       	adc	r27, r27
    2c80:	a6 17       	cp	r26, r22
    2c82:	b7 07       	cpc	r27, r23
    2c84:	10 f0       	brcs	.+4      	; 0x2c8a <__udivmodhi4_ep>
    2c86:	a6 1b       	sub	r26, r22
    2c88:	b7 0b       	sbc	r27, r23

00002c8a <__udivmodhi4_ep>:
    2c8a:	88 1f       	adc	r24, r24
    2c8c:	99 1f       	adc	r25, r25
    2c8e:	5a 95       	dec	r21
    2c90:	a9 f7       	brne	.-22     	; 0x2c7c <__udivmodhi4_loop>
    2c92:	80 95       	com	r24
    2c94:	90 95       	com	r25
    2c96:	bc 01       	movw	r22, r24
    2c98:	cd 01       	movw	r24, r26
    2c9a:	08 95       	ret

00002c9c <memcpy>:
    2c9c:	fb 01       	movw	r30, r22
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	02 c0       	rjmp	.+4      	; 0x2ca6 <memcpy+0xa>
    2ca2:	01 90       	ld	r0, Z+
    2ca4:	0d 92       	st	X+, r0
    2ca6:	41 50       	subi	r20, 0x01	; 1
    2ca8:	50 40       	sbci	r21, 0x00	; 0
    2caa:	d8 f7       	brcc	.-10     	; 0x2ca2 <memcpy+0x6>
    2cac:	08 95       	ret

00002cae <__itoa_ncheck>:
    2cae:	bb 27       	eor	r27, r27
    2cb0:	4a 30       	cpi	r20, 0x0A	; 10
    2cb2:	31 f4       	brne	.+12     	; 0x2cc0 <__itoa_ncheck+0x12>
    2cb4:	99 23       	and	r25, r25
    2cb6:	22 f4       	brpl	.+8      	; 0x2cc0 <__itoa_ncheck+0x12>
    2cb8:	bd e2       	ldi	r27, 0x2D	; 45
    2cba:	90 95       	com	r25
    2cbc:	81 95       	neg	r24
    2cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    2cc0:	01 c0       	rjmp	.+2      	; 0x2cc4 <__utoa_common>

00002cc2 <__utoa_ncheck>:
    2cc2:	bb 27       	eor	r27, r27

00002cc4 <__utoa_common>:
    2cc4:	fb 01       	movw	r30, r22
    2cc6:	55 27       	eor	r21, r21
    2cc8:	aa 27       	eor	r26, r26
    2cca:	88 0f       	add	r24, r24
    2ccc:	99 1f       	adc	r25, r25
    2cce:	aa 1f       	adc	r26, r26
    2cd0:	a4 17       	cp	r26, r20
    2cd2:	10 f0       	brcs	.+4      	; 0x2cd8 <__utoa_common+0x14>
    2cd4:	a4 1b       	sub	r26, r20
    2cd6:	83 95       	inc	r24
    2cd8:	50 51       	subi	r21, 0x10	; 16
    2cda:	b9 f7       	brne	.-18     	; 0x2cca <__utoa_common+0x6>
    2cdc:	a0 5d       	subi	r26, 0xD0	; 208
    2cde:	aa 33       	cpi	r26, 0x3A	; 58
    2ce0:	08 f0       	brcs	.+2      	; 0x2ce4 <__utoa_common+0x20>
    2ce2:	a9 5d       	subi	r26, 0xD9	; 217
    2ce4:	a1 93       	st	Z+, r26
    2ce6:	00 97       	sbiw	r24, 0x00	; 0
    2ce8:	79 f7       	brne	.-34     	; 0x2cc8 <__utoa_common+0x4>
    2cea:	b1 11       	cpse	r27, r1
    2cec:	b1 93       	st	Z+, r27
    2cee:	11 92       	st	Z+, r1
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	00 c0       	rjmp	.+0      	; 0x2cf4 <strrev>

00002cf4 <strrev>:
    2cf4:	dc 01       	movw	r26, r24
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	67 2f       	mov	r22, r23
    2cfa:	71 91       	ld	r23, Z+
    2cfc:	77 23       	and	r23, r23
    2cfe:	e1 f7       	brne	.-8      	; 0x2cf8 <strrev+0x4>
    2d00:	32 97       	sbiw	r30, 0x02	; 2
    2d02:	04 c0       	rjmp	.+8      	; 0x2d0c <strrev+0x18>
    2d04:	7c 91       	ld	r23, X
    2d06:	6d 93       	st	X+, r22
    2d08:	70 83       	st	Z, r23
    2d0a:	62 91       	ld	r22, -Z
    2d0c:	ae 17       	cp	r26, r30
    2d0e:	bf 07       	cpc	r27, r31
    2d10:	c8 f3       	brcs	.-14     	; 0x2d04 <strrev+0x10>
    2d12:	08 95       	ret

00002d14 <_exit>:
    2d14:	f8 94       	cli

00002d16 <__stop_program>:
    2d16:	ff cf       	rjmp	.-2      	; 0x2d16 <__stop_program>
